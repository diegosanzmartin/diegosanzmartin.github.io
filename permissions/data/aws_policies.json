{
    "AdministratorAccess": {
        "permissions": [
            "*"
        ]
    },
    "PowerUserAccess": {
        "permissions": [
            "account:GetAccountInformation",
            "account:GetPrimaryEmail",
            "account:ListRegions",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:ListRoles",
            "organizations:DescribeOrganization"
        ]
    },
    "ReadOnlyAccess": {
        "permissions": [
            "a4b:Get*",
            "a4b:List*",
            "a4b:Search*",
            "access-analyzer:GetAccessPreview",
            "access-analyzer:GetAnalyzedResource",
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:GetFinding",
            "access-analyzer:GetFindingsStatistics",
            "access-analyzer:GetGeneratedPolicy",
            "access-analyzer:ListAccessPreviewFindings",
            "access-analyzer:ListAccessPreviews",
            "access-analyzer:ListAnalyzedResources",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListFindings",
            "access-analyzer:ListPolicyGenerations",
            "access-analyzer:ListTagsForResource",
            "access-analyzer:ValidatePolicy",
            "account:GetAccountInformation",
            "account:GetAlternateContact",
            "account:GetChallengeQuestions",
            "account:GetContactInformation",
            "account:GetPrimaryEmail",
            "account:GetRegionOptStatus",
            "account:ListRegions",
            "acm-pca:Describe*",
            "acm-pca:Get*",
            "acm-pca:List*",
            "acm:Describe*",
            "acm:Get*",
            "acm:List*",
            "aiops:GetInvestigation",
            "aiops:GetInvestigationEvent",
            "aiops:GetInvestigationGroup",
            "aiops:GetInvestigationResource",
            "aiops:ListInvestigationEvents",
            "aiops:ListInvestigationGroups",
            "aiops:ListInvestigations",
            "airflow:ListEnvironments",
            "airflow:ListTagsForResource",
            "amplify:GetApp",
            "amplify:GetBackendEnvironment",
            "amplify:GetBranch",
            "amplify:GetDomainAssociation",
            "amplify:GetJob",
            "amplify:GetWebhook",
            "amplify:ListApps",
            "amplify:ListArtifacts",
            "amplify:ListBackendEnvironments",
            "amplify:ListBranches",
            "amplify:ListDomainAssociations",
            "amplify:ListJobs",
            "amplify:ListTagsForResource",
            "amplify:ListWebhooks",
            "aoss:BatchGetCollection",
            "aoss:BatchGetLifecyclePolicy",
            "aoss:BatchGetVpcEndpoint",
            "aoss:GetAccessPolicy",
            "aoss:GetAccountSettings",
            "aoss:GetPoliciesStats",
            "aoss:GetSecurityConfig",
            "aoss:GetSecurityPolicy",
            "aoss:ListAccessPolicies",
            "aoss:ListCollections",
            "aoss:ListLifecyclePolicies",
            "aoss:ListSecurityConfigs",
            "aoss:ListSecurityPolicies",
            "aoss:ListTagsForResource",
            "aoss:ListVpcEndpoints",
            "apigateway:GET",
            "appconfig:GetApplication",
            "appconfig:GetConfiguration",
            "appconfig:GetConfigurationProfile",
            "appconfig:GetDeployment",
            "appconfig:GetDeploymentStrategy",
            "appconfig:GetEnvironment",
            "appconfig:GetExtension",
            "appconfig:GetHostedConfigurationVersion",
            "appconfig:ListApplications",
            "appconfig:ListConfigurationProfiles",
            "appconfig:ListDeploymentStrategies",
            "appconfig:ListDeployments",
            "appconfig:ListEnvironments",
            "appconfig:ListExtensions",
            "appconfig:ListHostedConfigurationVersions",
            "appconfig:ListTagsForResource",
            "appfabric:GetAppAuthorization",
            "appfabric:GetAppBundle",
            "appfabric:GetIngestion",
            "appfabric:GetIngestionDestination",
            "appfabric:ListAppAuthorizations",
            "appfabric:ListAppBundles",
            "appfabric:ListIngestionDestinations",
            "appfabric:ListIngestions",
            "appfabric:ListTagsForResource",
            "appflow:DescribeConnector",
            "appflow:DescribeConnectorEntity",
            "appflow:DescribeConnectorFields",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeConnectors",
            "appflow:DescribeFlow",
            "appflow:DescribeFlowExecution",
            "appflow:DescribeFlowExecutionRecords",
            "appflow:DescribeFlows",
            "appflow:ListConnectorEntities",
            "appflow:ListConnectorFields",
            "appflow:ListConnectors",
            "appflow:ListFlows",
            "appflow:ListTagsForResource",
            "application-autoscaling:Describe*",
            "application-autoscaling:ListTagsForResource",
            "application-signals:BatchGetServiceLevelObjectiveBudgetReport",
            "application-signals:GetService",
            "application-signals:GetServiceLevelObjective",
            "application-signals:ListObservedEntities",
            "application-signals:ListServiceDependencies",
            "application-signals:ListServiceDependents",
            "application-signals:ListServiceLevelObjectives",
            "application-signals:ListServiceOperations",
            "application-signals:ListServices",
            "application-signals:ListTagsForResource",
            "applicationinsights:Describe*",
            "applicationinsights:List*",
            "appmesh:Describe*",
            "appmesh:List*",
            "apprunner:DescribeAutoScalingConfiguration",
            "apprunner:DescribeCustomDomains",
            "apprunner:DescribeObservabilityConfiguration",
            "apprunner:DescribeService",
            "apprunner:DescribeVpcConnector",
            "apprunner:DescribeVpcIngressConnection",
            "apprunner:DescribeWebAclForService",
            "apprunner:ListAssociatedServicesForWebAcl",
            "apprunner:ListAutoScalingConfigurations",
            "apprunner:ListConnections",
            "apprunner:ListObservabilityConfigurations",
            "apprunner:ListOperations",
            "apprunner:ListServices",
            "apprunner:ListServicesForAutoScalingConfiguration",
            "apprunner:ListTagsForResource",
            "apprunner:ListVpcConnectors",
            "apprunner:ListVpcIngressConnections",
            "appstream:Describe*",
            "appstream:List*",
            "appstudio:GetAccountStatus",
            "appstudio:GetEnablementJobStatus",
            "appsync:Get*",
            "appsync:List*",
            "apptest:GetTestCase",
            "apptest:GetTestConfiguration",
            "apptest:GetTestRunStep",
            "apptest:GetTestSuite",
            "apptest:ListTagsForResource",
            "apptest:ListTestCases",
            "apptest:ListTestConfigurations",
            "apptest:ListTestRunSteps",
            "apptest:ListTestRunTestCases",
            "apptest:ListTestRuns",
            "apptest:ListTestSuites",
            "aps:DescribeAlertManagerDefinition",
            "aps:DescribeLoggingConfiguration",
            "aps:DescribeRuleGroupsNamespace",
            "aps:DescribeScraper",
            "aps:DescribeWorkspace",
            "aps:GetAlertManagerSilence",
            "aps:GetAlertManagerStatus",
            "aps:GetDefaultScraperConfiguration",
            "aps:GetLabels",
            "aps:GetMetricMetadata",
            "aps:GetSeries",
            "aps:ListAlertManagerAlertGroups",
            "aps:ListAlertManagerAlerts",
            "aps:ListAlertManagerReceivers",
            "aps:ListAlertManagerSilences",
            "aps:ListAlerts",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListRules",
            "aps:ListScrapers",
            "aps:ListTagsForResource",
            "aps:ListWorkspaces",
            "aps:QueryMetrics",
            "arc-zonal-shift:GetAutoshiftObserverNotificationStatus",
            "arc-zonal-shift:GetManagedResource",
            "arc-zonal-shift:ListAutoshifts",
            "arc-zonal-shift:ListManagedResources",
            "arc-zonal-shift:ListZonalShifts",
            "artifact:GetCustomerAgreement",
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListAgreements",
            "artifact:ListCustomerAgreements",
            "artifact:ListReports",
            "athena:Batch*",
            "athena:Get*",
            "athena:List*",
            "auditmanager:GetAccountStatus",
            "auditmanager:GetAssessment",
            "auditmanager:GetAssessmentFramework",
            "auditmanager:GetAssessmentReportUrl",
            "auditmanager:GetChangeLogs",
            "auditmanager:GetControl",
            "auditmanager:GetDelegations",
            "auditmanager:GetEvidence",
            "auditmanager:GetEvidenceByEvidenceFolder",
            "auditmanager:GetEvidenceFolder",
            "auditmanager:GetEvidenceFoldersByAssessment",
            "auditmanager:GetEvidenceFoldersByAssessmentControl",
            "auditmanager:GetOrganizationAdminAccount",
            "auditmanager:GetServicesInScope",
            "auditmanager:GetSettings",
            "auditmanager:ListAssessmentFrameworks",
            "auditmanager:ListAssessmentReports",
            "auditmanager:ListAssessments",
            "auditmanager:ListControls",
            "auditmanager:ListKeywordsForDataSource",
            "auditmanager:ListNotifications",
            "auditmanager:ListTagsForResource",
            "auditmanager:ValidateAssessmentReportIntegrity",
            "autoscaling-plans:Describe*",
            "autoscaling-plans:GetScalingPlanResourceForecastData",
            "autoscaling:Describe*",
            "autoscaling:GetPredictiveScalingForecast",
            "aws-portal:View*",
            "backup-gateway:GetBandwidthRateLimitSchedule",
            "backup-gateway:GetGateway",
            "backup-gateway:GetHypervisor",
            "backup-gateway:GetHypervisorPropertyMappings",
            "backup-gateway:GetVirtualMachine",
            "backup-gateway:ListGateways",
            "backup-gateway:ListHypervisors",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup:Describe*",
            "backup:Get*",
            "backup:List*",
            "batch:Describe*",
            "batch:List*",
            "bedrock:GetAgent",
            "bedrock:GetAgentActionGroup",
            "bedrock:GetAgentAlias",
            "bedrock:GetAgentCollaborator",
            "bedrock:GetAgentKnowledgeBase",
            "bedrock:GetAgentVersion",
            "bedrock:GetCustomModel",
            "bedrock:GetDataSource",
            "bedrock:GetEvaluationJob",
            "bedrock:GetFlow",
            "bedrock:GetFlowAlias",
            "bedrock:GetFlowVersion",
            "bedrock:GetFoundationModel",
            "bedrock:GetFoundationModelAvailability",
            "bedrock:GetGuardrail",
            "bedrock:GetInferenceProfile",
            "bedrock:GetIngestionJob",
            "bedrock:GetKnowledgeBase",
            "bedrock:GetModelCustomizationJob",
            "bedrock:GetModelInvocationLoggingConfiguration",
            "bedrock:GetPrompt",
            "bedrock:GetProvisionedModelThroughput",
            "bedrock:GetUseCaseForModelAccess",
            "bedrock:ListAgentActionGroups",
            "bedrock:ListAgentAliases",
            "bedrock:ListAgentCollaborators",
            "bedrock:ListAgentKnowledgeBases",
            "bedrock:ListAgentVersions",
            "bedrock:ListAgents",
            "bedrock:ListCustomModels",
            "bedrock:ListDataSources",
            "bedrock:ListEvaluationJobs",
            "bedrock:ListFlowAliases",
            "bedrock:ListFlowVersions",
            "bedrock:ListFlows",
            "bedrock:ListFoundationModelAgreementOffers",
            "bedrock:ListFoundationModels",
            "bedrock:ListGuardrails",
            "bedrock:ListInferenceProfiles",
            "bedrock:ListIngestionJobs",
            "bedrock:ListKnowledgeBases",
            "bedrock:ListModelCustomizationJobs",
            "bedrock:ListPrompts",
            "bedrock:ListProvisionedModelThroughputs",
            "billing:GetBillingData",
            "billing:GetBillingDetails",
            "billing:GetBillingNotifications",
            "billing:GetBillingPreferences",
            "billing:GetBillingView",
            "billing:GetContractInformation",
            "billing:GetCredits",
            "billing:GetIAMAccessPreference",
            "billing:GetResourcePolicy",
            "billing:GetSellerOfRecord",
            "billing:ListBillingViews",
            "billing:ListSourceViewsForBillingView",
            "billing:ListTagsForResource",
            "billingconductor:GetBillingGroupCostReport",
            "billingconductor:ListAccountAssociations",
            "billingconductor:ListBillingGroupCostReports",
            "billingconductor:ListBillingGroups",
            "billingconductor:ListCustomLineItemVersions",
            "billingconductor:ListCustomLineItems",
            "billingconductor:ListPricingPlans",
            "billingconductor:ListPricingPlansAssociatedWithPricingRule",
            "billingconductor:ListPricingRules",
            "billingconductor:ListPricingRulesAssociatedToPricingPlan",
            "billingconductor:ListResourcesAssociatedToCustomLineItem",
            "billingconductor:ListTagsForResource",
            "braket:GetDevice",
            "braket:GetJob",
            "braket:GetQuantumTask",
            "braket:SearchDevices",
            "braket:SearchJobs",
            "braket:SearchQuantumTasks",
            "budgets:Describe*",
            "budgets:ListTagsForResource",
            "budgets:View*",
            "cassandra:Select",
            "ce:DescribeCostCategoryDefinition",
            "ce:DescribeNotificationSubscription",
            "ce:DescribeReport",
            "ce:GetAnomalies",
            "ce:GetAnomalyMonitors",
            "ce:GetAnomalySubscriptions",
            "ce:GetApproximateUsageRecords",
            "ce:GetCommitmentPurchaseAnalysis",
            "ce:GetCostAndUsage",
            "ce:GetCostAndUsageWithResources",
            "ce:GetCostCategories",
            "ce:GetCostForecast",
            "ce:GetDimensionValues",
            "ce:GetPreferences",
            "ce:GetReservationCoverage",
            "ce:GetReservationPurchaseRecommendation",
            "ce:GetReservationUtilization",
            "ce:GetRightsizingRecommendation",
            "ce:GetSavingsPlanPurchaseRecommendationDetails",
            "ce:GetSavingsPlansCoverage",
            "ce:GetSavingsPlansPurchaseRecommendation",
            "ce:GetSavingsPlansUtilization",
            "ce:GetSavingsPlansUtilizationDetails",
            "ce:GetTags",
            "ce:GetUsageForecast",
            "ce:ListCommitmentPurchaseAnalyses",
            "ce:ListCostAllocationTagBackfillHistory",
            "ce:ListCostAllocationTags",
            "ce:ListCostCategoryDefinitions",
            "ce:ListSavingsPlansPurchaseRecommendationGeneration",
            "ce:ListTagsForResource",
            "chatbot:Describe*",
            "chatbot:Get*",
            "chatbot:List*",
            "chime:Get*",
            "chime:List*",
            "chime:Retrieve*",
            "chime:Search*",
            "chime:Validate*",
            "cleanrooms-ml:GetAudienceGenerationJob",
            "cleanrooms-ml:GetAudienceModel",
            "cleanrooms-ml:GetConfiguredAudienceModel",
            "cleanrooms-ml:GetConfiguredAudienceModelPolicy",
            "cleanrooms-ml:GetTrainingDataset",
            "cleanrooms-ml:ListAudienceExportJobs",
            "cleanrooms-ml:ListAudienceGenerationJobs",
            "cleanrooms-ml:ListAudienceModels",
            "cleanrooms-ml:ListConfiguredAudienceModels",
            "cleanrooms-ml:ListTagsForResource",
            "cleanrooms-ml:ListTrainingDatasets",
            "cleanrooms:BatchGetCollaborationAnalysisTemplate",
            "cleanrooms:BatchGetSchema",
            "cleanrooms:BatchGetSchemaAnalysisRule",
            "cleanrooms:GetAnalysisTemplate",
            "cleanrooms:GetCollaboration",
            "cleanrooms:GetCollaborationAnalysisTemplate",
            "cleanrooms:GetCollaborationConfiguredAudienceModelAssociation",
            "cleanrooms:GetCollaborationIdNamespaceAssociation",
            "cleanrooms:GetCollaborationPrivacyBudgetTemplate",
            "cleanrooms:GetConfiguredAudienceModelAssociation",
            "cleanrooms:GetConfiguredTable",
            "cleanrooms:GetConfiguredTableAnalysisRule",
            "cleanrooms:GetConfiguredTableAssociation",
            "cleanrooms:GetConfiguredTableAssociationAnalysisRule",
            "cleanrooms:GetIdMappingTable",
            "cleanrooms:GetIdNamespaceAssociation",
            "cleanrooms:GetMembership",
            "cleanrooms:GetPrivacyBudgetTemplate",
            "cleanrooms:GetProtectedQuery",
            "cleanrooms:GetSchema",
            "cleanrooms:GetSchemaAnalysisRule",
            "cleanrooms:ListAnalysisTemplates",
            "cleanrooms:ListCollaborationAnalysisTemplates",
            "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
            "cleanrooms:ListCollaborationIdNamespaceAssociations",
            "cleanrooms:ListCollaborationPrivacyBudgetTemplates",
            "cleanrooms:ListCollaborationPrivacyBudgets",
            "cleanrooms:ListCollaborations",
            "cleanrooms:ListConfiguredAudienceModelAssociations",
            "cleanrooms:ListConfiguredTableAssociations",
            "cleanrooms:ListConfiguredTables",
            "cleanrooms:ListIdMappingTables",
            "cleanrooms:ListIdNamespaceAssociations",
            "cleanrooms:ListMembers",
            "cleanrooms:ListMemberships",
            "cleanrooms:ListPrivacyBudgetTemplates",
            "cleanrooms:ListPrivacyBudgets",
            "cleanrooms:ListProtectedQueries",
            "cleanrooms:ListSchemas",
            "cleanrooms:ListTagsForResource",
            "cleanrooms:PreviewPrivacyImpact",
            "cloud9:Describe*",
            "cloud9:List*",
            "clouddirectory:BatchRead",
            "clouddirectory:Get*",
            "clouddirectory:List*",
            "clouddirectory:LookupPolicy",
            "cloudformation:Describe*",
            "cloudformation:Detect*",
            "cloudformation:Estimate*",
            "cloudformation:Get*",
            "cloudformation:List*",
            "cloudformation:ValidateTemplate",
            "cloudfront-keyvaluestore:Describe*",
            "cloudfront-keyvaluestore:Get*",
            "cloudfront-keyvaluestore:List*",
            "cloudfront:Describe*",
            "cloudfront:Get*",
            "cloudfront:List*",
            "cloudhsm:Describe*",
            "cloudhsm:List*",
            "cloudsearch:Describe*",
            "cloudsearch:List*",
            "cloudtrail:Describe*",
            "cloudtrail:Get*",
            "cloudtrail:List*",
            "cloudtrail:LookupEvents",
            "cloudwatch:Describe*",
            "cloudwatch:GenerateQuery",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "codeartifact:DescribeDomain",
            "codeartifact:DescribePackage",
            "codeartifact:DescribePackageVersion",
            "codeartifact:DescribeRepository",
            "codeartifact:GetAuthorizationToken",
            "codeartifact:GetDomainPermissionsPolicy",
            "codeartifact:GetPackageVersionAsset",
            "codeartifact:GetPackageVersionReadme",
            "codeartifact:GetRepositoryEndpoint",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListDomains",
            "codeartifact:ListPackageVersionAssets",
            "codeartifact:ListPackageVersionDependencies",
            "codeartifact:ListPackageVersions",
            "codeartifact:ListPackages",
            "codeartifact:ListRepositories",
            "codeartifact:ListRepositoriesInDomain",
            "codeartifact:ListTagsForResource",
            "codeartifact:ReadFromRepository",
            "codebuild:BatchGet*",
            "codebuild:DescribeCodeCoverages",
            "codebuild:DescribeTestCases",
            "codebuild:List*",
            "codecatalyst:GetBillingAuthorization",
            "codecatalyst:GetConnection",
            "codecatalyst:GetPendingConnection",
            "codecatalyst:ListConnections",
            "codecatalyst:ListIamRolesForConnection",
            "codecatalyst:ListTagsForResource",
            "codecommit:BatchGet*",
            "codecommit:Describe*",
            "codecommit:Get*",
            "codecommit:GitPull",
            "codecommit:List*",
            "codedeploy:BatchGet*",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codeguru-profiler:Describe*",
            "codeguru-profiler:Get*",
            "codeguru-profiler:List*",
            "codeguru-reviewer:Describe*",
            "codeguru-reviewer:Get*",
            "codeguru-reviewer:List*",
            "codepipeline:Get*",
            "codepipeline:List*",
            "codestar-connections:GetConnection",
            "codestar-connections:GetHost",
            "codestar-connections:GetRepositoryLink",
            "codestar-connections:GetRepositorySyncStatus",
            "codestar-connections:GetResourceSyncStatus",
            "codestar-connections:GetSyncConfiguration",
            "codestar-connections:ListConnections",
            "codestar-connections:ListHosts",
            "codestar-connections:ListRepositoryLinks",
            "codestar-connections:ListRepositorySyncDefinitions",
            "codestar-connections:ListSyncConfigurations",
            "codestar-connections:ListTagsForResource",
            "codestar-notifications:ListTargets",
            "codestar-notifications:describeNotificationRule",
            "codestar-notifications:listEventTypes",
            "codestar-notifications:listNotificationRules",
            "codestar-notifications:listTagsForResource",
            "codestar:Describe*",
            "codestar:Get*",
            "codestar:List*",
            "codestar:Verify*",
            "cognito-identity:Describe*",
            "cognito-identity:GetCredentialsForIdentity",
            "cognito-identity:GetIdentityPoolAnalytics",
            "cognito-identity:GetIdentityPoolDailyAnalytics",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:GetIdentityProviderDailyAnalytics",
            "cognito-identity:GetOpenIdToken",
            "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
            "cognito-identity:List*",
            "cognito-identity:Lookup*",
            "cognito-idp:AdminGet*",
            "cognito-idp:AdminList*",
            "cognito-idp:Describe*",
            "cognito-idp:Get*",
            "cognito-idp:List*",
            "cognito-sync:Describe*",
            "cognito-sync:Get*",
            "cognito-sync:List*",
            "cognito-sync:QueryRecords",
            "comprehend:BatchDetect*",
            "comprehend:Classify*",
            "comprehend:Contains*",
            "comprehend:Describe*",
            "comprehend:Detect*",
            "comprehend:List*",
            "compute-optimizer:DescribeRecommendationExportJobs",
            "compute-optimizer:GetAutoScalingGroupRecommendations",
            "compute-optimizer:GetEBSVolumeRecommendations",
            "compute-optimizer:GetEC2InstanceRecommendations",
            "compute-optimizer:GetEC2RecommendationProjectedMetrics",
            "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
            "compute-optimizer:GetECSServiceRecommendations",
            "compute-optimizer:GetEffectiveRecommendationPreferences",
            "compute-optimizer:GetEnrollmentStatus",
            "compute-optimizer:GetEnrollmentStatusesForOrganization",
            "compute-optimizer:GetIdleRecommendations",
            "compute-optimizer:GetLambdaFunctionRecommendations",
            "compute-optimizer:GetLicenseRecommendations",
            "compute-optimizer:GetRDSDatabaseRecommendationProjectedMetrics",
            "compute-optimizer:GetRDSDatabaseRecommendations",
            "compute-optimizer:GetRecommendationPreferences",
            "compute-optimizer:GetRecommendationSummaries",
            "config:BatchGetAggregateResourceConfig",
            "config:BatchGetResourceConfig",
            "config:Deliver*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:SelectAggregateResourceConfig",
            "config:SelectResourceConfig",
            "connect:Describe*",
            "connect:GetContactAttributes",
            "connect:GetCurrentMetricData",
            "connect:GetCurrentUserData",
            "connect:GetFederationToken",
            "connect:GetMetricData",
            "connect:GetMetricDataV2",
            "connect:GetTaskTemplate",
            "connect:GetTrafficDistribution",
            "connect:List*",
            "consoleapp:GetDeviceIdentity",
            "consoleapp:ListDeviceIdentities",
            "consolidatedbilling:GetAccountBillingRole",
            "consolidatedbilling:ListLinkedAccounts",
            "controlcatalog:ListCommonControls",
            "controlcatalog:ListDomains",
            "controlcatalog:ListObjectives",
            "cost-optimization-hub:GetPreferences",
            "cost-optimization-hub:GetRecommendation",
            "cost-optimization-hub:ListEnrollmentStatuses",
            "cost-optimization-hub:ListRecommendationSummaries",
            "cost-optimization-hub:ListRecommendations",
            "cur:GetClassicReport",
            "cur:GetClassicReportPreferences",
            "cur:GetUsageReport",
            "customer-verification:GetCustomerVerificationDetails",
            "customer-verification:GetCustomerVerificationEligibility",
            "databrew:DescribeDataset",
            "databrew:DescribeJob",
            "databrew:DescribeJobRun",
            "databrew:DescribeProject",
            "databrew:DescribeRecipe",
            "databrew:DescribeRuleset",
            "databrew:DescribeSchedule",
            "databrew:ListDatasets",
            "databrew:ListJobRuns",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "databrew:ListRecipeVersions",
            "databrew:ListRecipes",
            "databrew:ListRulesets",
            "databrew:ListSchedules",
            "databrew:ListTagsForResource",
            "dataexchange:Get*",
            "dataexchange:List*",
            "datapipeline:Describe*",
            "datapipeline:EvaluateExpression",
            "datapipeline:Get*",
            "datapipeline:List*",
            "datapipeline:QueryObjects",
            "datapipeline:Validate*",
            "datasync:Describe*",
            "datasync:List*",
            "datazone:GetAsset",
            "datazone:GetAssetType",
            "datazone:GetDataProduct",
            "datazone:GetDataSource",
            "datazone:GetDataSourceRun",
            "datazone:GetDomain",
            "datazone:GetDomainSharingPolicy",
            "datazone:GetDomainUnit",
            "datazone:GetEnvironment",
            "datazone:GetEnvironmentAction",
            "datazone:GetEnvironmentBlueprint",
            "datazone:GetEnvironmentBlueprintConfiguration",
            "datazone:GetEnvironmentProfile",
            "datazone:GetFormType",
            "datazone:GetGlossary",
            "datazone:GetGlossaryTerm",
            "datazone:GetGroupProfile",
            "datazone:GetLineageNode",
            "datazone:GetListing",
            "datazone:GetMetadataGenerationRun",
            "datazone:GetProject",
            "datazone:GetProjectProfile",
            "datazone:GetSubscription",
            "datazone:GetSubscriptionEligibility",
            "datazone:GetSubscriptionGrant",
            "datazone:GetSubscriptionRequestDetails",
            "datazone:GetSubscriptionTarget",
            "datazone:GetTimeSeriesDataPoint",
            "datazone:GetUserProfile",
            "datazone:ListAccountEnvironments",
            "datazone:ListAssetRevisions",
            "datazone:ListDataProductRevisions",
            "datazone:ListDataSourceRunActivities",
            "datazone:ListDataSourceRuns",
            "datazone:ListDataSources",
            "datazone:ListDomainUnitsForParent",
            "datazone:ListDomains",
            "datazone:ListEntityOwners",
            "datazone:ListEnvironmentpermissions",
            "datazone:ListEnvironmentBlueprintConfigurationSummaries",
            "datazone:ListEnvironmentBlueprintConfigurations",
            "datazone:ListEnvironmentBlueprints",
            "datazone:ListEnvironmentProfiles",
            "datazone:ListEnvironments",
            "datazone:ListGroupsForUser",
            "datazone:ListLineageNodeHistory",
            "datazone:ListNotifications",
            "datazone:ListPolicyGrants",
            "datazone:ListProjectMemberships",
            "datazone:ListProjectProfiles",
            "datazone:ListProjects",
            "datazone:ListSubscriptionGrants",
            "datazone:ListSubscriptionRequests",
            "datazone:ListSubscriptionTargets",
            "datazone:ListSubscriptions",
            "datazone:ListTagsForResource",
            "datazone:ListTimeSeriesDataPoints",
            "datazone:Search",
            "datazone:SearchGroupProfiles",
            "datazone:SearchListings",
            "datazone:SearchTypes",
            "datazone:SearchUserProfiles",
            "dax:BatchGetItem",
            "dax:Describe*",
            "dax:GetItem",
            "dax:ListTags",
            "dax:Query",
            "dax:Scan",
            "deadline:BatchGetJobEntity",
            "deadline:GetApplicationVersion",
            "deadline:GetBudget",
            "deadline:GetFarm",
            "deadline:GetFleet",
            "deadline:GetJob",
            "deadline:GetLicenseEndpoint",
            "deadline:GetMonitor",
            "deadline:GetQueue",
            "deadline:GetQueueEnvironment",
            "deadline:GetQueueFleetAssociation",
            "deadline:GetSession",
            "deadline:GetSessionAction",
            "deadline:GetSessionsStatisticsAggregation",
            "deadline:GetStep",
            "deadline:GetStorageProfile",
            "deadline:GetStorageProfileForQueue",
            "deadline:GetTask",
            "deadline:GetWorker",
            "deadline:ListAvailableMeteredProducts",
            "deadline:ListBudgets",
            "deadline:ListFarmMembers",
            "deadline:ListFarms",
            "deadline:ListFleetMembers",
            "deadline:ListFleets",
            "deadline:ListJobMembers",
            "deadline:ListJobParameterDefinitions",
            "deadline:ListJobs",
            "deadline:ListLicenseEndpoints",
            "deadline:ListMeteredProducts",
            "deadline:ListMonitors",
            "deadline:ListQueueEnvironments",
            "deadline:ListQueueFleetAssociations",
            "deadline:ListQueueMembers",
            "deadline:ListQueues",
            "deadline:ListSessionpermissions",
            "deadline:ListSessions",
            "deadline:ListSessionsForWorker",
            "deadline:ListStepConsumers",
            "deadline:ListStepDependencies",
            "deadline:ListSteps",
            "deadline:ListStorageProfiles",
            "deadline:ListStorageProfilesForQueue",
            "deadline:ListTagsForResource",
            "deadline:ListTasks",
            "deadline:ListWorkers",
            "deadline:SearchJobs",
            "deadline:SearchSteps",
            "deadline:SearchTasks",
            "deadline:SearchWorkers",
            "deepcomposer:GetComposition",
            "deepcomposer:GetModel",
            "deepcomposer:GetSampleModel",
            "deepcomposer:ListCompositions",
            "deepcomposer:ListModels",
            "deepcomposer:ListSampleModels",
            "deepcomposer:ListTrainingTopics",
            "detective:BatchGetGraphMemberDatasources",
            "detective:BatchGetMembershipDatasources",
            "detective:Get*",
            "detective:List*",
            "detective:SearchGraph",
            "devicefarm:Get*",
            "devicefarm:List*",
            "devops-guru:DescribeAccountHealth",
            "devops-guru:DescribeAccountOverview",
            "devops-guru:DescribeAnomaly",
            "devops-guru:DescribeEventSourcesConfig",
            "devops-guru:DescribeFeedback",
            "devops-guru:DescribeInsight",
            "devops-guru:DescribeOrganizationHealth",
            "devops-guru:DescribeOrganizationOverview",
            "devops-guru:DescribeOrganizationResourceCollectionHealth",
            "devops-guru:DescribeResourceCollectionHealth",
            "devops-guru:DescribeServiceIntegration",
            "devops-guru:GetCostEstimation",
            "devops-guru:GetResourceCollection",
            "devops-guru:ListAnomaliesForInsight",
            "devops-guru:ListAnomalousLogGroups",
            "devops-guru:ListEvents",
            "devops-guru:ListInsights",
            "devops-guru:ListMonitoredResources",
            "devops-guru:ListNotificationChannels",
            "devops-guru:ListOrganizationInsights",
            "devops-guru:ListRecommendations",
            "devops-guru:SearchInsights",
            "devops-guru:StartCostEstimation",
            "directconnect:Describe*",
            "discovery:Describe*",
            "discovery:Get*",
            "discovery:List*",
            "dlm:Get*",
            "dms:Describe*",
            "dms:List*",
            "dms:Test*",
            "drs:DescribeJobLogItems",
            "drs:DescribeJobs",
            "drs:DescribeLaunchConfigurationTemplates",
            "drs:DescribeRecoveryInstances",
            "drs:DescribeRecoverySnapshots",
            "drs:DescribeReplicationConfigurationTemplates",
            "drs:DescribeSourceNetworks",
            "drs:DescribeSourceServers",
            "drs:GetFailbackReplicationConfiguration",
            "drs:GetLaunchConfiguration",
            "drs:GetReplicationConfiguration",
            "drs:ListExtensibleSourceServers",
            "drs:ListLaunchpermissions",
            "drs:ListStagingAccounts",
            "drs:ListTagsForResource",
            "ds:Check*",
            "ds:Describe*",
            "ds:Get*",
            "ds:List*",
            "ds:Verify*",
            "dsql:GetCluster",
            "dsql:ListClusters",
            "dsql:ListTagsForResource",
            "dynamodb:BatchGet*",
            "dynamodb:Describe*",
            "dynamodb:Get*",
            "dynamodb:List*",
            "dynamodb:PartiQLSelect",
            "dynamodb:Query",
            "dynamodb:Scan",
            "ec2:Describe*",
            "ec2:DescribeInstanceImageMetadata",
            "ec2:Get*",
            "ec2:ListImagesInRecycleBin",
            "ec2:ListSnapshotsInRecycleBin",
            "ec2:SearchLocalGatewayRoutes",
            "ec2:SearchTransitGatewayRoutes",
            "ec2messages:Get*",
            "ecr-public:BatchCheckLayerAvailability",
            "ecr-public:DescribeImageTags",
            "ecr-public:DescribeImages",
            "ecr-public:DescribeRegistries",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetAuthorizationToken",
            "ecr-public:GetRegistryCatalogData",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:BatchCheck*",
            "ecr:BatchGet*",
            "ecr:Describe*",
            "ecr:Get*",
            "ecr:List*",
            "ecs:Describe*",
            "ecs:List*",
            "eks:Describe*",
            "eks:List*",
            "elastic-inference:DescribeAcceleratorOfferings",
            "elastic-inference:DescribeAcceleratorTypes",
            "elastic-inference:DescribeAccelerators",
            "elastic-inference:ListTagsForResource",
            "elasticache:Describe*",
            "elasticache:List*",
            "elasticbeanstalk:Check*",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticbeanstalk:Request*",
            "elasticbeanstalk:Retrieve*",
            "elasticbeanstalk:Validate*",
            "elasticfilesystem:Describe*",
            "elasticfilesystem:ListTagsForResource",
            "elasticloadbalancing:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:List*",
            "elasticmapreduce:View*",
            "elastictranscoder:List*",
            "elastictranscoder:Read*",
            "elemental-appliances-software:Get*",
            "elemental-appliances-software:List*",
            "emr-containers:DescribeJobRun",
            "emr-containers:DescribeManagedEndpoint",
            "emr-containers:DescribeVirtualCluster",
            "emr-containers:ListJobRuns",
            "emr-containers:ListManagedEndpoints",
            "emr-containers:ListTagsForResource",
            "emr-containers:ListVirtualClusters",
            "emr-serverless:GetApplication",
            "emr-serverless:GetDashboardForJobRun",
            "emr-serverless:GetJobRun",
            "emr-serverless:ListApplications",
            "emr-serverless:ListJobRuns",
            "emr-serverless:ListTagsForResource",
            "es:Describe*",
            "es:ESHttpGet",
            "es:ESHttpHead",
            "es:Get*",
            "es:List*",
            "events:Describe*",
            "events:List*",
            "events:Test*",
            "evidently:GetExperiment",
            "evidently:GetExperimentResults",
            "evidently:GetFeature",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:GetSegment",
            "evidently:ListExperiments",
            "evidently:ListFeatures",
            "evidently:ListLaunches",
            "evidently:ListProjects",
            "evidently:ListSegmentReferences",
            "evidently:ListSegments",
            "evidently:ListTagsForResource",
            "evidently:TestSegmentPattern",
            "firehose:Describe*",
            "firehose:List*",
            "fis:GetAction",
            "fis:GetExperiment",
            "fis:GetExperimentTargetAccountConfiguration",
            "fis:GetExperimentTemplate",
            "fis:GetTargetAccountConfiguration",
            "fis:GetTargetResourceType",
            "fis:Listpermissions",
            "fis:ListExperimentResolvedTargets",
            "fis:ListExperimentTargetAccountConfigurations",
            "fis:ListExperimentTemplates",
            "fis:ListExperiments",
            "fis:ListTagsForResource",
            "fis:ListTargetAccountConfigurations",
            "fis:ListTargetResourceTypes",
            "fms:GetAdminAccount",
            "fms:GetAppsList",
            "fms:GetComplianceDetail",
            "fms:GetNotificationChannel",
            "fms:GetPolicy",
            "fms:GetProtectionStatus",
            "fms:GetProtocolsList",
            "fms:GetViolationDetails",
            "fms:ListAppsLists",
            "fms:ListComplianceStatus",
            "fms:ListMemberAccounts",
            "fms:ListPolicies",
            "fms:ListProtocolsLists",
            "fms:ListTagsForResource",
            "forecast:DescribeAutoPredictor",
            "forecast:DescribeDataset",
            "forecast:DescribeDatasetGroup",
            "forecast:DescribeDatasetImportJob",
            "forecast:DescribeExplainability",
            "forecast:DescribeExplainabilityExport",
            "forecast:DescribeForecast",
            "forecast:DescribeForecastExportJob",
            "forecast:DescribeMonitor",
            "forecast:DescribePredictor",
            "forecast:DescribePredictorBacktestExportJob",
            "forecast:DescribeWhatIfAnalysis",
            "forecast:DescribeWhatIfForecast",
            "forecast:DescribeWhatIfForecastExport",
            "forecast:GetAccuracyMetrics",
            "forecast:ListDatasetGroups",
            "forecast:ListDatasetImportJobs",
            "forecast:ListDatasets",
            "forecast:ListExplainabilities",
            "forecast:ListExplainabilityExports",
            "forecast:ListForecastExportJobs",
            "forecast:ListForecasts",
            "forecast:ListMonitorEvaluations",
            "forecast:ListMonitors",
            "forecast:ListPredictorBacktestExportJobs",
            "forecast:ListPredictors",
            "forecast:ListWhatIfAnalyses",
            "forecast:ListWhatIfForecastExports",
            "forecast:ListWhatIfForecasts",
            "forecast:QueryForecast",
            "forecast:QueryWhatIfForecast",
            "frauddetector:BatchGetVariable",
            "frauddetector:DescribeDetector",
            "frauddetector:DescribeModelVersions",
            "frauddetector:GetBatchImportJobs",
            "frauddetector:GetBatchPredictionJobs",
            "frauddetector:GetDeleteEventsByEventTypeStatus",
            "frauddetector:GetDetectorVersion",
            "frauddetector:GetDetectors",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEvent",
            "frauddetector:GetEventPredictionMetadata",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetKMSEncryptionKey",
            "frauddetector:GetLabels",
            "frauddetector:GetListElements",
            "frauddetector:GetListsMetadata",
            "frauddetector:GetModelVersion",
            "frauddetector:GetModels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:ListEventPredictions",
            "frauddetector:ListTagsForResource",
            "freertos:Describe*",
            "freertos:List*",
            "freetier:GetFreeTierAlertPreference",
            "freetier:GetFreeTierUsage",
            "fsx:Describe*",
            "fsx:List*",
            "gamelift:Describe*",
            "gamelift:Get*",
            "gamelift:List*",
            "gamelift:ResolveAlias",
            "gamelift:Search*",
            "glacier:Describe*",
            "glacier:Get*",
            "glacier:List*",
            "globalaccelerator:Describe*",
            "globalaccelerator:List*",
            "glue:BatchGetCrawlers",
            "glue:BatchGetDevEndpoints",
            "glue:BatchGetJobs",
            "glue:BatchGetPartition",
            "glue:BatchGetTableOptimizer",
            "glue:BatchGetTriggers",
            "glue:BatchGetWorkflows",
            "glue:CheckSchemaVersionValidity",
            "glue:GetCatalogImportStatus",
            "glue:GetClassifier",
            "glue:GetClassifiers",
            "glue:GetCrawler",
            "glue:GetCrawlerMetrics",
            "glue:GetCrawlers",
            "glue:GetDataCatalogEncryptionSettings",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetDataflowGraph",
            "glue:GetDevEndpoint",
            "glue:GetDevEndpoints",
            "glue:GetJob",
            "glue:GetJobBookmark",
            "glue:GetJobRun",
            "glue:GetJobRuns",
            "glue:GetJobs",
            "glue:GetMLTaskRun",
            "glue:GetMLTaskRuns",
            "glue:GetMLTransform",
            "glue:GetMLTransforms",
            "glue:GetMapping",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetPlan",
            "glue:GetRegistry",
            "glue:GetResourcePolicy",
            "glue:GetSchema",
            "glue:GetSchemaByDefinition",
            "glue:GetSchemaVersion",
            "glue:GetSchemaVersionsDiff",
            "glue:GetSecurityConfiguration",
            "glue:GetSecurityConfigurations",
            "glue:GetSession",
            "glue:GetStatement",
            "glue:GetTable",
            "glue:GetTableOptimizer",
            "glue:GetTableVersion",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:GetTags",
            "glue:GetTrigger",
            "glue:GetTriggers",
            "glue:GetUserDefinedFunction",
            "glue:GetUserDefinedFunctions",
            "glue:GetWorkflow",
            "glue:GetWorkflowRun",
            "glue:GetWorkflowRunProperties",
            "glue:GetWorkflowRuns",
            "glue:ListCrawlers",
            "glue:ListCrawls",
            "glue:ListDevEndpoints",
            "glue:ListJobs",
            "glue:ListMLTransforms",
            "glue:ListRegistries",
            "glue:ListSchemaVersions",
            "glue:ListSchemas",
            "glue:ListSessions",
            "glue:ListStatements",
            "glue:ListTableOptimizerRuns",
            "glue:ListTriggers",
            "glue:ListWorkflows",
            "glue:QuerySchemaVersionMetadata",
            "glue:SearchTables",
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:DescribeWorkspaceConfiguration",
            "grafana:ListPermissions",
            "grafana:ListTagsForResource",
            "grafana:ListVersions",
            "grafana:ListWorkspaces",
            "greengrass:DescribeComponent",
            "greengrass:Get*",
            "greengrass:List*",
            "groundstation:DescribeContact",
            "groundstation:GetConfig",
            "groundstation:GetDataflowEndpointGroup",
            "groundstation:GetMinuteUsage",
            "groundstation:GetMissionProfile",
            "groundstation:GetSatellite",
            "groundstation:ListConfigs",
            "groundstation:ListContacts",
            "groundstation:ListDataflowEndpointGroups",
            "groundstation:ListGroundStations",
            "groundstation:ListMissionProfiles",
            "groundstation:ListSatellites",
            "groundstation:ListTagsForResource",
            "guardduty:Describe*",
            "guardduty:Get*",
            "guardduty:List*",
            "health:Describe*",
            "healthlake:DescribeFHIRDatastore",
            "healthlake:DescribeFHIRExportJob",
            "healthlake:DescribeFHIRImportJob",
            "healthlake:GetCapabilities",
            "healthlake:ListFHIRDatastores",
            "healthlake:ListFHIRExportJobs",
            "healthlake:ListFHIRImportJobs",
            "healthlake:ListTagsForResource",
            "healthlake:ReadResource",
            "healthlake:SearchWithGet",
            "healthlake:SearchWithPost",
            "iam:Generate*",
            "iam:Get*",
            "iam:List*",
            "iam:Simulate*",
            "identity-sync:GetSyncProfile",
            "identity-sync:GetSyncTarget",
            "identity-sync:ListSyncFilters",
            "identitystore-auth:BatchGetSession",
            "identitystore-auth:ListSessions",
            "identitystore:DescribeGroup",
            "identitystore:DescribeGroupMembership",
            "identitystore:DescribeUser",
            "identitystore:GetGroupId",
            "identitystore:GetGroupMembershipId",
            "identitystore:GetUserId",
            "identitystore:IsMemberInGroups",
            "identitystore:ListGroupMemberships",
            "identitystore:ListGroupMembershipsForMember",
            "identitystore:ListGroups",
            "identitystore:ListUsers",
            "imagebuilder:Get*",
            "imagebuilder:List*",
            "importexport:Get*",
            "importexport:List*",
            "inspector2:BatchGetAccountStatus",
            "inspector2:BatchGetFreeTrialInfo",
            "inspector2:DescribeOrganizationConfiguration",
            "inspector2:GetDelegatedAdminAccount",
            "inspector2:GetFindingsReportStatus",
            "inspector2:GetMember",
            "inspector2:ListAccountPermissions",
            "inspector2:ListCisScans",
            "inspector2:ListCoverage",
            "inspector2:ListCoverageStatistics",
            "inspector2:ListDelegatedAdminAccounts",
            "inspector2:ListFilters",
            "inspector2:ListFindingAggregations",
            "inspector2:ListFindings",
            "inspector2:ListMembers",
            "inspector2:ListTagsForResource",
            "inspector2:ListUsageTotals",
            "inspector:Describe*",
            "inspector:Get*",
            "inspector:List*",
            "inspector:Preview*",
            "internetmonitor:GetHealthEvent",
            "internetmonitor:GetInternetEvent",
            "internetmonitor:GetMonitor",
            "internetmonitor:ListHealthEvents",
            "internetmonitor:ListInternetEvents",
            "internetmonitor:ListMonitors",
            "internetmonitor:ListTagsForResource",
            "invoicing:GetInvoiceEmailDeliveryPreferences",
            "invoicing:GetInvoicePDF",
            "invoicing:ListInvoiceSummaries",
            "iot1click:DescribeDevice",
            "iot1click:DescribePlacement",
            "iot1click:DescribeProject",
            "iot1click:GetDeviceMethods",
            "iot1click:GetDevicesInPlacement",
            "iot1click:ListDeviceEvents",
            "iot1click:ListDevices",
            "iot1click:ListPlacements",
            "iot1click:ListProjects",
            "iot1click:ListTagsForResource",
            "iot:Describe*",
            "iot:Get*",
            "iot:List*",
            "iotanalytics:Describe*",
            "iotanalytics:Get*",
            "iotanalytics:List*",
            "iotanalytics:SampleChannelData",
            "iotevents:DescribeAlarm",
            "iotevents:DescribeAlarmModel",
            "iotevents:DescribeDetector",
            "iotevents:DescribeDetectorModel",
            "iotevents:DescribeInput",
            "iotevents:DescribeLoggingOptions",
            "iotevents:ListAlarmModelVersions",
            "iotevents:ListAlarmModels",
            "iotevents:ListAlarms",
            "iotevents:ListDetectorModelVersions",
            "iotevents:ListDetectorModels",
            "iotevents:ListDetectors",
            "iotevents:ListInputs",
            "iotevents:ListTagsForResource",
            "iotfleethub:DescribeApplication",
            "iotfleethub:ListApplications",
            "iotfleetwise:GetCampaign",
            "iotfleetwise:GetDecoderManifest",
            "iotfleetwise:GetFleet",
            "iotfleetwise:GetLoggingOptions",
            "iotfleetwise:GetModelManifest",
            "iotfleetwise:GetRegisterAccountStatus",
            "iotfleetwise:GetSignalCatalog",
            "iotfleetwise:GetVehicle",
            "iotfleetwise:GetVehicleStatus",
            "iotfleetwise:ListCampaigns",
            "iotfleetwise:ListDecoderManifestNetworkInterfaces",
            "iotfleetwise:ListDecoderManifestSignals",
            "iotfleetwise:ListDecoderManifests",
            "iotfleetwise:ListFleets",
            "iotfleetwise:ListFleetsForVehicle",
            "iotfleetwise:ListModelManifestNodes",
            "iotfleetwise:ListModelManifests",
            "iotfleetwise:ListSignalCatalogNodes",
            "iotfleetwise:ListSignalCatalogs",
            "iotfleetwise:ListTagsForResource",
            "iotfleetwise:ListVehicles",
            "iotfleetwise:ListVehiclesInFleet",
            "iotroborunner:GetDestination",
            "iotroborunner:GetSite",
            "iotroborunner:GetWorker",
            "iotroborunner:GetWorkerFleet",
            "iotroborunner:ListDestinations",
            "iotroborunner:ListSites",
            "iotroborunner:ListWorkerFleets",
            "iotroborunner:ListWorkers",
            "iotsitewise:Describe*",
            "iotsitewise:Get*",
            "iotsitewise:List*",
            "iotwireless:GetDestination",
            "iotwireless:GetDeviceProfile",
            "iotwireless:GetEventConfigurationByResourceTypes",
            "iotwireless:GetFuotaTask",
            "iotwireless:GetLogLevelsByResourceTypes",
            "iotwireless:GetMetricConfiguration",
            "iotwireless:GetMetrics",
            "iotwireless:GetMulticastGroup",
            "iotwireless:GetMulticastGroupSession",
            "iotwireless:GetNetworkAnalyzerConfiguration",
            "iotwireless:GetPartnerAccount",
            "iotwireless:GetPosition",
            "iotwireless:GetPositionConfiguration",
            "iotwireless:GetPositionEstimate",
            "iotwireless:GetResourceEventConfiguration",
            "iotwireless:GetResourceLogLevel",
            "iotwireless:GetResourcePosition",
            "iotwireless:GetServiceEndpoint",
            "iotwireless:GetServiceProfile",
            "iotwireless:GetWirelessDevice",
            "iotwireless:GetWirelessDeviceImportTask",
            "iotwireless:GetWirelessDeviceStatistics",
            "iotwireless:GetWirelessGateway",
            "iotwireless:GetWirelessGatewayCertificate",
            "iotwireless:GetWirelessGatewayFirmwareInformation",
            "iotwireless:GetWirelessGatewayStatistics",
            "iotwireless:GetWirelessGatewayTask",
            "iotwireless:GetWirelessGatewayTaskDefinition",
            "iotwireless:ListDestinations",
            "iotwireless:ListDeviceProfiles",
            "iotwireless:ListDevicesForWirelessDeviceImportTask",
            "iotwireless:ListEventConfigurations",
            "iotwireless:ListFuotaTasks",
            "iotwireless:ListMulticastGroups",
            "iotwireless:ListMulticastGroupsByFuotaTask",
            "iotwireless:ListNetworkAnalyzerConfigurations",
            "iotwireless:ListPartnerAccounts",
            "iotwireless:ListPositionConfigurations",
            "iotwireless:ListQueuedMessages",
            "iotwireless:ListServiceProfiles",
            "iotwireless:ListTagsForResource",
            "iotwireless:ListWirelessDeviceImportTasks",
            "iotwireless:ListWirelessDevices",
            "iotwireless:ListWirelessGatewayTaskDefinitions",
            "iotwireless:ListWirelessGateways",
            "ivs:BatchGetChannel",
            "ivs:GetChannel",
            "ivs:GetComposition",
            "ivs:GetEncoderConfiguration",
            "ivs:GetIngestConfiguration",
            "ivs:GetParticipant",
            "ivs:GetPlaybackKeyPair",
            "ivs:GetPlaybackRestrictionPolicy",
            "ivs:GetPublicKey",
            "ivs:GetRecordingConfiguration",
            "ivs:GetStage",
            "ivs:GetStageSession",
            "ivs:GetStorageConfiguration",
            "ivs:GetStream",
            "ivs:GetStreamSession",
            "ivs:ListChannels",
            "ivs:ListCompositions",
            "ivs:ListEncoderConfigurations",
            "ivs:ListIngestConfigurations",
            "ivs:ListParticipantEvents",
            "ivs:ListParticipants",
            "ivs:ListPlaybackKeyPairs",
            "ivs:ListPlaybackRestrictionPolicies",
            "ivs:ListPublicKeys",
            "ivs:ListRecordingConfigurations",
            "ivs:ListStageSessions",
            "ivs:ListStages",
            "ivs:ListStorageConfigurations",
            "ivs:ListStreamKeys",
            "ivs:ListStreamSessions",
            "ivs:ListStreams",
            "ivs:ListTagsForResource",
            "ivschat:GetLoggingConfiguration",
            "ivschat:GetRoom",
            "ivschat:ListLoggingConfigurations",
            "ivschat:ListRooms",
            "ivschat:ListTagsForResource",
            "kafka:Describe*",
            "kafka:DescribeCluster",
            "kafka:DescribeClusterOperation",
            "kafka:DescribeClusterV2",
            "kafka:DescribeConfiguration",
            "kafka:DescribeConfigurationRevision",
            "kafka:Get*",
            "kafka:GetBootstrapBrokers",
            "kafka:GetCompatibleKafkaVersions",
            "kafka:List*",
            "kafka:ListClusterOperations",
            "kafka:ListClusters",
            "kafka:ListClustersV2",
            "kafka:ListConfigurationRevisions",
            "kafka:ListConfigurations",
            "kafka:ListKafkaVersions",
            "kafka:ListNodes",
            "kafka:ListTagsForResource",
            "kafkaconnect:DescribeConnector",
            "kafkaconnect:DescribeCustomPlugin",
            "kafkaconnect:DescribeWorkerConfiguration",
            "kafkaconnect:ListConnectors",
            "kafkaconnect:ListCustomPlugins",
            "kafkaconnect:ListWorkerConfigurations",
            "kendra:BatchGetDocumentStatus",
            "kendra:DescribeDataSource",
            "kendra:DescribeExperience",
            "kendra:DescribeFaq",
            "kendra:DescribeIndex",
            "kendra:DescribePrincipalMapping",
            "kendra:DescribeQuerySuggestionsBlockList",
            "kendra:DescribeQuerySuggestionsConfig",
            "kendra:DescribeThesaurus",
            "kendra:GetQuerySuggestions",
            "kendra:GetSnapshots",
            "kendra:ListDataSourceSyncJobs",
            "kendra:ListDataSources",
            "kendra:ListEntityPersonas",
            "kendra:ListExperienceEntities",
            "kendra:ListExperiences",
            "kendra:ListFaqs",
            "kendra:ListGroupsOlderThanOrderingId",
            "kendra:ListIndices",
            "kendra:ListQuerySuggestionsBlockLists",
            "kendra:ListTagsForResource",
            "kendra:ListThesauri",
            "kendra:Query",
            "kinesis:Describe*",
            "kinesis:Get*",
            "kinesis:List*",
            "kinesisanalytics:Describe*",
            "kinesisanalytics:Discover*",
            "kinesisanalytics:Get*",
            "kinesisanalytics:List*",
            "kinesisvideo:Describe*",
            "kinesisvideo:Get*",
            "kinesisvideo:List*",
            "kms:Describe*",
            "kms:Get*",
            "kms:List*",
            "lakeformation:DescribeResource",
            "lakeformation:GetDataCellsFilter",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:GetEffectivePermissionsForPath",
            "lakeformation:GetLfTag",
            "lakeformation:GetResourceLfTags",
            "lakeformation:ListDataCellsFilter",
            "lakeformation:ListLfTags",
            "lakeformation:ListPermissions",
            "lakeformation:ListResources",
            "lakeformation:ListTableStorageOptimizers",
            "lakeformation:SearchDatabasesByLfTags",
            "lakeformation:SearchTablesByLfTags",
            "lambda:Get*",
            "lambda:List*",
            "launchwizard:DescribeAdditionalNode",
            "launchwizard:DescribeProvisionedApp",
            "launchwizard:DescribeProvisioningEvents",
            "launchwizard:DescribeSettingsSet",
            "launchwizard:GetDeployment",
            "launchwizard:GetInfrastructureSuggestion",
            "launchwizard:GetIpAddress",
            "launchwizard:GetResourceCostEstimate",
            "launchwizard:GetResourceRecommendation",
            "launchwizard:GetSettingsSet",
            "launchwizard:GetWorkload",
            "launchwizard:GetWorkloadAsset",
            "launchwizard:GetWorkloadAssets",
            "launchwizard:GetWorkloadDeploymentPattern",
            "launchwizard:ListAdditionalNodes",
            "launchwizard:ListAllowedResources",
            "launchwizard:ListDeploymentEvents",
            "launchwizard:ListDeployments",
            "launchwizard:ListProvisionedApps",
            "launchwizard:ListResourceCostEstimates",
            "launchwizard:ListSettingsSets",
            "launchwizard:ListTagsForResource",
            "launchwizard:ListWorkloadDeploymentOptions",
            "launchwizard:ListWorkloadDeploymentPatterns",
            "launchwizard:ListWorkloads",
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotChannel",
            "lex:DescribeBotLocale",
            "lex:DescribeBotReplica",
            "lex:DescribeBotVersion",
            "lex:DescribeExport",
            "lex:DescribeImport",
            "lex:DescribeIntent",
            "lex:DescribeResourcePolicy",
            "lex:DescribeSlot",
            "lex:DescribeSlotType",
            "lex:Get*",
            "lex:ListBotAliasReplicas",
            "lex:ListBotAliases",
            "lex:ListBotChannels",
            "lex:ListBotLocales",
            "lex:ListBotReplicas",
            "lex:ListBotVersionReplicas",
            "lex:ListBotVersions",
            "lex:ListBots",
            "lex:ListBuiltInIntents",
            "lex:ListBuiltInSlotTypes",
            "lex:ListExports",
            "lex:ListImports",
            "lex:ListIntents",
            "lex:ListSlotTypes",
            "lex:ListSlots",
            "lex:ListTagsForResource",
            "license-manager:Get*",
            "license-manager:List*",
            "lightsail:GetActiveNames",
            "lightsail:GetAlarms",
            "lightsail:GetAutoSnapshots",
            "lightsail:GetBlueprints",
            "lightsail:GetBucketAccessKeys",
            "lightsail:GetBucketBundles",
            "lightsail:GetBucketMetricData",
            "lightsail:GetBuckets",
            "lightsail:GetBundles",
            "lightsail:GetCertificates",
            "lightsail:GetCloudFormationStackRecords",
            "lightsail:GetContainerAPIMetadata",
            "lightsail:GetContainerImages",
            "lightsail:GetContainerServiceDeployments",
            "lightsail:GetContainerServiceMetricData",
            "lightsail:GetContainerServicePowers",
            "lightsail:GetContainerServices",
            "lightsail:GetDisk",
            "lightsail:GetDiskSnapshot",
            "lightsail:GetDiskSnapshots",
            "lightsail:GetDisks",
            "lightsail:GetDistributionBundles",
            "lightsail:GetDistributionLatestCacheReset",
            "lightsail:GetDistributionMetricData",
            "lightsail:GetDistributions",
            "lightsail:GetDomain",
            "lightsail:GetDomains",
            "lightsail:GetExportSnapshotRecords",
            "lightsail:GetInstance",
            "lightsail:GetInstanceMetricData",
            "lightsail:GetInstancePortStates",
            "lightsail:GetInstanceSnapshot",
            "lightsail:GetInstanceSnapshots",
            "lightsail:GetInstanceState",
            "lightsail:GetInstances",
            "lightsail:GetKeyPair",
            "lightsail:GetKeyPairs",
            "lightsail:GetLoadBalancer",
            "lightsail:GetLoadBalancerMetricData",
            "lightsail:GetLoadBalancerTlsCertificates",
            "lightsail:GetLoadBalancers",
            "lightsail:GetOperation",
            "lightsail:GetOperations",
            "lightsail:GetOperationsForResource",
            "lightsail:GetRegions",
            "lightsail:GetRelationalDatabase",
            "lightsail:GetRelationalDatabaseBlueprints",
            "lightsail:GetRelationalDatabaseBundles",
            "lightsail:GetRelationalDatabaseEvents",
            "lightsail:GetRelationalDatabaseLogEvents",
            "lightsail:GetRelationalDatabaseLogStreams",
            "lightsail:GetRelationalDatabaseMetricData",
            "lightsail:GetRelationalDatabaseParameters",
            "lightsail:GetRelationalDatabaseSnapshot",
            "lightsail:GetRelationalDatabaseSnapshots",
            "lightsail:GetRelationalDatabases",
            "lightsail:GetStaticIp",
            "lightsail:GetStaticIps",
            "lightsail:Is*",
            "logs:Describe*",
            "logs:FilterLogEvents",
            "logs:Get*",
            "logs:ListAnomalies",
            "logs:ListEntitiesForLogGroup",
            "logs:ListIntegrations",
            "logs:ListLogAnomalyDetectors",
            "logs:ListLogDeliveries",
            "logs:ListLogGroupsForEntity",
            "logs:ListLogGroupsForQuery",
            "logs:ListTagsForResource",
            "logs:ListTagsLogGroup",
            "logs:StartLiveTail",
            "logs:StartQuery",
            "logs:StopLiveTail",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "lookoutequipment:DescribeDataIngestionJob",
            "lookoutequipment:DescribeDataset",
            "lookoutequipment:DescribeInferenceScheduler",
            "lookoutequipment:DescribeLabel",
            "lookoutequipment:DescribeLabelGroup",
            "lookoutequipment:DescribeModel",
            "lookoutequipment:DescribeModelVersion",
            "lookoutequipment:DescribeResourcePolicy",
            "lookoutequipment:DescribeRetrainingScheduler",
            "lookoutequipment:ListDataIngestionJobs",
            "lookoutequipment:ListDatasets",
            "lookoutequipment:ListInferenceEvents",
            "lookoutequipment:ListInferenceExecutions",
            "lookoutequipment:ListInferenceSchedulers",
            "lookoutequipment:ListLabelGroups",
            "lookoutequipment:ListLabels",
            "lookoutequipment:ListModelVersions",
            "lookoutequipment:ListModels",
            "lookoutequipment:ListRetrainingSchedulers",
            "lookoutequipment:ListSensorStatistics",
            "lookoutequipment:ListTagsForResource",
            "lookoutmetrics:Describe*",
            "lookoutmetrics:Get*",
            "lookoutmetrics:List*",
            "lookoutvision:DescribeDataset",
            "lookoutvision:DescribeModel",
            "lookoutvision:DescribeModelPackagingJob",
            "lookoutvision:DescribeProject",
            "lookoutvision:ListDatasetEntries",
            "lookoutvision:ListModelPackagingJobs",
            "lookoutvision:ListModels",
            "lookoutvision:ListProjects",
            "lookoutvision:ListTagsForResource",
            "m2:GetApplication",
            "m2:GetApplicationVersion",
            "m2:GetBatchJobExecution",
            "m2:GetDataSetDetails",
            "m2:GetDataSetImportTask",
            "m2:GetDeployment",
            "m2:GetEnvironment",
            "m2:ListApplicationVersions",
            "m2:ListApplications",
            "m2:ListBatchJobDefinitions",
            "m2:ListBatchJobExecutions",
            "m2:ListDataSetImportHistory",
            "m2:ListDataSets",
            "m2:ListDeployments",
            "m2:ListEngineVersions",
            "m2:ListEnvironments",
            "m2:ListTagsForResource",
            "machinelearning:Describe*",
            "machinelearning:Get*",
            "macie2:BatchGetCustomDataIdentifiers",
            "macie2:DescribeBuckets",
            "macie2:DescribeClassificationJob",
            "macie2:DescribeOrganizationConfiguration",
            "macie2:GetAdministratorAccount",
            "macie2:GetAllowList",
            "macie2:GetAutomatedDiscoveryConfiguration",
            "macie2:GetBucketStatistics",
            "macie2:GetClassificationExportConfiguration",
            "macie2:GetClassificationScope",
            "macie2:GetCustomDataIdentifier",
            "macie2:GetFindingStatistics",
            "macie2:GetFindings",
            "macie2:GetFindingsFilter",
            "macie2:GetFindingsPublicationConfiguration",
            "macie2:GetInvitationsCount",
            "macie2:GetMacieSession",
            "macie2:GetMember",
            "macie2:GetResourceProfile",
            "macie2:GetRevealConfiguration",
            "macie2:GetSensitiveDataOccurrencesAvailability",
            "macie2:GetSensitivityInspectionTemplate",
            "macie2:GetUsageStatistics",
            "macie2:GetUsageTotals",
            "macie2:ListAllowLists",
            "macie2:ListAutomatedDiscoveryAccounts",
            "macie2:ListClassificationJobs",
            "macie2:ListClassificationScopes",
            "macie2:ListCustomDataIdentifiers",
            "macie2:ListFindings",
            "macie2:ListFindingsFilters",
            "macie2:ListInvitations",
            "macie2:ListMembers",
            "macie2:ListOrganizationAdminAccounts",
            "macie2:ListResourceProfileArtifacts",
            "macie2:ListResourceProfileDetections",
            "macie2:ListSensitivityInspectionTemplates",
            "macie2:ListTagsForResource",
            "macie2:SearchResources",
            "managedblockchain:GetMember",
            "managedblockchain:GetNetwork",
            "managedblockchain:GetNode",
            "managedblockchain:GetProposal",
            "managedblockchain:ListInvitations",
            "managedblockchain:ListMembers",
            "managedblockchain:ListNetworks",
            "managedblockchain:ListNodes",
            "managedblockchain:ListProposalVotes",
            "managedblockchain:ListProposals",
            "managedblockchain:ListTagsForResource",
            "mediaconnect:DescribeFlow",
            "mediaconnect:DescribeOffering",
            "mediaconnect:DescribeReservation",
            "mediaconnect:ListEntitlements",
            "mediaconnect:ListFlows",
            "mediaconnect:ListOfferings",
            "mediaconnect:ListReservations",
            "mediaconnect:ListTagsForResource",
            "mediaconvert:DescribeEndpoints",
            "mediaconvert:Get*",
            "mediaconvert:List*",
            "medialive:DescribeChannel",
            "medialive:DescribeInput",
            "medialive:DescribeInputDevice",
            "medialive:DescribeInputDeviceThumbnail",
            "medialive:DescribeInputSecurityGroup",
            "medialive:DescribeMultiplex",
            "medialive:DescribeMultiplexProgram",
            "medialive:DescribeOffering",
            "medialive:DescribeReservation",
            "medialive:DescribeSchedule",
            "medialive:GetCloudWatchAlarmTemplate",
            "medialive:GetCloudWatchAlarmTemplateGroup",
            "medialive:GetEventBridgeRuleTemplate",
            "medialive:GetEventBridgeRuleTemplateGroup",
            "medialive:GetSignalMap",
            "medialive:ListChannels",
            "medialive:ListCloudWatchAlarmTemplateGroups",
            "medialive:ListCloudWatchAlarmTemplates",
            "medialive:ListEventBridgeRuleTemplateGroups",
            "medialive:ListEventBridgeRuleTemplates",
            "medialive:ListInputDeviceTransfers",
            "medialive:ListInputDevices",
            "medialive:ListInputSecurityGroups",
            "medialive:ListInputs",
            "medialive:ListMultiplexPrograms",
            "medialive:ListMultiplexes",
            "medialive:ListOfferings",
            "medialive:ListReservations",
            "medialive:ListSignalMaps",
            "medialive:ListTagsForResource",
            "mediapackage-vod:Describe*",
            "mediapackage-vod:List*",
            "mediapackage:Describe*",
            "mediapackage:List*",
            "mediapackagev2:GetChannel",
            "mediapackagev2:GetChannelGroup",
            "mediapackagev2:GetChannelPolicy",
            "mediapackagev2:GetHeadObject",
            "mediapackagev2:GetObject",
            "mediapackagev2:GetOriginEndpoint",
            "mediapackagev2:GetOriginEndpointPolicy",
            "mediapackagev2:ListChannelGroups",
            "mediapackagev2:ListChannels",
            "mediapackagev2:ListOriginEndpoints",
            "mediapackagev2:ListTagsForResource",
            "mediastore:DescribeContainer",
            "mediastore:DescribeObject",
            "mediastore:GetContainerPolicy",
            "mediastore:GetCorsPolicy",
            "mediastore:GetLifecyclePolicy",
            "mediastore:GetMetricPolicy",
            "mediastore:GetObject",
            "mediastore:ListContainers",
            "mediastore:ListItems",
            "mediastore:ListTagsForResource",
            "memorydb:DescribeClusters",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeParameters",
            "memorydb:ListTags",
            "mgh:Describe*",
            "mgh:GetHomeRegion",
            "mgh:List*",
            "mgn:DescribeJobLogItems",
            "mgn:DescribeJobs",
            "mgn:DescribeLaunchConfigurationTemplates",
            "mgn:DescribeReplicationConfigurationTemplates",
            "mgn:DescribeSourceServers",
            "mgn:DescribeVcenterClients",
            "mgn:GetLaunchConfiguration",
            "mgn:GetReplicationConfiguration",
            "mgn:ListApplications",
            "mgn:ListSourceServerpermissions",
            "mgn:ListTemplatepermissions",
            "mgn:ListWaves",
            "mobileanalytics:Get*",
            "mobiletargeting:Get*",
            "mobiletargeting:List*",
            "monitron:GetProject",
            "monitron:GetProjectAdminUser",
            "monitron:ListProjects",
            "monitron:ListTagsForResource",
            "mq:Describe*",
            "mq:List*",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:DescribeRuleGroupMetadata",
            "network-firewall:DescribeTLSInspectionConfiguration",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "network-firewall:ListTLSInspectionConfigurations",
            "network-firewall:ListTagsForResource",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:GetConnectAttachment",
            "networkmanager:GetConnectPeer",
            "networkmanager:GetConnectPeerAssociations",
            "networkmanager:GetConnections",
            "networkmanager:GetCoreNetwork",
            "networkmanager:GetCoreNetworkChangeEvents",
            "networkmanager:GetCoreNetworkChangeSet",
            "networkmanager:GetCoreNetworkPolicy",
            "networkmanager:GetCustomerGatewayAssociations",
            "networkmanager:GetDevices",
            "networkmanager:GetLinkAssociations",
            "networkmanager:GetLinks",
            "networkmanager:GetNetworkResourceCounts",
            "networkmanager:GetNetworkResourceRelationships",
            "networkmanager:GetNetworkResources",
            "networkmanager:GetNetworkRoutes",
            "networkmanager:GetNetworkTelemetry",
            "networkmanager:GetResourcePolicy",
            "networkmanager:GetRouteAnalysis",
            "networkmanager:GetSiteToSiteVpnAttachment",
            "networkmanager:GetSites",
            "networkmanager:GetTransitGatewayConnectPeerAssociations",
            "networkmanager:GetTransitGatewayPeering",
            "networkmanager:GetTransitGatewayRegistrations",
            "networkmanager:GetTransitGatewayRouteTableAttachment",
            "networkmanager:GetVpcAttachment",
            "networkmanager:ListAttachments",
            "networkmanager:ListConnectPeers",
            "networkmanager:ListCoreNetworkPolicyVersions",
            "networkmanager:ListCoreNetworks",
            "networkmanager:ListPeerings",
            "networkmanager:ListTagsForResource",
            "nimble:GetEula",
            "nimble:GetFeatureMap",
            "nimble:GetLaunchProfile",
            "nimble:GetLaunchProfileDetails",
            "nimble:GetLaunchProfileInitialization",
            "nimble:GetLaunchProfileMember",
            "nimble:GetStreamingImage",
            "nimble:GetStreamingSession",
            "nimble:GetStudio",
            "nimble:GetStudioComponent",
            "nimble:GetStudioMember",
            "nimble:ListEulaAcceptances",
            "nimble:ListEulas",
            "nimble:ListLaunchProfileMembers",
            "nimble:ListLaunchProfiles",
            "nimble:ListStreamingImages",
            "nimble:ListStreamingSessions",
            "nimble:ListStudioComponents",
            "nimble:ListStudioMembers",
            "nimble:ListStudios",
            "nimble:ListTagsForResource",
            "notifications-contacts:GetEmailContact",
            "notifications-contacts:ListEmailContacts",
            "notifications-contacts:ListTagsForResource",
            "notifications:GetEventRule",
            "notifications:GetFeatureOptInStatus",
            "notifications:GetManagedNotificationChildEvent",
            "notifications:GetManagedNotificationConfiguration",
            "notifications:GetManagedNotificationEvent",
            "notifications:GetNotificationConfiguration",
            "notifications:GetNotificationEvent",
            "notifications:GetNotificationsAccessForOrganization",
            "notifications:List*",
            "oam:GetLink",
            "oam:GetSink",
            "oam:GetSinkPolicy",
            "oam:ListAttachedLinks",
            "oam:ListLinks",
            "oam:ListSinks",
            "observabilityadmin:GetTelemetryEvaluationStatus",
            "observabilityadmin:GetTelemetryEvaluationStatusForOrganization",
            "observabilityadmin:ListResourceTelemetry",
            "observabilityadmin:ListResourceTelemetryForOrganization",
            "omics:Get*",
            "omics:List*",
            "one:GetDeviceConfigurationTemplate",
            "one:GetDeviceInstance",
            "one:GetDeviceInstanceConfiguration",
            "one:GetSite",
            "one:GetSiteAddress",
            "one:ListDeviceConfigurationTemplates",
            "one:ListDeviceInstances",
            "one:ListSites",
            "one:ListUsers",
            "opsworks-cm:Describe*",
            "opsworks-cm:List*",
            "opsworks:Describe*",
            "opsworks:Get*",
            "organizations:Describe*",
            "organizations:List*",
            "osis:GetPipeline",
            "osis:GetPipelineBlueprint",
            "osis:GetPipelineChangeProgress",
            "osis:ListPipelineBlueprints",
            "osis:ListPipelines",
            "osis:ListTagsForResource",
            "outposts:Get*",
            "outposts:List*",
            "payment-cryptography:GetAlias",
            "payment-cryptography:GetKey",
            "payment-cryptography:GetPublicKeyCertificate",
            "payment-cryptography:ListAliases",
            "payment-cryptography:ListKeys",
            "payment-cryptography:ListTagsForResource",
            "payments:GetPaymentInstrument",
            "payments:GetPaymentStatus",
            "payments:ListPaymentInstruments",
            "payments:ListPaymentPreferences",
            "payments:ListPaymentProgramOptions",
            "payments:ListPaymentProgramStatus",
            "payments:ListTagsForResource",
            "pca-connector-ad:GetConnector",
            "pca-connector-ad:GetDirectoryRegistration",
            "pca-connector-ad:GetServicePrincipalName",
            "pca-connector-ad:GetTemplate",
            "pca-connector-ad:GetTemplateGroupAccessControlEntry",
            "pca-connector-ad:ListConnectors",
            "pca-connector-ad:ListDirectoryRegistrations",
            "pca-connector-ad:ListServicePrincipalNames",
            "pca-connector-ad:ListTagsForResource",
            "pca-connector-ad:ListTemplateGroupAccessControlEntries",
            "pca-connector-ad:ListTemplates",
            "pca-connector-scep:GetChallengeMetadata",
            "pca-connector-scep:GetConnector",
            "pca-connector-scep:ListChallengeMetadata",
            "pca-connector-scep:ListConnectors",
            "pca-connector-scep:ListTagsForResource",
            "pcs:GetCluster",
            "pcs:GetComputeNodeGroup",
            "pcs:GetQueue",
            "pcs:ListClusters",
            "pcs:ListComputeNodeGroups",
            "pcs:ListQueues",
            "pcs:ListTagsForResource",
            "personalize:Describe*",
            "personalize:Get*",
            "personalize:List*",
            "pi:DescribeDimensionKeys",
            "pi:GetDimensionKeyDetails",
            "pi:GetResourceMetadata",
            "pi:GetResourceMetrics",
            "pi:ListAvailableResourceDimensions",
            "pi:ListAvailableResourceMetrics",
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource",
            "polly:Describe*",
            "polly:Get*",
            "polly:List*",
            "polly:SynthesizeSpeech",
            "pricing:DescribeServices",
            "pricing:GetAttributeValues",
            "pricing:GetPriceListFileUrl",
            "pricing:GetProducts",
            "pricing:ListPriceLists",
            "proton:GetDeployment",
            "proton:GetEnvironment",
            "proton:GetEnvironmentTemplate",
            "proton:GetEnvironmentTemplateVersion",
            "proton:GetService",
            "proton:GetServiceInstance",
            "proton:GetServiceTemplate",
            "proton:GetServiceTemplateVersion",
            "proton:ListDeployments",
            "proton:ListEnvironmentAccountConnections",
            "proton:ListEnvironmentTemplates",
            "proton:ListEnvironments",
            "proton:ListServiceInstances",
            "proton:ListServiceTemplates",
            "proton:ListServices",
            "proton:ListTagsForResource",
            "purchase-orders:GetPurchaseOrder",
            "purchase-orders:ListPurchaseOrderInvoices",
            "purchase-orders:ListPurchaseOrders",
            "purchase-orders:ViewPurchaseOrders",
            "qbusiness:GetApplication",
            "qbusiness:GetChatControlsConfiguration",
            "qbusiness:GetDataSource",
            "qbusiness:GetGroup",
            "qbusiness:GetIndex",
            "qbusiness:GetPlugin",
            "qbusiness:GetRetriever",
            "qbusiness:GetUser",
            "qbusiness:GetWebExperience",
            "qbusiness:ListApplications",
            "qbusiness:ListDataSourceSyncJobs",
            "qbusiness:ListDataSources",
            "qbusiness:ListGroups",
            "qbusiness:ListIndices",
            "qbusiness:ListPlugins",
            "qbusiness:ListRetrievers",
            "qbusiness:ListSubscriptions",
            "qbusiness:ListTagsForResource",
            "qbusiness:ListWebExperiences",
            "qldb:DescribeJournalKinesisStream",
            "qldb:DescribeJournalS3Export",
            "qldb:DescribeLedger",
            "qldb:GetBlock",
            "qldb:GetDigest",
            "qldb:GetRevision",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:ListLedgers",
            "qldb:ListTagsForResource",
            "ram:Get*",
            "ram:List*",
            "rbin:GetRule",
            "rbin:ListRules",
            "rbin:ListTagsForResource",
            "rds:Describe*",
            "rds:Download*",
            "rds:List*",
            "redshift-serverless:GetCustomDomainAssociation",
            "redshift-serverless:GetEndpointAccess",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetRecoveryPoint",
            "redshift-serverless:GetResourcePolicy",
            "redshift-serverless:GetScheduledAction",
            "redshift-serverless:GetSnapshot",
            "redshift-serverless:GetTableRestoreStatus",
            "redshift-serverless:GetUsageLimit",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:ListCustomDomainAssociations",
            "redshift-serverless:ListEndpointAccess",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListRecoveryPoints",
            "redshift-serverless:ListScheduledpermissions",
            "redshift-serverless:ListSnapshotCopyConfigurations",
            "redshift-serverless:ListSnapshots",
            "redshift-serverless:ListTableRestoreStatus",
            "redshift-serverless:ListTagsForResource",
            "redshift-serverless:ListUsageLimits",
            "redshift-serverless:ListWorkgroups",
            "redshift:Describe*",
            "redshift:GetReservedNodeExchangeOfferings",
            "redshift:ListRecommendations",
            "redshift:View*",
            "refactor-spaces:GetApplication",
            "refactor-spaces:GetEnvironment",
            "refactor-spaces:GetResourcePolicy",
            "refactor-spaces:GetRoute",
            "refactor-spaces:GetService",
            "refactor-spaces:ListApplications",
            "refactor-spaces:ListEnvironmentVpcs",
            "refactor-spaces:ListEnvironments",
            "refactor-spaces:ListRoutes",
            "refactor-spaces:ListServices",
            "refactor-spaces:ListTagsForResource",
            "rekognition:CompareFaces",
            "rekognition:DescribeDataset",
            "rekognition:DescribeProjectVersions",
            "rekognition:DescribeProjects",
            "rekognition:DescribeStreamProcessor",
            "rekognition:Detect*",
            "rekognition:GetCelebrityInfo",
            "rekognition:GetCelebrityRecognition",
            "rekognition:GetContentModeration",
            "rekognition:GetFaceDetection",
            "rekognition:GetFaceSearch",
            "rekognition:GetLabelDetection",
            "rekognition:GetPersonTracking",
            "rekognition:GetSegmentDetection",
            "rekognition:GetTextDetection",
            "rekognition:List*",
            "rekognition:RecognizeCelebrities",
            "rekognition:Search*",
            "resiliencehub:DescribeApp",
            "resiliencehub:DescribeAppAssessment",
            "resiliencehub:DescribeAppVersion",
            "resiliencehub:DescribeAppVersionAppComponent",
            "resiliencehub:DescribeAppVersionResource",
            "resiliencehub:DescribeAppVersionResourcesResolutionStatus",
            "resiliencehub:DescribeAppVersionTemplate",
            "resiliencehub:DescribeDraftAppVersionResourcesImportStatus",
            "resiliencehub:DescribeMetricsExport",
            "resiliencehub:DescribeResiliencyPolicy",
            "resiliencehub:DescribeResourceGroupingRecommendationTask",
            "resiliencehub:ListAlarmRecommendations",
            "resiliencehub:ListAppAssessmentComplianceDrifts",
            "resiliencehub:ListAppAssessmentResourceDrifts",
            "resiliencehub:ListAppAssessments",
            "resiliencehub:ListAppComponentCompliances",
            "resiliencehub:ListAppComponentRecommendations",
            "resiliencehub:ListAppInputSources",
            "resiliencehub:ListAppVersionAppComponents",
            "resiliencehub:ListAppVersionResourceMappings",
            "resiliencehub:ListAppVersionResources",
            "resiliencehub:ListAppVersions",
            "resiliencehub:ListApps",
            "resiliencehub:ListMetrics",
            "resiliencehub:ListRecommendationTemplates",
            "resiliencehub:ListResiliencyPolicies",
            "resiliencehub:ListResourceGroupingRecommendations",
            "resiliencehub:ListSopRecommendations",
            "resiliencehub:ListSuggestedResiliencyPolicies",
            "resiliencehub:ListTagsForResource",
            "resiliencehub:ListTestRecommendations",
            "resiliencehub:ListUnsupportedAppVersionResources",
            "resource-explorer-2:BatchGetView",
            "resource-explorer-2:GetDefaultView",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:GetView",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListSupportedResourceTypes",
            "resource-explorer-2:ListTagsForResource",
            "resource-explorer-2:ListViews",
            "resource-explorer-2:Search",
            "resource-groups:Get*",
            "resource-groups:List*",
            "resource-groups:Search*",
            "robomaker:BatchDescribe*",
            "robomaker:Describe*",
            "robomaker:Get*",
            "robomaker:List*",
            "route53-recovery-cluster:Get*",
            "route53-recovery-cluster:ListRoutingControls",
            "route53-recovery-control-config:Describe*",
            "route53-recovery-control-config:GetResourcePolicy",
            "route53-recovery-control-config:List*",
            "route53-recovery-readiness:Get*",
            "route53-recovery-readiness:List*",
            "route53:Get*",
            "route53:List*",
            "route53:Test*",
            "route53domains:Check*",
            "route53domains:Get*",
            "route53domains:List*",
            "route53domains:View*",
            "route53profiles:GetProfile",
            "route53profiles:GetProfileAssociation",
            "route53profiles:GetProfileResourceAssociation",
            "route53profiles:ListProfileAssociations",
            "route53profiles:ListProfileResourceAssociations",
            "route53profiles:ListProfiles",
            "route53profiles:ListTagsForResource",
            "route53resolver:Get*",
            "route53resolver:List*",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "s3-object-lambda:GetObject",
            "s3-object-lambda:GetObjectAcl",
            "s3-object-lambda:GetObjectLegalHold",
            "s3-object-lambda:GetObjectRetention",
            "s3-object-lambda:GetObjectTagging",
            "s3-object-lambda:GetObjectVersion",
            "s3-object-lambda:GetObjectVersionAcl",
            "s3-object-lambda:GetObjectVersionTagging",
            "s3-object-lambda:ListBucket",
            "s3-object-lambda:ListBucketMultipartUploads",
            "s3-object-lambda:ListBucketVersions",
            "s3-object-lambda:ListMultipartUploadParts",
            "s3-outposts:GetAccessPoint",
            "s3-outposts:GetAccessPointPolicy",
            "s3-outposts:GetBucket",
            "s3-outposts:GetBucketPolicy",
            "s3-outposts:GetBucketTagging",
            "s3-outposts:GetBucketVersioning",
            "s3-outposts:GetLifecycleConfiguration",
            "s3-outposts:GetObject",
            "s3-outposts:GetObjectTagging",
            "s3-outposts:GetObjectVersion",
            "s3-outposts:GetObjectVersionForReplication",
            "s3-outposts:GetObjectVersionTagging",
            "s3-outposts:GetReplicationConfiguration",
            "s3-outposts:ListAccessPoints",
            "s3-outposts:ListBucket",
            "s3-outposts:ListBucketMultipartUploads",
            "s3-outposts:ListBucketVersions",
            "s3-outposts:ListEndpoints",
            "s3-outposts:ListMultipartUploadParts",
            "s3-outposts:ListOutpostsWithS3",
            "s3-outposts:ListRegionalBuckets",
            "s3-outposts:ListSharedEndpoints",
            "s3:DescribeJob",
            "s3:Get*",
            "s3:List*",
            "sagemaker-groundtruth-synthetic:GetAccountDetails",
            "sagemaker-groundtruth-synthetic:GetBatch",
            "sagemaker-groundtruth-synthetic:GetProject",
            "sagemaker-groundtruth-synthetic:ListBatchDataTransfers",
            "sagemaker-groundtruth-synthetic:ListBatchSummaries",
            "sagemaker-groundtruth-synthetic:ListProjectDataTransfers",
            "sagemaker-groundtruth-synthetic:ListProjectSummaries",
            "sagemaker:Describe*",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:List*",
            "sagemaker:Search",
            "savingsplans:DescribeSavingsPlanRates",
            "savingsplans:DescribeSavingsPlans",
            "savingsplans:DescribeSavingsPlansOfferingRates",
            "savingsplans:DescribeSavingsPlansOfferings",
            "savingsplans:ListTagsForResource",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListScheduleGroups",
            "scheduler:ListSchedules",
            "scheduler:ListTagsForResource",
            "schemas:Describe*",
            "schemas:Get*",
            "schemas:List*",
            "schemas:Search*",
            "sdb:Get*",
            "sdb:List*",
            "sdb:Select*",
            "secretsmanager:Describe*",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:List*",
            "securityhub:BatchGetAutomationRules",
            "securityhub:BatchGetConfigurationPolicyAssociations",
            "securityhub:BatchGetControlEvaluations",
            "securityhub:BatchGetSecurityControls",
            "securityhub:BatchGetStandardsControlAssociations",
            "securityhub:Describe*",
            "securityhub:Get*",
            "securityhub:List*",
            "securitylake:GetDataLakeExceptionSubscription",
            "securitylake:GetDataLakeOrganizationConfiguration",
            "securitylake:GetDataLakeSources",
            "securitylake:GetSubscriber",
            "securitylake:ListDataLakeExceptions",
            "securitylake:ListDataLakes",
            "securitylake:ListLogSources",
            "securitylake:ListSubscribers",
            "securitylake:ListTagsForResource",
            "serverlessrepo:Get*",
            "serverlessrepo:List*",
            "serverlessrepo:SearchApplications",
            "servicecatalog:Describe*",
            "servicecatalog:GetApplication",
            "servicecatalog:GetAttributeGroup",
            "servicecatalog:List*",
            "servicecatalog:Scan*",
            "servicecatalog:Search*",
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision",
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicequotas:GetAWSDefaultServiceQuota",
            "servicequotas:GetAssociationForServiceQuotaTemplate",
            "servicequotas:GetRequestedServiceQuotaChange",
            "servicequotas:GetServiceQuota",
            "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
            "servicequotas:ListAWSDefaultServiceQuotas",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
            "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
            "servicequotas:ListServiceQuotas",
            "servicequotas:ListServices",
            "ses:BatchGetMetricData",
            "ses:Describe*",
            "ses:Get*",
            "ses:List*",
            "shield:Describe*",
            "shield:Get*",
            "shield:List*",
            "signer:DescribeSigningJob",
            "signer:GetSigningPlatform",
            "signer:GetSigningProfile",
            "signer:ListProfilePermissions",
            "signer:ListSigningJobs",
            "signer:ListSigningPlatforms",
            "signer:ListSigningProfiles",
            "signer:ListTagsForResource",
            "signin:ListTrustedIdentityPropagationApplicationsForConsole",
            "sms-voice:DescribeAccountAttributes",
            "sms-voice:DescribeAccountLimits",
            "sms-voice:DescribeConfigurationSets",
            "sms-voice:DescribeKeywords",
            "sms-voice:DescribeOptOutLists",
            "sms-voice:DescribeOptedOutNumbers",
            "sms-voice:DescribePhoneNumbers",
            "sms-voice:DescribePools",
            "sms-voice:DescribeSenderIds",
            "sms-voice:DescribeSpendLimits",
            "sms-voice:ListPoolOriginationIdentities",
            "sms-voice:ListTagsForResource",
            "snowball:Describe*",
            "snowball:Get*",
            "snowball:List*",
            "sns:Check*",
            "sns:Get*",
            "sns:List*",
            "sqs:Get*",
            "sqs:List*",
            "sqs:Receive*",
            "ssm-contacts:DescribeEngagement",
            "ssm-contacts:DescribePage",
            "ssm-contacts:GetContact",
            "ssm-contacts:GetContactChannel",
            "ssm-contacts:ListContactChannels",
            "ssm-contacts:ListContacts",
            "ssm-contacts:ListEngagements",
            "ssm-contacts:ListPageReceipts",
            "ssm-contacts:ListPagesByContact",
            "ssm-contacts:ListPagesByEngagement",
            "ssm-incidents:GetIncidentRecord",
            "ssm-incidents:GetReplicationSet",
            "ssm-incidents:GetResourcePolicies",
            "ssm-incidents:GetResponsePlan",
            "ssm-incidents:GetTimelineEvent",
            "ssm-incidents:ListIncidentRecords",
            "ssm-incidents:ListRelatedItems",
            "ssm-incidents:ListReplicationSets",
            "ssm-incidents:ListResponsePlans",
            "ssm-incidents:ListTagsForResource",
            "ssm-incidents:ListTimelineEvents",
            "ssm-quicksetup:GetConfiguration",
            "ssm-quicksetup:GetConfigurationManager",
            "ssm-quicksetup:GetServiceSettings",
            "ssm-quicksetup:ListConfigurationManagers",
            "ssm-quicksetup:ListConfigurations",
            "ssm-quicksetup:ListQuickSetupTypes",
            "ssm-quicksetup:ListTagsForResource",
            "ssm-sap:GetApplication",
            "ssm-sap:GetComponent",
            "ssm-sap:GetDatabase",
            "ssm-sap:GetOperation",
            "ssm-sap:GetResourcePermission",
            "ssm-sap:ListApplications",
            "ssm-sap:ListComponents",
            "ssm-sap:ListDatabases",
            "ssm-sap:ListOperationEvents",
            "ssm-sap:ListOperations",
            "ssm-sap:ListTagsForResource",
            "ssm:Describe*",
            "ssm:Get*",
            "ssm:List*",
            "sso-directory:Describe*",
            "sso-directory:List*",
            "sso-directory:Search*",
            "sso:Describe*",
            "sso:Get*",
            "sso:List*",
            "sso:Search*",
            "states:Describe*",
            "states:GetExecutionHistory",
            "states:List*",
            "states:ValidateStateMachineDefinition",
            "storagegateway:Describe*",
            "storagegateway:List*",
            "sts:GetAccessKeyInfo",
            "sts:GetCallerIdentity",
            "sts:GetSessionToken",
            "support:DescribeAttachment",
            "support:DescribeCaseAttributes",
            "support:DescribeCases",
            "support:DescribeCommunication",
            "support:DescribeCommunications",
            "support:DescribeCreateCaseOptions",
            "support:DescribeIssueTypes",
            "support:DescribeServices",
            "support:DescribeSeverityLevels",
            "support:DescribeSupportLevel",
            "support:DescribeSupportedLanguages",
            "support:DescribeTrustedAdvisorCheckRefreshStatuses",
            "support:DescribeTrustedAdvisorCheckResult",
            "support:DescribeTrustedAdvisorCheckSummaries",
            "support:DescribeTrustedAdvisorChecks",
            "support:SearchForCases",
            "supportplans:GetSupportPlan",
            "supportplans:GetSupportPlanUpdateStatus",
            "supportplans:ListSupportPlanModifiers",
            "sustainability:GetCarbonFootprintSummary",
            "swf:Count*",
            "swf:Describe*",
            "swf:Get*",
            "swf:List*",
            "synthetics:Describe*",
            "synthetics:Get*",
            "synthetics:List*",
            "tag:DescribeReportCreation",
            "tag:Get*",
            "tax:GetExemptions",
            "tax:GetTaxInheritance",
            "tax:GetTaxInterview",
            "tax:GetTaxRegistration",
            "tax:GetTaxRegistrationDocument",
            "tax:ListTaxRegistrations",
            "timestream:DescribeBatchLoadTask",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:ListBatchLoadTasks",
            "timestream:ListDatabases",
            "timestream:ListMeasures",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "tnb:GetSolFunctionInstance",
            "tnb:GetSolFunctionPackage",
            "tnb:GetSolFunctionPackageContent",
            "tnb:GetSolFunctionPackageDescriptor",
            "tnb:GetSolNetworkInstance",
            "tnb:GetSolNetworkOperation",
            "tnb:GetSolNetworkPackage",
            "tnb:GetSolNetworkPackageContent",
            "tnb:GetSolNetworkPackageDescriptor",
            "tnb:ListSolFunctionInstances",
            "tnb:ListSolFunctionPackages",
            "tnb:ListSolNetworkInstances",
            "tnb:ListSolNetworkOperations",
            "tnb:ListSolNetworkPackages",
            "tnb:ListTagsForResource",
            "transcribe:Get*",
            "transcribe:List*",
            "transfer:Describe*",
            "transfer:List*",
            "transfer:TestIdentityProvider",
            "translate:DescribeTextTranslationJob",
            "translate:GetParallelData",
            "translate:GetTerminology",
            "translate:ListParallelData",
            "translate:ListTerminologies",
            "translate:ListTextTranslationJobs",
            "trustedadvisor:Describe*",
            "trustedadvisor:GetOrganizationRecommendation",
            "trustedadvisor:GetRecommendation",
            "trustedadvisor:ListChecks",
            "trustedadvisor:ListOrganizationRecommendationAccounts",
            "trustedadvisor:ListOrganizationRecommendationResources",
            "trustedadvisor:ListOrganizationRecommendations",
            "trustedadvisor:ListRecommendationResources",
            "trustedadvisor:ListRecommendations",
            "user-subscriptions:ListApplicationClaims",
            "user-subscriptions:ListClaims",
            "user-subscriptions:ListUserSubscriptions",
            "verifiedpermissions:GetIdentitySource",
            "verifiedpermissions:GetPolicy",
            "verifiedpermissions:GetPolicyStore",
            "verifiedpermissions:GetPolicyTemplate",
            "verifiedpermissions:GetSchema",
            "verifiedpermissions:IsAuthorized",
            "verifiedpermissions:IsAuthorizedWithToken",
            "verifiedpermissions:ListIdentitySources",
            "verifiedpermissions:ListPolicies",
            "verifiedpermissions:ListPolicyStores",
            "verifiedpermissions:ListPolicyTemplates",
            "vpc-lattice:GetAccessLogSubscription",
            "vpc-lattice:GetAuthPolicy",
            "vpc-lattice:GetListener",
            "vpc-lattice:GetResourcePolicy",
            "vpc-lattice:GetRule",
            "vpc-lattice:GetService",
            "vpc-lattice:GetServiceNetwork",
            "vpc-lattice:GetServiceNetworkServiceAssociation",
            "vpc-lattice:GetServiceNetworkVpcAssociation",
            "vpc-lattice:GetTargetGroup",
            "vpc-lattice:ListAccessLogSubscriptions",
            "vpc-lattice:ListListeners",
            "vpc-lattice:ListRules",
            "vpc-lattice:ListServiceNetworkServiceAssociations",
            "vpc-lattice:ListServiceNetworkVpcAssociations",
            "vpc-lattice:ListServiceNetworks",
            "vpc-lattice:ListServices",
            "vpc-lattice:ListTagsForResource",
            "vpc-lattice:ListTargetGroups",
            "vpc-lattice:ListTargets",
            "waf-regional:Get*",
            "waf-regional:List*",
            "waf:Get*",
            "waf:List*",
            "wafv2:CheckCapacity",
            "wafv2:Describe*",
            "wafv2:Get*",
            "wafv2:List*",
            "wellarchitected:ExportLens",
            "wellarchitected:GetAnswer",
            "wellarchitected:GetConsolidatedReport",
            "wellarchitected:GetLens",
            "wellarchitected:GetLensReview",
            "wellarchitected:GetLensReviewReport",
            "wellarchitected:GetLensVersionDifference",
            "wellarchitected:GetMilestone",
            "wellarchitected:GetProfile",
            "wellarchitected:GetProfileTemplate",
            "wellarchitected:GetReviewTemplate",
            "wellarchitected:GetReviewTemplateAnswer",
            "wellarchitected:GetReviewTemplateLensReview",
            "wellarchitected:GetWorkload",
            "wellarchitected:List*",
            "workdocs:CheckAlias",
            "workdocs:Describe*",
            "workdocs:Get*",
            "workmail:Describe*",
            "workmail:Get*",
            "workmail:List*",
            "workmail:Search*",
            "workspaces-web:GetBrowserSettings",
            "workspaces-web:GetIdentityProvider",
            "workspaces-web:GetNetworkSettings",
            "workspaces-web:GetPortal",
            "workspaces-web:GetPortalServiceProviderMetadata",
            "workspaces-web:GetTrustStore",
            "workspaces-web:GetUserAccessLoggingSettings",
            "workspaces-web:GetUserSettings",
            "workspaces-web:ListBrowserSettings",
            "workspaces-web:ListIdentityProviders",
            "workspaces-web:ListNetworkSettings",
            "workspaces-web:ListPortals",
            "workspaces-web:ListTagsForResource",
            "workspaces-web:ListTrustStores",
            "workspaces-web:ListUserAccessLoggingSettings",
            "workspaces-web:ListUserSettings",
            "workspaces:Describe*",
            "xray:BatchGet*",
            "xray:Get*"
        ]
    },
    "AWSCloudFormationReadOnlyAccess": {
        "permissions": [
            "cloudformation:Describe*",
            "cloudformation:Detect*",
            "cloudformation:EstimateTemplateCost",
            "cloudformation:Get*",
            "cloudformation:List*",
            "cloudformation:ValidateTemplate"
        ]
    },
    "CloudFrontFullAccess": {
        "permissions": [
            "acm:ListCertificates",
            "cloudfront-keyvaluestore:*",
            "cloudfront:*",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:ListRoles",
            "iam:ListServerCertificates",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "s3:ListAllMyBuckets",
            "waf:GetWebACL",
            "waf:ListWebACLs",
            "wafv2:GetWebACL",
            "wafv2:ListWebACLs"
        ]
    },
    "AWSCloudHSMFullAccess": {
        "permissions": [
            "cloudhsm:*"
        ]
    },
    "AWSCloudHSMReadOnlyAccess": {
        "permissions": [
            "cloudhsm:Describe*",
            "cloudhsm:Get*",
            "cloudhsm:List*"
        ]
    },
    "ResourceGroupsandTagEditorFullAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "resource-groups:*",
            "tag:TagResources",
            "tag:UntagResources",
            "tag:getResources",
            "tag:getTagKeys",
            "tag:getTagValues"
        ]
    },
    "ResourceGroupsandTagEditorReadOnlyAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "resource-groups:Get*",
            "resource-groups:List*",
            "resource-groups:Search*",
            "tag:getResources",
            "tag:getTagKeys",
            "tag:getTagValues"
        ]
    },
    "CloudFrontReadOnlyAccess": {
        "permissions": [
            "acm:ListCertificates",
            "cloudfront-keyvaluestore:Describe*",
            "cloudfront-keyvaluestore:Get*",
            "cloudfront-keyvaluestore:List*",
            "cloudfront:Describe*",
            "cloudfront:Get*",
            "cloudfront:List*",
            "iam:ListServerCertificates",
            "route53:List*",
            "waf:GetWebACL",
            "waf:ListWebACLs",
            "wafv2:GetWebACL",
            "wafv2:ListWebACLs"
        ]
    },
    "CloudSearchFullAccess": {
        "permissions": [
            "cloudsearch:*"
        ]
    },
    "CloudSearchReadOnlyAccess": {
        "permissions": [
            "cloudsearch:Describe*",
            "cloudsearch:List*"
        ]
    },
    "CloudWatchFullAccess": {
        "permissions": [
            "autoscaling:Describe*",
            "cloudwatch:*",
            "iam:CreateServiceLinkedRole",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "logs:*",
            "oam:ListAttachedLinks",
            "oam:ListSinks",
            "sns:*"
        ]
    },
    "CloudWatchReadOnlyAccess": {
        "permissions": [
            "application-autoscaling:DescribeScalingPolicies",
            "application-signals:BatchGet*",
            "application-signals:Get*",
            "application-signals:List*",
            "autoscaling:Describe*",
            "cloudwatch:BatchGet*",
            "cloudwatch:Describe*",
            "cloudwatch:GenerateQuery",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "iam:GetRole",
            "logs:Describe*",
            "logs:FilterLogEvents",
            "logs:Get*",
            "logs:List*",
            "logs:StartLiveTail",
            "logs:StartQuery",
            "logs:StopLiveTail",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "oam:ListAttachedLinks",
            "oam:ListSinks",
            "rum:BatchGet*",
            "rum:Get*",
            "rum:List*",
            "sns:Get*",
            "sns:List*",
            "synthetics:Describe*",
            "synthetics:Get*",
            "synthetics:List*",
            "xray:BatchGet*",
            "xray:CancelTraceRetrieval",
            "xray:Get*",
            "xray:List*",
            "xray:StartTraceRetrieval"
        ]
    },
    "CloudWatchLogsFullAccess": {
        "permissions": [
            "cloudwatch:GenerateQuery",
            "logs:*"
        ]
    },
    "CloudWatchLogsReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GenerateQuery",
            "logs:Describe*",
            "logs:FilterLogEvents",
            "logs:Get*",
            "logs:List*",
            "logs:StartLiveTail",
            "logs:StartQuery",
            "logs:StopLiveTail",
            "logs:StopQuery",
            "logs:TestMetricFilter"
        ]
    },
    "AWSDirectConnectFullAccess": {
        "permissions": [
            "directconnect:*",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpnGateways"
        ]
    },
    "AWSDirectConnectReadOnlyAccess": {
        "permissions": [
            "directconnect:Describe*",
            "directconnect:List*",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpnGateways"
        ]
    },
    "AmazonAppStreamFullAccess": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "appstream:*",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "iam:PassRole"
        ]
    },
    "AmazonAppStreamReadOnlyAccess": {
        "permissions": [
            "appstream:Describe*",
            "appstream:Get*",
            "appstream:List*"
        ]
    },
    "AmazonDynamoDBFullAccess": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetInsightRuleReport",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "datapipeline:ActivatePipeline",
            "datapipeline:CreatePipeline",
            "datapipeline:DeletePipeline",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:PutPipelineDefinition",
            "datapipeline:QueryObjects",
            "dax:*",
            "dynamodb:*",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListStreams",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:CreateEventSourceMapping",
            "lambda:CreateFunction",
            "lambda:DeleteEventSourceMapping",
            "lambda:DeleteFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupQuery",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "tag:GetResources"
        ]
    },
    "AmazonDynamoDBReadOnlyAccess": {
        "permissions": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetInsightRuleReport",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:QueryObjects",
            "dax:BatchGetItem",
            "dax:Describe*",
            "dax:GetItem",
            "dax:List*",
            "dax:Query",
            "dax:Scan",
            "dynamodb:BatchGetItem",
            "dynamodb:Describe*",
            "dynamodb:GetAbacStatus",
            "dynamodb:GetItem",
            "dynamodb:GetResourcePolicy",
            "dynamodb:List*",
            "dynamodb:PartiQLSelect",
            "dynamodb:Query",
            "dynamodb:Scan",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:GetRole",
            "iam:ListRoles",
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListStreams",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:GetFunctionConfiguration",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupQuery",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "tag:GetResources"
        ]
    },
    "AmazonDynamoDBFullAccesswithDataPipeline": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "datapipeline:*",
            "dynamodb:*",
            "ec2:CreateTags",
            "ec2:DescribeInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "elasticmapreduce:*",
            "iam:GetRolePolicy",
            "iam:ListRoles",
            "iam:PassRole",
            "lambda:*",
            "s3:DeleteObject",
            "s3:Get*",
            "s3:List*",
            "s3:Put*",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe"
        ]
    },
    "AmazonEC2FullAccess": {
        "permissions": [
            "autoscaling:*",
            "cloudwatch:*",
            "ec2:*",
            "elasticloadbalancing:*",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AmazonEC2ReadOnlyAccess": {
        "permissions": [
            "autoscaling:Describe*",
            "cloudwatch:Describe*",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:Describe*",
            "ec2:GetSecurityGroupsForVpc",
            "elasticloadbalancing:Describe*"
        ]
    },
    "AmazonElastiCacheFullAccess": {
        "permissions": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticache:*",
            "firehose:ListDeliveryStreams",
            "iam:CreateServiceLinkedRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "logs:DescribeLogGroups",
            "outposts:ListOutposts",
            "s3:ListAllMyBuckets",
            "sns:ListTopics"
        ]
    },
    "AmazonElastiCacheReadOnlyAccess": {
        "permissions": [
            "elasticache:Describe*"
        ]
    },
    "AmazonElasticMapReduceFullAccess": {
        "permissions": [
            "cloudformation:CreateStack",
            "cloudformation:DescribeStackEvents",
            "cloudwatch:*",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateRoute",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteRoute",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:RequestSpotInstances",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "elasticmapreduce:*",
            "iam:CreateServiceLinkedRole",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:List*",
            "s3:*",
            "sdb:*"
        ]
    },
    "AmazonElasticMapReduceReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:List*",
            "elasticmapreduce:ViewEventsFromAllClustersInConsole",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sdb:Select"
        ]
    },
    "AmazonGlacierReadOnlyAccess": {
        "permissions": [
            "glacier:DescribeJob",
            "glacier:DescribeVault",
            "glacier:GetDataRetrievalPolicy",
            "glacier:GetJobOutput",
            "glacier:GetVaultAccessPolicy",
            "glacier:GetVaultLock",
            "glacier:GetVaultNotifications",
            "glacier:ListJobs",
            "glacier:ListMultipartUploads",
            "glacier:ListParts",
            "glacier:ListTagsForVault",
            "glacier:ListVaults"
        ]
    },
    "AmazonGlacierFullAccess": {
        "permissions": [
            "glacier:*"
        ]
    },
    "AmazonKinesisFullAccess": {
        "permissions": [
            "kinesis:*"
        ]
    },
    "AmazonKinesisReadOnlyAccess": {
        "permissions": [
            "kinesis:Describe*",
            "kinesis:Get*",
            "kinesis:List*"
        ]
    },
    "AWSMarketplaceRead-only": {
        "permissions": [
            "aws-marketplace:DescribeBuilds",
            "aws-marketplace:DescribePrivateMarketplaceRequests",
            "aws-marketplace:ListAgreementCharges",
            "aws-marketplace:ListBuilds",
            "aws-marketplace:ListPrivateListings",
            "aws-marketplace:ListPrivateMarketplaceRequests",
            "aws-marketplace:ViewSubscriptions",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "sns:GetTopicAttributes",
            "sns:ListTopics"
        ]
    },
    "AWSMarketplaceManageSubscriptions": {
        "permissions": [
            "aws-marketplace:CreatePrivateMarketplaceRequests",
            "aws-marketplace:DescribePrivateMarketplaceRequests",
            "aws-marketplace:ListAgreementCharges",
            "aws-marketplace:ListPrivateListings",
            "aws-marketplace:ListPrivateMarketplaceRequests",
            "aws-marketplace:Subscribe",
            "aws-marketplace:Unsubscribe",
            "aws-marketplace:UpdatePurchaseOrders",
            "aws-marketplace:ViewSubscriptions"
        ]
    },
    "AmazonMobileAnalyticsFullAccess": {
        "permissions": [
            "mobileanalytics:*"
        ]
    },
    "AmazonMobileAnalyticsFinancialReportAccess": {
        "permissions": [
            "mobileanalytics:GetFinancialReports",
            "mobileanalytics:GetReports"
        ]
    },
    "AmazonMobileAnalyticsNon-financialReportAccess": {
        "permissions": [
            "mobileanalytics:GetReports"
        ]
    },
    "AmazonMobileAnalyticsWriteOnlyAccess": {
        "permissions": [
            "mobileanalytics:PutEvents"
        ]
    },
    "IAMFullAccess": {
        "permissions": [
            "iam:*",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListPolicies",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListTargetsForPolicy"
        ]
    },
    "IAMReadOnlyAccess": {
        "permissions": [
            "iam:GenerateCredentialReport",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:Get*",
            "iam:List*",
            "iam:SimulateCustomPolicy",
            "iam:SimulatePrincipalPolicy"
        ]
    },
    "AWSKeyManagementServicePowerUser": {
        "permissions": [
            "iam:ListGroups",
            "iam:ListRoles",
            "iam:ListUsers",
            "kms:CreateAlias",
            "kms:CreateKey",
            "kms:DeleteAlias",
            "kms:Describe*",
            "kms:GenerateRandom",
            "kms:Get*",
            "kms:List*",
            "kms:TagResource",
            "kms:UntagResource"
        ]
    },
    "AmazonWorkMailFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "ds:AuthorizeApplication",
            "ds:CheckAlias",
            "ds:CreateAlias",
            "ds:CreateDirectory",
            "ds:CreateIdentityPoolDirectory",
            "ds:DeleteDirectory",
            "ds:DescribeDirectories",
            "ds:GetDirectoryLimits",
            "ds:ListAuthorizedApplications",
            "ds:UnauthorizeApplication",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteVpc",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:ListFunctions",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:PutRetentionPolicy",
            "route53:ChangeResourceRecordSets",
            "route53:GetHostedZone",
            "route53:ListHostedZones",
            "route53:ListResourceRecordSets",
            "route53domains:CheckDomainAvailability",
            "route53domains:ListDomains",
            "ses:*",
            "workmail:*"
        ]
    },
    "AmazonWorkMailReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "iam:ListRoles",
            "lambda:ListFunctions",
            "logs:DescribeLogGroups",
            "ses:Describe*",
            "ses:Get*",
            "workmail:Describe*",
            "workmail:Get*",
            "workmail:List*",
            "workmail:Search*"
        ]
    },
    "AWSImportExportReadOnlyAccess": {
        "permissions": [
            "importexport:GetStatus",
            "importexport:ListJobs"
        ]
    },
    "AWSImportExportFullAccess": {
        "permissions": [
            "importexport:*"
        ]
    },
    "AWSLambdaExecute": {
        "permissions": [
            "logs:*",
            "s3:GetObject",
            "s3:PutObject"
        ]
    },
    "AWSLambdaInvocation-DynamoDB": {
        "permissions": [
            "dynamodb:DescribeStream",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:ListStreams",
            "lambda:InvokeFunction"
        ]
    },
    "AmazonRedshiftFullAccess": {
        "permissions": [
            "cloudwatch:Describe*",
            "cloudwatch:DisableAlarmpermissions",
            "cloudwatch:EnableAlarmpermissions",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "cloudwatch:PutMetricAlarm",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListStatements",
            "redshift-data:ListTables",
            "redshift-serverless:*",
            "redshift:*",
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets",
            "secretsmanager:TagResource",
            "sns:CreateTopic",
            "sns:Get*",
            "sns:List*",
            "tag:GetResources",
            "tag:GetTagKeys",
            "tag:GetTagValues",
            "tag:TagResources",
            "tag:UntagResources"
        ]
    },
    "AmazonRedshiftReadOnlyAccess": {
        "permissions": [
            "cloudwatch:Describe*",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "redshift:Describe*",
            "redshift:ListRecommendations",
            "redshift:ViewQueriesInConsole",
            "sns:Get*",
            "sns:List*"
        ]
    },
    "AmazonRDSFullAccess": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "devops-guru:GetResourceCollection",
            "devops-guru:ListAnomaliesForInsight",
            "devops-guru:SearchInsights",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTablePermissions",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:GetCoipPoolUsage",
            "iam:CreateServiceLinkedRole",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "outposts:GetOutpostInstanceTypes",
            "pi:*",
            "rds:*",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
        ]
    },
    "AmazonRDSReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "devops-guru:GetResourceCollection",
            "devops-guru:ListAnomaliesForInsight",
            "devops-guru:SearchInsights",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "rds:Describe*",
            "rds:ListTagsForResource"
        ]
    },
    "AmazonRoute53FullAccess": {
        "permissions": [
            "apigateway:GET",
            "cloudfront:ListDistributions",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "ec2:DescribeRegions",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticloadbalancing:DescribeLoadBalancers",
            "route53:*",
            "route53domains:*",
            "s3:GetBucketLocation",
            "s3:GetBucketWebsite",
            "s3:ListBucket",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics"
        ]
    },
    "AmazonRoute53ReadOnlyAccess": {
        "permissions": [
            "route53:Get*",
            "route53:List*",
            "route53:TestDNSAnswer"
        ]
    },
    "AmazonRoute53DomainsFullAccess": {
        "permissions": [
            "route53:CreateHostedZone",
            "route53domains:*"
        ]
    },
    "AmazonRoute53DomainsReadOnlyAccess": {
        "permissions": [
            "route53domains:Get*",
            "route53domains:List*"
        ]
    },
    "AmazonS3FullAccess": {
        "permissions": [
            "s3-object-lambda:*",
            "s3:*"
        ]
    },
    "AmazonS3ReadOnlyAccess": {
        "permissions": [
            "s3-object-lambda:Get*",
            "s3-object-lambda:List*",
            "s3:Describe*",
            "s3:Get*",
            "s3:List*"
        ]
    },
    "SecurityAudit": {
        "permissions": [
            "a4b:ListSkills",
            "access-analyzer:GetAnalyzedResource",
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:GetFinding",
            "access-analyzer:ListAnalyzedResources",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListFindings",
            "access-analyzer:ListTagsForResource",
            "account:GetAlternateContact",
            "account:GetPrimaryEmail",
            "account:GetRegionOptStatus",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:GetPolicy",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags",
            "acm:Describe*",
            "acm:List*",
            "airflow:GetEnvironment",
            "airflow:ListEnvironments",
            "apigateway:GET",
            "appflow:ListFlows",
            "appflow:ListTagsForResource",
            "application-autoscaling:Describe*",
            "appmesh:Describe*",
            "appmesh:List*",
            "apprunner:DescribeAutoScalingConfiguration",
            "apprunner:DescribeCustomDomains",
            "apprunner:DescribeObservabilityConfiguration",
            "apprunner:DescribeService",
            "apprunner:DescribeVpcConnector",
            "apprunner:DescribeVpcIngressConnection",
            "apprunner:ListAutoScalingConfigurations",
            "apprunner:ListConnections",
            "apprunner:ListObservabilityConfigurations",
            "apprunner:ListOperations",
            "apprunner:ListServices",
            "apprunner:ListTagsForResource",
            "apprunner:ListVpcConnectors",
            "apprunner:ListVpcIngressConnections",
            "appsync:GetApiCache",
            "appsync:List*",
            "athena:GetWorkGroup",
            "athena:List*",
            "auditmanager:GetAccountStatus",
            "auditmanager:ListAssessmentControlInsightsByControlDomain",
            "auditmanager:ListAssessmentFrameworkShareRequests",
            "auditmanager:ListAssessmentFrameworks",
            "auditmanager:ListAssessmentReports",
            "auditmanager:ListAssessments",
            "auditmanager:ListControlDomainInsights",
            "auditmanager:ListControlDomainInsightsByAssessment",
            "auditmanager:ListControlInsightsByControlDomain",
            "auditmanager:ListControls",
            "auditmanager:ListNotifications",
            "auditmanager:ListTagsForResource",
            "autoscaling-plans:DescribeScalingPlans",
            "autoscaling:Describe*",
            "backup:DescribeGlobalSettings",
            "backup:DescribeRegionSettings",
            "backup:GetBackupVaultAccessPolicy",
            "backup:GetBackupVaultNotifications",
            "backup:ListBackupVaults",
            "backup:ListTags",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobDefinitions",
            "bedrock:GetCustomModel",
            "bedrock:GetModelInvocationLoggingConfiguration",
            "bedrock:ListCustomModels",
            "bedrock:ListTagsForResource",
            "braket:SearchJobs",
            "braket:SearchQuantumTasks",
            "chime:List*",
            "cleanrooms:BatchGetCollaborationAnalysisTemplate",
            "cleanrooms:BatchGetSchema",
            "cleanrooms:BatchGetSchemaAnalysisRule",
            "cleanrooms:GetAnalysisTemplate",
            "cleanrooms:GetCollaboration",
            "cleanrooms:GetCollaborationAnalysisTemplate",
            "cleanrooms:GetCollaborationConfiguredAudienceModelAssociation",
            "cleanrooms:GetCollaborationIdNamespaceAssociation",
            "cleanrooms:GetCollaborationPrivacyBudgetTemplate",
            "cleanrooms:GetConfiguredAudienceModelAssociation",
            "cleanrooms:GetConfiguredTable",
            "cleanrooms:GetConfiguredTableAnalysisRule",
            "cleanrooms:GetConfiguredTableAssociation",
            "cleanrooms:GetConfiguredTableAssociationAnalysisRule",
            "cleanrooms:GetIdMappingTable",
            "cleanrooms:GetIdNamespaceAssociation",
            "cleanrooms:GetMembership",
            "cleanrooms:GetPrivacyBudgetTemplate",
            "cleanrooms:GetProtectedQuery",
            "cleanrooms:GetSchema",
            "cleanrooms:GetSchemaAnalysisRule",
            "cleanrooms:ListAnalysisTemplates",
            "cleanrooms:ListCollaborationAnalysisTemplates",
            "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
            "cleanrooms:ListCollaborationIdNamespaceAssociations",
            "cleanrooms:ListCollaborationPrivacyBudgetTemplates",
            "cleanrooms:ListCollaborationPrivacyBudgets",
            "cleanrooms:ListCollaborations",
            "cleanrooms:ListConfiguredAudienceModelAssociations",
            "cleanrooms:ListConfiguredTableAssociations",
            "cleanrooms:ListConfiguredTables",
            "cleanrooms:ListIdMappingTables",
            "cleanrooms:ListIdNamespaceAssociations",
            "cleanrooms:ListMembers",
            "cleanrooms:ListMemberships",
            "cleanrooms:ListPrivacyBudgetTemplates",
            "cleanrooms:ListPrivacyBudgets",
            "cleanrooms:ListProtectedQueries",
            "cleanrooms:ListSchemas",
            "cleanrooms:ListTagsForResource",
            "cleanrooms:PreviewPrivacyImpact",
            "cloud9:Describe*",
            "cloud9:ListEnvironments",
            "clouddirectory:ListDirectories",
            "cloudformation:DescribeStack*",
            "cloudformation:GetStackPolicy",
            "cloudformation:GetTemplate",
            "cloudformation:ListStack*",
            "cloudfront:Get*",
            "cloudfront:List*",
            "cloudsearch:DescribeDomainEndpointOptions",
            "cloudsearch:DescribeDomains",
            "cloudsearch:DescribeServiceAccessPolicies",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetInsightSelectors",
            "cloudtrail:GetTrail",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListTags",
            "cloudtrail:ListTrails",
            "cloudtrail:LookupEvents",
            "cloudwatch:Describe*",
            "cloudwatch:GetDashboard",
            "cloudwatch:ListDashboards",
            "cloudwatch:ListTagsForResource",
            "codeartifact:GetDomainPermissionsPolicy",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListRepositories",
            "codebuild:BatchGetProjects",
            "codebuild:GetResourcePolicy",
            "codebuild:ListProjects",
            "codebuild:ListSourceCredentials",
            "codecommit:BatchGetRepositories",
            "codecommit:GetBranch",
            "codecommit:GetObjectIdentifier",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codecommit:List*",
            "codedeploy:Batch*",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codepipeline:GetJobDetails",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineExecution",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelines",
            "codestar:Describe*",
            "codestar:List*",
            "cognito-identity:Describe*",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:ListTagsForResource",
            "cognito-idp:Describe*",
            "cognito-idp:ListDevices",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListResourceServers",
            "cognito-idp:ListTagsForResource",
            "cognito-idp:ListUserImportJobs",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListUsers",
            "cognito-idp:ListUsersInGroup",
            "cognito-sync:Describe*",
            "cognito-sync:List*",
            "comprehend:Describe*",
            "comprehend:List*",
            "comprehendmedical:ListICD10CMInferenceJobs",
            "comprehendmedical:ListPHIDetectionJobs",
            "comprehendmedical:ListRxNormInferenceJobs",
            "comprehendmedical:ListSNOMEDCTInferenceJobs",
            "config:BatchGetAggregateResourceConfig",
            "config:BatchGetResourceConfig",
            "config:Deliver*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:SelectAggregateResourceConfig",
            "config:SelectResourceConfig",
            "connect:ListApprovedOrigins",
            "connect:ListInstanceAttributes",
            "connect:ListInstanceStorageConfigs",
            "connect:ListInstances",
            "connect:ListIntegrationAssociations",
            "connect:ListLambdaFunctions",
            "connect:ListLexBots",
            "connect:ListSecurityKeys",
            "databrew:DescribeDataset",
            "databrew:DescribeProject",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "dataexchange:ListDataSets",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:EvaluateExpression",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:QueryObjects",
            "datapipeline:ValidatePipelineDefinition",
            "datasync:Describe*",
            "datasync:List*",
            "dax:Describe*",
            "dax:ListTags",
            "deepracer:ListModels",
            "detective:GetGraphIngestState",
            "detective:ListGraphs",
            "detective:ListMembers",
            "devicefarm:ListProjects",
            "directconnect:Describe*",
            "discovery:DescribeAgents",
            "discovery:DescribeConfigurations",
            "discovery:DescribeContinuousExports",
            "discovery:DescribeExportConfigurations",
            "discovery:DescribeExportTasks",
            "discovery:DescribeImportTasks",
            "dms:Describe*",
            "dms:ListTagsForResource",
            "docdb-elastic:ListClusters",
            "ds:DescribeDirectories",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeExport",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeKinesisStreamingDestination",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListBackups",
            "dynamodb:ListExports",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListStreams",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:Describe*",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetImageBlockPublicAccessState",
            "ec2:GetManagedPrefixListAssociations",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ec2:GetTransitGatewayAttachmentPropagations",
            "ec2:GetTransitGatewayMulticastDomainAssociations",
            "ec2:GetTransitGatewayPrefixListReferences",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "ecr-public:DescribeImageTags",
            "ecr-public:DescribeImages",
            "ecr-public:DescribeRegistries",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetRegistryCatalogData",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:DescribeImageScanFindings",
            "ecr:DescribeImages",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRegistryPolicy",
            "ecr:GetRegistryScanningConfiguration",
            "ecr:GetRepositoryPolicy",
            "ecr:ListImages",
            "ecr:ListTagsForResource",
            "ecs:Describe*",
            "ecs:List*",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeNodeGroup",
            "eks:ListClusters",
            "eks:ListFargateProfiles",
            "eks:ListNodeGroups",
            "eks:ListTagsForResource",
            "eks:ListUpdates",
            "elastic-inference:DescribeAccelerators",
            "elasticache:Describe*",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:ListTagsForResource",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeAccountPreferences",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticfilesystem:DescribeTags",
            "elasticloadbalancing:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:GetAutoTerminationPolicy",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elastictranscoder:ListPipelines",
            "emr-serverless:GetApplication",
            "emr-serverless:ListApplications",
            "emr-serverless:ListJobRuns",
            "entityresolution:GetIdNamespace",
            "es:Describe*",
            "es:GetCompatibleVersions",
            "es:ListDomainNames",
            "es:ListElasticsearchInstanceTypeDetails",
            "es:ListElasticsearchVersions",
            "es:ListTags",
            "events:Describe*",
            "events:List*",
            "events:TestEventPattern",
            "finspace:ListEnvironments",
            "finspace:ListKxEnvironments",
            "firehose:Describe*",
            "firehose:List*",
            "fms:ListComplianceStatus",
            "fms:ListPolicies",
            "forecast:ListDatasets",
            "frauddetector:GetDetectors",
            "fsx:Describe*",
            "fsx:List*",
            "gamelift:ListBuilds",
            "gamelift:ListFleets",
            "geo:ListMaps",
            "glacier:DescribeVault",
            "glacier:GetDataRetrievalPolicy",
            "glacier:GetVaultAccessPolicy",
            "glacier:GetVaultLock",
            "glacier:ListVaults",
            "globalaccelerator:Describe*",
            "globalaccelerator:List*",
            "glue:GetCrawlers",
            "glue:GetDataCatalogEncryptionSettings",
            "glue:GetDatabases",
            "glue:GetDevEndpoints",
            "glue:GetJobs",
            "glue:GetResourcePolicy",
            "glue:GetSecurityConfiguration",
            "glue:GetSecurityConfigurations",
            "glue:GetTags",
            "grafana:ListWorkspaces",
            "greengrass:List*",
            "guardduty:DescribePublishingDestination",
            "guardduty:Get*",
            "guardduty:List*",
            "health:DescribeAffectedAccountsForOrganization",
            "health:DescribeAffectedEntities",
            "health:DescribeAffectedEntitiesForOrganization",
            "health:DescribeEntityAggregates",
            "health:DescribeEventAggregates",
            "health:DescribeEventDetails",
            "health:DescribeEventDetailsForOrganization",
            "health:DescribeEventTypes",
            "health:DescribeEvents",
            "health:DescribeEventsForOrganization",
            "health:DescribeHealthServiceStatusForOrganization",
            "healthlake:ListFHIRDatastores",
            "honeycode:ListTables",
            "iam:GenerateCredentialReport",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:Get*",
            "iam:List*",
            "iam:SimulateCustomPolicy",
            "iam:SimulatePrincipalPolicy",
            "identitystore:ListGroupMemberships",
            "identitystore:ListGroupMembershipsForMember",
            "identitystore:ListGroups",
            "identitystore:ListUsers",
            "inspector2:BatchGetAccountStatus",
            "inspector2:BatchGetFreeTrialInfo",
            "inspector2:DescribeOrganizationConfiguration",
            "inspector2:GetConfiguration",
            "inspector2:GetDelegatedAdminAccount",
            "inspector2:GetFindingsReportStatus",
            "inspector2:GetMember",
            "inspector2:ListAccountPermissions",
            "inspector2:ListCoverage",
            "inspector2:ListCoverageStatistics",
            "inspector2:ListDelegatedAdminAccounts",
            "inspector2:ListFilters",
            "inspector2:ListFindingAggregations",
            "inspector2:ListFindings",
            "inspector2:ListTagsForResource",
            "inspector2:ListUsageTotals",
            "inspector:Describe*",
            "inspector:Get*",
            "inspector:List*",
            "inspector:Preview*",
            "iot:Describe*",
            "iot:GetPolicy",
            "iot:GetPolicyVersion",
            "iot:List*",
            "iotanalytics:ListChannels",
            "iotevents:ListInputs",
            "iotfleetwise:ListModelManifests",
            "iotsitewise:DescribeGatewayCapabilityConfiguration",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListGateways",
            "iottwinmaker:ListWorkspaces",
            "kafka-cluster:Describe*",
            "kafka:Describe*",
            "kafka:GetBootstrapBrokers",
            "kafka:GetCompatibleKafkaVersions",
            "kafka:List*",
            "kafkaconnect:Describe*",
            "kafkaconnect:List*",
            "kendra:DescribeIndex",
            "kendra:ListDataSources",
            "kendra:ListIndices",
            "kendra:ListTagsForResource",
            "kinesis:DescribeLimits",
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamConsumer",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListShards",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesis:ListTagsForStream",
            "kinesisanalytics:ListApplications",
            "kinesisanalytics:ListTagsForResource",
            "kinesisvideo:DescribeEdgeConfiguration",
            "kinesisvideo:DescribeMappedResourceConfiguration",
            "kinesisvideo:DescribeMediaStorageConfiguration",
            "kinesisvideo:DescribeNotificationConfiguration",
            "kinesisvideo:DescribeSignalingChannel",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:ListSignalingChannels",
            "kinesisvideo:ListStreams",
            "kinesisvideo:ListTagsForResource",
            "kinesisvideo:ListTagsForStream",
            "kms:Describe*",
            "kms:Get*",
            "kms:List*",
            "lambda:GetAccountSettings",
            "lambda:GetFunctionConfiguration",
            "lambda:GetFunctionEventInvokeConfig",
            "lambda:GetLayerVersionPolicy",
            "lambda:GetPolicy",
            "lambda:List*",
            "lex:DescribeBot",
            "lex:DescribeResourcePolicy",
            "lex:ListBots",
            "license-manager:List*",
            "lightsail:GetBuckets",
            "lightsail:GetContainerServices",
            "lightsail:GetDiskSnapshots",
            "lightsail:GetDisks",
            "lightsail:GetInstances",
            "lightsail:GetLoadBalancers",
            "logs:Describe*",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:ListTagsForResource",
            "logs:ListTagsLogGroup",
            "lookoutequipment:ListDatasets",
            "lookoutmetrics:ListAnomalyDetectors",
            "lookoutvision:ListProjects",
            "m2:GetApplication",
            "m2:GetEnvironment",
            "m2:ListApplications",
            "m2:ListEnvironments",
            "m2:ListTagsForResource",
            "machinelearning:DescribeMLModels",
            "macie2:ListFindings",
            "managedblockchain:ListNetworks",
            "mechanicalturk:ListHITs",
            "mediaconnect:Describe*",
            "mediaconnect:List*",
            "medialive:ListChannels",
            "mediapackage-vod:DescribePackagingGroup",
            "mediapackage-vod:ListPackagingGroups",
            "mediapackage:DescribeOriginEndpoint",
            "mediapackage:ListOriginEndpoints",
            "mediastore:GetContainerPolicy",
            "mediastore:GetCorsPolicy",
            "mediastore:ListContainers",
            "memorydb:DescribeClusters",
            "mq:DescribeBroker",
            "mq:DescribeBrokerEngineTypes",
            "mq:DescribeBrokerInstanceOptions",
            "mq:DescribeConfiguration",
            "mq:DescribeConfigurationRevision",
            "mq:DescribeUser",
            "mq:ListBrokers",
            "mq:ListConfigurationRevisions",
            "mq:ListConfigurations",
            "mq:ListTags",
            "mq:ListUsers",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "networkmanager:DescribeGlobalNetworks",
            "nimble:ListStudios",
            "opsworks-cm:DescribeServers",
            "opsworks:DescribeStacks",
            "organizations:Describe*",
            "organizations:List*",
            "pcs:GetCluster",
            "pcs:GetComputeNodeGroup",
            "pcs:GetQueue",
            "pcs:ListClusters",
            "pcs:ListComputeNodeGroups",
            "pcs:ListQueues",
            "pcs:ListTagsForResource",
            "personalize:DescribeDatasetGroup",
            "personalize:ListDatasetGroups",
            "private-networks:ListNetworks",
            "profile:GetDomain",
            "profile:ListDomains",
            "profile:ListIntegrations",
            "qbusiness:ListApplications",
            "qbusiness:ListDataSourceSyncJobs",
            "qbusiness:ListDataSources",
            "qbusiness:ListDocuments",
            "qbusiness:ListGroups",
            "qbusiness:ListIndices",
            "qbusiness:ListPlugins",
            "qbusiness:ListRetrievers",
            "qbusiness:ListSubscriptions",
            "qbusiness:ListTagsForResource",
            "qbusiness:ListWebExperiences",
            "qldb:DescribeJournalS3Export",
            "qldb:DescribeLedger",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:ListLedgers",
            "quicksight:Describe*",
            "quicksight:List*",
            "ram:GetResourceShares",
            "ram:List*",
            "rds:Describe*",
            "rds:DownloadDBLogFilePortion",
            "rds:ListTagsForResource",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:ListTagsForResource",
            "redshift-serverless:ListWorkgroups",
            "redshift:Describe*",
            "rekognition:Describe*",
            "rekognition:List*",
            "resource-groups:ListGroupResources",
            "robomaker:Describe*",
            "robomaker:List*",
            "route53:Get*",
            "route53:List*",
            "route53domains:GetDomainDetail",
            "route53domains:GetOperationDetail",
            "route53domains:ListDomains",
            "route53domains:ListOperations",
            "route53domains:ListTagsForDomain",
            "route53resolver:Get*",
            "route53resolver:List*",
            "s3-outposts:ListEndpoints",
            "s3-outposts:ListOutpostsWithS3",
            "s3-outposts:ListSharedEndpoints",
            "s3:GetAccelerateConfiguration",
            "s3:GetAccessPoint",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetAnalyticsConfiguration",
            "s3:GetBucket*",
            "s3:GetEncryptionConfiguration",
            "s3:GetInventoryConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetMetricsConfiguration",
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetObjectAcl",
            "s3:GetObjectVersionAcl",
            "s3:GetReplicationConfiguration",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets",
            "s3:ListMultiRegionAccessPoints",
            "sagemaker:Describe*",
            "sagemaker:List*",
            "schemas:DescribeCodeBinding",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemaVersions",
            "schemas:ListSchemas",
            "schemas:ListTagsForResource",
            "sdb:DomainMetadata",
            "sdb:ListDomains",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:ListSecrets",
            "securityhub:BatchGetAutomationRules",
            "securityhub:BatchGetConfigurationPolicyAssociations",
            "securityhub:BatchGetControlEvaluations",
            "securityhub:BatchGetSecurityControls",
            "securityhub:BatchGetStandardsControlAssociations",
            "securityhub:Describe*",
            "securityhub:Get*",
            "securityhub:List*",
            "serverlessrepo:GetApplicationPolicy",
            "serverlessrepo:List*",
            "servicequotas:GetAWSDefaultServiceQuota",
            "servicequotas:GetAssociationForServiceQuotaTemplate",
            "servicequotas:GetRequestedServiceQuotaChange",
            "servicequotas:GetServiceQuota",
            "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
            "servicequotas:ListAWSDefaultServiceQuotas",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
            "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
            "servicequotas:ListServiceQuotas",
            "servicequotas:ListServices",
            "servicequotas:ListTagsForResource",
            "ses:Describe*",
            "ses:GetAccount",
            "ses:GetAccountSendingEnabled",
            "ses:GetConfigurationSet",
            "ses:GetConfigurationSetEventDestinations",
            "ses:GetDedicatedIps",
            "ses:GetEmailIdentity",
            "ses:GetIdentityDkimAttributes",
            "ses:GetIdentityPolicies",
            "ses:GetIdentityVerificationAttributes",
            "ses:ListConfigurationSets",
            "ses:ListDedicatedIpPools",
            "ses:ListIdentities",
            "ses:ListIdentityPolicies",
            "ses:ListReceiptFilters",
            "ses:ListReceiptRuleSets",
            "ses:ListVerifiedEmailAddresses",
            "shield:Describe*",
            "shield:GetSubscriptionState",
            "shield:List*",
            "snowball:ListClusters",
            "snowball:ListJobs",
            "sns:GetPlatformApplicationAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTagsForResource",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:ListDeadLetterSourceQueues",
            "sqs:ListQueueTags",
            "sqs:ListQueues",
            "ssm:Describe*",
            "ssm:GetAutomationExecution",
            "ssm:GetServiceSetting",
            "ssm:ListAssociationVersions",
            "ssm:ListAssociations",
            "ssm:ListCommands",
            "ssm:ListComplianceItems",
            "ssm:ListComplianceSummaries",
            "ssm:ListDocumentMetadataHistory",
            "ssm:ListDocumentVersions",
            "ssm:ListDocuments",
            "ssm:ListInventoryEntries",
            "ssm:ListOpsMetadata",
            "ssm:ListResourceComplianceSummaries",
            "ssm:ListResourceDataSync",
            "ssm:ListTagsForResource",
            "sso:DescribeAccountAssignmentCreationStatus",
            "sso:DescribePermissionSet",
            "sso:DescribePermissionsPolicies",
            "sso:List*",
            "states:DescribeStateMachine",
            "states:ListStateMachines",
            "storagegateway:DescribeBandwidthRateLimit",
            "storagegateway:DescribeCache",
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:DescribeMaintenanceStartTime",
            "storagegateway:DescribeNFSFileShares",
            "storagegateway:DescribeSnapshotSchedule",
            "storagegateway:DescribeStorediSCSIVolumes",
            "storagegateway:DescribeTapeArchives",
            "storagegateway:DescribeTapeRecoveryPoints",
            "storagegateway:DescribeTapes",
            "storagegateway:DescribeUploadBuffer",
            "storagegateway:DescribeVTLDevices",
            "storagegateway:DescribeWorkingStorage",
            "storagegateway:List*",
            "sts:GetAccessKeyInfo",
            "support:DescribeTrustedAdvisorCheckRefreshStatuses",
            "support:DescribeTrustedAdvisorCheckResult",
            "support:DescribeTrustedAdvisorCheckSummaries",
            "support:DescribeTrustedAdvisorChecks",
            "synthetics:DescribeCanaries",
            "synthetics:DescribeCanariesLastRun",
            "synthetics:DescribeRuntimeVersions",
            "synthetics:GetCanary",
            "synthetics:GetCanaryRuns",
            "synthetics:GetGroup",
            "synthetics:ListAssociatedGroups",
            "synthetics:ListGroupResources",
            "synthetics:ListGroups",
            "synthetics:ListTagsForResource",
            "tag:GetResources",
            "tag:GetTagKeys",
            "transcribe:GetCallAnalyticsCategory",
            "transcribe:GetMedicalVocabulary",
            "transcribe:GetVocabulary",
            "transcribe:GetVocabularyFilter",
            "transcribe:ListCallAnalyticsCategories",
            "transcribe:ListCallAnalyticsJobs",
            "transcribe:ListLanguageModels",
            "transcribe:ListMedicalTranscriptionJobs",
            "transcribe:ListMedicalVocabularies",
            "transcribe:ListTagsForResource",
            "transcribe:ListTranscriptionJobs",
            "transcribe:ListVocabularies",
            "transcribe:ListVocabularyFilters",
            "transfer:Describe*",
            "transfer:List*",
            "translate:List*",
            "trustedadvisor:Describe*",
            "voiceid:DescribeDomain",
            "waf-regional:GetWebACL",
            "waf-regional:ListResourcesForWebACL",
            "waf-regional:ListTagsForResource",
            "waf-regional:ListWebACLs",
            "waf:GetWebACL",
            "waf:ListTagsForResource",
            "waf:ListWebACLs",
            "wafv2:GetLoggingConfiguration",
            "wafv2:GetWebACL",
            "wafv2:GetWebACLForResource",
            "wafv2:ListAvailableManagedRuleGroups",
            "wafv2:ListIPSets",
            "wafv2:ListLoggingConfigurations",
            "wafv2:ListRegexPatternSets",
            "wafv2:ListResourcesForWebACL",
            "wafv2:ListRuleGroups",
            "wafv2:ListTagsForResource",
            "wafv2:ListWebACLs",
            "wisdom:GetAssistant",
            "workdocs:DescribeResourcePermissions",
            "workspaces:Describe*",
            "xray:GetEncryptionConfig",
            "xray:GetGroup",
            "xray:GetGroups",
            "xray:GetSamplingRules",
            "xray:GetSamplingTargets",
            "xray:GetTraceSummaries",
            "xray:ListTagsForResource"
        ]
    },
    "AmazonSESFullAccess": {
        "permissions": [
            "ses:*"
        ]
    },
    "AmazonSESReadOnlyAccess": {
        "permissions": [
            "ses:BatchGetMetricData",
            "ses:Get*",
            "ses:List*"
        ]
    },
    "SimpleWorkflowFullAccess": {
        "permissions": [
            "swf:*"
        ]
    },
    "AmazonSNSFullAccess": {
        "permissions": [
            "sms-voice:CreateVerifiedDestinationNumber",
            "sms-voice:DeleteOptedOutNumber",
            "sms-voice:DeleteVerifiedDestinationNumber",
            "sms-voice:DescribeAccountAttributes",
            "sms-voice:DescribeOptedOutNumbers",
            "sms-voice:DescribePhoneNumbers",
            "sms-voice:DescribeSpendLimits",
            "sms-voice:DescribeVerifiedDestinationNumbers",
            "sms-voice:SendDestinationNumberVerificationCode",
            "sms-voice:SendTextMessage",
            "sms-voice:SetTextMessageSpendLimitOverride",
            "sms-voice:VerifyDestinationNumber",
            "sns:*"
        ]
    },
    "AmazonSNSReadOnlyAccess": {
        "permissions": [
            "sms-voice:DescribeAccountAttributes",
            "sms-voice:DescribeOptedOutNumbers",
            "sms-voice:DescribePhoneNumbers",
            "sms-voice:DescribeSpendLimits",
            "sms-voice:DescribeVerifiedDestinationNumbers",
            "sns:CheckIfPhoneNumberIsOptedOut",
            "sns:GetDataProtectionPolicy",
            "sns:GetEndpointAttributes",
            "sns:GetPlatformApplicationAttributes",
            "sns:GetSMSAttributes",
            "sns:GetSMSSandboxAccountStatus",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:List*"
        ]
    },
    "AmazonSQSFullAccess": {
        "permissions": [
            "sqs:*"
        ]
    },
    "AmazonSQSReadOnlyAccess": {
        "permissions": [
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListDeadLetterSourceQueues",
            "sqs:ListMessageMoveTasks",
            "sqs:ListQueueTags",
            "sqs:ListQueues"
        ]
    },
    "AWSStorageGatewayFullAccess": {
        "permissions": [
            "ec2:DeleteSnapshot",
            "ec2:DescribeSnapshots",
            "ssm:GetParameters",
            "storagegateway:*"
        ]
    },
    "AWSStorageGatewayReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeSnapshots",
            "ssm:GetParameters",
            "storagegateway:Describe*",
            "storagegateway:List*"
        ]
    },
    "AWSSupportAccess": {
        "permissions": [
            "support:*"
        ]
    },
    "AWSDirectoryServiceFullAccess": {
        "permissions": [
            "ds:*",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "iam:ListRoles",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DisableAWSServiceAccess",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe"
        ]
    },
    "AWSDirectoryServiceReadOnlyAccess": {
        "permissions": [
            "ds:Check*",
            "ds:Describe*",
            "ds:Get*",
            "ds:List*",
            "ds:Verify*",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics"
        ]
    },
    "AmazonZocaloFullAccess": {
        "permissions": [
            "ds:*",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "zocalo:*"
        ]
    },
    "AmazonZocaloReadOnlyAccess": {
        "permissions": [
            "ds:DescribeDirectories",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "zocalo:Describe*"
        ]
    },
    "AmazonVPCFullAccess": {
        "permissions": [
            "ec2:AcceptVpcEndpointConnections",
            "ec2:AcceptVpcPeeringConnection",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateDhcpOptions",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSecurityGroupVpc",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachClassicLinkVpc",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVpnGateway",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCarrierGateway",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateDhcpOptions",
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:CreateFlowLogs",
            "ec2:CreateInternetGateway",
            "ec2:CreateLocalGatewayRouteTableVpcAssociation",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateVpcEndpointConnectionNotification",
            "ec2:CreateVpcEndpointServiceConfiguration",
            "ec2:CreateVpcPeeringConnection",
            "ec2:CreateVpnConnection",
            "ec2:CreateVpnConnectionRoute",
            "ec2:CreateVpnGateway",
            "ec2:DeleteCarrierGateway",
            "ec2:DeleteCustomerGateway",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteEgressOnlyInternetGateway",
            "ec2:DeleteFlowLogs",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkAclEntry",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpointConnectionNotifications",
            "ec2:DeleteVpcEndpointServiceConfigurations",
            "ec2:DeleteVpcEndpoints",
            "ec2:DeleteVpcPeeringConnection",
            "ec2:DeleteVpnConnection",
            "ec2:DeleteVpnConnectionRoute",
            "ec2:DeleteVpnGateway",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeIpv6Pools",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroupVpcAssociations",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcClassicLinkDnsSupport",
            "ec2:DescribeVpcEndpointConnectionNotifications",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpointServicePermissions",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:DetachClassicLinkVpc",
            "ec2:DetachInternetGateway",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVpnGateway",
            "ec2:DisableVgwRoutePropagation",
            "ec2:DisableVpcClassicLink",
            "ec2:DisableVpcClassicLinkDnsSupport",
            "ec2:DisassociateAddress",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateSecurityGroupVpc",
            "ec2:DisassociateSubnetCidrBlock",
            "ec2:DisassociateVpcCidrBlock",
            "ec2:EnableVgwRoutePropagation",
            "ec2:EnableVpcClassicLink",
            "ec2:EnableVpcClassicLinkDnsSupport",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySecurityGroupRules",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ModifyVpcEndpointConnectionNotification",
            "ec2:ModifyVpcEndpointServiceConfiguration",
            "ec2:ModifyVpcEndpointServicePermissions",
            "ec2:ModifyVpcPeeringConnectionOptions",
            "ec2:ModifyVpcTenancy",
            "ec2:MoveAddressToVpc",
            "ec2:RejectVpcEndpointConnections",
            "ec2:RejectVpcPeeringConnection",
            "ec2:ReleaseAddress",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:ReplaceNetworkAclEntry",
            "ec2:ReplaceRoute",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:ResetNetworkInterfaceAttribute",
            "ec2:RestoreAddressToClassic",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
        ]
    },
    "AmazonVPCReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroupVpcAssociations",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcClassicLinkDnsSupport",
            "ec2:DescribeVpcEndpointConnectionNotifications",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpointServicePermissions",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetSecurityGroupsForVpc"
        ]
    },
    "AWSAccountActivityAccess": {
        "permissions": [
            "account:GetAccountInformation",
            "account:GetAlternateContact",
            "account:GetChallengeQuestions",
            "account:GetContactInformation",
            "account:GetRegionOptStatus",
            "account:ListRegions",
            "aws-portal:ViewBilling",
            "billing:GetIAMAccessPreference",
            "billing:GetSellerOfRecord",
            "payments:ListPaymentPreferences"
        ]
    },
    "AWSAccountUsageReportAccess": {
        "permissions": [
            "aws-portal:ViewUsage"
        ]
    },
    "AmazonElasticMapReduceRole": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:Describe*",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVolume",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:RequestSpotInstances",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "s3:CreateBucket",
            "s3:Get*",
            "s3:List*",
            "sdb:BatchPutAttributes",
            "sdb:Select",
            "sqs:CreateQueue",
            "sqs:Delete*",
            "sqs:GetQueue*",
            "sqs:PurgeQueue",
            "sqs:ReceiveMessage"
        ]
    },
    "AmazonElasticMapReduceforEC2Role": {
        "permissions": [
            "cloudwatch:*",
            "dynamodb:*",
            "ec2:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:ListBootstrappermissions",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSteps",
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchGetPartition",
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:CreateUserDefinedFunction",
            "glue:DeleteDatabase",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:DeleteUserDefinedFunction",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:GetUserDefinedFunction",
            "glue:GetUserDefinedFunctions",
            "glue:UpdateDatabase",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:UpdateUserDefinedFunction",
            "kinesis:CreateStream",
            "kinesis:DeleteStream",
            "kinesis:DescribeStream",
            "kinesis:GetRecords",
            "kinesis:GetShardIterator",
            "kinesis:MergeShards",
            "kinesis:PutRecord",
            "kinesis:SplitShard",
            "rds:Describe*",
            "s3:*",
            "sdb:*",
            "sns:*",
            "sqs:*"
        ]
    },
    "AutoScalingNotificationAccessRole": {
        "permissions": [
            "sns:Publish",
            "sqs:GetQueueUrl",
            "sqs:SendMessage"
        ]
    },
    "AWSCloudHSMRole": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface"
        ]
    },
    "AmazonEC2RoleforDataPipelineRole": {
        "permissions": [
            "cloudwatch:*",
            "datapipeline:*",
            "dynamodb:*",
            "ec2:Describe*",
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:ListInstance*",
            "elasticmapreduce:ModifyInstanceGroups",
            "rds:Describe*",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusters",
            "s3:*",
            "sdb:*",
            "sns:*",
            "sqs:*"
        ]
    },
    "AmazonElasticTranscoderRole": {
        "permissions": [
            "s3:*MultipartUpload*",
            "s3:Get*",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "sns:Publish"
        ]
    },
    "AWSLambdaRole": {
        "permissions": [
            "lambda:InvokeFunction"
        ]
    },
    "RDSCloudHsmAuthorizationRole": {
        "permissions": [
            "cloudhsm:CreateLunaClient",
            "cloudhsm:DeleteLunaClient",
            "cloudhsm:DescribeHapg",
            "cloudhsm:DescribeLunaClient",
            "cloudhsm:GetConfig",
            "cloudhsm:ModifyHapg",
            "cloudhsm:ModifyLunaClient"
        ]
    },
    "AmazonSNSRole": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:PutMetricFilter",
            "logs:PutRetentionPolicy"
        ]
    },
    "AWSConnector": {
        "permissions": [
            "SNS:Publish",
            "ec2:CancelConversionTask",
            "ec2:CancelExportTask",
            "ec2:CancelImportTask",
            "ec2:CreateImage",
            "ec2:CreateInstanceExportTask",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DeregisterImage",
            "ec2:DescribeConversionTasks",
            "ec2:DescribeExportTasks",
            "ec2:DescribeImages",
            "ec2:DescribeImportImageTasks",
            "ec2:DescribeImportSnapshotTasks",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "ec2:DescribeSnapshots",
            "ec2:DescribeTags",
            "ec2:DetachVolume",
            "ec2:ImportImage",
            "ec2:ImportInstance",
            "ec2:ImportSnapshot",
            "ec2:ImportVolume",
            "ec2:ModifyInstanceAttribute",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:GetUser",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutObject",
            "s3:PutObjectAcl"
        ]
    },
    "AWSMarketplaceFullAccess": {
        "permissions": [
            "aws-marketplace:*",
            "cloudformation:CreateStack",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:List*",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CopyImage",
            "ec2:CreateImage",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeregisterImage",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcs",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:PassRole",
            "s3:GetObject",
            "s3:ListBucket",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "sns:Publish",
            "sns:setTopicAttributes",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "ssm:ListDocuments",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWSConfigUserAccess": {
        "permissions": [
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:LookupEvents",
            "config:Deliver*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:Select*",
            "tag:GetResources",
            "tag:GetTagKeys"
        ]
    },
    "AmazonEC2ContainerServiceforEC2Role": {
        "permissions": [
            "ec2:DescribeTags",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecs:CreateCluster",
            "ecs:DeregisterContainerInstance",
            "ecs:DiscoverPollEndpoint",
            "ecs:Poll",
            "ecs:RegisterContainerInstance",
            "ecs:StartTelemetrySession",
            "ecs:Submit*",
            "ecs:TagResource",
            "ecs:UpdateContainerInstancesState",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AmazonCognitoReadOnly": {
        "permissions": [
            "cognito-identity:Describe*",
            "cognito-identity:Get*",
            "cognito-identity:List*",
            "cognito-idp:AdminGet*",
            "cognito-idp:AdminList*",
            "cognito-idp:Describe*",
            "cognito-idp:Get*",
            "cognito-idp:List*",
            "cognito-sync:Describe*",
            "cognito-sync:Get*",
            "cognito-sync:List*",
            "iam:ListOpenIdConnectProviders",
            "iam:ListRoles",
            "sns:ListPlatformApplications"
        ]
    },
    "AmazonCognitoPowerUser": {
        "permissions": [
            "acm:ListCertificates",
            "cognito-identity:*",
            "cognito-idp:*",
            "cognito-sync:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetRole",
            "iam:GetSAMLProvider",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:ListOpenIdConnectProviders",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "kinesis:ListStreams",
            "lambda:GetPolicy",
            "lambda:ListFunctions",
            "mobiletargeting:GetApps",
            "ses:GetIdentityVerificationAttributes",
            "ses:ListIdentities",
            "sns:GetSMSSandboxAccountStatus",
            "sns:ListPlatformApplications"
        ]
    },
    "AmazonCognitoDeveloperAuthenticatedIdentities": {
        "permissions": [
            "cognito-identity:GetOpenIdTokenForDeveloperIdentity",
            "cognito-identity:LookupDeveloperIdentity",
            "cognito-identity:MergeDeveloperIdentities",
            "cognito-identity:UnlinkDeveloperIdentity"
        ]
    },
    "AmazonWorkSpacesApplicationManagerAdminAccess": {
        "permissions": [
            "wam:AuthenticatePackager"
        ]
    },
    "AWSLambdaBasicExecutionRole": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSLambdaDynamoDBExecutionRole": {
        "permissions": [
            "dynamodb:DescribeStream",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:ListStreams",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSLambdaKinesisExecutionRole": {
        "permissions": [
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamSummary",
            "kinesis:GetRecords",
            "kinesis:GetShardIterator",
            "kinesis:ListShards",
            "kinesis:ListStreams",
            "kinesis:SubscribeToShard",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AmazonEC2ContainerServiceRole": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:Describe*",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets"
        ]
    },
    "AmazonMachineLearningBatchPredictionsAccess": {
        "permissions": [
            "machinelearning:CreateBatchPrediction",
            "machinelearning:DeleteBatchPrediction",
            "machinelearning:DescribeBatchPredictions",
            "machinelearning:GetBatchPrediction",
            "machinelearning:UpdateBatchPrediction"
        ]
    },
    "AmazonMachineLearningCreateOnlyAccess": {
        "permissions": [
            "machinelearning:Add*",
            "machinelearning:Create*",
            "machinelearning:Delete*",
            "machinelearning:Describe*",
            "machinelearning:Get*"
        ]
    },
    "AmazonMachineLearningFullAccess": {
        "permissions": [
            "machinelearning:*"
        ]
    },
    "AmazonMachineLearningManageRealTimeEndpointOnlyAccess": {
        "permissions": [
            "machinelearning:CreateRealtimeEndpoint",
            "machinelearning:DeleteRealtimeEndpoint"
        ]
    },
    "AmazonMachineLearningReadOnlyAccess": {
        "permissions": [
            "machinelearning:Describe*",
            "machinelearning:Get*"
        ]
    },
    "AmazonMachineLearningRealTimePredictionOnlyAccess": {
        "permissions": [
            "machinelearning:Predict"
        ]
    },
    "AWSCodeDeployRole": {
        "permissions": [
            "autoscaling:AttachLoadBalancerTargetGroups",
            "autoscaling:AttachLoadBalancers",
            "autoscaling:CompleteLifecycleAction",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLifecycleHook",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DescribeScheduledpermissions",
            "autoscaling:EnableMetricsCollection",
            "autoscaling:PutLifecycleHook",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:PutWarmPool",
            "autoscaling:RecordLifecycleActionHeartbeat",
            "autoscaling:ResumeProcesses",
            "autoscaling:SuspendProcesses",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:TerminateInstances",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "sns:Publish",
            "tag:GetResources"
        ]
    },
    "AmazonEC2RoleforAWSCodeDeploy": {
        "permissions": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket"
        ]
    },
    "AWSCodeDeployFullAccess": {
        "permissions": [
            "chatbot:DescribeSlackChannelConfigurations",
            "codedeploy:*",
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListTargets",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe",
            "codestar-notifications:UpdateNotificationRule",
            "sns:CreateTopic",
            "sns:ListTopics",
            "sns:SetTopicAttributes"
        ]
    },
    "AWSCodeDeployDeployerAccess": {
        "permissions": [
            "chatbot:DescribeSlackChannelConfigurations",
            "codedeploy:Batch*",
            "codedeploy:CreateDeployment",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codedeploy:RegisterApplicationRevision",
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListTargets",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe",
            "codestar-notifications:UpdateNotificationRule",
            "sns:ListTopics"
        ]
    },
    "AWSCodeDeployReadOnlyAccess": {
        "permissions": [
            "codedeploy:Batch*",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets"
        ]
    },
    "AmazonElasticFileSystemFullAccess": {
        "permissions": [
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricData",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "elasticfilesystem:Backup",
            "elasticfilesystem:CreateAccessPoint",
            "elasticfilesystem:CreateFileSystem",
            "elasticfilesystem:CreateMountTarget",
            "elasticfilesystem:CreateReplicationConfiguration",
            "elasticfilesystem:CreateTags",
            "elasticfilesystem:DeleteAccessPoint",
            "elasticfilesystem:DeleteFileSystem",
            "elasticfilesystem:DeleteFileSystemPolicy",
            "elasticfilesystem:DeleteMountTarget",
            "elasticfilesystem:DeleteReplicationConfiguration",
            "elasticfilesystem:DeleteTags",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeAccountPreferences",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticfilesystem:DescribeTags",
            "elasticfilesystem:ListTagsForResource",
            "elasticfilesystem:ModifyMountTargetSecurityGroups",
            "elasticfilesystem:PutAccountPreferences",
            "elasticfilesystem:PutBackupPolicy",
            "elasticfilesystem:PutFileSystemPolicy",
            "elasticfilesystem:PutLifecycleConfiguration",
            "elasticfilesystem:ReplicationRead",
            "elasticfilesystem:ReplicationWrite",
            "elasticfilesystem:Restore",
            "elasticfilesystem:TagResource",
            "elasticfilesystem:UntagResource",
            "elasticfilesystem:UpdateFileSystem",
            "elasticfilesystem:UpdateFileSystemProtection",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases"
        ]
    },
    "AmazonElasticFileSystemReadOnlyAccess": {
        "permissions": [
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricData",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeAccountPreferences",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticfilesystem:DescribeTags",
            "elasticfilesystem:ListTagsForResource",
            "elasticfilesystem:ReplicationRead",
            "kms:ListAliases"
        ]
    },
    "AmazonSSMFullAccess": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ds:CreateComputer",
            "ds:DescribeDirectories",
            "ec2:DescribeInstanceStatus",
            "ec2messages:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "logs:*",
            "ssm:*",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "AmazonSSMReadOnlyAccess": {
        "permissions": [
            "ssm:Describe*",
            "ssm:Get*",
            "ssm:List*"
        ]
    },
    "AmazonEC2RoleforSSM": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ds:CreateComputer",
            "ds:DescribeDirectories",
            "ec2:DescribeInstanceStatus",
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:AbortMultipartUpload",
            "s3:GetBucketLocation",
            "s3:GetEncryptionConfiguration",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutObject",
            "ssm:DescribeAssociation",
            "ssm:DescribeDocument",
            "ssm:GetDeployablePatchSnapshotForInstance",
            "ssm:GetDocument",
            "ssm:GetManifest",
            "ssm:GetParameters",
            "ssm:ListAssociations",
            "ssm:ListInstanceAssociations",
            "ssm:PutComplianceItems",
            "ssm:PutConfigurePackageResult",
            "ssm:PutInventory",
            "ssm:UpdateAssociationStatus",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "CloudWatchpermissionsEC2Access": {
        "permissions": [
            "cloudwatch:Describe*",
            "ec2:Describe*",
            "ec2:RebootInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
        ]
    },
    "AWSCodePipelineCustomActionAccess": {
        "permissions": [
            "codepipeline:AcknowledgeJob",
            "codepipeline:GetJobDetails",
            "codepipeline:PollForJobs",
            "codepipeline:PutJobFailureResult",
            "codepipeline:PutJobSuccessResult"
        ]
    },
    "AWSCodeCommitFullAccess": {
        "permissions": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations",
            "codecommit:*",
            "codeguru-reviewer:AssociateRepository",
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:DisassociateRepository",
            "codeguru-reviewer:ListCodeReviews",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codestar-connections:GetConnection",
            "codestar-connections:ListConnections",
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListTargets",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe",
            "codestar-notifications:UpdateNotificationRule",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "iam:CreateServiceSpecificCredential",
            "iam:DeleteSSHPublicKey",
            "iam:DeleteServiceSpecificCredential",
            "iam:GetSSHPublicKey",
            "iam:ListAccessKeys",
            "iam:ListSSHPublicKeys",
            "iam:ListServiceSpecificCredentials",
            "iam:ListUsers",
            "iam:ResetServiceSpecificCredential",
            "iam:UpdateSSHPublicKey",
            "iam:UpdateServiceSpecificCredential",
            "iam:UploadSSHPublicKey",
            "lambda:ListFunctions",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe"
        ]
    },
    "AWSCodeCommitReadOnly": {
        "permissions": [
            "codecommit:BatchDescribe*",
            "codecommit:BatchGet*",
            "codecommit:Describe*",
            "codecommit:EvaluatePullRequestApprovalRules",
            "codecommit:Get*",
            "codecommit:GitPull",
            "codecommit:List*",
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:ListCodeReviews",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codestar-connections:GetConnection",
            "codestar-connections:ListConnections",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "iam:GetSSHPublicKey",
            "iam:ListAccessKeys",
            "iam:ListSSHPublicKeys",
            "iam:ListServiceSpecificCredentials",
            "iam:ListUsers",
            "lambda:ListFunctions",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics"
        ]
    },
    "AWSCodeCommitPowerUser": {
        "permissions": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations",
            "codecommit:AssociateApprovalRuleTemplateWithRepository",
            "codecommit:BatchAssociateApprovalRuleTemplateWithRepositories",
            "codecommit:BatchDescribe*",
            "codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories",
            "codecommit:BatchGet*",
            "codecommit:Create*",
            "codecommit:DeleteBranch",
            "codecommit:DeleteFile",
            "codecommit:Describe*",
            "codecommit:DisassociateApprovalRuleTemplateFromRepository",
            "codecommit:EvaluatePullRequestApprovalRules",
            "codecommit:Get*",
            "codecommit:GitPull",
            "codecommit:GitPush",
            "codecommit:List*",
            "codecommit:Merge*",
            "codecommit:OverridePullRequestApprovalRules",
            "codecommit:Post*",
            "codecommit:Put*",
            "codecommit:TagResource",
            "codecommit:Test*",
            "codecommit:UntagResource",
            "codecommit:Update*",
            "codeguru-reviewer:AssociateRepository",
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:DisassociateRepository",
            "codeguru-reviewer:ListCodeReviews",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codestar-connections:GetConnection",
            "codestar-connections:ListConnections",
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListTargets",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe",
            "codestar-notifications:UpdateNotificationRule",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "iam:CreateServiceSpecificCredential",
            "iam:DeleteSSHPublicKey",
            "iam:DeleteServiceSpecificCredential",
            "iam:GetSSHPublicKey",
            "iam:ListAccessKeys",
            "iam:ListSSHPublicKeys",
            "iam:ListServiceSpecificCredentials",
            "iam:ListUsers",
            "iam:ResetServiceSpecificCredential",
            "iam:UpdateSSHPublicKey",
            "iam:UpdateServiceSpecificCredential",
            "iam:UploadSSHPublicKey",
            "lambda:ListFunctions",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "sns:Unsubscribe"
        ]
    },
    "IAMUserSSHKeys": {
        "permissions": [
            "iam:DeleteSSHPublicKey",
            "iam:GetSSHPublicKey",
            "iam:ListSSHPublicKeys",
            "iam:UpdateSSHPublicKey",
            "iam:UploadSSHPublicKey"
        ]
    },
    "AmazonAPIGatewayAdministrator": {
        "permissions": [
            "apigateway:*"
        ]
    },
    "AmazonAPIGatewayInvokeFullAccess": {
        "permissions": [
            "execute-api:Invoke",
            "execute-api:ManageConnections"
        ]
    },
    "AWSDeviceFarmFullAccess": {
        "permissions": [
            "devicefarm:*"
        ]
    },
    "AmazonDRSVPCManagement": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupIngress"
        ]
    },
    "VMImportExportRoleForAWSConnector": {
        "permissions": [
            "ec2:CopySnapshot",
            "ec2:Describe*",
            "ec2:ModifySnapshotAttribute",
            "ec2:RegisterImage",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket"
        ]
    },
    "AmazonWorkSpacesAdmin": {
        "permissions": [
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "workspaces:CreateStandbyWorkspaces",
            "workspaces:CreateTags",
            "workspaces:CreateWorkspaceImage",
            "workspaces:CreateWorkspaces",
            "workspaces:CreateWorkspacesPool",
            "workspaces:DeleteTags",
            "workspaces:DeregisterWorkspaceDirectory",
            "workspaces:DescribeTags",
            "workspaces:DescribeWorkspaceBundles",
            "workspaces:DescribeWorkspaceDirectories",
            "workspaces:DescribeWorkspaces",
            "workspaces:DescribeWorkspacesConnectionStatus",
            "workspaces:DescribeWorkspacesPoolSessions",
            "workspaces:DescribeWorkspacesPools",
            "workspaces:ModifyCertificateBasedAuthProperties",
            "workspaces:ModifySamlProperties",
            "workspaces:ModifyStreamingProperties",
            "workspaces:ModifyWorkspaceCreationProperties",
            "workspaces:ModifyWorkspaceProperties",
            "workspaces:RebootWorkspaces",
            "workspaces:RebuildWorkspaces",
            "workspaces:RegisterWorkspaceDirectory",
            "workspaces:RestoreWorkspace",
            "workspaces:StartWorkspaces",
            "workspaces:StartWorkspacesPool",
            "workspaces:StopWorkspaces",
            "workspaces:StopWorkspacesPool",
            "workspaces:TerminateWorkspaces",
            "workspaces:TerminateWorkspacesPool",
            "workspaces:TerminateWorkspacesPoolSession",
            "workspaces:UpdateWorkspacesPool"
        ]
    },
    "AmazonESFullAccess": {
        "permissions": [
            "es:*"
        ]
    },
    "AmazonESReadOnlyAccess": {
        "permissions": [
            "es:Describe*",
            "es:Get*",
            "es:List*"
        ]
    },
    "AWSWAFReadOnlyAccess": {
        "permissions": [
            "apprunner:DescribeWebAclForService",
            "apprunner:ListAssociatedServicesForWebAcl",
            "apprunner:ListServices",
            "cognito-idp:GetWebACLForResource",
            "cognito-idp:ListResourcesForWebACL",
            "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
            "ec2:GetVerifiedAccessInstanceWebAcl",
            "waf-regional:Get*",
            "waf-regional:List*",
            "waf:Get*",
            "waf:List*",
            "wafv2:CheckCapacity",
            "wafv2:Describe*",
            "wafv2:Get*",
            "wafv2:List*"
        ]
    },
    "AWSWAFFullAccess": {
        "permissions": [
            "apigateway:SetWebACL",
            "apprunner:AssociateWebAcl",
            "apprunner:DescribeWebAclForService",
            "apprunner:DisassociateWebAcl",
            "apprunner:ListAssociatedServicesForWebAcl",
            "apprunner:ListServices",
            "appsync:SetWebACL",
            "cognito-idp:AssociateWebACL",
            "cognito-idp:DisassociateWebACL",
            "cognito-idp:GetWebACLForResource",
            "cognito-idp:ListResourcesForWebACL",
            "ec2:AssociateVerifiedAccessInstanceWebAcl",
            "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
            "ec2:DisassociateVerifiedAccessInstanceWebAcl",
            "ec2:GetVerifiedAccessInstanceWebAcl",
            "elasticloadbalancing:SetWebACL",
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:PutResourcePolicy",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy",
            "waf-regional:*",
            "waf:*",
            "wafv2:*"
        ]
    },
    "AmazonInspectorReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeTags",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget",
            "inspector:Describe*",
            "inspector:Get*",
            "inspector:List*",
            "inspector:Preview*",
            "sns:ListTopics"
        ]
    },
    "AmazonInspectorFullAccess": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeTags",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "inspector:*",
            "sns:ListTopics"
        ]
    },
    "AmazonKinesisFirehoseReadOnlyAccess": {
        "permissions": [
            "firehose:Describe*",
            "firehose:List*"
        ]
    },
    "AmazonKinesisFirehoseFullAccess": {
        "permissions": [
            "firehose:*"
        ]
    },
    "AWSIoTRulepermissions": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "cloudwatch:SetAlarmState",
            "dynamodb:PutItem",
            "es:ESHttpPut",
            "firehose:PutRecord",
            "iot:Publish",
            "kinesis:PutRecord",
            "s3:PutObject",
            "sns:Publish",
            "sqs:SendMessage*"
        ]
    },
    "AWSIoTLogging": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogStream",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "logs:PutMetricFilter",
            "logs:PutRetentionPolicy"
        ]
    },
    "AWSIoTFullAccess": {
        "permissions": [
            "iot:*",
            "iotjobsdata:*"
        ]
    },
    "AWSIoTDataAccess": {
        "permissions": [
            "iot:Connect",
            "iot:DeleteThingShadow",
            "iot:GetThingShadow",
            "iot:ListNamedShadowsForThing",
            "iot:Publish",
            "iot:Receive",
            "iot:Subscribe",
            "iot:UpdateThingShadow"
        ]
    },
    "AWSIoTConfigAccess": {
        "permissions": [
            "iot:AcceptCertificateTransfer",
            "iot:AddThingToThingGroup",
            "iot:AssociateTargetsWithJob",
            "iot:AttachPolicy",
            "iot:AttachPrincipalPolicy",
            "iot:AttachSecurityProfile",
            "iot:AttachThingPrincipal",
            "iot:CancelAuditTask",
            "iot:CancelCertificateTransfer",
            "iot:CancelJob",
            "iot:CancelJobExecution",
            "iot:ClearDefaultAuthorizer",
            "iot:CreateAuthorizer",
            "iot:CreateCertificateFromCsr",
            "iot:CreateJob",
            "iot:CreateKeysAndCertificate",
            "iot:CreateOTAUpdate",
            "iot:CreatePolicy",
            "iot:CreatePolicyVersion",
            "iot:CreateRoleAlias",
            "iot:CreateScheduledAudit",
            "iot:CreateSecurityProfile",
            "iot:CreateStream",
            "iot:CreateThing",
            "iot:CreateThingGroup",
            "iot:CreateThingType",
            "iot:CreateTopicRule",
            "iot:DeleteAccountAuditConfiguration",
            "iot:DeleteAuthorizer",
            "iot:DeleteCACertificate",
            "iot:DeleteCertificate",
            "iot:DeleteJob",
            "iot:DeleteJobExecution",
            "iot:DeleteOTAUpdate",
            "iot:DeletePolicy",
            "iot:DeletePolicyVersion",
            "iot:DeleteRegistrationCode",
            "iot:DeleteRoleAlias",
            "iot:DeleteScheduledAudit",
            "iot:DeleteSecurityProfile",
            "iot:DeleteStream",
            "iot:DeleteThing",
            "iot:DeleteThingGroup",
            "iot:DeleteThingType",
            "iot:DeleteTopicRule",
            "iot:DeleteV2LoggingLevel",
            "iot:DeprecateThingType",
            "iot:DescribeAccountAuditConfiguration",
            "iot:DescribeAuditTask",
            "iot:DescribeAuthorizer",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeDefaultAuthorizer",
            "iot:DescribeEndpoint",
            "iot:DescribeEventConfigurations",
            "iot:DescribeIndex",
            "iot:DescribeJob",
            "iot:DescribeJobExecution",
            "iot:DescribeRoleAlias",
            "iot:DescribeScheduledAudit",
            "iot:DescribeSecurityProfile",
            "iot:DescribeStream",
            "iot:DescribeThing",
            "iot:DescribeThingGroup",
            "iot:DescribeThingRegistrationTask",
            "iot:DescribeThingType",
            "iot:DetachPolicy",
            "iot:DetachPrincipalPolicy",
            "iot:DetachSecurityProfile",
            "iot:DetachThingPrincipal",
            "iot:DisableTopicRule",
            "iot:EnableTopicRule",
            "iot:GetEffectivePolicies",
            "iot:GetIndexingConfiguration",
            "iot:GetJobDocument",
            "iot:GetLoggingOptions",
            "iot:GetOTAUpdate",
            "iot:GetPolicy",
            "iot:GetPolicyVersion",
            "iot:GetRegistrationCode",
            "iot:GetTopicRule",
            "iot:GetV2LoggingOptions",
            "iot:ListActiveViolations",
            "iot:ListAttachedPolicies",
            "iot:ListAuditFindings",
            "iot:ListAuditTasks",
            "iot:ListAuthorizers",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListCertificatesByCA",
            "iot:ListIndices",
            "iot:ListJobExecutionsForJob",
            "iot:ListJobExecutionsForThing",
            "iot:ListJobs",
            "iot:ListOTAUpdates",
            "iot:ListOutgoingCertificates",
            "iot:ListPolicies",
            "iot:ListPolicyPrincipals",
            "iot:ListPolicyVersions",
            "iot:ListPrincipalPolicies",
            "iot:ListPrincipalThings",
            "iot:ListRoleAliases",
            "iot:ListScheduledAudits",
            "iot:ListSecurityProfiles",
            "iot:ListSecurityProfilesForTarget",
            "iot:ListStreams",
            "iot:ListTargetsForPolicy",
            "iot:ListTargetsForSecurityProfile",
            "iot:ListThingGroups",
            "iot:ListThingGroupsForThing",
            "iot:ListThingPrincipals",
            "iot:ListThingRegistrationTaskReports",
            "iot:ListThingRegistrationTasks",
            "iot:ListThingTypes",
            "iot:ListThings",
            "iot:ListThingsInThingGroup",
            "iot:ListTopicRules",
            "iot:ListV2LoggingLevels",
            "iot:ListViolationEvents",
            "iot:RegisterCACertificate",
            "iot:RegisterCertificate",
            "iot:RegisterThing",
            "iot:RejectCertificateTransfer",
            "iot:RemoveThingFromThingGroup",
            "iot:ReplaceTopicRule",
            "iot:SearchIndex",
            "iot:SetDefaultAuthorizer",
            "iot:SetDefaultPolicyVersion",
            "iot:SetLoggingOptions",
            "iot:SetV2LoggingLevel",
            "iot:SetV2LoggingOptions",
            "iot:StartOnDemandAuditTask",
            "iot:StartThingRegistrationTask",
            "iot:StopThingRegistrationTask",
            "iot:TestAuthorization",
            "iot:TestInvokeAuthorizer",
            "iot:TransferCertificate",
            "iot:UpdateAccountAuditConfiguration",
            "iot:UpdateAuthorizer",
            "iot:UpdateCACertificate",
            "iot:UpdateCertificate",
            "iot:UpdateEventConfigurations",
            "iot:UpdateIndexingConfiguration",
            "iot:UpdateRoleAlias",
            "iot:UpdateScheduledAudit",
            "iot:UpdateSecurityProfile",
            "iot:UpdateStream",
            "iot:UpdateThing",
            "iot:UpdateThingGroup",
            "iot:UpdateThingGroupsForThing",
            "iot:ValidateSecurityProfileBehaviors"
        ]
    },
    "AWSIoTConfigReadOnlyAccess": {
        "permissions": [
            "iot:DescribeAccountAuditConfiguration",
            "iot:DescribeAuditTask",
            "iot:DescribeAuthorizer",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeDefaultAuthorizer",
            "iot:DescribeEndpoint",
            "iot:DescribeEventConfigurations",
            "iot:DescribeIndex",
            "iot:DescribeJob",
            "iot:DescribeJobExecution",
            "iot:DescribeRoleAlias",
            "iot:DescribeScheduledAudit",
            "iot:DescribeSecurityProfile",
            "iot:DescribeStream",
            "iot:DescribeThing",
            "iot:DescribeThingGroup",
            "iot:DescribeThingRegistrationTask",
            "iot:DescribeThingType",
            "iot:GetEffectivePolicies",
            "iot:GetIndexingConfiguration",
            "iot:GetJobDocument",
            "iot:GetLoggingOptions",
            "iot:GetOTAUpdate",
            "iot:GetPolicy",
            "iot:GetPolicyVersion",
            "iot:GetRegistrationCode",
            "iot:GetTopicRule",
            "iot:GetV2LoggingOptions",
            "iot:ListActiveViolations",
            "iot:ListAttachedPolicies",
            "iot:ListAuditFindings",
            "iot:ListAuditTasks",
            "iot:ListAuthorizers",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListCertificatesByCA",
            "iot:ListIndices",
            "iot:ListJobExecutionsForJob",
            "iot:ListJobExecutionsForThing",
            "iot:ListJobs",
            "iot:ListOTAUpdates",
            "iot:ListOutgoingCertificates",
            "iot:ListPolicies",
            "iot:ListPolicyPrincipals",
            "iot:ListPolicyVersions",
            "iot:ListPrincipalPolicies",
            "iot:ListPrincipalThings",
            "iot:ListRoleAliases",
            "iot:ListScheduledAudits",
            "iot:ListSecurityProfiles",
            "iot:ListSecurityProfilesForTarget",
            "iot:ListStreams",
            "iot:ListTargetsForPolicy",
            "iot:ListTargetsForSecurityProfile",
            "iot:ListThingGroups",
            "iot:ListThingGroupsForThing",
            "iot:ListThingPrincipals",
            "iot:ListThingRegistrationTaskReports",
            "iot:ListThingRegistrationTasks",
            "iot:ListThingTypes",
            "iot:ListThings",
            "iot:ListThingsInThingGroup",
            "iot:ListTopicRules",
            "iot:ListV2LoggingLevels",
            "iot:ListViolationEvents",
            "iot:SearchIndex",
            "iot:TestAuthorization",
            "iot:TestInvokeAuthorizer",
            "iot:ValidateSecurityProfileBehaviors"
        ]
    },
    "AWSQuickSightDescribeRDS": {
        "permissions": [
            "rds:Describe*"
        ]
    },
    "AWSQuickSightDescribeRedshift": {
        "permissions": [
            "redshift:Describe*"
        ]
    },
    "AWSQuickSightListIAM": {
        "permissions": [
            "iam:List*"
        ]
    },
    "AmazonRDSEnhancedMonitoringRole": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy"
        ]
    },
    "AmazonAPIGatewayPushToCloudWatchLogs": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:PutLogEvents"
        ]
    },
    "AmazonDMSVPCManagementRole": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute"
        ]
    },
    "AmazonMechanicalTurkFullAccess": {
        "permissions": [
            "mechanicalturk:*"
        ]
    },
    "AmazonMechanicalTurkReadOnly": {
        "permissions": [
            "mechanicalturk:Get*",
            "mechanicalturk:List*"
        ]
    },
    "AmazonEC2ContainerRegistryReadOnly": {
        "permissions": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:DescribeImageScanFindings",
            "ecr:DescribeImages",
            "ecr:DescribeRepositories",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetLifecyclePolicy",
            "ecr:GetLifecyclePolicyPreview",
            "ecr:GetRepositoryPolicy",
            "ecr:ListImages",
            "ecr:ListTagsForResource"
        ]
    },
    "AmazonEC2ContainerRegistryPowerUser": {
        "permissions": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:CompleteLayerUpload",
            "ecr:DescribeImageScanFindings",
            "ecr:DescribeImages",
            "ecr:DescribeRepositories",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetLifecyclePolicy",
            "ecr:GetLifecyclePolicyPreview",
            "ecr:GetRepositoryPolicy",
            "ecr:InitiateLayerUpload",
            "ecr:ListImages",
            "ecr:ListTagsForResource",
            "ecr:PutImage",
            "ecr:UploadLayerPart"
        ]
    },
    "AmazonEC2ContainerRegistryFullAccess": {
        "permissions": [
            "cloudtrail:LookupEvents",
            "ecr:*",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AmazonDMSCloudWatchLogsRole": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "CloudWatchEventsReadOnlyAccess": {
        "permissions": [
            "events:DescribeApiDestination",
            "events:DescribeArchive",
            "events:DescribeConnection",
            "events:DescribeEndpoint",
            "events:DescribeEventBus",
            "events:DescribeEventSource",
            "events:DescribeReplay",
            "events:DescribeRule",
            "events:ListApiDestinations",
            "events:ListArchives",
            "events:ListConnections",
            "events:ListEndpoints",
            "events:ListEventBuses",
            "events:ListEventSources",
            "events:ListReplays",
            "events:ListRuleNamesByTarget",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:TestEventPattern",
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListScheduleGroups",
            "scheduler:ListSchedules",
            "scheduler:ListTagsForResource",
            "schemas:DescribeCodeBinding",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:ExportSchema",
            "schemas:GetCodeBindingSource",
            "schemas:GetDiscoveredSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemaVersions",
            "schemas:ListSchemas",
            "schemas:ListTagsForResource",
            "schemas:SearchSchemas"
        ]
    },
    "CloudWatchEventsBuiltInTargetExecutionAccess": {
        "permissions": [
            "ec2:CreateSnapshot",
            "ec2:Describe*",
            "ec2:RebootInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
        ]
    },
    "CloudWatchEventsInvocationAccess": {
        "permissions": [
            "kinesis:PutRecord"
        ]
    },
    "CloudWatchEventsFullAccess": {
        "permissions": [
            "events:*",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "pipes:*",
            "scheduler:*",
            "schemas:*",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "secretsmanager:UpdateSecret"
        ]
    },
    "AWSCertificateManagerFullAccess": {
        "permissions": [
            "acm:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
        ]
    },
    "AWSCertificateManagerReadOnly": {
        "permissions": [
            "acm:DescribeCertificate",
            "acm:GetAccountConfiguration",
            "acm:GetCertificate",
            "acm:ListCertificates",
            "acm:ListTagsForCertificate"
        ]
    },
    "AWSElasticBeanstalkWebTier": {
        "permissions": [
            "elasticbeanstalk:PutInstanceStatistics",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:Get*",
            "s3:List*",
            "s3:PutObject",
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries",
            "xray:GetSamplingTargets",
            "xray:PutTelemetryRecords",
            "xray:PutTraceSegments"
        ]
    },
    "AWSElasticBeanstalkWorkerTier": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "dynamodb:BatchGetItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteItem",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "elasticbeanstalk:PutInstanceStatistics",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:Get*",
            "s3:List*",
            "s3:PutObject",
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries",
            "xray:GetSamplingTargets",
            "xray:PutTelemetryRecords",
            "xray:PutTraceSegments"
        ]
    },
    "AWSElasticBeanstalkMulticontainerDocker": {
        "permissions": [
            "ecs:DeregisterContainerInstance",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeTasks",
            "ecs:DiscoverPollEndpoint",
            "ecs:Poll",
            "ecs:RegisterContainerInstance",
            "ecs:StartTask",
            "ecs:StartTelemetrySession",
            "ecs:StopTask",
            "ecs:Submit*",
            "ecs:TagResource"
        ]
    },
    "AWSElasticBeanstalkEnhancedHealth": {
        "permissions": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribeScalingActivities",
            "ec2:AssociateAddress",
            "ec2:DescribeAddresses",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:GetConsoleOutput",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetHealth",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "sns:Publish",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl"
        ]
    },
    "AWSLambdaVPCAccessExecutionRole": {
        "permissions": [
            "ec2:AssignPrivateIpAddresses",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:UnassignPrivateIpAddresses",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AmazonRDSDirectoryServiceAccess": {
        "permissions": [
            "ds:AuthorizeApplication",
            "ds:DescribeDirectories",
            "ds:GetAuthorizedApplicationDetails",
            "ds:UnauthorizeApplication"
        ]
    },
    "AWSMarketplaceMeteringFullAccess": {
        "permissions": [
            "aws-marketplace:MeterUsage"
        ]
    },
    "AWSConfigRulesExecutionRole": {
        "permissions": [
            "config:BatchGet*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:Put*",
            "config:Select*",
            "s3:GetObject"
        ]
    },
    "AWSElasticBeanstalkService": {
        "permissions": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DeletePolicy",
            "autoscaling:DeleteScheduledAction",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLoadBalancers",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DescribeScheduledpermissions",
            "autoscaling:DetachInstances",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:ResumeProcesses",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudformation:*",
            "cloudwatch:PutMetricAlarm",
            "codebuild:BatchGetBuilds",
            "codebuild:CreateProject",
            "codebuild:DeleteProject",
            "codebuild:StartBuild",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ecs:CreateCluster",
            "ecs:DeleteCluster",
            "ecs:DescribeClusters",
            "ecs:RegisterTaskDefinition",
            "ecs:TagResource",
            "elasticbeanstalk:*",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:DescribeLogGroups",
            "logs:PutRetentionPolicy",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeOrderableDBInstanceOptions",
            "s3:*",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:ListBucket",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl"
        ]
    },
    "AmazonDMSRedshiftS3Role": {
        "permissions": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetBucketVersioning",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketVersioning",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject"
        ]
    },
    "AWSApplicationDiscoveryServiceFullAccess": {
        "permissions": [
            "discovery:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "mgh:*"
        ]
    },
    "AWSApplicationDiscoveryAgentAccess": {
        "permissions": [
            "arsenal:RegisterOnPremisesAgent",
            "mgh:GetHomeRegion"
        ]
    },
    "AmazonEC2ContainerServiceAutoscaleRole": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "ecs:DescribeServices",
            "ecs:UpdateService"
        ]
    },
    "AWSOpsWorksInstanceRegistration": {
        "permissions": [
            "opsworks:DescribeStackProvisioningParameters",
            "opsworks:DescribeStacks",
            "opsworks:RegisterInstance"
        ]
    },
    "AWSCodePipelineApproverAccess": {
        "permissions": [
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineExecution",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListPipelines",
            "codepipeline:PutApprovalResult"
        ]
    },
    "AWSAgentlessDiscoveryService": {
        "permissions": [
            "Discovery:*",
            "SNS:Publish",
            "arsenal:RegisterOnPremisesAgent",
            "awsconnector:GetConnectorHealth",
            "awsconnector:RegisterConnector",
            "iam:GetUser",
            "mgh:GetHomeRegion",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl"
        ]
    },
    "AmazonEC2SpotFleetAutoscaleRole": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "ec2:DescribeSpotFleetRequests",
            "ec2:ModifySpotFleetRequest",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AmazonKinesisAnalyticsReadOnly": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "iam:ListPolicyVersions",
            "iam:ListRoles",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "kinesisanalytics:Describe*",
            "kinesisanalytics:Get*",
            "kinesisanalytics:List*",
            "logs:GetLogEvents"
        ]
    },
    "AmazonKinesisAnalyticsFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "iam:ListPolicyVersions",
            "iam:ListRoles",
            "iam:PassRole",
            "kinesis:CreateStream",
            "kinesis:DeleteStream",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kinesisanalytics:*",
            "logs:GetLogEvents"
        ]
    },
    "ServerMigrationConnector": {
        "permissions": [
            "SNS:Publish",
            "awsconnector:*",
            "iam:GetUser",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "sms:GetMessages",
            "sms:SendMessage"
        ]
    },
    "ViewOnlyAccess": {
        "permissions": [
            "acm:ListCertificates",
            "aiops:GetInvestigation",
            "aiops:GetInvestigationGroup",
            "aiops:ListInvestigationEvents",
            "aiops:ListInvestigationGroups",
            "aiops:ListInvestigations",
            "apigateway:GET",
            "athena:List*",
            "autoscaling:Describe*",
            "aws-marketplace:ViewSubscriptions",
            "backup:DescribeBackupJob",
            "backup:DescribeBackupVault",
            "backup:DescribeCopyJob",
            "backup:DescribeFramework",
            "backup:DescribeGlobalSettings",
            "backup:DescribeProtectedResource",
            "backup:DescribeRecoveryPoint",
            "backup:DescribeRegionSettings",
            "backup:DescribeReportJob",
            "backup:DescribeReportPlan",
            "backup:DescribeRestoreJob",
            "backup:GetSupportedResourceTypes",
            "backup:ListBackupJobs",
            "backup:ListBackupPlanTemplates",
            "backup:ListBackupPlanVersions",
            "backup:ListBackupPlans",
            "backup:ListBackupSelections",
            "backup:ListBackupVaults",
            "backup:ListCopyJobs",
            "backup:ListFrameworks",
            "backup:ListLegalHolds",
            "backup:ListProtectedResources",
            "backup:ListProtectedResourcesByBackupVault",
            "backup:ListRecoveryPointsByBackupVault",
            "backup:ListRecoveryPointsByLegalHold",
            "backup:ListRecoveryPointsByResource",
            "backup:ListReportJobs",
            "backup:ListReportPlans",
            "backup:ListRestoreJobs",
            "backup:ListTags",
            "batch:ListJobs",
            "bedrock:ListCustomModels",
            "bedrock:ListTagsForResource",
            "clouddirectory:ListAppliedSchemaArns",
            "clouddirectory:ListDevelopmentSchemaArns",
            "clouddirectory:ListDirectories",
            "clouddirectory:ListPublishedSchemaArns",
            "cloudformation:DescribeStacks",
            "cloudformation:List*",
            "cloudfront:List*",
            "cloudsearch:DescribeDomains",
            "cloudsearch:List*",
            "cloudtrail:DescribeTrails",
            "cloudtrail:ListTrails",
            "cloudtrail:LookupEvents",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "codebuild:ListBuilds*",
            "codebuild:ListProjects",
            "codecommit:List*",
            "codedeploy:BatchGetApplicationRevisions",
            "codedeploy:BatchGetApplications",
            "codedeploy:BatchGetDeploymentGroups",
            "codedeploy:BatchGetDeploymentInstances",
            "codedeploy:BatchGetDeploymentTargets",
            "codedeploy:BatchGetDeployments",
            "codedeploy:BatchGetOnPremisesInstances",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codepipeline:ListPipelines",
            "codestar:List*",
            "cognito-identity:ListIdentities",
            "cognito-identity:ListIdentityPools",
            "cognito-idp:List*",
            "cognito-sync:ListDatasets",
            "comprehend:Describe*",
            "comprehend:List*",
            "config:Describe*",
            "config:List*",
            "connect:List*",
            "cost-optimization-hub:GetPreferences",
            "cost-optimization-hub:GetRecommendation",
            "cost-optimization-hub:ListEnrollmentStatuses",
            "cost-optimization-hub:ListRecommendationSummaries",
            "cost-optimization-hub:ListRecommendations",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetAccountLimits",
            "datapipeline:ListPipelines",
            "dax:DescribeClusters",
            "dax:DescribeDefaultParameters",
            "dax:DescribeEvents",
            "dax:DescribeParameterGroups",
            "dax:DescribeParameters",
            "dax:DescribeSubnetGroups",
            "dax:ListTags",
            "devicefarm:List*",
            "directconnect:Describe*",
            "discovery:List*",
            "dms:List*",
            "ds:DescribeDirectories",
            "dynamodb:DescribeBackup",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeGlobalTableSettings",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeReservedCapacity",
            "dynamodb:DescribeReservedCapacityOfferings",
            "dynamodb:DescribeStream",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListBackups",
            "dynamodb:ListExports",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListStreams",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeBundleTasks",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeConversionTasks",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeExportTasks",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeHost*",
            "ec2:DescribeIdFormat",
            "ec2:DescribeIdentityIdFormat",
            "ec2:DescribeImage*",
            "ec2:DescribeImport*",
            "ec2:DescribeInstance*",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
            "ec2:DescribeLocalGatewayVirtualInterfaces",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetwork*",
            "ec2:DescribePlacementGroups",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeReserved*",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshot*",
            "ec2:DescribeSpot*",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolume*",
            "ec2:DescribeVpc*",
            "ec2:DescribeVpnGateways",
            "ec2:SearchLocalGatewayRoutes",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "ecs:Describe*",
            "ecs:List*",
            "eks:ListTagsForResource",
            "elastic-inference:DescribeAcceleratorOfferings",
            "elastic-inference:DescribeAcceleratorTypes",
            "elastic-inference:DescribeAccelerators",
            "elastic-inference:ListTagsForResource",
            "elasticache:Describe*",
            "elasticbeanstalk:DescribeApplicationVersions",
            "elasticbeanstalk:DescribeApplications",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticbeanstalk:ListAvailableSolutionStacks",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticmapreduce:List*",
            "elastictranscoder:List*",
            "emr-serverless:ListApplications",
            "es:DescribeElasticsearchDomain",
            "es:DescribeElasticsearchDomains",
            "es:ListDomainNames",
            "events:ListRuleNamesByTarget",
            "events:ListRules",
            "events:ListTargetsByRule",
            "firehose:DescribeDeliveryStream",
            "firehose:List*",
            "fsx:DescribeFileSystems",
            "gamelift:List*",
            "glacier:List*",
            "glue:GetTags",
            "greengrass:List*",
            "iam:GetAccountSummary",
            "iam:GetLoginProfile",
            "iam:List*",
            "importexport:ListJobs",
            "inspector:List*",
            "iot:List*",
            "kafka:ListClusters",
            "kendra:ListDataSources",
            "kendra:ListTagsForResource",
            "kinesis:ListStreams",
            "kinesisanalytics:ListApplications",
            "kinesisanalytics:ListTagsForResource",
            "kms:ListKeys",
            "kms:ListResourceTags",
            "lambda:List*",
            "lex:GetBotAliases",
            "lex:GetBotChannelAssociations",
            "lex:GetBotVersions",
            "lex:GetBots",
            "lex:GetIntentVersions",
            "lex:GetIntents",
            "lex:GetSlotTypeVersions",
            "lex:GetSlotTypes",
            "lex:GetUtterancesView",
            "lightsail:GetBlueprints",
            "lightsail:GetBundles",
            "lightsail:GetInstanceSnapshots",
            "lightsail:GetInstances",
            "lightsail:GetKeyPair",
            "lightsail:GetRegions",
            "lightsail:GetStaticIps",
            "lightsail:IsVpcPeered",
            "logs:Describe*",
            "logs:GetTransformer",
            "logs:ListEntitiesForLogGroup",
            "logs:ListLogGroupsForEntity",
            "logs:ListLogGroupsForQuery",
            "logs:ListTagsForResource",
            "lookoutvision:ListModelPackagingJobs",
            "lookoutvision:ListModels",
            "lookoutvision:ListProjects",
            "m2:GetApplication",
            "m2:GetEnvironment",
            "m2:ListApplications",
            "m2:ListEnvironments",
            "m2:ListTagsForResource",
            "machinelearning:Describe*",
            "mediaconnect:ListEntitlements",
            "mediaconnect:ListFlows",
            "mediaconnect:ListOfferings",
            "mediaconnect:ListReservations",
            "mobiletargeting:GetApplicationSettings",
            "mobiletargeting:GetCampaigns",
            "mobiletargeting:GetImportJobs",
            "mobiletargeting:GetSegments",
            "oam:ListAttachedLinks",
            "oam:ListLinks",
            "oam:ListSinks",
            "opsworks-cm:Describe*",
            "opsworks:Describe*",
            "organizations:List*",
            "outposts:GetOutpost",
            "outposts:GetOutpostInstanceTypes",
            "outposts:ListOutposts",
            "outposts:ListSites",
            "outposts:ListTagsForResource",
            "polly:Describe*",
            "polly:List*",
            "profile:ListDomains",
            "profile:ListIntegrations",
            "rds:Describe*",
            "redshift-serverless:ListTagsForResource",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "redshift:DescribeEvents",
            "redshift:ViewQueriesInConsole",
            "resource-explorer-2:GetDefaultView",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListSupportedResourceTypes",
            "resource-explorer-2:ListTagsForResource",
            "resource-explorer-2:ListViews",
            "route53:Get*",
            "route53:List*",
            "route53domains:List*",
            "route53resolver:Get*",
            "route53resolver:List*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultiRegionAccessPoints",
            "sagemaker:Describe*",
            "sagemaker:List*",
            "sdb:List*",
            "servicecatalog:List*",
            "ses:DescribeActiveReceiptRuleSet",
            "ses:List*",
            "ses:ListDedicatedIpPools",
            "shield:List*",
            "sns:List*",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListDeadLetterSourceQueues",
            "sqs:ListMessageMoveTasks",
            "sqs:ListQueueTags",
            "sqs:ListQueues",
            "ssm:ListAssociations",
            "ssm:ListDocuments",
            "states:ListActivities",
            "states:ListStateMachineAliases",
            "states:ListStateMachineVersions",
            "states:ListStateMachines",
            "storagegateway:ListGateways",
            "storagegateway:ListLocalDisks",
            "storagegateway:ListVolumeRecoveryPoints",
            "storagegateway:ListVolumes",
            "swf:List*",
            "trustedadvisor:Describe*",
            "waf-regional:List*",
            "waf:List*",
            "wafv2:List*",
            "workdocs:DescribeAvailableDirectories",
            "workdocs:DescribeInstances",
            "workmail:Describe*",
            "workspaces:Describe*"
        ]
    },
    "SupportUser": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:ListCertificateAuthorities",
            "acm:DescribeCertificate",
            "acm:GetCertificate",
            "acm:List*",
            "apigateway:GET",
            "autoscaling:Describe*",
            "aws-marketplace:ViewSubscriptions",
            "cloudformation:Describe*",
            "cloudformation:EstimateTemplateCost",
            "cloudformation:Get*",
            "cloudformation:List*",
            "cloudfront:Get*",
            "cloudfront:List*",
            "cloudsearch:Describe*",
            "cloudsearch:List*",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListPublicKeys",
            "cloudtrail:ListTags",
            "cloudtrail:LookupEvents",
            "cloudwatch:Describe*",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "codecommit:BatchGetRepositories",
            "codecommit:Get*",
            "codecommit:List*",
            "codedeploy:Batch*",
            "codedeploy:Get*",
            "codedeploy:List*",
            "codepipeline:AcknowledgeJob",
            "codepipeline:AcknowledgeThirdPartyJob",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:ListActionTypes",
            "codepipeline:ListPipelines",
            "codepipeline:PollForJobs",
            "codepipeline:PollForThirdPartyJobs",
            "cognito-identity:Describe*",
            "cognito-identity:List*",
            "cognito-identity:LookupDeveloperIdentity",
            "cognito-idp:DescribeResourceServer",
            "cognito-idp:DescribeRiskConfiguration",
            "cognito-idp:DescribeUserImportJob",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolDomain",
            "cognito-idp:List*",
            "cognito-sync:Describe*",
            "cognito-sync:GetBulkPublishDetails",
            "cognito-sync:GetCognitoEvents",
            "cognito-sync:GetIdentityPoolConfiguration",
            "cognito-sync:List*",
            "config:DescribeConfigRuleEvaluationStatus",
            "config:DescribeConfigRules",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "config:DescribeDeliveryChannelStatus",
            "config:DescribeDeliveryChannels",
            "config:GetResourceConfigHistory",
            "config:ListDiscoveredResources",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:QueryObjects",
            "datapipeline:ReportTaskProgress",
            "datapipeline:ReportTaskRunnerHeartbeat",
            "devicefarm:Get*",
            "devicefarm:List*",
            "directconnect:Describe*",
            "discovery:Describe*",
            "discovery:ListConfigurations",
            "dms:Describe*",
            "dms:List*",
            "ds:DescribeDirectories",
            "ds:DescribeSnapshots",
            "ds:GetDirectoryLimits",
            "ds:GetSnapshotLimits",
            "ds:ListAuthorizedApplications",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "ec2:Describe*",
            "ec2:DescribeHosts",
            "ec2:DescribeIdFormat",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeNatGateways",
            "ec2:DescribeReservedInstancesModifications",
            "ec2:DescribeTags",
            "ec2:SearchLocalGatewayRoutes",
            "ec2:describeIdentityIdFormat",
            "ecr:BatchCheckLayerAvailability",
            "ecr:DescribeRepositories",
            "ecr:GetRepositoryPolicy",
            "ecr:ListImages",
            "ecs:Describe*",
            "ecs:List*",
            "elasticache:Describe*",
            "elasticache:List*",
            "elasticbeanstalk:Check*",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticbeanstalk:RequestEnvironmentInfo",
            "elasticbeanstalk:RetrieveEnvironmentInfo",
            "elasticbeanstalk:ValidateConfigurationSettings",
            "elasticfilesystem:Describe*",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:List*",
            "elastictranscoder:List*",
            "elastictranscoder:ReadJob",
            "es:Describe*",
            "es:ESHttpGet",
            "es:ESHttpHead",
            "es:List*",
            "events:DescribeRule",
            "events:List*",
            "events:TestEventPattern",
            "firehose:Describe*",
            "firehose:List*",
            "gamelift:Describe*",
            "gamelift:List*",
            "glacier:DescribeJob",
            "glacier:DescribeVault",
            "glacier:Get*",
            "glacier:List*",
            "glacier:ListVaults",
            "iam:GenerateCredentialReport",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:Get*",
            "iam:List*",
            "importexport:GetStatus",
            "importexport:ListJobs",
            "inspector:Describe*",
            "inspector:List*",
            "iot:Describe*",
            "iot:Get*",
            "iot:List*",
            "kinesis:Describe*",
            "kinesis:Get*",
            "kinesis:List*",
            "kinesisanalytics:DescribeApplication",
            "kinesisanalytics:DiscoverInputSchema",
            "kinesisanalytics:GetApplicationState",
            "kinesisanalytics:ListApplications",
            "kms:Describe*",
            "kms:Get*",
            "kms:List*",
            "lambda:Get*",
            "lambda:List*",
            "logs:Describe*",
            "logs:TestMetricFilter",
            "machinelearning:Describe*",
            "machinelearning:Get*",
            "opsworks:Describe*",
            "rds:Describe*",
            "rds:ListTagsForResource",
            "redshift:Describe*",
            "route53:Get*",
            "route53:List*",
            "route53domains:CheckDomainAvailability",
            "route53domains:GetDomainDetail",
            "route53domains:GetOperationDetail",
            "route53domains:List*",
            "s3:List*",
            "sdb:GetAttributes",
            "sdb:List*",
            "sdb:Select*",
            "servicecatalog:DescribeProduct",
            "servicecatalog:DescribeProductView",
            "servicecatalog:DescribeProvisioningParameters",
            "servicecatalog:DescribeRecord",
            "servicecatalog:ListLaunchPaths",
            "servicecatalog:ListRecordHistory",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:SearchProducts",
            "ses:Get*",
            "ses:List*",
            "sns:Get*",
            "sns:List*",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListQueues",
            "sqs:ReceiveMessage",
            "ssm:Describe*",
            "ssm:List*",
            "storagegateway:Describe*",
            "storagegateway:List*",
            "support:*",
            "swf:Count*",
            "swf:Describe*",
            "swf:Get*",
            "swf:List*",
            "waf:Get*",
            "waf:List*",
            "workdocs:Describe*",
            "workmail:Describe*",
            "workmail:Get*",
            "workspaces:Describe*"
        ]
    },
    "SystemAdministrator": {
        "permissions": [
            "acm:Describe*",
            "acm:Get*",
            "acm:List*",
            "acm:Request*",
            "acm:Resend*",
            "autoscaling:*",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListPublicKeys",
            "cloudtrail:ListTags",
            "cloudtrail:LookupEvents",
            "cloudtrail:StartLogging",
            "cloudtrail:StopLogging",
            "cloudwatch:*",
            "codecommit:BatchGetRepositories",
            "codecommit:CreateBranch",
            "codecommit:CreateRepository",
            "codecommit:Get*",
            "codecommit:GitPull",
            "codecommit:GitPush",
            "codecommit:List*",
            "codecommit:Put*",
            "codecommit:Test*",
            "codecommit:Update*",
            "codedeploy:*",
            "codepipeline:*",
            "config:*",
            "ds:*",
            "ec2:AcceptVpcPeeringConnection",
            "ec2:Allocate*",
            "ec2:AssignPrivateIpAddresses*",
            "ec2:Associate*",
            "ec2:AttachClassicLinkVpc",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVolume",
            "ec2:AttachVpnGateway",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:Bundle*",
            "ec2:Cancel*",
            "ec2:Copy*",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDhcpOptions",
            "ec2:CreateFlowLogs",
            "ec2:CreateImage",
            "ec2:CreateInstanceExportTask",
            "ec2:CreateInternetGateway",
            "ec2:CreateKeyPair",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreatePlacementGroup",
            "ec2:CreateReservedInstancesListing",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateSpotDatafeedSubscription",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateVpcPeeringConnection",
            "ec2:CreateVpnConnection",
            "ec2:CreateVpnConnectionRoute",
            "ec2:CreateVpnGateway",
            "ec2:DeleteCustomerGateway",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteFlowLogs",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteKeyPair",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkAcl*",
            "ec2:DeleteNetworkInterface",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeleteSpotDatafeedSubscription",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpoints",
            "ec2:DeleteVpcPeeringConnection",
            "ec2:DeleteVpnConnection",
            "ec2:DeleteVpnConnectionRoute",
            "ec2:DeleteVpnGateway",
            "ec2:DeregisterImage",
            "ec2:Describe*",
            "ec2:DetachClassicLinkVpc",
            "ec2:DetachInternetGateway",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVolume",
            "ec2:DetachVpnGateway",
            "ec2:DisableVgwRoutePropagation",
            "ec2:DisableVpcClassicLink",
            "ec2:DisableVpcClassicLinkDnsSupport",
            "ec2:DisassociateAddress",
            "ec2:DisassociateRouteTable",
            "ec2:EnableVgwRoutePropagation",
            "ec2:EnableVolumeIO",
            "ec2:EnableVpcClassicLink",
            "ec2:EnableVpcClassicLinkDnsSupport",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot",
            "ec2:GetHostReservationPurchasePreview",
            "ec2:GetLaunchTemplateData",
            "ec2:GetPasswordData",
            "ec2:Import*",
            "ec2:Modify*",
            "ec2:MonitorInstances",
            "ec2:MoveAddressToVpc",
            "ec2:Purchase*",
            "ec2:RebootInstances",
            "ec2:RegisterImage",
            "ec2:RejectVpcPeeringConnection",
            "ec2:Release*",
            "ec2:Replace*",
            "ec2:ReportInstanceStatus",
            "ec2:Request*",
            "ec2:Reset*",
            "ec2:RestoreAddressToClassic",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:RunScheduledInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ec2:UnassignPrivateIpAddresses",
            "ec2:UnmonitorInstances",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
            "elasticloadbalancing:*",
            "events:*",
            "iam:GetAccessKeyLastUsed",
            "iam:GetAccount*",
            "iam:GetContextKeys*",
            "iam:GetCredentialReport",
            "iam:GetGroup*",
            "iam:GetInstanceProfile",
            "iam:GetLoginProfile",
            "iam:GetOpenIDConnectProvider",
            "iam:GetPolicy*",
            "iam:GetRole",
            "iam:GetRole*",
            "iam:GetSAMLProvider",
            "iam:GetSSHPublicKey",
            "iam:GetServerCertificate",
            "iam:GetServiceLastAccessed*",
            "iam:GetUser*",
            "iam:ListAccessKeys",
            "iam:ListAccountAliases",
            "iam:ListAttached*",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroups",
            "iam:ListGroupsForUser",
            "iam:ListInstanceProfiles*",
            "iam:ListMFADevices",
            "iam:ListOpenIDConnectProviders",
            "iam:ListPolicies",
            "iam:ListPoliciesGrantingServiceAccess",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "iam:ListSSHPublicKeys",
            "iam:ListServerCertificates",
            "iam:ListSigningCertificates",
            "iam:ListUserPolicies",
            "iam:PassRole",
            "iam:Simulate*",
            "iam:UpdateServerCertificate",
            "iam:UpdateSigningCertificate",
            "iam:Upload*",
            "kinesis:ListStreams",
            "kinesis:PutRecord",
            "kms:CreateAlias",
            "kms:CreateKey",
            "kms:DeleteAlias",
            "kms:Describe*",
            "kms:Encrypt",
            "kms:GenerateRandom",
            "kms:Get*",
            "kms:List*",
            "kms:ReEncrypt*",
            "lambda:Create*",
            "lambda:Delete*",
            "lambda:Get*",
            "lambda:InvokeFunction",
            "lambda:List*",
            "lambda:PublishVersion",
            "lambda:Update*",
            "logs:*",
            "rds:Describe*",
            "rds:ListTagsForResource",
            "route53:*",
            "route53domains:*",
            "s3:*",
            "ses:*",
            "sns:*",
            "sqs:*",
            "trustedadvisor:*"
        ]
    },
    "DatabaseAdministrator": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:Describe*",
            "cloudwatch:DisableAlarmpermissions",
            "cloudwatch:EnableAlarmpermissions",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "cloudwatch:PutMetricAlarm",
            "datapipeline:ActivatePipeline",
            "datapipeline:CreatePipeline",
            "datapipeline:DeletePipeline",
            "datapipeline:DescribeObjects",
            "datapipeline:DescribePipelines",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:PutPipelineDefinition",
            "datapipeline:QueryObjects",
            "dynamodb:*",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticache:*",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:ListKeys",
            "lambda:CreateEventSourceMapping",
            "lambda:CreateFunction",
            "lambda:DeleteEventSourceMapping",
            "lambda:DeleteFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "logs:Create*",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "logs:PutMetricFilter",
            "rds:*",
            "redshift:*",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteObject*",
            "s3:Get*",
            "s3:List*",
            "s3:PutAccelerateConfiguration",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutBucketWebsite",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject*",
            "s3:PutReplicationConfiguration",
            "s3:Replicate*",
            "s3:RestoreObject",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:Get*",
            "sns:List*",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe"
        ]
    },
    "DataScientist": {
        "permissions": [
            "autoscaling:*",
            "cloudformation:CreateStack",
            "cloudformation:DescribeStackEvents",
            "cloudwatch:*",
            "datapipeline:Describe*",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:ListPipelines",
            "datapipeline:QueryObjects",
            "dynamodb:*",
            "ec2:CancelSpotFleetRequests",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySpotFleetRequest",
            "ec2:RequestSpotFleet",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "elasticfilesystem:*",
            "elasticmapreduce:*",
            "es:*",
            "firehose:*",
            "fsx:DescribeFileSystems",
            "iam:GetInstanceProfile",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kinesis:*",
            "kms:List*",
            "lambda:Create*",
            "lambda:Delete*",
            "lambda:Get*",
            "lambda:InvokeFunction",
            "lambda:List*",
            "lambda:PublishVersion",
            "lambda:Update*",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "machinelearning:*",
            "rds:*",
            "redshift:*",
            "s3:Abort*",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:Get*",
            "s3:List*",
            "s3:PutAccelerateConfiguration",
            "s3:PutBucketCors",
            "s3:PutBucketLogging",
            "s3:PutBucketNotification",
            "s3:PutBucketTagging",
            "s3:PutObject",
            "s3:Replicate*",
            "s3:RestoreObject",
            "sagemaker:*",
            "sagemaker:*App",
            "sagemaker:*FlowDefinition",
            "sagemaker:*FlowDefinitions",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeUserProfile",
            "sagemaker:ListApps",
            "sagemaker:ListDomains",
            "sagemaker:ListUserProfiles",
            "sdb:*",
            "sns:CreateTopic",
            "sns:Get*",
            "sns:List*",
            "sns:ListSubscriptions",
            "sns:ListTopics"
        ]
    },
    "NetworkAdministrator": {
        "permissions": [
            "autoscaling:Describe*",
            "cloudfront:ListDistributions",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "directconnect:*",
            "ec2:AcceptTransitGatewayVpcAttachment",
            "ec2:AcceptVpcEndpointConnections",
            "ec2:AcceptVpcPeeringConnection",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateDhcpOptions",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSecurityGroupVpc",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateTransitGatewayRouteTable",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachClassicLinkVpc",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVpnGateway",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCarrierGateway",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateDhcpOptions",
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:CreateFlowLogs",
            "ec2:CreateInternetGateway",
            "ec2:CreateLocalGatewayRoute",
            "ec2:CreateLocalGatewayRouteTableVpcAssociation",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreatePlacementGroup",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateTransitGateway",
            "ec2:CreateTransitGatewayRoute",
            "ec2:CreateTransitGatewayRouteTable",
            "ec2:CreateTransitGatewayVpcAttachment",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:CreateVpcEndpointConnectionNotification",
            "ec2:CreateVpcEndpointServiceConfiguration",
            "ec2:CreateVpcPeeringConnection",
            "ec2:CreateVpnConnection",
            "ec2:CreateVpnConnectionRoute",
            "ec2:CreateVpnGateway",
            "ec2:DeleteCarrierGateway",
            "ec2:DeleteCustomerGateway",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteEgressOnlyInternetGateway",
            "ec2:DeleteFlowLogs",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteLocalGatewayRoute",
            "ec2:DeleteLocalGatewayRouteTableVpcAssociation",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkAclEntry",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteTransitGateway",
            "ec2:DeleteTransitGatewayRoute",
            "ec2:DeleteTransitGatewayRouteTable",
            "ec2:DeleteTransitGatewayVpcAttachment",
            "ec2:DeleteVolume",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpointConnectionNotifications",
            "ec2:DeleteVpcEndpointServiceConfigurations",
            "ec2:DeleteVpcEndpoints",
            "ec2:DeleteVpcPeeringConnection",
            "ec2:DeleteVpnConnection",
            "ec2:DeleteVpnConnectionRoute",
            "ec2:DeleteVpnGateway",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeIpv6Pools",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGatewayVirtualInterfaceGroups",
            "ec2:DescribeLocalGatewayVirtualInterfaces",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeMovingAddresses",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribePrefixLists",
            "ec2:DescribePublicIpv4Pools",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroupVpcAssociations",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcClassicLinkDnsSupport",
            "ec2:DescribeVpcEndpointConnectionNotifications",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpointServicePermissions",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:DetachClassicLinkVpc",
            "ec2:DetachInternetGateway",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVpnGateway",
            "ec2:DisableTransitGatewayRouteTablePropagation",
            "ec2:DisableVgwRoutePropagation",
            "ec2:DisableVpcClassicLink",
            "ec2:DisableVpcClassicLinkDnsSupport",
            "ec2:DisassociateAddress",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateSecurityGroupVpc",
            "ec2:DisassociateSubnetCidrBlock",
            "ec2:DisassociateTransitGatewayRouteTable",
            "ec2:DisassociateVpcCidrBlock",
            "ec2:EnableTransitGatewayRouteTablePropagation",
            "ec2:EnableVgwRoutePropagation",
            "ec2:EnableVpcClassicLink",
            "ec2:EnableVpcClassicLinkDnsSupport",
            "ec2:ExportTransitGatewayRoutes",
            "ec2:GetConsoleScreenshot",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:GetTransitGatewayAttachmentPropagations",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:GetVpnConnectionDeviceSampleConfiguration",
            "ec2:GetVpnConnectionDeviceTypes",
            "ec2:GetVpnTunnelReplacementStatus",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySecurityGroupRules",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyTransitGateway",
            "ec2:ModifyTransitGatewayVpcAttachment",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ModifyVpcEndpointConnectionNotification",
            "ec2:ModifyVpcEndpointServiceConfiguration",
            "ec2:ModifyVpcEndpointServicePermissions",
            "ec2:ModifyVpcPeeringConnectionOptions",
            "ec2:ModifyVpcTenancy",
            "ec2:ModifyVpnConnection",
            "ec2:ModifyVpnConnectionOptions",
            "ec2:ModifyVpnTunnelCertificate",
            "ec2:ModifyVpnTunnelOptions",
            "ec2:MoveAddressToVpc",
            "ec2:RejectTransitGatewayVpcAttachment",
            "ec2:RejectVpcEndpointConnections",
            "ec2:RejectVpcPeeringConnection",
            "ec2:ReleaseAddress",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:ReplaceNetworkAclEntry",
            "ec2:ReplaceRoute",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:ReplaceTransitGatewayRoute",
            "ec2:ReplaceVpnTunnel",
            "ec2:ResetNetworkInterfaceAttribute",
            "ec2:RestoreAddressToClassic",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:SearchLocalGatewayRoutes",
            "ec2:SearchTransitGatewayRoutes",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticbeanstalk:RequestEnvironmentInfo",
            "elasticbeanstalk:RetrieveEnvironmentInfo",
            "elasticloadbalancing:*",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "networkmanager:*",
            "route53:*",
            "route53domains:*",
            "s3:GetBucketLocation",
            "s3:GetBucketWebsite",
            "s3:ListBucket",
            "sns:CreateTopic",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics"
        ]
    },
    "Billing": {
        "permissions": [
            "account:GetAccountInformation",
            "aws-portal:*Billing",
            "aws-portal:*PaymentMethods",
            "aws-portal:*Usage",
            "billing:CreateBillingView",
            "billing:DeleteBillingView",
            "billing:GetBillingData",
            "billing:GetBillingDetails",
            "billing:GetBillingNotifications",
            "billing:GetBillingPreferences",
            "billing:GetBillingView",
            "billing:GetContractInformation",
            "billing:GetCredits",
            "billing:GetIAMAccessPreference",
            "billing:GetResourcePolicy",
            "billing:GetSellerOfRecord",
            "billing:ListBillingViews",
            "billing:ListSourceViewsForBillingView",
            "billing:ListTagsForResource",
            "billing:PutContractInformation",
            "billing:RedeemCredits",
            "billing:TagResource",
            "billing:UntagResource",
            "billing:UpdateBillingPreferences",
            "billing:UpdateBillingView",
            "billing:UpdateIAMAccessPreference",
            "budgets:CreateBudgetAction",
            "budgets:DeleteBudgetAction",
            "budgets:DescribeBudgetAction",
            "budgets:DescribeBudgetActionHistories",
            "budgets:DescribeBudgetpermissionsForAccount",
            "budgets:DescribeBudgetpermissionsForBudget",
            "budgets:ExecuteBudgetAction",
            "budgets:ModifyBudget",
            "budgets:UpdateBudgetAction",
            "budgets:ViewBudget",
            "ce:CreateCostCategoryDefinition",
            "ce:CreateNotificationSubscription",
            "ce:CreateReport",
            "ce:DeleteCostCategoryDefinition",
            "ce:DeleteNotificationSubscription",
            "ce:DeleteReport",
            "ce:DescribeCostCategoryDefinition",
            "ce:GetCostAndUsage",
            "ce:GetDimensionValues",
            "ce:GetTags",
            "ce:ListCostAllocationTagBackfillHistory",
            "ce:ListCostAllocationTags",
            "ce:ListCostCategoryDefinitions",
            "ce:ListTagsForResource",
            "ce:StartCostAllocationTagBackfill",
            "ce:TagResource",
            "ce:UntagResource",
            "ce:UpdateCostAllocationTagsStatus",
            "ce:UpdateCostCategoryDefinition",
            "ce:UpdateNotificationSubscription",
            "ce:UpdatePreferences",
            "ce:UpdateReport",
            "consolidatedbilling:GetAccountBillingRole",
            "consolidatedbilling:ListLinkedAccounts",
            "cur:DeleteReportDefinition",
            "cur:DescribeReportDefinitions",
            "cur:GetClassicReport",
            "cur:GetClassicReportPreferences",
            "cur:GetUsageReport",
            "cur:ModifyReportDefinition",
            "cur:PutClassicReportPreferences",
            "cur:PutReportDefinition",
            "cur:ValidateReportDestination",
            "freetier:GetFreeTierAlertPreference",
            "freetier:GetFreeTierUsage",
            "freetier:PutFreeTierAlertPreference",
            "invoicing:BatchGetInvoiceProfile",
            "invoicing:CreateInvoiceUnit",
            "invoicing:DeleteInvoiceUnit",
            "invoicing:GetInvoiceEmailDeliveryPreferences",
            "invoicing:GetInvoicePDF",
            "invoicing:GetInvoiceUnit",
            "invoicing:ListInvoiceSummaries",
            "invoicing:ListInvoiceUnits",
            "invoicing:ListTagsForResource",
            "invoicing:PutInvoiceEmailDeliveryPreferences",
            "invoicing:TagResource",
            "invoicing:UntagResource",
            "invoicing:UpdateInvoiceUnit",
            "payments:CreateFinancingApplication",
            "payments:CreatePaymentInstrument",
            "payments:DeletePaymentInstrument",
            "payments:GetFinancingApplication",
            "payments:GetFinancingLine",
            "payments:GetFinancingLineWithdrawal",
            "payments:GetFinancingOption",
            "payments:GetPaymentInstrument",
            "payments:GetPaymentStatus",
            "payments:ListFinancingApplications",
            "payments:ListFinancingLineWithdrawals",
            "payments:ListFinancingLines",
            "payments:ListPaymentInstruments",
            "payments:ListPaymentPreferences",
            "payments:ListPaymentProgramOptions",
            "payments:ListPaymentProgramStatus",
            "payments:ListTagsForResource",
            "payments:MakePayment",
            "payments:TagResource",
            "payments:UntagResource",
            "payments:UpdateFinancingApplication",
            "payments:UpdatePaymentInstrument",
            "payments:UpdatePaymentPreferences",
            "pricing:DescribeServices",
            "purchase-orders:AddPurchaseOrder",
            "purchase-orders:DeletePurchaseOrder",
            "purchase-orders:GetPurchaseOrder",
            "purchase-orders:ListPurchaseOrderInvoices",
            "purchase-orders:ListPurchaseOrders",
            "purchase-orders:ListTagsForResource",
            "purchase-orders:ModifyPurchaseOrders",
            "purchase-orders:TagResource",
            "purchase-orders:UntagResource",
            "purchase-orders:UpdatePurchaseOrder",
            "purchase-orders:UpdatePurchaseOrderStatus",
            "purchase-orders:ViewPurchaseOrders",
            "support:AddAttachmentsToSet",
            "support:CreateCase",
            "sustainability:GetCarbonFootprintSummary",
            "tax:BatchPutTaxRegistration",
            "tax:DeleteTaxRegistration",
            "tax:GetExemptions",
            "tax:GetTaxInheritance",
            "tax:GetTaxInterview",
            "tax:GetTaxRegistration",
            "tax:GetTaxRegistrationDocument",
            "tax:ListTaxRegistrations",
            "tax:PutTaxInheritance",
            "tax:PutTaxInterview",
            "tax:PutTaxRegistration",
            "tax:UpdateExemptions"
        ]
    },
    "IAMUserChangePassword": {
        "permissions": [
            "iam:ChangePassword",
            "iam:GetAccountPasswordPolicy"
        ]
    },
    "AmazonElasticMapReduceforAutoScalingRole": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ModifyInstanceGroups"
        ]
    },
    "AmazonAppStreamServiceAccess": {
        "permissions": [
            "ds:DescribeDirectories",
            "ec2:AssociateAddress",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutEncryptionConfiguration",
            "s3:PutObject"
        ]
    },
    "AWSOpsWorksCMInstanceProfileRole": {
        "permissions": [
            "acm:GetCertificate",
            "cloudformation:DescribeStackResource",
            "cloudformation:SignalResource",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultipartUploadParts",
            "s3:PutObject",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AWSOpsWorksCMServiceRole": {
        "permissions": [
            "acm:DeleteCertificate",
            "acm:ImportCertificate",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateStack",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateImage",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeregisterImage",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DisassociateAddress",
            "ec2:RebootInstances",
            "ec2:ReleaseAddress",
            "ec2:RunInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:PassRole",
            "opsworks-cm:DeleteServer",
            "opsworks-cm:StartMaintenance",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketTagging",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketTagging",
            "s3:PutObject",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:TagResource",
            "secretsmanager:UntagResource",
            "secretsmanager:UpdateSecret",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:ListCommandInvocations",
            "ssm:ListCommands",
            "ssm:SendCommand",
            "tag:TagResources",
            "tag:UntagResources"
        ]
    },
    "AmazonRekognitionFullAccess": {
        "permissions": [
            "rekognition:*"
        ]
    },
    "AmazonRekognitionReadOnlyAccess": {
        "permissions": [
            "rekognition:CompareFaces",
            "rekognition:DescribeDataset",
            "rekognition:DescribeProjectVersions",
            "rekognition:DescribeProjects",
            "rekognition:DescribeStreamProcessor",
            "rekognition:DetectCustomLabels",
            "rekognition:DetectFaces",
            "rekognition:DetectLabels",
            "rekognition:DetectModerationLabels",
            "rekognition:DetectProtectiveEquipment",
            "rekognition:DetectText",
            "rekognition:GetCelebrityInfo",
            "rekognition:GetCelebrityRecognition",
            "rekognition:GetContentModeration",
            "rekognition:GetFaceDetection",
            "rekognition:GetFaceSearch",
            "rekognition:GetLabelDetection",
            "rekognition:GetMediaAnalysisJob",
            "rekognition:GetPersonTracking",
            "rekognition:GetSegmentDetection",
            "rekognition:GetTextDetection",
            "rekognition:ListCollections",
            "rekognition:ListDatasetEntries",
            "rekognition:ListDatasetLabels",
            "rekognition:ListFaces",
            "rekognition:ListMediaAnalysisJobs",
            "rekognition:ListProjectPolicies",
            "rekognition:ListStreamProcessors",
            "rekognition:ListTagsForResource",
            "rekognition:ListUsers",
            "rekognition:RecognizeCelebrities",
            "rekognition:SearchFaces",
            "rekognition:SearchFacesByImage",
            "rekognition:SearchUsers",
            "rekognition:SearchUsersByImage"
        ]
    },
    "AmazonAthenaFullAccess": {
        "permissions": [
            "athena:*",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricAlarm",
            "datazone:ListAccountEnvironments",
            "datazone:ListDomains",
            "datazone:ListProjects",
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchGetPartition",
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:DeleteDatabase",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:GetCatalog",
            "glue:GetCatalogImportStatus",
            "glue:GetCatalogs",
            "glue:GetColumnStatisticsTaskRun",
            "glue:GetColumnStatisticsTaskRuns",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:StartColumnStatisticsTaskRun",
            "glue:UpdateDatabase",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "lakeformation:GetDataAccess",
            "pricing:GetProducts",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutObject",
            "sns:GetTopicAttributes",
            "sns:ListTopics"
        ]
    },
    "AmazonPollyFullAccess": {
        "permissions": [
            "polly:*"
        ]
    },
    "AmazonPollyReadOnlyAccess": {
        "permissions": [
            "polly:DescribeVoices",
            "polly:GetLexicon",
            "polly:GetSpeechSynthesisTask",
            "polly:ListLexicons",
            "polly:ListSpeechSynthesisTasks",
            "polly:SynthesizeSpeech"
        ]
    },
    "AmazonSSMMaintenanceWindowRole": {
        "permissions": [
            "lambda:InvokeFunction",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "ssm:GetAutomationExecution",
            "ssm:GetParameters",
            "ssm:ListCommands",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution",
            "states:DescribeExecution",
            "states:StartExecution",
            "tag:GetResources"
        ]
    },
    "AWSXrayWriteOnlyAccess": {
        "permissions": [
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries",
            "xray:GetSamplingTargets",
            "xray:PutTelemetryRecords",
            "xray:PutTraceSegments"
        ]
    },
    "AWSXrayReadOnlyAccess": {
        "permissions": [
            "xray:BatchGetTraceSummaryById",
            "xray:BatchGetTraces",
            "xray:GetDistinctTraceGraphs",
            "xray:GetGroup",
            "xray:GetGroups",
            "xray:GetInsight",
            "xray:GetInsightEvents",
            "xray:GetInsightImpactGraph",
            "xray:GetInsightSummaries",
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries",
            "xray:GetSamplingTargets",
            "xray:GetServiceGraph",
            "xray:GetTimeSeriesServiceStatistics",
            "xray:GetTraceGraph",
            "xray:GetTraceSummaries",
            "xray:ListResourcePolicies",
            "xray:ListTagsForResource"
        ]
    },
    "AWSXrayFullAccess": {
        "permissions": [
            "xray:*"
        ]
    },
    "AWSCodeBuildDeveloperAccess": {
        "permissions": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations",
            "cloudwatch:GetMetricStatistics",
            "codebuild:BatchGet*",
            "codebuild:DescribeCodeCoverages",
            "codebuild:DescribeTestCases",
            "codebuild:GetResourcePolicy",
            "codebuild:List*",
            "codebuild:RetryBuild",
            "codebuild:RetryBuildBatch",
            "codebuild:StartBuild",
            "codebuild:StartBuildBatch",
            "codebuild:StopBuild",
            "codebuild:StopBuildBatch",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetRepository",
            "codecommit:ListBranches",
            "codestar-connections:GetConnection",
            "codestar-connections:ListConnections",
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListTargets",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe",
            "codestar-notifications:UpdateNotificationRule",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget",
            "events:ListTargetsByRule",
            "logs:GetLogEvents",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "ssm:PutParameter",
            "ssm:StartSession"
        ]
    },
    "AWSCodeBuildReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "codebuild:BatchGet*",
            "codebuild:DescribeCodeCoverages",
            "codebuild:DescribeTestCases",
            "codebuild:GetResourcePolicy",
            "codebuild:List*",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetRepository",
            "codestar-connections:GetConnection",
            "codestar-connections:ListConnections",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget",
            "events:ListTargetsByRule",
            "logs:GetLogEvents"
        ]
    },
    "AWSCodeBuildAdminAccess": {
        "permissions": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations",
            "cloudwatch:GetMetricStatistics",
            "codebuild:*",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetRepository",
            "codecommit:ListBranches",
            "codecommit:ListRepositories",
            "codestar-connections:CreateConnection",
            "codestar-connections:DeleteConnection",
            "codestar-connections:GetConnection",
            "codestar-connections:GetIndividualAccessToken",
            "codestar-connections:GetInstallationUrl",
            "codestar-connections:ListConnections",
            "codestar-connections:ListInstallationTargets",
            "codestar-connections:ListTagsForResource",
            "codestar-connections:PassConnection",
            "codestar-connections:StartOAuthHandshake",
            "codestar-connections:TagResource",
            "codestar-connections:UntagResource",
            "codestar-connections:UpdateConnectionInstallation",
            "codestar-connections:UseConnection",
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListTargets",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe",
            "codestar-notifications:UpdateNotificationRule",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "elasticfilesystem:DescribeFileSystems",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListRuleNamesByTarget",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "logs:DeleteLogGroup",
            "logs:GetLogEvents",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "sns:SetTopicAttributes",
            "ssm:PutParameter",
            "ssm:StartSession"
        ]
    },
    "AmazonSSMAutomationRole": {
        "permissions": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateStack",
            "ec2:CopyImage",
            "ec2:CreateImage",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeregisterImage",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeTags",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "lambda:InvokeFunction",
            "sns:Publish",
            "ssm:*"
        ]
    },
    "AWSLambdaENIManagementAccess": {
        "permissions": [
            "ec2:AssignPrivateIpAddresses",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:UnassignPrivateIpAddresses"
        ]
    },
    "AWSHealthFullAccess": {
        "permissions": [
            "health:*",
            "iam:CreateServiceLinkedRole",
            "organizations:DescribeAccount",
            "organizations:DisableAWSServiceAccess",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListParents"
        ]
    },
    "AWSBatchFullAccess": {
        "permissions": [
            "batch:*",
            "cloudwatch:GetMetricStatistics",
            "ec2:DescribeImages",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ecs:Describe*",
            "ecs:DescribeClusters",
            "ecs:List*",
            "eks:DescribeCluster",
            "eks:ListClusters",
            "iam:CreateServiceLinkedRole",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:Describe*",
            "logs:FilterLogEvents",
            "logs:Get*",
            "logs:TestMetricFilter"
        ]
    },
    "AWSBatchServiceRole": {
        "permissions": [
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "ec2:CancelSpotFleetRequests",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequestHistory",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:ModifySpotFleetRequest",
            "ec2:RequestSpotFleet",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ecs:CreateCluster",
            "ecs:DeleteCluster",
            "ecs:DeregisterContainerInstance",
            "ecs:DeregisterTaskDefinition",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTasks",
            "ecs:ListAccountSettings",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "ecs:ListTasks",
            "ecs:RegisterTaskDefinition",
            "ecs:RunTask",
            "ecs:StartTask",
            "ecs:StopTask",
            "ecs:TagResource",
            "ecs:UpdateContainerAgent",
            "iam:CreateServiceLinkedRole",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:PutLogEvents"
        ]
    },
    "AWSQuicksightAthenaAccess": {
        "permissions": [
            "athena:BatchGetQueryExecution",
            "athena:CancelQueryExecution",
            "athena:GetCatalogs",
            "athena:GetDataCatalog",
            "athena:GetDatabase",
            "athena:GetExecutionEngine",
            "athena:GetExecutionEngines",
            "athena:GetNamespace",
            "athena:GetNamespaces",
            "athena:GetQueryExecution",
            "athena:GetQueryExecutions",
            "athena:GetQueryResults",
            "athena:GetQueryResultsStream",
            "athena:GetTable",
            "athena:GetTableMetadata",
            "athena:GetTables",
            "athena:GetWorkGroup",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListEngineVersions",
            "athena:ListQueryExecutions",
            "athena:ListTableMetadata",
            "athena:ListWorkGroups",
            "athena:RunQuery",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution",
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchGetPartition",
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:DeleteDatabase",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:GetCatalog",
            "glue:GetCatalogs",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:UpdateDatabase",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "lakeformation:GetDataAccess",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutObject"
        ]
    },
    "IAMSelfManageServiceSpecificCredentials": {
        "permissions": [
            "iam:CreateServiceSpecificCredential",
            "iam:DeleteServiceSpecificCredential",
            "iam:ListServiceSpecificCredentials",
            "iam:ResetServiceSpecificCredential",
            "iam:UpdateServiceSpecificCredential"
        ]
    },
    "AWSStepFunctionsReadOnlyAccess": {
        "permissions": [
            "states:DescribeActivity",
            "states:DescribeExecution",
            "states:DescribeMapRun",
            "states:DescribeStateMachine",
            "states:DescribeStateMachineAlias",
            "states:DescribeStateMachineForExecution",
            "states:GetExecutionHistory",
            "states:ListActivities",
            "states:ListExecutions",
            "states:ListMapRuns",
            "states:ListStateMachineAliases",
            "states:ListStateMachineVersions",
            "states:ListStateMachines",
            "states:ListTagsForResource",
            "states:ValidateStateMachineDefinition"
        ]
    },
    "AWSStepFunctionsFullAccess": {
        "permissions": [
            "states:*"
        ]
    },
    "AWSStepFunctionsConsoleFullAccess": {
        "permissions": [
            "iam:ListRoles",
            "iam:PassRole",
            "lambda:ListFunctions",
            "states:*"
        ]
    },
    "AutoScalingFullAccess": {
        "permissions": [
            "autoscaling:*",
            "cloudwatch:PutMetricAlarm",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AutoScalingReadOnlyAccess": {
        "permissions": [
            "autoscaling:Describe*"
        ]
    },
    "AutoScalingConsoleFullAccess": {
        "permissions": [
            "autoscaling:*",
            "cloudwatch:Describe*",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateKeyPair",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcs",
            "ec2:ImportKeyPair",
            "elasticloadbalancing:Describe*",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "sns:ListSubscriptions",
            "sns:ListTopics"
        ]
    },
    "AutoScalingConsoleReadOnlyAccess": {
        "permissions": [
            "autoscaling:Describe*",
            "cloudwatch:Describe*",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:Describe*",
            "sns:ListSubscriptions",
            "sns:ListTopics"
        ]
    },
    "AWSDataPipeline_FullAccess": {
        "permissions": [
            "datapipeline:*",
            "dynamodb:DescribeTable",
            "iam:GetInstanceProfile",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:PassRole",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSecurityGroups",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusters",
            "s3:List*",
            "sns:ListTopics",
            "sns:Subscribe"
        ]
    },
    "AWSDataPipeline_PowerUser": {
        "permissions": [
            "datapipeline:*",
            "dynamodb:DescribeTable",
            "iam:GetInstanceProfile",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:PassRole",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSecurityGroups",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusters",
            "s3:List*",
            "sns:ListTopics"
        ]
    },
    "ApplicationAutoScalingForAmazonAppStreamAccess": {
        "permissions": [
            "appstream:DescribeFleets",
            "appstream:UpdateFleet",
            "cloudwatch:DescribeAlarms"
        ]
    },
    "AWSGreengrassResourceAccessRolePolicy": {
        "permissions": [
            "greengrass:*",
            "iot:DeleteThingShadow",
            "iot:DescribeCertificate",
            "iot:DescribeThing",
            "iot:GetThingShadow",
            "iot:UpdateThingShadow",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "sagemaker:DescribeTrainingJob",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AWSElasticBeanstalkCustomPlatformforEC2Role": {
        "permissions": [
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CopyImage",
            "ec2:CreateImage",
            "ec2:CreateKeypair",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteKeypair",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeleteVolume",
            "ec2:DeregisterImage",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "ec2:GetPasswordData",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySnapshotAttribute",
            "ec2:RegisterImage",
            "ec2:RunInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:Get*",
            "s3:List*",
            "s3:PutObject"
        ]
    },
    "AmazonCloudDirectoryFullAccess": {
        "permissions": [
            "clouddirectory:*"
        ]
    },
    "AmazonCloudDirectoryReadOnlyAccess": {
        "permissions": [
            "clouddirectory:BatchRead",
            "clouddirectory:Get*",
            "clouddirectory:List*",
            "clouddirectory:LookupPolicy"
        ]
    },
    "AWSMarketplaceGetEntitlements": {
        "permissions": [
            "aws-marketplace:GetEntitlements"
        ]
    },
    "AWSOpsWorksCloudWatchLogs": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AmazonLexRunBotsOnly": {
        "permissions": [
            "lex:DeleteSession",
            "lex:GetSession",
            "lex:PostContent",
            "lex:PostText",
            "lex:PutSession",
            "lex:RecognizeText",
            "lex:RecognizeUtterance",
            "lex:StartConversation"
        ]
    },
    "AmazonLexReadOnly": {
        "permissions": [
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotChannel",
            "lex:DescribeBotLocale",
            "lex:DescribeBotRecommendation",
            "lex:DescribeBotReplica",
            "lex:DescribeBotVersion",
            "lex:DescribeExport",
            "lex:DescribeImport",
            "lex:DescribeIntent",
            "lex:DescribeResourcePolicy",
            "lex:DescribeSlot",
            "lex:DescribeSlotType",
            "lex:GetBot",
            "lex:GetBotAlias",
            "lex:GetBotAliases",
            "lex:GetBotChannelAssociation",
            "lex:GetBotChannelAssociations",
            "lex:GetBotVersions",
            "lex:GetBots",
            "lex:GetBuiltinIntent",
            "lex:GetBuiltinIntents",
            "lex:GetBuiltinSlotTypes",
            "lex:GetIntent",
            "lex:GetIntentVersions",
            "lex:GetIntents",
            "lex:GetSlotType",
            "lex:GetSlotTypeVersions",
            "lex:GetSlotTypes",
            "lex:GetUtterancesView",
            "lex:ListBotAliasReplicas",
            "lex:ListBotAliases",
            "lex:ListBotChannels",
            "lex:ListBotLocales",
            "lex:ListBotRecommendations",
            "lex:ListBotReplicas",
            "lex:ListBotVersionReplicas",
            "lex:ListBotVersions",
            "lex:ListBots",
            "lex:ListBuiltInIntents",
            "lex:ListBuiltInSlotTypes",
            "lex:ListCustomVocabularyItems",
            "lex:ListExports",
            "lex:ListImports",
            "lex:ListIntents",
            "lex:ListRecommendedIntents",
            "lex:ListSlotTypes",
            "lex:ListSlots",
            "lex:ListTagsForResource",
            "lex:SearchAssociatedTranscripts"
        ]
    },
    "AmazonLexFullAccess": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricStatistics",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:ListRoles",
            "iam:PassRole",
            "kendra:ListIndices",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:AddPermission",
            "lambda:GetPolicy",
            "lambda:ListFunctions",
            "lambda:RemovePermission",
            "lex:*",
            "logs:DescribeLogGroups",
            "polly:DescribeVoices",
            "polly:SynthesizeSpeech",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
        ]
    },
    "AWSCodeStarServiceRole": {
        "permissions": [
            "autoscaling:*",
            "cloud9:CreateEnvironmentEC2",
            "cloud9:DeleteEnvironment",
            "cloud9:DescribeEnvironment*",
            "cloud9:ListEnvironments",
            "cloudformation:*Stack*",
            "cloudformation:CreateChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplate",
            "cloudformation:GetTemplateSummary",
            "cloudwatch:Put*",
            "codebuild:*",
            "codecommit:*",
            "codedeploy:*",
            "codepipeline:*",
            "codestar-connections:GetConnection",
            "codestar-connections:PassConnection",
            "codestar-connections:UseConnection",
            "codestar:*",
            "config:DescribeConfigRules",
            "ec2:*",
            "elasticbeanstalk:*",
            "elasticloadbalancing:*",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:AddRoleToInstanceProfile",
            "iam:AttachRolePolicy",
            "iam:AttachUserPolicy",
            "iam:CreateInstanceProfile",
            "iam:CreatePolicy",
            "iam:CreatePolicyVersion",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteInstanceProfile",
            "iam:DeletePolicy",
            "iam:DeletePolicyVersion",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:DetachUserPolicy",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListEntitiesForPolicy",
            "iam:ListPolicyVersions",
            "iam:ListRoles",
            "iam:PassRole",
            "iam:PutRolePolicy",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:SetDefaultPolicyVersion",
            "logs:*",
            "s3:*",
            "s3:GetObject",
            "sns:*"
        ]
    },
    "AWSCodeStarFullAccess": {
        "permissions": [
            "cloud9:DescribeEnvironment*",
            "cloud9:ValidateEnvironmentName",
            "cloudformation:DescribeStack*",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListStacks*",
            "codestar:*",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
        ]
    },
    "AWSGreengrassFullAccess": {
        "permissions": [
            "greengrass:*"
        ]
    },
    "AmazonEC2ContainerServiceEventsRole": {
        "permissions": [
            "ecs:RunTask",
            "ecs:TagResource",
            "iam:PassRole"
        ]
    },
    "QuickSightAccessForS3StorageManagementAnalyticsReadOnly": {
        "permissions": [
            "s3:GetAnalyticsConfiguration",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets"
        ]
    },
    "AmazonEC2SpotFleetTaggingRole": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeSubnets",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "iam:PassRole"
        ]
    },
    "AmazonElasticsearchServiceRolePolicy": {
        "permissions": [
            "acm:DescribeCertificate",
            "cloudwatch:PutMetricData",
            "ec2:AssignIpv6Addresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:UnAssignIpv6Addresses",
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:RemoveListenerCertificates"
        ]
    },
    "AmazonVPCCrossAccountNetworkInterfaceOperations": {
        "permissions": [
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateRoute",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteRoute",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ReplaceRoute",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses"
        ]
    },
    "AmazonSSMAutomationApproverAccess": {
        "permissions": [
            "ssm:DescribeAutomationExecutions",
            "ssm:GetAutomationExecution",
            "ssm:SendAutomationSignal"
        ]
    },
    "AWSMigrationHubDiscoveryAccess": {
        "permissions": [
            "discovery:DescribeConfigurations",
            "discovery:ListConfigurations",
            "dms:AddTagsToResource",
            "ec2:CreateTags",
            "ec2:DescribeInstanceAttribute"
        ]
    },
    "AWSGlueServiceRole": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteTags",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "glue:*",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListRolePolicies",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AWSGlueConsoleFullAccess": {
        "permissions": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListDashboards",
            "databrew:DescribeRecipe",
            "databrew:ListRecipeVersions",
            "databrew:ListRecipes",
            "dynamodb:ListTables",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "glue:*",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListGroups",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "logs:GetLogEvents",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSubnetGroups",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusters",
            "s3:CreateBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "tag:GetResources"
        ]
    },
    "AWSGlueServiceNotebookRole": {
        "permissions": [
            "codewhisperer:GenerateRecommendations",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "glue:BatchCreatePartition",
            "glue:BatchDeleteConnection",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchGetPartition",
            "glue:CreateConnection",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:CreateUserDefinedFunction",
            "glue:DeleteConnection",
            "glue:DeleteDatabase",
            "glue:DeleteJob",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:DeleteUserDefinedFunction",
            "glue:GetConnection",
            "glue:GetConnections",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetDevEndpoint",
            "glue:GetDevEndpoints",
            "glue:GetJob",
            "glue:GetJobs",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:GetUserDefinedFunction",
            "glue:GetUserDefinedFunctions",
            "glue:UpdateConnection",
            "glue:UpdateDatabase",
            "glue:UpdateDevEndpoint",
            "glue:UpdateJob",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:UpdateUserDefinedFunction",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AWSMigrationHubSMSAccess": {
        "permissions": [
            "mgh:AssociateCreatedArtifact",
            "mgh:AssociateDiscoveredResource",
            "mgh:CreateProgressUpdateStream",
            "mgh:DescribeApplicationState",
            "mgh:DescribeMigrationTask",
            "mgh:DisassociateCreatedArtifact",
            "mgh:DisassociateDiscoveredResource",
            "mgh:GetHomeRegion",
            "mgh:ImportMigrationTask",
            "mgh:ListCreatedArtifacts",
            "mgh:ListDiscoveredResources",
            "mgh:ListMigrationTasks",
            "mgh:NotifyApplicationState",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes"
        ]
    },
    "AWSMigrationHubDMSAccess": {
        "permissions": [
            "mgh:AssociateCreatedArtifact",
            "mgh:AssociateDiscoveredResource",
            "mgh:CreateProgressUpdateStream",
            "mgh:DescribeApplicationState",
            "mgh:DescribeMigrationTask",
            "mgh:DisassociateCreatedArtifact",
            "mgh:DisassociateDiscoveredResource",
            "mgh:GetHomeRegion",
            "mgh:ImportMigrationTask",
            "mgh:ListCreatedArtifacts",
            "mgh:ListDiscoveredResources",
            "mgh:ListMigrationTasks",
            "mgh:NotifyApplicationState",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes"
        ]
    },
    "AWSMigrationHubFullAccess": {
        "permissions": [
            "discovery:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "mgh:*"
        ]
    },
    "AmazonMacieServiceRole": {
        "permissions": [
            "s3:Get*",
            "s3:List*"
        ]
    },
    "AmazonMacieFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "macie2:*",
            "pricing:GetProducts"
        ]
    },
    "AWSElasticBeanstalkServiceRolePolicy": {
        "permissions": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:PutNotificationConfiguration",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "ec2:AssociateAddress",
            "ec2:DescribeAddresses",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "lambda:GetFunction",
            "logs:CreateLogStream",
            "logs:DeleteLogGroup",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "sns:Publish",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl"
        ]
    },
    "AWSEC2SpotServiceRolePolicy": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DescribeInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "iam:PassRole"
        ]
    },
    "AmazonRedshiftServiceLinkedRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySecurityGroupRules",
            "ec2:ModifyVpcEndpoint",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:UnassignIpv6Addresses",
            "glue:GetCatalog",
            "glue:GetCatalogs",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RotateSecret",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage",
            "servicequotas:GetServiceQuota"
        ]
    },
    "AWSElasticLoadBalancingServiceRolePolicy": {
        "permissions": [
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AttachNetworkInterface",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:DisassociateAddress",
            "ec2:GetCoipPoolUsage",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ReleaseAddress",
            "ec2:UnassignIpv6Addresses",
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:UpdateLogDelivery",
            "outposts:GetOutpostInstanceTypes"
        ]
    },
    "AWSElasticLoadBalancingClassicServiceRolePolicy": {
        "permissions": [
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AttachNetworkInterface",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignIpv6Addresses"
        ]
    },
    "AWSEnhancedClassicNetworkingMangementPolicy": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups"
        ]
    },
    "AmazonEMRCleanupPolicy": {
        "permissions": [
            "ec2:CancelSpotInstanceRequests",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteNetworkInterface",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteVolume",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "ec2:ModifyInstanceAttribute",
            "ec2:TerminateInstances"
        ]
    },
    "LexChannelPolicy": {
        "permissions": [
            "lex:PostText"
        ]
    },
    "LexBotPolicy": {
        "permissions": [
            "comprehend:DetectSentiment",
            "polly:SynthesizeSpeech"
        ]
    },
    "AWSLambdaReplicator": {
        "permissions": [
            "cloudfront:ListDistributionsByLambdaFunction",
            "iam:PassRole",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:DisableReplication"
        ]
    },
    "AWSOrganizationsServiceTrustPolicy": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole"
        ]
    },
    "AWSServiceRoleForEC2ScheduledInstances": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:TerminateInstances"
        ]
    },
    "AmazonECSServiceRolePolicy": {
        "permissions": [
            "autoscaling-plans:CreateScalingPlan",
            "autoscaling-plans:DeleteScalingPlan",
            "autoscaling-plans:DescribeScalingPlanResources",
            "autoscaling-plans:DescribeScalingPlans",
            "autoscaling:CompleteLifecycleAction",
            "autoscaling:DeleteLifecycleHook",
            "autoscaling:DeletePolicy",
            "autoscaling:Describe*",
            "autoscaling:PutLifecycleHook",
            "autoscaling:PutScalingPolicy",
            "autoscaling:RecordLifecycleActionHeartbeat",
            "autoscaling:SetInstanceProtection",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:Describe*",
            "ec2:DetachNetworkInterface",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:DeleteHealthCheck",
            "route53:Get*",
            "route53:List*",
            "route53:UpdateHealthCheck",
            "servicediscovery:CreateHttpNamespace",
            "servicediscovery:CreateService",
            "servicediscovery:DeleteService",
            "servicediscovery:DeregisterInstance",
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision",
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicediscovery:RegisterInstance",
            "servicediscovery:TagResource",
            "servicediscovery:UpdateInstanceCustomHealthStatus",
            "ssm:DescribeSessions",
            "ssm:StartSession"
        ]
    },
    "AWSApplicationAutoscalingRDSClusterPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "iam:PassRole",
            "rds:AddTagsToResource",
            "rds:CreateDBInstance",
            "rds:DeleteDBInstance",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:ModifyDBCluster"
        ]
    },
    "APIGatewayServiceRolePolicy": {
        "permissions": [
            "acm:DescribeCertificate",
            "acm:GetCertificate",
            "ec2:AssignPrivateIpAddresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignPrivateIpAddresses",
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:RemoveListenerCertificates",
            "firehose:DescribeDeliveryStream",
            "firehose:PutRecord",
            "firehose:PutRecordBatch",
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:UpdateLogDelivery",
            "servicediscovery:DiscoverInstances",
            "servicediscovery:GetNamespace",
            "servicediscovery:GetService",
            "xray:GetSamplingRules",
            "xray:GetSamplingTargets",
            "xray:PutTelemetryRecords",
            "xray:PutTraceSegments"
        ]
    },
    "AWSApplicationAutoscalingAppStreamFleetPolicy": {
        "permissions": [
            "appstream:DescribeFleets",
            "appstream:UpdateFleet",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm"
        ]
    },
    "AWSApplicationAutoscalingDynamoDBTablePolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "dynamodb:DescribeTable",
            "dynamodb:UpdateTable"
        ]
    },
    "AWSEC2SpotFleetServiceRolePolicy": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeSubnets",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "iam:PassRole"
        ]
    },
    "AWSApplicationAutoscalingEC2SpotFleetRequestPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "ec2:DescribeSpotFleetRequests",
            "ec2:ModifySpotFleetRequest"
        ]
    },
    "AWSApplicationAutoscalingECSServicePolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricAlarm",
            "ecs:DescribeServices",
            "ecs:UpdateService"
        ]
    },
    "AWSApplicationAutoscalingEMRInstanceGroupPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ModifyInstanceGroups"
        ]
    },
    "AmazonChimeReadOnly": {
        "permissions": [
            "chime:Describe*",
            "chime:Get*",
            "chime:List*",
            "chime:SearchAvailablePhoneNumbers"
        ]
    },
    "AmazonChimeFullAccess": {
        "permissions": [
            "chime:*",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:PutResourcePolicy",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetEncryptionConfiguration",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sqs:CreateQueue",
            "sqs:GetQueueAttributes"
        ]
    },
    "AmazonChimeUserManagement": {
        "permissions": [
            "chime:ActivateUsers",
            "chime:AssociatePhoneNumberWithUser",
            "chime:AssociateSigninDelegateGroupsWithAccount",
            "chime:BatchSuspendUser",
            "chime:BatchUnsuspendUser",
            "chime:BatchUpdateUser",
            "chime:CreateUser",
            "chime:DisassociatePhoneNumberFromUser",
            "chime:DisassociateSigninDelegateGroupsFromAccount",
            "chime:GetAccount",
            "chime:GetAccountSettings",
            "chime:GetDomain",
            "chime:GetMeetingDetail",
            "chime:GetPhoneNumber",
            "chime:GetUser",
            "chime:GetUserActivityReportData",
            "chime:GetUserByEmail",
            "chime:GetUserSettings",
            "chime:InviteUsers",
            "chime:InviteUsersFromProvider",
            "chime:ListAccountUsageReportData",
            "chime:ListAccounts",
            "chime:ListDelegates",
            "chime:ListDirectories",
            "chime:ListDomains",
            "chime:ListGroups",
            "chime:ListMeetingEvents",
            "chime:ListMeetingsReportData",
            "chime:ListPhoneNumbers",
            "chime:ListUsers",
            "chime:LogoutUser",
            "chime:ResetPersonalPIN",
            "chime:SubmitSupportRequest",
            "chime:SuspendUsers",
            "chime:UpdateAccountSettings",
            "chime:UpdateUser",
            "chime:UpdateUserLicenses",
            "chime:UpdateUserSettings"
        ]
    },
    "CloudHSMServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AmazonECS_FullAccess": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "appmesh:DescribeVirtualGateway",
            "appmesh:DescribeVirtualNode",
            "appmesh:ListMeshes",
            "appmesh:ListVirtualGateways",
            "appmesh:ListVirtualNodes",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:Describe*",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStack*",
            "cloudformation:UpdateStack",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "codedeploy:BatchGetApplicationRevisions",
            "codedeploy:BatchGetApplications",
            "codedeploy:BatchGetDeploymentGroups",
            "codedeploy:BatchGetDeployments",
            "codedeploy:ContinueDeployment",
            "codedeploy:CreateApplication",
            "codedeploy:CreateDeployment",
            "codedeploy:CreateDeploymentGroup",
            "codedeploy:GetApplication",
            "codedeploy:GetApplicationRevision",
            "codedeploy:GetDeployment",
            "codedeploy:GetDeploymentConfig",
            "codedeploy:GetDeploymentGroup",
            "codedeploy:GetDeploymentTarget",
            "codedeploy:ListApplicationRevisions",
            "codedeploy:ListApplications",
            "codedeploy:ListDeploymentConfigs",
            "codedeploy:ListDeploymentGroups",
            "codedeploy:ListDeploymentTargets",
            "codedeploy:ListDeployments",
            "codedeploy:RegisterApplicationRevision",
            "codedeploy:StopDeployment",
            "ec2:AssociateRouteTable",
            "ec2:AttachInternetGateway",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CancelSpotFleetRequests",
            "ec2:CreateInternetGateway",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateVpc",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteVpc",
            "ec2:Describe*",
            "ec2:DetachInternetGateway",
            "ec2:DisassociateRouteTable",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:RequestSpotFleet",
            "ec2:RunInstances",
            "ecs:*",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateRule",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteRule",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTargetGroups",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "fsx:DescribeFileSystems",
            "iam:CreateServiceLinkedRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:PassRole",
            "lambda:ListFunctions",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:FilterLogEvents",
            "route53:CreateHostedZone",
            "route53:DeleteHostedZone",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "servicediscovery:CreatePrivateDnsNamespace",
            "servicediscovery:CreateService",
            "servicediscovery:DeleteService",
            "servicediscovery:GetNamespace",
            "servicediscovery:GetOperation",
            "servicediscovery:GetService",
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices",
            "servicediscovery:UpdateService",
            "sns:ListTopics",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:GetParametersByPath"
        ]
    },
    "DynamoDBReplicationServiceRolePolicy": {
        "permissions": [
            "account:ListRegions",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "dynamodb:DeleteItem",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeStream",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:GetItem",
            "dynamodb:GetRecords",
            "dynamodb:GetResourcePolicy",
            "dynamodb:GetShardIterator",
            "dynamodb:PutItem",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "dynamodb:UpdateTable",
            "dynamodb:UpdateTimeToLive",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AmazonSSMServiceRolePolicy": {
        "permissions": [
            "cloudformation:DeleteStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackResources",
            "cloudformation:ListStackSets",
            "cloudwatch:DescribeAlarms",
            "compute-optimizer:GetEC2InstanceRecommendations",
            "compute-optimizer:GetEnrollmentStatus",
            "config:DescribeComplianceByConfigRule",
            "config:DescribeComplianceByResource",
            "config:DescribeConfigurationRecorders",
            "config:DescribeRemediationConfigurations",
            "config:SelectResourceConfig",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:PassRole",
            "lambda:InvokeFunction",
            "organizations:DescribeOrganization",
            "resource-explorer-2:CreateManagedView",
            "resource-groups:GetGroupQuery",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "securityhub:DescribeHub",
            "ssm:CancelCommand",
            "ssm:GetAutomationExecution",
            "ssm:GetCalendarState",
            "ssm:GetCommandInvocation",
            "ssm:GetParameters",
            "ssm:GetServiceSetting",
            "ssm:ListCommandInvocations",
            "ssm:ListCommands",
            "ssm:ListTagsForResource",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution",
            "ssm:UpdateServiceSetting",
            "states:DescribeExecution",
            "states:StartExecution",
            "support:DescribeCases",
            "support:DescribeTrustedAdvisorCheckResult",
            "support:DescribeTrustedAdvisorCheckSummaries",
            "support:DescribeTrustedAdvisorChecks",
            "tag:GetResources"
        ]
    },
    "AmazonECSTaskExecutionRolePolicy": {
        "permissions": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "CloudWatchEventsServiceRolePolicy": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "ec2:CreateSnapshot",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:RebootInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances"
        ]
    },
    "AmazonInspectorServiceRolePolicy": {
        "permissions": [
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeTags",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth"
        ]
    },
    "AWSPriceListServiceFullAccess": {
        "permissions": [
            "pricing:*"
        ]
    },
    "AWSCodeDeployRoleForLambda": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "lambda:GetAlias",
            "lambda:GetProvisionedConcurrencyConfig",
            "lambda:InvokeFunction",
            "lambda:UpdateAlias",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "sns:Publish"
        ]
    },
    "AmazonMQFullAccess": {
        "permissions": [
            "cloudformation:CreateStack",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "iam:CreateServiceLinkedRole",
            "logs:CreateLogGroup",
            "mq:*"
        ]
    },
    "AmazonMQReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "mq:Describe*",
            "mq:List*"
        ]
    },
    "AmazonGuardDutyServiceRolePolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:ModifyVpcEndpoint",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ecs:DescribeClusters",
            "ecs:ListClusters",
            "ecs:PutAccountSettingDefault",
            "eks:CreateAddon",
            "eks:DeleteAddon",
            "eks:DescribeAddon",
            "eks:DescribeCluster",
            "eks:ListClusters",
            "eks:TagResource",
            "eks:UpdateAddon",
            "iam:CreateServiceLinkedRole",
            "lambda:GetFunctionConfiguration",
            "lambda:ListTags",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:GetEncryptionConfiguration",
            "s3:ListAllMyBuckets",
            "ssm:AddTagsToResource",
            "ssm:CreateAssociation",
            "ssm:DeleteAssociation",
            "ssm:DescribeAssociation",
            "ssm:GetCommandInvocation",
            "ssm:SendCommand",
            "ssm:StartAssociationsOnce",
            "ssm:UpdateAssociation"
        ]
    },
    "AmazonGuardDutyReadOnlyAccess": {
        "permissions": [
            "guardduty:Describe*",
            "guardduty:Get*",
            "guardduty:List*",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AmazonGuardDutyFullAccess": {
        "permissions": [
            "guardduty:*",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:PassRole",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "organizations:RegisterDelegatedAdministrator"
        ]
    },
    "AmazonSageMakerReadOnly": {
        "permissions": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "aws-marketplace:ViewSubscriptions",
            "cloudwatch:DescribeAlarms",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListUsers",
            "cognito-idp:ListUsersInGroup",
            "ecr:Describe*",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchGetRecord",
            "sagemaker:Describe*",
            "sagemaker:GetDeviceFleetReport",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:GetLineageGroupPolicy",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:GetRecord",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:List*",
            "sagemaker:QueryLineage",
            "sagemaker:Search"
        ]
    },
    "AmazonSageMakerFullAccess": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListTableMetadata",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution",
            "aws-marketplace:ViewSubscriptions",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListStackResources",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:PutMetricData",
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild",
            "codecommit:BatchGetRepositories",
            "codecommit:CreateRepository",
            "codecommit:GetRepository",
            "codecommit:GitPull",
            "codecommit:GitPush",
            "codecommit:List*",
            "cognito-idp:AdminAddUserToGroup",
            "cognito-idp:AdminCreateUser",
            "cognito-idp:AdminDeleteUser",
            "cognito-idp:AdminDisableUser",
            "cognito-idp:AdminEnableUser",
            "cognito-idp:AdminRemoveUserFromGroup",
            "cognito-idp:CreateGroup",
            "cognito-idp:CreateUserPool",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:CreateUserPoolDomain",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:List*",
            "cognito-idp:UpdateUserPool",
            "cognito-idp:UpdateUserPoolClient",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchDeleteImage",
            "ecr:BatchGetImage",
            "ecr:CompleteLayerUpload",
            "ecr:CreateRepository",
            "ecr:DeleteRepository",
            "ecr:DeleteRepositoryPolicy",
            "ecr:Describe*",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:SetRepositoryPolicy",
            "ecr:StartImageScan",
            "ecr:UploadLayerPart",
            "elastic-inference:Connect",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "fsx:DescribeFileSystems",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreateTable",
            "glue:DeleteJob",
            "glue:DeleteTable",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetJob*",
            "glue:GetTable",
            "glue:GetTable*",
            "glue:GetTables",
            "glue:GetWorkflowRun",
            "glue:ResetJobBookmark",
            "glue:StartJobRun",
            "glue:StartWorkflowRun",
            "glue:UpdateJob",
            "glue:UpdateTable",
            "groundtruthlabeling:*",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:InvokeFunction",
            "lambda:ListFunctions",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:Describe*",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift:GetClusterCredentials",
            "robomaker:CancelSimulationJob",
            "robomaker:CreateSimulationApplication",
            "robomaker:CreateSimulationJob",
            "robomaker:DeleteSimulationApplication",
            "robomaker:DescribeSimulationApplication",
            "robomaker:DescribeSimulationJob",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketCors",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3express:CreateBucket",
            "s3express:CreateSession",
            "s3express:ListAllMyDirectoryBuckets",
            "sagemaker-geospatial:*",
            "sagemaker:*",
            "sagemaker:AddTags",
            "sagemaker:CreateApp",
            "sagemaker:CreateCluster",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreateSpace",
            "sagemaker:CreateTrainingJob",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteSpace",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeSpace",
            "sagemaker:DescribeTrainingPlan",
            "sagemaker:DescribeUserProfile",
            "sagemaker:ListApps",
            "sagemaker:ListDomains",
            "sagemaker:ListSpaces",
            "sagemaker:ListTags",
            "sagemaker:ListUserProfiles",
            "sagemaker:UpdateCluster",
            "sagemaker:UpdateSpace",
            "secretsmanager:CreateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets",
            "servicecatalog:Describe*",
            "servicecatalog:List*",
            "servicecatalog:ProvisionProduct",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:SearchProducts",
            "servicecatalog:SearchProvisionedProducts",
            "servicecatalog:TerminateProvisionedProduct",
            "servicecatalog:UpdateProvisionedProduct",
            "sns:CreateTopic",
            "sns:ListTopics",
            "sns:Publish",
            "sns:Subscribe",
            "states:DescribeExecution",
            "states:GetExecutionHistory",
            "states:StartExecution",
            "states:StopExecution",
            "states:UpdateStateMachine",
            "tag:GetResources"
        ]
    },
    "AmazonFreeRTOSFullAccess": {
        "permissions": [
            "freertos:*"
        ]
    },
    "AWSDeepLensServiceRolePolicy": {
        "permissions": [
            "deeplens:*",
            "greengrass:AssociateRoleToGroup",
            "greengrass:AssociateServiceRoleToAccount",
            "greengrass:CreateCoreDefinition",
            "greengrass:CreateCoreDefinitionVersion",
            "greengrass:CreateDeployment",
            "greengrass:CreateFunctionDefinition",
            "greengrass:CreateFunctionDefinitionVersion",
            "greengrass:CreateGroup",
            "greengrass:CreateGroupCertificateAuthority",
            "greengrass:CreateGroupVersion",
            "greengrass:CreateLoggerDefinition",
            "greengrass:CreateLoggerDefinitionVersion",
            "greengrass:CreateResourceDefinition",
            "greengrass:CreateResourceDefinitionVersion",
            "greengrass:CreateSubscriptionDefinition",
            "greengrass:CreateSubscriptionDefinitionVersion",
            "greengrass:DeleteCoreDefinition",
            "greengrass:DeleteFunctionDefinition",
            "greengrass:DeleteGroup",
            "greengrass:DeleteLoggerDefinition",
            "greengrass:DeleteSubscriptionDefinition",
            "greengrass:DisassociateRoleFromGroup",
            "greengrass:DisassociateServiceRoleFromAccount",
            "greengrass:GetAssociatedRole",
            "greengrass:GetConnectivityInfo",
            "greengrass:GetCoreDefinition",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetDeploymentStatus",
            "greengrass:GetDeviceDefinition",
            "greengrass:GetDeviceDefinitionVersion",
            "greengrass:GetFunctionDefinition",
            "greengrass:GetFunctionDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupCertificateAuthority",
            "greengrass:GetGroupCertificateConfiguration",
            "greengrass:GetGroupVersion",
            "greengrass:GetLoggerDefinition",
            "greengrass:GetLoggerDefinitionVersion",
            "greengrass:GetResourceDefinition",
            "greengrass:GetServiceRoleForAccount",
            "greengrass:GetSubscriptionDefinition",
            "greengrass:GetSubscriptionDefinitionVersion",
            "greengrass:ListCoreDefinitionVersions",
            "greengrass:ListCoreDefinitions",
            "greengrass:ListDeployments",
            "greengrass:ListDeviceDefinitionVersions",
            "greengrass:ListDeviceDefinitions",
            "greengrass:ListFunctionDefinitionVersions",
            "greengrass:ListFunctionDefinitions",
            "greengrass:ListGroupCertificateAuthorities",
            "greengrass:ListGroupVersions",
            "greengrass:ListGroups",
            "greengrass:ListLoggerDefinitionVersions",
            "greengrass:ListLoggerDefinitions",
            "greengrass:ListSubscriptionDefinitionVersions",
            "greengrass:ListSubscriptionDefinitions",
            "greengrass:ResetDeployments",
            "greengrass:UpdateConnectivityInfo",
            "greengrass:UpdateCoreDefinition",
            "greengrass:UpdateDeviceDefinition",
            "greengrass:UpdateFunctionDefinition",
            "greengrass:UpdateGroup",
            "greengrass:UpdateGroupCertificateConfiguration",
            "greengrass:UpdateLoggerDefinition",
            "greengrass:UpdateResourceDefinition",
            "greengrass:UpdateSubscriptionDefinition",
            "iam:PassRole",
            "iot:AttachPrincipalPolicy",
            "iot:AttachThingPrincipal",
            "iot:CreateKeysAndCertificate",
            "iot:CreatePolicy",
            "iot:CreatePolicyVersion",
            "iot:CreateThing",
            "iot:DeleteCertificate",
            "iot:DeleteThing",
            "iot:DeleteThingShadow",
            "iot:DescribeEndpoint",
            "iot:DescribeThing",
            "iot:DetachPrincipalPolicy",
            "iot:DetachThingPrincipal",
            "iot:GetThingShadow",
            "iot:UpdateCertificate",
            "iot:UpdateThing",
            "iot:UpdateThingShadow",
            "kinesisvideo:CreateStream",
            "kinesisvideo:DeleteStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:GetDataEndpoint",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction",
            "lambda:PublishVersion",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetObject",
            "s3:ListBucket",
            "sagemaker:CreateTrainingJob",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:StopTrainingJob"
        ]
    },
    "AWSDeepLensLambdaFunctionAccessPolicy": {
        "permissions": [
            "deeplens:*",
            "kinesisvideo:CreateStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:PutMedia",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:GetObject",
            "s3:ListBucket"
        ]
    },
    "AmazonRekognitionServiceRole": {
        "permissions": [
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:GetMedia",
            "sns:Publish"
        ]
    },
    "AWSQuickSightIoTAnalyticsAccess": {
        "permissions": [
            "iotanalytics:DescribeDataset",
            "iotanalytics:GetDatasetContent",
            "iotanalytics:ListDatasets"
        ]
    },
    "ComprehendFullAccess": {
        "permissions": [
            "comprehend:*",
            "iam:GetRole",
            "iam:ListRoles",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "ComprehendReadOnly": {
        "permissions": [
            "comprehend:BatchDetectDominantLanguage",
            "comprehend:BatchDetectEntities",
            "comprehend:BatchDetectKeyPhrases",
            "comprehend:BatchDetectSentiment",
            "comprehend:BatchDetectSyntax",
            "comprehend:ClassifyDocument",
            "comprehend:ContainsPiiEntities",
            "comprehend:DescribeDocumentClassificationJob",
            "comprehend:DescribeDocumentClassifier",
            "comprehend:DescribeDominantLanguageDetectionJob",
            "comprehend:DescribeEndpoint",
            "comprehend:DescribeEntitiesDetectionJob",
            "comprehend:DescribeEntityRecognizer",
            "comprehend:DescribeKeyPhrasesDetectionJob",
            "comprehend:DescribePiiEntitiesDetectionJob",
            "comprehend:DescribeResourcePolicy",
            "comprehend:DescribeSentimentDetectionJob",
            "comprehend:DescribeTargetedSentimentDetectionJob",
            "comprehend:DescribeTopicsDetectionJob",
            "comprehend:DetectDominantLanguage",
            "comprehend:DetectEntities",
            "comprehend:DetectKeyPhrases",
            "comprehend:DetectPiiEntities",
            "comprehend:DetectSentiment",
            "comprehend:DetectSyntax",
            "comprehend:ListDocumentClassificationJobs",
            "comprehend:ListDocumentClassifierSummaries",
            "comprehend:ListDocumentClassifiers",
            "comprehend:ListDominantLanguageDetectionJobs",
            "comprehend:ListEndpoints",
            "comprehend:ListEntitiesDetectionJobs",
            "comprehend:ListEntityRecognizerSummaries",
            "comprehend:ListEntityRecognizers",
            "comprehend:ListKeyPhrasesDetectionJobs",
            "comprehend:ListPiiEntitiesDetectionJobs",
            "comprehend:ListSentimentDetectionJobs",
            "comprehend:ListTagsForResource",
            "comprehend:ListTargetedSentimentDetectionJobs",
            "comprehend:ListTopicsDetectionJobs"
        ]
    },
    "GreengrassOTAUpdateArtifactAccess": {
        "permissions": [
            "s3:GetObject"
        ]
    },
    "TranslateReadOnly": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "comprehend:DetectDominantLanguage",
            "translate:DescribeTextTranslationJob",
            "translate:GetParallelData",
            "translate:GetTerminology",
            "translate:ListParallelData",
            "translate:ListTerminologies",
            "translate:ListTextTranslationJobs",
            "translate:TranslateDocument",
            "translate:TranslateText"
        ]
    },
    "AWSCloud9ServiceRolePolicy": {
        "permissions": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:GetInstanceProfile",
            "iam:ListInstanceProfiles",
            "iam:PassRole"
        ]
    },
    "AWSCloud9User": {
        "permissions": [
            "cloud9:CreateEnvironmentEC2",
            "cloud9:CreateEnvironmentSSH",
            "cloud9:DescribeEnvironmentMemberships",
            "cloud9:GetMigrationExperiences",
            "cloud9:GetUserPublicKey",
            "cloud9:GetUserSettings",
            "cloud9:UpdateUserSettings",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "iam:GetUser",
            "iam:ListUsers",
            "ssm:GetConnectionStatus",
            "ssm:StartSession"
        ]
    },
    "AWSCloud9Administrator": {
        "permissions": [
            "cloud9:*",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "iam:GetUser",
            "iam:ListUsers",
            "ssm:GetConnectionStatus",
            "ssm:StartSession"
        ]
    },
    "AWSCloud9EnvironmentMember": {
        "permissions": [
            "cloud9:DescribeEnvironmentMemberships",
            "cloud9:GetMigrationExperiences",
            "cloud9:GetUserSettings",
            "cloud9:UpdateUserSettings",
            "iam:GetUser",
            "iam:ListUsers",
            "ssm:GetConnectionStatus",
            "ssm:StartSession"
        ]
    },
    "AlexaForBusinessFullAccess": {
        "permissions": [
            "a4b:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "kms:DescribeKey",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:UpdateSecret"
        ]
    },
    "AlexaForBusinessReadOnlyAccess": {
        "permissions": [
            "a4b:Get*",
            "a4b:List*",
            "a4b:Search*"
        ]
    },
    "AlexaForBusinessDeviceSetup": {
        "permissions": [
            "a4b:CompleteRegistration",
            "a4b:GetNetworkProfile",
            "a4b:PutDeviceSetupEvents",
            "a4b:RegisterDevice",
            "a4b:SearchDevices",
            "a4b:SearchNetworkProfiles",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AlexaForBusinessGatewayExecution": {
        "permissions": [
            "a4b:Get*",
            "a4b:List*",
            "a4b:Send*",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:PutLogEvents",
            "sqs:DeleteMessage",
            "sqs:ReceiveMessage"
        ]
    },
    "AWSIoTThingsRegistration": {
        "permissions": [
            "iot:AddThingToBillingGroup",
            "iot:AddThingToThingGroup",
            "iot:AttachPolicy",
            "iot:AttachPrincipalPolicy",
            "iot:AttachThingPrincipal",
            "iot:CreateCertificateFromCsr",
            "iot:CreatePolicy",
            "iot:CreateThing",
            "iot:DescribeBillingGroup",
            "iot:DescribeCertificate",
            "iot:DescribeThing",
            "iot:DescribeThingGroup",
            "iot:DescribeThingType",
            "iot:DetachPolicy",
            "iot:DetachThingPrincipal",
            "iot:GetPolicy",
            "iot:ListAttachedPolicies",
            "iot:ListPolicyPrincipals",
            "iot:ListPrincipalPolicies",
            "iot:ListPrincipalThings",
            "iot:ListTargetsForPolicy",
            "iot:ListThingGroupsForThing",
            "iot:ListThingPrincipals",
            "iot:RegisterCertificate",
            "iot:RegisterThing",
            "iot:RemoveThingFromBillingGroup",
            "iot:RemoveThingFromThingGroup",
            "iot:UpdateCertificate",
            "iot:UpdateThing",
            "iot:UpdateThingGroupsForThing"
        ]
    },
    "AmazonKinesisVideoStreamsReadOnlyAccess": {
        "permissions": [
            "kinesisvideo:Describe*",
            "kinesisvideo:Get*",
            "kinesisvideo:List*"
        ]
    },
    "AmazonKinesisVideoStreamsFullAccess": {
        "permissions": [
            "kinesisvideo:*"
        ]
    },
    "AWSSSOServiceRolePolicy": {
        "permissions": [
            "ds:DescribeDirectories",
            "ds:DescribeTrusts",
            "ds:UnauthorizeApplication",
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:CreateSAMLProvider",
            "iam:DeleteRole",
            "iam:DeleteRolePermissionsBoundary",
            "iam:DeleteRolePolicy",
            "iam:DeleteSAMLProvider",
            "iam:DeleteServiceLinkedRole",
            "iam:DetachRolePolicy",
            "iam:GetRole",
            "iam:GetSAMLProvider",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:PutRolePermissionsBoundary",
            "iam:PutRolePolicy",
            "iam:UpdateAssumeRolePolicy",
            "iam:UpdateRole",
            "iam:UpdateRoleDescription",
            "iam:UpdateSAMLProvider",
            "identitystore:DescribeGroup",
            "identitystore:DescribeUser",
            "identitystore:ListGroups",
            "identitystore:ListUsers",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "ElastiCacheServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:RevokeSecurityGroupIngress",
            "outposts:GetOutpost",
            "outposts:GetOutpostInstanceTypes",
            "outposts:ListOutposts",
            "outposts:ListSites"
        ]
    },
    "AWSIoTOTAUpdate": {
        "permissions": [
            "iot:CreateJob",
            "signer:DescribeSigningJob"
        ]
    },
    "AWSElementalMediaPackageFullAccess": {
        "permissions": [
            "mediapackage:*"
        ]
    },
    "AWSElementalMediaPackageReadOnly": {
        "permissions": [
            "mediapackage:Describe*",
            "mediapackage:List*"
        ]
    },
    "AmazonRDSServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AllocateAddress",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCoipPoolPermission",
            "ec2:CreateLocalGatewayRouteTablePermission",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteCoipPoolPermission",
            "ec2:DeleteLocalGatewayRouteTablePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTablePermissions",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:UnassignPrivateIpAddresses",
            "kinesis:CreateStream",
            "kinesis:DeleteStream",
            "kinesis:DescribeStream",
            "kinesis:MergeShards",
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kinesis:SplitShard",
            "kinesis:UpdateShardCount",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "rds:CrossRegionCommunication",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RotateSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage"
        ]
    },
    "AutoScalingServiceRolePolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricAlarm",
            "ec2:AttachClassicLinkVpc",
            "ec2:CancelSpotInstanceRequests",
            "ec2:CreateFleet",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "ec2:DetachClassicLinkVpc",
            "ec2:GetInstanceTypesFromInstanceRequirements",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:ModifyInstanceAttribute",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "elasticloadbalancing:Deregister*",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:Register*",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "resource-groups:ListGroupResources",
            "sns:Publish",
            "ssm:GetParameters",
            "vpc-lattice:DeregisterTargets",
            "vpc-lattice:GetTargetGroup",
            "vpc-lattice:ListTargetGroups",
            "vpc-lattice:ListTargets",
            "vpc-lattice:RegisterTargets"
        ]
    },
    "AmazonRoute53AutoNamingReadOnlyAccess": {
        "permissions": [
            "servicediscovery:Get*",
            "servicediscovery:List*"
        ]
    },
    "AmazonRoute53AutoNamingFullAccess": {
        "permissions": [
            "ec2:DescribeRegions",
            "ec2:DescribeVpcs",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:CreateHostedZone",
            "route53:DeleteHealthCheck",
            "route53:DeleteHostedZone",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "route53:UpdateHealthCheck",
            "servicediscovery:*"
        ]
    },
    "AWSApplicationAutoscalingSageMakerEndpointPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricAlarm",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeInferenceComponent",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateInferenceComponentRuntimeConfig"
        ]
    },
    "AWSServiceCatalogAdminFullAccess": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:CreateStackInstances",
            "cloudformation:CreateStackSet",
            "cloudformation:CreateUploadBucket",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DeleteStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListChangeSets",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackResources",
            "cloudformation:ListStackSetOperationResults",
            "cloudformation:ListStackSetOperations",
            "cloudformation:SetStackPolicy",
            "cloudformation:TagResource",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateStackInstances",
            "cloudformation:UpdateStackSet",
            "cloudformation:ValidateTemplate",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "iam:CreateServiceLinkedRole",
            "iam:GetGroup",
            "iam:GetRole",
            "iam:GetUser",
            "iam:ListGroups",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:PassRole",
            "servicecatalog:Accept*",
            "servicecatalog:Associate*",
            "servicecatalog:Batch*",
            "servicecatalog:Copy*",
            "servicecatalog:Create*",
            "servicecatalog:Delete*",
            "servicecatalog:Describe*",
            "servicecatalog:Disable*",
            "servicecatalog:Disassociate*",
            "servicecatalog:Enable*",
            "servicecatalog:Execute*",
            "servicecatalog:Get*",
            "servicecatalog:Import*",
            "servicecatalog:List*",
            "servicecatalog:Provision*",
            "servicecatalog:Put*",
            "servicecatalog:Reject*",
            "servicecatalog:Scan*",
            "servicecatalog:Search*",
            "servicecatalog:SyncResource",
            "servicecatalog:TagResource",
            "servicecatalog:Terminate*",
            "servicecatalog:UntagResource",
            "servicecatalog:Update*",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "ssm:ListDocumentVersions",
            "ssm:ListDocuments"
        ]
    },
    "AWSServiceCatalogEndUserFullAccess": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:CreateStackInstances",
            "cloudformation:CreateStackSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DeleteStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListChangeSets",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackResources",
            "cloudformation:ListStackSetOperationResults",
            "cloudformation:ListStackSetOperations",
            "cloudformation:SetStackPolicy",
            "cloudformation:TagResource",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateStackInstances",
            "cloudformation:UpdateStackSet",
            "cloudformation:ValidateTemplate",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "servicecatalog:CreateProvisionedProductPlan",
            "servicecatalog:DeleteProvisionedProductPlan",
            "servicecatalog:DescribeProduct",
            "servicecatalog:DescribeProductView",
            "servicecatalog:DescribeProvisionedProduct",
            "servicecatalog:DescribeProvisionedProductPlan",
            "servicecatalog:DescribeProvisioningParameters",
            "servicecatalog:DescribeRecord",
            "servicecatalog:DescribeServiceActionExecutionParameters",
            "servicecatalog:ExecuteProvisionedProductPlan",
            "servicecatalog:ExecuteProvisionedProductServiceAction",
            "servicecatalog:ListLaunchPaths",
            "servicecatalog:ListProvisionedProductPlans",
            "servicecatalog:ListRecordHistory",
            "servicecatalog:ListServicepermissionsForProvisioningArtifact",
            "servicecatalog:ListStackInstancesForProvisionedProduct",
            "servicecatalog:ProvisionProduct",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:SearchProducts",
            "servicecatalog:SearchProvisionedProducts",
            "servicecatalog:TerminateProvisionedProduct",
            "servicecatalog:UpdateProvisionedProduct",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution"
        ]
    },
    "AWSTrustedAdvisorServiceRolePolicy": {
        "permissions": [
            "access-analyzer:ListAnalyzers",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "ce:GetReservationPurchaseRecommendation",
            "ce:GetSavingsPlansPurchaseRecommendation",
            "cloudformation:DescribeAccountLimits",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "cloudfront:ListDistributions",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetTrail",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListTrails",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "dax:DescribeClusters",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeNatGateways",
            "ec2:DescribeRegions",
            "ec2:DescribeReservedInstances",
            "ec2:DescribeReservedInstancesOfferings",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ecs:DescribeTaskDefinition",
            "ecs:ListTaskDefinitions",
            "elasticloadbalancing:DescribeAccountLimits",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "iam:GenerateCredentialReport",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:GetServerCertificate",
            "iam:ListSAMLProviders",
            "iam:ListServerCertificates",
            "kafka:DescribeClusterV2",
            "kafka:ListClustersV2",
            "kafka:ListNodes",
            "kinesis:DescribeLimits",
            "network-firewall:DescribeFirewall",
            "network-firewall:ListFirewalls",
            "outposts:GetOutpost",
            "outposts:ListAssets",
            "outposts:ListOutposts",
            "rds:DescribeAccountAttributes",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEvents",
            "rds:DescribeOptionGroupOptions",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribeReservedDBInstances",
            "rds:DescribeReservedDBInstancesOfferings",
            "rds:ListTagsForResource",
            "redshift:DescribeClusters",
            "redshift:DescribeReservedNodeOfferings",
            "redshift:DescribeReservedNodes",
            "route53:GetAccountLimit",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListResourceRecordSets",
            "route53resolver:ListResolverEndpointIpAddresses",
            "route53resolver:ListResolverEndpoints",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketVersioning",
            "s3:GetLifecycleConfiguration",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "ses:GetSendQuota",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues"
        ]
    },
    "AmazonESCognitoAccess": {
        "permissions": [
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:SetIdentityPoolRoles",
            "cognito-identity:UpdateIdentityPool",
            "cognito-idp:AdminInitiateAuth",
            "cognito-idp:AdminUserGlobalSignOut",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:UpdateUserPoolClient",
            "iam:PassRole"
        ]
    },
    "AWSBatchServiceEventTargetRole": {
        "permissions": [
            "batch:SubmitJob"
        ]
    },
    "DAXServiceRolePolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupIngress"
        ]
    },
    "AWSElementalMediaStoreFullAccess": {
        "permissions": [
            "mediastore:*"
        ]
    },
    "CloudWatchAgentAdminPolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:DescribeTags",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "ssm:GetParameter",
            "ssm:PutParameter",
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries",
            "xray:GetSamplingTargets",
            "xray:PutTelemetryRecords",
            "xray:PutTraceSegments"
        ]
    },
    "CloudWatchAgentServerPolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "ssm:GetParameter",
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries",
            "xray:GetSamplingTargets",
            "xray:PutTelemetryRecords",
            "xray:PutTraceSegments"
        ]
    },
    "AWSResourceGroupsReadOnlyAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcs",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeSnapshots",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTags",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:ListClusters",
            "glacier:DescribeVault",
            "glacier:ListTagsForVault",
            "glacier:ListVaults",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "kinesis:ListTagsForStream",
            "opsworks:DescribeStacks",
            "opsworks:ListTags",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "redshift:DescribeClusters",
            "redshift:DescribeTags",
            "resource-groups:Get*",
            "resource-groups:List*",
            "resource-groups:Search*",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListTagsForResource",
            "route53domains:ListDomains",
            "s3:GetBucketTagging",
            "s3:ListAllMyBuckets",
            "ssm:ListDocuments",
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:ListGateways",
            "storagegateway:ListTagsForResource",
            "tag:Get*"
        ]
    },
    "AWSElementalMediaStoreReadOnly": {
        "permissions": [
            "mediastore:Describe*",
            "mediastore:Get*",
            "mediastore:List*"
        ]
    },
    "AmazonRoute53AutoNamingRegistrantAccess": {
        "permissions": [
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:DeleteHealthCheck",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "route53:UpdateHealthCheck",
            "servicediscovery:DeregisterInstance",
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicediscovery:RegisterInstance"
        ]
    },
    "AWSConfigRoleForOrganizations": {
        "permissions": [
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AWSAppSyncAdministrator": {
        "permissions": [
            "appsync:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:PassRole"
        ]
    },
    "AWSAppSyncSchemaAuthor": {
        "permissions": [
            "appsync:CreateFunction",
            "appsync:CreateResolver",
            "appsync:CreateType",
            "appsync:DeleteFunction",
            "appsync:DeleteResolver",
            "appsync:DeleteType",
            "appsync:EvaluateCode",
            "appsync:EvaluateMappingTemplate",
            "appsync:GetDataSource",
            "appsync:GetFunction",
            "appsync:GetGraphqlApi",
            "appsync:GetIntrospectionSchema",
            "appsync:GetResolver",
            "appsync:GetSchemaCreationStatus",
            "appsync:GetType",
            "appsync:GraphQL",
            "appsync:ListApiKeys",
            "appsync:ListDataSources",
            "appsync:ListFunctions",
            "appsync:ListGraphqlApis",
            "appsync:ListResolvers",
            "appsync:ListResolversByFunction",
            "appsync:ListTagsForResource",
            "appsync:ListTypes",
            "appsync:StartSchemaCreation",
            "appsync:TagResource",
            "appsync:UntagResource",
            "appsync:UpdateFunction",
            "appsync:UpdateResolver",
            "appsync:UpdateType"
        ]
    },
    "AWSAppSyncInvokeFullAccess": {
        "permissions": [
            "appsync:GetGraphqlApi",
            "appsync:GraphQL",
            "appsync:ListApiKeys",
            "appsync:ListGraphqlApis"
        ]
    },
    "AWSEC2FleetServiceRolePolicy": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeSubnets",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole"
        ]
    },
    "FMSServiceRolePolicy": {
        "permissions": [
            "apigateway:SetWebACL",
            "cloudfront:GetDistribution",
            "cloudfront:ListDistributions",
            "cloudfront:ListDistributionsByWebACLId",
            "cloudfront:ListTagsForResource",
            "cloudfront:UpdateDistribution",
            "config:DeleteConfigRule",
            "config:DeleteEvaluationResults",
            "config:DescribeComplianceByConfigRule",
            "config:DescribeConfigRuleEvaluationStatus",
            "config:DescribeConfigRules",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "config:DescribeDeliveryChannelStatus",
            "config:DescribeDeliveryChannels",
            "config:GetComplianceDetailsByConfigRule",
            "config:GetComplianceSummaryByConfigRule",
            "config:GetDiscoveredResourceCounts",
            "config:PutConfigRule",
            "config:PutConfigurationRecorder",
            "config:PutDeliveryChannel",
            "config:PutEvaluations",
            "config:SelectResourceConfig",
            "config:StartConfigRulesEvaluation",
            "config:StartConfigurationRecorder",
            "ec2:AssociateRouteTable",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkAclEntry",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DisassociateRouteTable",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:ReplaceNetworkAclEntry",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
            "ec2:UpdateSecurityGroupRuleDescriptionsIngress",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:SetSecurityGroups",
            "elasticloadbalancing:SetWebACL",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:UpdateLogDelivery",
            "network-firewall:AssociateFirewallPolicy",
            "network-firewall:AssociateSubnets",
            "network-firewall:CreateFirewall",
            "network-firewall:CreateFirewallPolicy",
            "network-firewall:DeleteFirewall",
            "network-firewall:DeleteFirewallPolicy",
            "network-firewall:DeleteResourcePolicy",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:DescribeTLSInspectionConfiguration",
            "network-firewall:DisassociateSubnets",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "network-firewall:ListTLSInspectionConfigurations",
            "network-firewall:PutResourcePolicy",
            "network-firewall:TagResource",
            "network-firewall:UpdateFirewallDeleteProtection",
            "network-firewall:UpdateFirewallPolicy",
            "network-firewall:UpdateFirewallPolicyChangeProtection",
            "network-firewall:UpdateLoggingConfiguration",
            "network-firewall:UpdateSubnetChangeProtection",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots",
            "ram:AssociateResourceShare",
            "ram:CreateResourceShare",
            "ram:DeleteResourceShare",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares",
            "ram:TagResource",
            "ram:UpdateResourceShare",
            "route53resolver:AssociateFirewallRuleGroup",
            "route53resolver:DisassociateFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:GetFirewallRuleGroupPolicy",
            "route53resolver:ListFirewallRuleGroupAssociations",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListTagsForResource",
            "route53resolver:PutFirewallRuleGroupPolicy",
            "route53resolver:TagResource",
            "route53resolver:UpdateFirewallRuleGroupAssociation",
            "shield:CreateProtection",
            "shield:CreateSubscription",
            "shield:DeleteProtection",
            "shield:DescribeDRTAccess",
            "shield:DescribeEmergencyContactSettings",
            "shield:DescribeProtection",
            "shield:DescribeSubscription",
            "shield:DisableApplicationLayerAutomaticResponse",
            "shield:EnableApplicationLayerAutomaticResponse",
            "shield:GetSubscriptionState",
            "shield:ListAttacks",
            "shield:ListProtections",
            "shield:UpdateApplicationLayerAutomaticResponse",
            "shield:UpdateEmergencyContactSettings",
            "waf-regional:AssociateWebACL",
            "waf-regional:CreateWebACL",
            "waf-regional:DeletePermissionPolicy",
            "waf-regional:DeleteWebACL",
            "waf-regional:DisassociateWebACL",
            "waf-regional:GetChangeToken",
            "waf-regional:GetPermissionPolicy",
            "waf-regional:GetRuleGroup",
            "waf-regional:GetWebACL",
            "waf-regional:GetWebACLForResource",
            "waf-regional:ListResourcesForWebACL",
            "waf-regional:ListSubscribedRuleGroups",
            "waf-regional:ListTagsForResource",
            "waf-regional:PutPermissionPolicy",
            "waf-regional:UpdateWebACL",
            "waf:CreateWebACL",
            "waf:DeletePermissionPolicy",
            "waf:DeleteWebACL",
            "waf:GetChangeToken",
            "waf:GetPermissionPolicy",
            "waf:GetRuleGroup",
            "waf:GetWebACL",
            "waf:ListSubscribedRuleGroups",
            "waf:ListTagsForResource",
            "waf:PutPermissionPolicy",
            "waf:UpdateWebACL",
            "wafv2:AssociateWebACL",
            "wafv2:CreateWebACL",
            "wafv2:DeleteFirewallManagerRuleGroups",
            "wafv2:DeleteLoggingConfiguration",
            "wafv2:DeletePermissionPolicy",
            "wafv2:DeleteWebACL",
            "wafv2:DisassociateFirewallManager",
            "wafv2:DisassociateWebACL",
            "wafv2:GetLoggingConfiguration",
            "wafv2:GetPermissionPolicy",
            "wafv2:GetWebACL",
            "wafv2:GetWebACLForResource",
            "wafv2:ListLoggingConfigurations",
            "wafv2:ListResourcesForWebACL",
            "wafv2:ListTagsForResource",
            "wafv2:PutFirewallManagerRuleGroups",
            "wafv2:PutLoggingConfiguration",
            "wafv2:PutPermissionPolicy",
            "wafv2:TagResource",
            "wafv2:UntagResource",
            "wafv2:UpdateWebACL"
        ]
    },
    "AmazonTranscribeReadOnlyAccess": {
        "permissions": [
            "transcribe:Get*",
            "transcribe:List*"
        ]
    },
    "AmazonTranscribeFullAccess": {
        "permissions": [
            "s3:GetObject",
            "transcribe:*"
        ]
    },
    "SecretsManagerReadWrite": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "docdb-elastic:GetCluster",
            "docdb-elastic:ListClusters",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:ListFunctions",
            "lambda:UpdateFunctionConfiguration",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "s3:GetObject",
            "secretsmanager:*",
            "serverlessrepo:CreateCloudFormationChangeSet",
            "serverlessrepo:GetApplication",
            "tag:GetResources"
        ]
    },
    "AWSAppSyncPushToCloudWatchLogs": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSArtifactAccountSync": {
        "permissions": [
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
        ]
    },
    "AmazonElasticTranscoder_FullAccess": {
        "permissions": [
            "elastictranscoder:*",
            "iam:ListRoles",
            "iam:PassRole",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:ListTopics"
        ]
    },
    "AmazonRDSBetaServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCoipPoolPermission",
            "ec2:CreateLocalGatewayRouteTablePermission",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteCoipPoolPermission",
            "ec2:DeleteLocalGatewayRouteTablePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTablePermissions",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupIngress",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RotateSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage"
        ]
    },
    "AWSFMAdminFullAccess": {
        "permissions": [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRegions",
            "elasticloadbalancing:SetWebACL",
            "firehose:ListDeliveryStreams",
            "fms:*",
            "iam:CreateServiceLinkedRole",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:DescribeRuleGroupMetadata",
            "network-firewall:ListRuleGroups",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots",
            "organizations:RegisterDelegatedAdministrator",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:ListFirewallRuleGroups",
            "s3:GetBucketPolicy",
            "s3:PutBucketPolicy",
            "shield:GetSubscriptionState",
            "waf-regional:*",
            "waf:*",
            "wafv2:CheckCapacity",
            "wafv2:ListAvailableManagedRuleGroupVersions",
            "wafv2:ListAvailableManagedRuleGroups",
            "wafv2:ListRuleGroups",
            "wafv2:PutLoggingConfiguration"
        ]
    },
    "AWSFMAdminReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRegions",
            "firehose:ListDeliveryStreams",
            "fms:Get*",
            "fms:List*",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:DescribeRuleGroupMetadata",
            "network-firewall:ListRuleGroups",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:ListFirewallRuleGroups",
            "s3:GetBucketPolicy",
            "shield:GetSubscriptionState",
            "waf-regional:Get*",
            "waf-regional:List*",
            "waf:Get*",
            "waf:List*",
            "wafv2:CheckCapacity",
            "wafv2:ListAvailableManagedRuleGroupVersions",
            "wafv2:ListAvailableManagedRuleGroups",
            "wafv2:ListRuleGroups"
        ]
    },
    "AWSFMMemberReadOnlyAccess": {
        "permissions": [
            "fms:GetAdminAccount",
            "organizations:DescribeOrganization",
            "waf-regional:Get*",
            "waf-regional:List*",
            "waf:Get*",
            "waf:List*"
        ]
    },
    "AWSIoT1ClickReadOnlyAccess": {
        "permissions": [
            "iot1click:Describe*",
            "iot1click:Get*",
            "iot1click:List*"
        ]
    },
    "AWSIoT1ClickFullAccess": {
        "permissions": [
            "iot1click:*"
        ]
    },
    "AmazonEKSClusterPolicy": {
        "permissions": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:UpdateAutoScalingGroup",
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateRoute",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteRoute",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVolume",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeInstanceTopology",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVpcs",
            "ec2:DetachVolume",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyVolume",
            "ec2:RevokeSecurityGroupIngress",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:AttachLoadBalancerToSubnets",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateLoadBalancerPolicy",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteLoadBalancerListeners",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DetachLoadBalancerFromSubnets",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:ModifyLoadBalancerAttributes",
            "elasticloadbalancing:ModifyTargetGroup",
            "elasticloadbalancing:ModifyTargetGroupAttributes",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
            "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
            "iam:CreateServiceLinkedRole",
            "kms:DescribeKey"
        ]
    },
    "AmazonEKS_CNI_Policy": {
        "permissions": [
            "ec2:AssignPrivateIpAddresses",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignPrivateIpAddresses"
        ]
    },
    "AmazonEKSServicePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteTags",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:ModifyNetworkInterfaceAttribute",
            "eks:UpdateClusterVersion",
            "iam:CreateServiceLinkedRole",
            "iam:ListAttachedRolePolicies",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "route53:AssociateVPCWithHostedZone"
        ]
    },
    "AmazonEKSWorkerNodePolicy": {
        "permissions": [
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVpcs",
            "eks-auth:AssumeRoleForPodIdentity",
            "eks:DescribeCluster"
        ]
    },
    "NeptuneReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "neptune-db:Get*",
            "neptune-db:List*",
            "neptune-db:Read*",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenancepermissions",
            "rds:DownloadDBLogFilePortion",
            "rds:ListTagsForResource"
        ]
    },
    "NeptuneFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "neptune-db:*",
            "rds:AddRoleToDBCluster",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CreateDBCluster",
            "rds:CreateDBClusterEndpoint",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBInstance",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:CreateGlobalCluster",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterEndpoint",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DeleteGlobalCluster",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterEndpoints",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenancepermissions",
            "rds:DescribeValidDBInstanceModifications",
            "rds:DownloadDBLogFilePortion",
            "rds:FailoverDBCluster",
            "rds:FailoverGlobalCluster",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterEndpoint",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:ModifyGlobalCluster",
            "rds:PromoteReadReplicaDBCluster",
            "rds:RebootDBInstance",
            "rds:RemoveFromGlobalCluster",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime",
            "rds:StartDBCluster",
            "rds:StopDBCluster",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
        ]
    },
    "AWSConfigServiceRolePolicy": {
        "permissions": [
            "APS:DescribeRuleGroupsNamespace",
            "APS:DescribeWorkspace",
            "APS:ListWorkspaces",
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListTagsForResource",
            "account:GetAlternateContact",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListTags",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "acm:ListTagsForCertificate",
            "airflow:GetEnvironment",
            "airflow:ListEnvironments",
            "airflow:ListTagsForResource",
            "amplify:GetApp",
            "amplify:GetBranch",
            "amplify:ListApps",
            "amplify:ListBranches",
            "amplifyuibuilder:ExportThemes",
            "amplifyuibuilder:GetTheme",
            "amplifyuibuilder:ListThemes",
            "aoss:BatchGetCollection",
            "aoss:BatchGetLifecyclePolicy",
            "aoss:BatchGetVpcEndpoint",
            "aoss:GetAccessPolicy",
            "aoss:GetSecurityConfig",
            "aoss:GetSecurityPolicy",
            "aoss:ListAccessPolicies",
            "aoss:ListCollections",
            "aoss:ListLifecyclePolicies",
            "aoss:ListSecurityConfigs",
            "aoss:ListSecurityPolicies",
            "aoss:ListVpcEndpoints",
            "apigateway:GET",
            "app-integrations:GetApplication",
            "app-integrations:GetEventIntegration",
            "app-integrations:ListApplications",
            "app-integrations:ListEventIntegrationAssociations",
            "app-integrations:ListEventIntegrations",
            "app-integrations:ListTagsForResource",
            "appconfig:GetApplication",
            "appconfig:GetConfigurationProfile",
            "appconfig:GetDeployment",
            "appconfig:GetDeploymentStrategy",
            "appconfig:GetEnvironment",
            "appconfig:GetExtension",
            "appconfig:GetExtensionAssociation",
            "appconfig:GetHostedConfigurationVersion",
            "appconfig:ListApplications",
            "appconfig:ListConfigurationProfiles",
            "appconfig:ListDeploymentStrategies",
            "appconfig:ListDeployments",
            "appconfig:ListEnvironments",
            "appconfig:ListExtensionAssociations",
            "appconfig:ListExtensions",
            "appconfig:ListHostedConfigurationVersions",
            "appconfig:ListTagsForResource",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeFlow",
            "appflow:ListFlows",
            "appflow:ListTagsForResource",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "appmesh:DescribeGatewayRoute",
            "appmesh:DescribeMesh",
            "appmesh:DescribeRoute",
            "appmesh:DescribeVirtualGateway",
            "appmesh:DescribeVirtualNode",
            "appmesh:DescribeVirtualRouter",
            "appmesh:DescribeVirtualService",
            "appmesh:ListGatewayRoutes",
            "appmesh:ListMeshes",
            "appmesh:ListRoutes",
            "appmesh:ListTagsForResource",
            "appmesh:ListVirtualGateways",
            "appmesh:ListVirtualNodes",
            "appmesh:ListVirtualRouters",
            "appmesh:ListVirtualServices",
            "apprunner:DescribeService",
            "apprunner:DescribeVpcConnector",
            "apprunner:ListServices",
            "apprunner:ListTagsForResource",
            "apprunner:ListVpcConnectors",
            "appstream:DescribeAppBlockBuilders",
            "appstream:DescribeApplications",
            "appstream:DescribeDirectoryConfigs",
            "appstream:DescribeFleets",
            "appstream:DescribeStacks",
            "appstream:ListTagsForResource",
            "appsync:GetApiCache",
            "appsync:GetGraphqlApi",
            "appsync:ListGraphqlApis",
            "aps:DescribeAlertManagerDefinition",
            "aps:DescribeLoggingConfiguration",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListTagsForResource",
            "athena:GetDataCatalog",
            "athena:GetPreparedStatement",
            "athena:GetWorkGroup",
            "athena:ListDataCatalogs",
            "athena:ListPreparedStatements",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "auditmanager:GetAccountStatus",
            "auditmanager:GetAssessment",
            "auditmanager:ListAssessments",
            "autoscaling-plans:DescribeScalingPlanResources",
            "autoscaling-plans:DescribeScalingPlans",
            "autoscaling-plans:GetScalingPlanResourceForecastData",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScheduledpermissions",
            "autoscaling:DescribeTags",
            "autoscaling:DescribeWarmPool",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup:DescribeBackupVault",
            "backup:DescribeFramework",
            "backup:DescribeProtectedResource",
            "backup:DescribeRecoveryPoint",
            "backup:DescribeReportPlan",
            "backup:GetBackupPlan",
            "backup:GetBackupSelection",
            "backup:GetBackupVaultAccessPolicy",
            "backup:GetBackupVaultNotifications",
            "backup:GetRestoreTestingPlan",
            "backup:GetRestoreTestingSelection",
            "backup:ListBackupPlans",
            "backup:ListBackupSelections",
            "backup:ListBackupVaults",
            "backup:ListFrameworks",
            "backup:ListRecoveryPointsByBackupVault",
            "backup:ListReportPlans",
            "backup:ListRestoreTestingPlans",
            "backup:ListRestoreTestingSelections",
            "backup:ListTags",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobQueues",
            "batch:DescribeSchedulingPolicies",
            "batch:ListSchedulingPolicies",
            "batch:ListTagsForResource",
            "billingconductor:ListAccountAssociations",
            "billingconductor:ListBillingGroups",
            "billingconductor:ListCustomLineItems",
            "billingconductor:ListPricingPlans",
            "billingconductor:ListPricingRules",
            "billingconductor:ListPricingRulesAssociatedToPricingPlan",
            "billingconductor:ListTagsForResource",
            "budgets:DescribeBudgetAction",
            "budgets:DescribeBudgetpermissionsForAccount",
            "budgets:DescribeBudgetpermissionsForBudget",
            "budgets:ViewBudget",
            "cassandra:Select",
            "ce:GetAnomalyMonitors",
            "ce:GetAnomalySubscriptions",
            "cleanrooms-ml:GetTrainingDataset",
            "cleanrooms-ml:ListTrainingDatasets",
            "cloud9:DescribeEnvironmentMemberships",
            "cloud9:DescribeEnvironments",
            "cloud9:ListEnvironments",
            "cloud9:ListTagsForResource",
            "cloudTrail:GetChannel",
            "cloudTrail:ListChannels",
            "cloudformation:DescribeType",
            "cloudformation:GetResource",
            "cloudformation:ListResources",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudformation:ListTypes",
            "cloudfront:GetFunction",
            "cloudfront:GetOriginAccessControl",
            "cloudfront:GetResponseHeadersPolicy",
            "cloudfront:ListDistributions",
            "cloudfront:ListFunctions",
            "cloudfront:ListOriginAccessControls",
            "cloudfront:ListResponseHeadersPolicies",
            "cloudfront:ListTagsForResource",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventDataStore",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetInsightSelectors",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListEventDataStores",
            "cloudtrail:ListTags",
            "cloudtrail:ListTrails",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:DescribeAnomalyDetectors",
            "cloudwatch:GetDashboard",
            "cloudwatch:GetMetricStream",
            "cloudwatch:ListDashboards",
            "cloudwatch:ListMetricStreams",
            "cloudwatch:ListTagsForResource",
            "codeartifact:DescribeRepository",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListDomains",
            "codeartifact:ListPackageVersions",
            "codeartifact:ListPackages",
            "codeartifact:ListRepositories",
            "codeartifact:ListTagsForResource",
            "codebuild:BatchGetReportGroups",
            "codebuild:ListReportGroups",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codecommit:ListRepositories",
            "codecommit:ListTagsForResource",
            "codedeploy:GetDeploymentConfig",
            "codeguru-profiler:DescribeProfilingGroup",
            "codeguru-profiler:GetNotificationConfiguration",
            "codeguru-profiler:GetPolicy",
            "codeguru-profiler:ListProfilingGroups",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelines",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:GetPrincipalTagAttributeMap",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:ListTagsForResource",
            "cognito-idp:DescribeIdentityProvider",
            "cognito-idp:DescribeResourceServer",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:DescribeUserPoolDomain",
            "cognito-idp:GetGroup",
            "cognito-idp:GetUserPoolMfaConfig",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListResourceServers",
            "cognito-idp:ListTagsForResource",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "comprehend:DescribeFlywheel",
            "comprehend:ListFlywheels",
            "comprehend:ListTagsForResource",
            "config:BatchGet*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:Put*",
            "config:Select*",
            "connect:DescribeEvaluationForm",
            "connect:DescribeInstance",
            "connect:DescribeInstanceStorageConfig",
            "connect:DescribePhoneNumber",
            "connect:DescribePrompt",
            "connect:DescribeQueue",
            "connect:DescribeQuickConnect",
            "connect:DescribeRoutingProfile",
            "connect:DescribeRule",
            "connect:DescribeSecurityProfile",
            "connect:DescribeUser",
            "connect:GetTaskTemplate",
            "connect:ListApprovedOrigins",
            "connect:ListEvaluationForms",
            "connect:ListInstanceAttributes",
            "connect:ListInstanceStorageConfigs",
            "connect:ListInstances",
            "connect:ListIntegrationAssociations",
            "connect:ListPhoneNumbers",
            "connect:ListPhoneNumbersV2",
            "connect:ListPrompts",
            "connect:ListQueueQuickConnects",
            "connect:ListQueues",
            "connect:ListQuickConnects",
            "connect:ListRoutingProfileQueues",
            "connect:ListRoutingProfiles",
            "connect:ListRules",
            "connect:ListSecurityKeys",
            "connect:ListSecurityProfileApplications",
            "connect:ListSecurityProfilePermissions",
            "connect:ListSecurityProfiles",
            "connect:ListTagsForResource",
            "connect:ListTaskTemplates",
            "connect:ListUsers",
            "connect:SearchAvailablePhoneNumbers",
            "databrew:DescribeDataset",
            "databrew:DescribeJob",
            "databrew:DescribeProject",
            "databrew:DescribeRecipe",
            "databrew:DescribeRuleset",
            "databrew:DescribeSchedule",
            "databrew:ListDatasets",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "databrew:ListRecipeVersions",
            "databrew:ListRecipes",
            "databrew:ListRulesets",
            "databrew:ListSchedules",
            "datasync:DescribeAgent",
            "datasync:DescribeLocationEfs",
            "datasync:DescribeLocationFsxLustre",
            "datasync:DescribeLocationFsxWindows",
            "datasync:DescribeLocationHdfs",
            "datasync:DescribeLocationNfs",
            "datasync:DescribeLocationObjectStorage",
            "datasync:DescribeLocationS3",
            "datasync:DescribeLocationSmb",
            "datasync:DescribeTask",
            "datasync:ListAgents",
            "datasync:ListLocations",
            "datasync:ListTagsForResource",
            "datasync:ListTasks",
            "datazone:GetDomain",
            "datazone:ListDomains",
            "dax:DescribeClusters",
            "dax:DescribeParameterGroups",
            "dax:DescribeParameters",
            "dax:DescribeSubnetGroups",
            "dax:ListTags",
            "detective:ListGraphs",
            "detective:ListTagsForResource",
            "devicefarm:GetInstanceProfile",
            "devicefarm:GetNetworkProfile",
            "devicefarm:GetProject",
            "devicefarm:GetTestGridProject",
            "devicefarm:ListInstanceProfiles",
            "devicefarm:ListNetworkProfiles",
            "devicefarm:ListProjects",
            "devicefarm:ListTagsForResource",
            "devicefarm:ListTestGridProjects",
            "devops-guru:GetResourceCollection",
            "devops-guru:ListNotificationChannels",
            "dms:DescribeCertificates",
            "dms:DescribeEndpoints",
            "dms:DescribeEventSubscriptions",
            "dms:DescribeReplicationInstances",
            "dms:DescribeReplicationSubnetGroups",
            "dms:DescribeReplicationTaskAssessmentRuns",
            "dms:DescribeReplicationTasks",
            "dms:ListTagsForResource",
            "ds:DescribeDirectories",
            "ds:DescribeDomainControllers",
            "ds:DescribeEventTopics",
            "ds:ListLogSubscriptions",
            "ds:ListTagsForResource",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeGlobalTableSettings",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTableReplicaAutoScaling",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:Describe*",
            "ec2:DescribeClientVpnAuthorizationRules",
            "ec2:DescribeClientVpnEndpoints",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeFleets",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeTags",
            "ec2:DescribeTrafficMirrorFilters",
            "ec2:DescribeTrafficMirrorSessions",
            "ec2:DescribeTrafficMirrorTargets",
            "ec2:DescribeVolumeAttribute",
            "ec2:DescribeVolumes",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetInstanceTypesFromInstanceRequirements",
            "ec2:GetIpamPoolAllocations",
            "ec2:GetIpamPoolCidrs",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ec2:GetSnapshotBlockPublicAccessState",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:DescribePullThroughCacheRules",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRegistryPolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:ListTagsForResource",
            "ecs:DescribeCapacityProviders",
            "ecs:DescribeClusters",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTaskSets",
            "ecs:ListClusters",
            "ecs:ListServices",
            "ecs:ListTagsForResource",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "eks:DescribeAddon",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeIdentityProviderConfig",
            "eks:DescribeNodegroup",
            "eks:ListAddons",
            "eks:ListClusters",
            "eks:ListFargateProfiles",
            "eks:ListIdentityProviderConfigs",
            "eks:ListNodegroups",
            "eks:ListTagsForResource",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameterGroups",
            "elasticache:DescribeCacheParameters",
            "elasticache:DescribeCacheSecurityGroups",
            "elasticache:DescribeCacheSubnetGroups",
            "elasticache:DescribeGlobalReplicationGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeSnapshots",
            "elasticache:DescribeUserGroups",
            "elasticache:DescribeUsers",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:DescribeConfigurationSettings",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeTags",
            "elasticloadbalancing:DescribeListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:DescribeStudio",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:GetStudioSessionMapping",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListStudioSessionMappings",
            "elasticmapreduce:ListStudios",
            "emr-containers:DescribeVirtualCluster",
            "emr-containers:ListVirtualClusters",
            "emr-serverless:GetApplication",
            "emr-serverless:ListApplications",
            "es:DescribeDomain",
            "es:DescribeDomains",
            "es:DescribeElasticsearchDomain",
            "es:DescribeElasticsearchDomains",
            "es:GetCompatibleElasticsearchVersions",
            "es:GetCompatibleVersions",
            "es:ListDomainNames",
            "es:ListTags",
            "events:DescribeApiDestination",
            "events:DescribeArchive",
            "events:DescribeConnection",
            "events:DescribeEndpoint",
            "events:DescribeEventBus",
            "events:DescribeRule",
            "events:ListApiDestinations",
            "events:ListArchives",
            "events:ListConnections",
            "events:ListEndpoints",
            "events:ListEventBuses",
            "events:ListRules",
            "events:ListTagsForResource",
            "events:ListTargetsByRule",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:GetSegment",
            "evidently:ListLaunches",
            "evidently:ListProjects",
            "evidently:ListSegments",
            "evidently:ListTagsForResource",
            "finspace:GetEnvironment",
            "finspace:ListEnvironments",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "firehose:ListTagsForDeliveryStream",
            "fis:GetExperimentTemplate",
            "fis:ListExperimentTemplates",
            "fms:GetNotificationChannel",
            "fms:GetPolicy",
            "fms:ListPolicies",
            "fms:ListTagsForResource",
            "forecast:DescribeDataset",
            "forecast:DescribeDatasetGroup",
            "forecast:ListDatasetGroups",
            "forecast:ListDatasets",
            "forecast:ListTagsForResource",
            "frauddetector:GetDetectorVersion",
            "frauddetector:GetDetectors",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetLabels",
            "frauddetector:GetModels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:ListTagsForResource",
            "fsx:DescribeBackups",
            "fsx:DescribeDataRepositoryAssociations",
            "fsx:DescribeFileSystems",
            "fsx:DescribeSnapshots",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:ListTagsForResource",
            "gamelift:DescribeAlias",
            "gamelift:DescribeBuild",
            "gamelift:DescribeFleetAttributes",
            "gamelift:DescribeFleetCapacity",
            "gamelift:DescribeFleetLocationAttributes",
            "gamelift:DescribeFleetLocationCapacity",
            "gamelift:DescribeFleetPortSettings",
            "gamelift:DescribeGameServerGroup",
            "gamelift:DescribeGameSessionQueues",
            "gamelift:DescribeMatchmakingConfigurations",
            "gamelift:DescribeMatchmakingRuleSets",
            "gamelift:DescribeRuntimeConfiguration",
            "gamelift:DescribeScript",
            "gamelift:DescribeVpcPeeringAuthorizations",
            "gamelift:DescribeVpcPeeringConnections",
            "gamelift:ListAliases",
            "gamelift:ListBuilds",
            "gamelift:ListFleets",
            "gamelift:ListGameServerGroups",
            "gamelift:ListScripts",
            "gamelift:ListTagsForResource",
            "geo:DescribeGeofenceCollection",
            "geo:DescribeMap",
            "geo:DescribePlaceIndex",
            "geo:DescribeRouteCalculator",
            "geo:DescribeTracker",
            "geo:ListGeofenceCollections",
            "geo:ListMaps",
            "geo:ListPlaceIndexes",
            "geo:ListRouteCalculators",
            "geo:ListTrackerConsumers",
            "geo:ListTrackers",
            "globalaccelerator:DescribeAccelerator",
            "globalaccelerator:DescribeEndpointGroup",
            "globalaccelerator:DescribeListener",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "globalaccelerator:ListTagsForResource",
            "glue:BatchGetDevEndpoints",
            "glue:BatchGetJobs",
            "glue:BatchGetWorkflows",
            "glue:GetClassifier",
            "glue:GetClassifiers",
            "glue:GetCrawler",
            "glue:GetCrawlers",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetDevEndpoint",
            "glue:GetDevEndpoints",
            "glue:GetJob",
            "glue:GetJobs",
            "glue:GetMLTransform",
            "glue:GetMLTransforms",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetRegistry",
            "glue:GetSecurityConfiguration",
            "glue:GetSecurityConfigurations",
            "glue:GetTable",
            "glue:GetTags",
            "glue:GetTrigger",
            "glue:GetWorkflow",
            "glue:ListCrawlers",
            "glue:ListDevEndpoints",
            "glue:ListJobs",
            "glue:ListMLTransforms",
            "glue:ListRegistries",
            "glue:ListTriggers",
            "glue:ListWorkflows",
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:DescribeWorkspaceConfiguration",
            "grafana:ListWorkspaces",
            "greengrass:DescribeComponent",
            "greengrass:GetComponent",
            "greengrass:ListComponentVersions",
            "greengrass:ListComponents",
            "groundstation:GetConfig",
            "groundstation:GetDataflowEndpointGroup",
            "groundstation:GetMissionProfile",
            "groundstation:ListConfigs",
            "groundstation:ListDataflowEndpointGroups",
            "groundstation:ListMissionProfiles",
            "groundstation:ListTagsForResource",
            "guardduty:DescribePublishingDestination",
            "guardduty:GetAdministratorAccount",
            "guardduty:GetDetector",
            "guardduty:GetFilter",
            "guardduty:GetFindings",
            "guardduty:GetIPSet",
            "guardduty:GetMasterAccount",
            "guardduty:GetMemberDetectors",
            "guardduty:GetMembers",
            "guardduty:GetThreatIntelSet",
            "guardduty:ListDetectors",
            "guardduty:ListFilters",
            "guardduty:ListFindings",
            "guardduty:ListIPSets",
            "guardduty:ListMembers",
            "guardduty:ListOrganizationAdminAccounts",
            "guardduty:ListPublishingDestinations",
            "guardduty:ListTagsForResource",
            "guardduty:ListThreatIntelSets",
            "healthlake:DescribeFHIRDatastore",
            "healthlake:ListFHIRDatastores",
            "healthlake:ListTagsForResource",
            "iam:GenerateCredentialReport",
            "iam:GetAccountAuthorizationDetails",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:GetGroup",
            "iam:GetGroupPolicy",
            "iam:GetInstanceProfile",
            "iam:GetOpenIDConnectProvider",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetSAMLProvider",
            "iam:GetServerCertificate",
            "iam:GetUser",
            "iam:GetUserPolicy",
            "iam:ListAccessKeys",
            "iam:ListAttachedGroupPolicies",
            "iam:ListAttachedRolePolicies",
            "iam:ListAttachedUserPolicies",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroups",
            "iam:ListGroupsForUser",
            "iam:ListInstanceProfileTags",
            "iam:ListInstanceProfiles",
            "iam:ListInstanceProfilesForRole",
            "iam:ListMFADeviceTags",
            "iam:ListMFADevices",
            "iam:ListOpenIDConnectProviders",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "iam:ListServerCertificates",
            "iam:ListUserPolicies",
            "iam:ListUsers",
            "iam:ListVirtualMFADevices",
            "identitystore:DescribeGroup",
            "identitystore:DescribeGroupMembership",
            "identitystore:ListGroupMemberships",
            "identitystore:ListGroups",
            "imagebuilder:GetComponent",
            "imagebuilder:GetContainerRecipe",
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:GetImage",
            "imagebuilder:GetImagePipeline",
            "imagebuilder:GetImageRecipe",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:GetLifecyclePolicy",
            "imagebuilder:ListComponentBuildVersions",
            "imagebuilder:ListComponents",
            "imagebuilder:ListContainerRecipes",
            "imagebuilder:ListDistributionConfigurations",
            "imagebuilder:ListImageBuildVersions",
            "imagebuilder:ListImagePipelines",
            "imagebuilder:ListImageRecipes",
            "imagebuilder:ListImages",
            "imagebuilder:ListInfrastructureConfigurations",
            "imagebuilder:ListLifecyclePolicies",
            "inspector2:BatchGetAccountStatus",
            "inspector2:GetDelegatedAdminAccount",
            "inspector2:ListFilters",
            "inspector2:ListMembers",
            "iot:DescribeAccountAuditConfiguration",
            "iot:DescribeAuthorizer",
            "iot:DescribeBillingGroup",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeCustomMetric",
            "iot:DescribeDimension",
            "iot:DescribeDomainConfiguration",
            "iot:DescribeFleetMetric",
            "iot:DescribeJobTemplate",
            "iot:DescribeMitigationAction",
            "iot:DescribeProvisioningTemplate",
            "iot:DescribeRoleAlias",
            "iot:DescribeScheduledAudit",
            "iot:DescribeSecurityProfile",
            "iot:DescribeThingGroup",
            "iot:DescribeThingType",
            "iot:GetPolicy",
            "iot:GetTopicRule",
            "iot:GetTopicRuleDestination",
            "iot:ListAuthorizers",
            "iot:ListBillingGroups",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListCustomMetrics",
            "iot:ListDimensions",
            "iot:ListDomainConfigurations",
            "iot:ListFleetMetrics",
            "iot:ListJobTemplates",
            "iot:ListMitigationpermissions",
            "iot:ListPolicies",
            "iot:ListProvisioningTemplates",
            "iot:ListRoleAliases",
            "iot:ListScheduledAudits",
            "iot:ListSecurityProfiles",
            "iot:ListSecurityProfilesForTarget",
            "iot:ListTagsForResource",
            "iot:ListTargetsForSecurityProfile",
            "iot:ListThingGroups",
            "iot:ListThingTypes",
            "iot:ListTopicRuleDestinations",
            "iot:ListTopicRules",
            "iot:ListV2LoggingLevels",
            "iot:ValidateSecurityProfileBehaviors",
            "iotanalytics:DescribeChannel",
            "iotanalytics:DescribeDataset",
            "iotanalytics:DescribeDatastore",
            "iotanalytics:DescribePipeline",
            "iotanalytics:ListChannels",
            "iotanalytics:ListDatasets",
            "iotanalytics:ListDatastores",
            "iotanalytics:ListPipelines",
            "iotanalytics:ListTagsForResource",
            "iotevents:DescribeAlarmModel",
            "iotevents:DescribeDetectorModel",
            "iotevents:DescribeInput",
            "iotevents:ListAlarmModels",
            "iotevents:ListDetectorModels",
            "iotevents:ListInputs",
            "iotevents:ListTagsForResource",
            "iotfleetwise:GetDecoderManifest",
            "iotfleetwise:GetFleet",
            "iotfleetwise:GetModelManifest",
            "iotfleetwise:GetSignalCatalog",
            "iotfleetwise:GetVehicle",
            "iotfleetwise:ListDecoderManifestNetworkInterfaces",
            "iotfleetwise:ListDecoderManifestSignals",
            "iotfleetwise:ListDecoderManifests",
            "iotfleetwise:ListFleets",
            "iotfleetwise:ListModelManifestNodes",
            "iotfleetwise:ListModelManifests",
            "iotfleetwise:ListSignalCatalogNodes",
            "iotfleetwise:ListSignalCatalogs",
            "iotfleetwise:ListTagsForResource",
            "iotfleetwise:ListVehicles",
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:DescribeDashboard",
            "iotsitewise:DescribeGateway",
            "iotsitewise:DescribePortal",
            "iotsitewise:DescribeProject",
            "iotsitewise:ListAccessPolicies",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListAssets",
            "iotsitewise:ListDashboards",
            "iotsitewise:ListGateways",
            "iotsitewise:ListPortals",
            "iotsitewise:ListProjectAssets",
            "iotsitewise:ListProjects",
            "iotsitewise:ListTagsForResource",
            "iottwinmaker:GetComponentType",
            "iottwinmaker:GetEntity",
            "iottwinmaker:GetScene",
            "iottwinmaker:GetSyncJob",
            "iottwinmaker:GetWorkspace",
            "iottwinmaker:ListComponentTypes",
            "iottwinmaker:ListEntities",
            "iottwinmaker:ListScenes",
            "iottwinmaker:ListSyncJobs",
            "iottwinmaker:ListTagsForResource",
            "iottwinmaker:ListWorkspaces",
            "iotwireless:GetDestination",
            "iotwireless:GetDeviceProfile",
            "iotwireless:GetFuotaTask",
            "iotwireless:GetMulticastGroup",
            "iotwireless:GetServiceProfile",
            "iotwireless:GetWirelessDevice",
            "iotwireless:GetWirelessGateway",
            "iotwireless:GetWirelessGatewayTaskDefinition",
            "iotwireless:ListDestinations",
            "iotwireless:ListDeviceProfiles",
            "iotwireless:ListFuotaTasks",
            "iotwireless:ListMulticastGroups",
            "iotwireless:ListServiceProfiles",
            "iotwireless:ListTagsForResource",
            "iotwireless:ListWirelessDevices",
            "iotwireless:ListWirelessGatewayTaskDefinitions",
            "iotwireless:ListWirelessGateways",
            "ivs:GetChannel",
            "ivs:GetEncoderConfiguration",
            "ivs:GetPlaybackKeyPair",
            "ivs:GetPlaybackRestrictionPolicy",
            "ivs:GetRecordingConfiguration",
            "ivs:GetStage",
            "ivs:GetStorageConfiguration",
            "ivs:GetStreamKey",
            "ivs:ListChannels",
            "ivs:ListEncoderConfigurations",
            "ivs:ListPlaybackKeyPairs",
            "ivs:ListPlaybackRestrictionPolicies",
            "ivs:ListRecordingConfigurations",
            "ivs:ListStages",
            "ivs:ListStorageConfigurations",
            "ivs:ListStreamKeys",
            "ivs:ListTagsForResource",
            "ivschat:GetLoggingConfiguration",
            "ivschat:GetRoom",
            "ivschat:ListLoggingConfigurations",
            "ivschat:ListRooms",
            "ivschat:ListTagsForResource",
            "kafka:DescribeCluster",
            "kafka:DescribeClusterV2",
            "kafka:DescribeConfiguration",
            "kafka:DescribeConfigurationRevision",
            "kafka:DescribeVpcConnection",
            "kafka:GetClusterPolicy",
            "kafka:ListClusters",
            "kafka:ListClustersV2",
            "kafka:ListConfigurations",
            "kafka:ListScramSecrets",
            "kafka:ListTagsForResource",
            "kafka:ListVpcConnections",
            "kafkaconnect:DescribeConnector",
            "kafkaconnect:ListConnectors",
            "kendra:DescribeIndex",
            "kendra:ListIndices",
            "kendra:ListTagsForResource",
            "kinesis:DescribeStreamConsumer",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesis:ListTagsForStream",
            "kinesisanalytics:DescribeApplication",
            "kinesisanalytics:ListApplications",
            "kinesisanalytics:ListTagsForResource",
            "kinesisvideo:DescribeSignalingChannel",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:ListSignalingChannels",
            "kinesisvideo:ListStreams",
            "kinesisvideo:ListTagsForResource",
            "kinesisvideo:ListTagsForStream",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:ListAliases",
            "kms:ListKeys",
            "kms:ListResourceTags",
            "lakeformation:DescribeResource",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:ListPermissions",
            "lakeformation:ListResources",
            "lambda:GetAlias",
            "lambda:GetCodeSigningConfig",
            "lambda:GetFunction",
            "lambda:GetFunctionCodeSigningConfig",
            "lambda:GetLayerVersion",
            "lambda:GetPolicy",
            "lambda:ListAliases",
            "lambda:ListCodeSigningConfigs",
            "lambda:ListFunctions",
            "lambda:ListLayerVersions",
            "lambda:ListLayers",
            "lambda:ListTags",
            "lambda:ListVersionsByFunction",
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotVersion",
            "lex:DescribeResourcePolicy",
            "lex:ListBotAliases",
            "lex:ListBotLocales",
            "lex:ListBotVersions",
            "lex:ListBots",
            "lex:ListTagsForResource",
            "license-manager:GetGrant",
            "license-manager:GetLicense",
            "license-manager:ListDistributedGrants",
            "license-manager:ListLicenses",
            "license-manager:ListReceivedGrants",
            "lightsail:GetAlarms",
            "lightsail:GetBuckets",
            "lightsail:GetCertificates",
            "lightsail:GetContainerServices",
            "lightsail:GetDisk",
            "lightsail:GetDisks",
            "lightsail:GetDistributions",
            "lightsail:GetInstance",
            "lightsail:GetInstances",
            "lightsail:GetKeyPair",
            "lightsail:GetLoadBalancer",
            "lightsail:GetLoadBalancerTlsCertificates",
            "lightsail:GetLoadBalancers",
            "lightsail:GetRelationalDatabase",
            "lightsail:GetRelationalDatabaseParameters",
            "lightsail:GetRelationalDatabases",
            "lightsail:GetStaticIp",
            "lightsail:GetStaticIps",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeDestinations",
            "logs:DescribeLogGroups",
            "logs:DescribeMetricFilters",
            "logs:GetDataProtectionPolicy",
            "logs:GetLogAnomalyDetector",
            "logs:GetLogDelivery",
            "logs:ListLogAnomalyDetectors",
            "logs:ListLogDeliveries",
            "logs:ListTagsLogGroup",
            "logs:PutLogEvents",
            "lookoutequipment:DescribeInferenceScheduler",
            "lookoutequipment:ListTagsForResource",
            "lookoutmetrics:DescribeAlert",
            "lookoutmetrics:DescribeAnomalyDetector",
            "lookoutmetrics:ListAlerts",
            "lookoutmetrics:ListAnomalyDetectors",
            "lookoutmetrics:ListMetricSets",
            "lookoutmetrics:ListTagsForResource",
            "lookoutvision:DescribeProject",
            "lookoutvision:ListProjects",
            "m2:GetEnvironment",
            "m2:ListEnvironments",
            "m2:ListTagsForResource",
            "macie2:DescribeOrganizationConfiguration",
            "macie2:GetAutomatedDiscoveryConfiguration",
            "macie2:GetClassificationExportConfiguration",
            "macie2:GetCustomDataIdentifier",
            "macie2:GetFindingsPublicationConfiguration",
            "macie2:GetMacieSession",
            "macie2:ListCustomDataIdentifiers",
            "macie2:ListTagsForResource",
            "managedblockchain:GetMember",
            "managedblockchain:GetNetwork",
            "managedblockchain:GetNode",
            "managedblockchain:ListInvitations",
            "managedblockchain:ListMembers",
            "managedblockchain:ListNodes",
            "mediaconnect:DescribeBridge",
            "mediaconnect:DescribeFlow",
            "mediaconnect:DescribeGateway",
            "mediaconnect:ListBridges",
            "mediaconnect:ListFlows",
            "mediaconnect:ListGateways",
            "mediaconnect:ListTagsForResource",
            "mediapackage-vod:DescribePackagingConfiguration",
            "mediapackage-vod:DescribePackagingGroup",
            "mediapackage-vod:ListPackagingConfigurations",
            "mediapackage-vod:ListPackagingGroups",
            "mediapackage-vod:ListTagsForResource",
            "mediatailor:DescribeChannel",
            "mediatailor:DescribeLiveSource",
            "mediatailor:DescribeSourceLocation",
            "mediatailor:DescribeVodSource",
            "mediatailor:GetPlaybackConfiguration",
            "mediatailor:ListChannels",
            "mediatailor:ListLiveSources",
            "mediatailor:ListPlaybackConfigurations",
            "mediatailor:ListSourceLocations",
            "mediatailor:ListVodSources",
            "memorydb:DescribeAcls",
            "memorydb:DescribeClusters",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeParameters",
            "memorydb:DescribeSubnetGroups",
            "memorydb:DescribeUsers",
            "memorydb:ListTags",
            "mobiletargeting:GetApp",
            "mobiletargeting:GetApplicationSettings",
            "mobiletargeting:GetApps",
            "mobiletargeting:GetCampaign",
            "mobiletargeting:GetCampaigns",
            "mobiletargeting:GetEmailChannel",
            "mobiletargeting:GetEmailTemplate",
            "mobiletargeting:GetEventStream",
            "mobiletargeting:GetInAppTemplate",
            "mobiletargeting:GetSegment",
            "mobiletargeting:GetSegments",
            "mobiletargeting:ListTagsForResource",
            "mobiletargeting:ListTemplates",
            "mq:DescribeBroker",
            "mq:ListBrokers",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:ListFirewalls",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:GetConnectPeer",
            "networkmanager:GetCustomerGatewayAssociations",
            "networkmanager:GetDevices",
            "networkmanager:GetLinkAssociations",
            "networkmanager:GetLinks",
            "networkmanager:GetSites",
            "networkmanager:GetTransitGatewayRegistrations",
            "networkmanager:ListConnectPeers",
            "networkmanager:ListTagsForResource",
            "nimble:GetLaunchProfile",
            "nimble:GetLaunchProfileDetails",
            "nimble:GetStreamingImage",
            "nimble:GetStudio",
            "nimble:GetStudioComponent",
            "nimble:ListLaunchProfiles",
            "nimble:ListStreamingImages",
            "nimble:ListStudioComponents",
            "nimble:ListStudios",
            "oam:GetSink",
            "oam:GetSinkPolicy",
            "oam:ListSinks",
            "omics:GetAnnotationStore",
            "omics:GetRunGroup",
            "omics:GetSequenceStore",
            "omics:GetVariantStore",
            "omics:GetWorkflow",
            "omics:ListAnnotationStores",
            "omics:ListRunGroups",
            "omics:ListSequenceStores",
            "omics:ListTagsForResource",
            "omics:ListVariantStores",
            "omics:ListWorkflows",
            "opsworks:DescribeInstances",
            "opsworks:DescribeLayers",
            "opsworks:DescribeTimeBasedAutoScaling",
            "opsworks:DescribeVolumes",
            "opsworks:ListTags",
            "organizations:DescribeAccount",
            "organizations:DescribeEffectivePolicy",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:DescribeResourcePolicy",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListPolicies",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListTagsForResource",
            "organizations:ListTargetsForPolicy",
            "panorama:DescribeApplicationInstance",
            "panorama:DescribeApplicationInstanceDetails",
            "panorama:DescribePackage",
            "panorama:DescribePackageVersion",
            "panorama:ListApplicationInstances",
            "panorama:ListNodes",
            "panorama:ListPackages",
            "payment-cryptography:GetAlias",
            "payment-cryptography:GetKey",
            "payment-cryptography:ListAliases",
            "payment-cryptography:ListKeys",
            "payment-cryptography:ListTagsForResource",
            "personalize:DescribeDataset",
            "personalize:DescribeDatasetGroup",
            "personalize:DescribeSchema",
            "personalize:DescribeSolution",
            "personalize:ListDatasetGroups",
            "personalize:ListDatasetImportJobs",
            "personalize:ListDatasets",
            "personalize:ListSchemas",
            "personalize:ListSolutions",
            "personalize:ListTagsForResource",
            "profile:GetDomain",
            "profile:GetIntegration",
            "profile:GetProfileObjectType",
            "profile:ListDomains",
            "profile:ListIntegrations",
            "profile:ListProfileObjectTypes",
            "profile:ListTagsForResource",
            "quicksight:DescribeAccountSubscription",
            "quicksight:DescribeAnalysis",
            "quicksight:DescribeAnalysisPermissions",
            "quicksight:DescribeDashboard",
            "quicksight:DescribeDashboardPermissions",
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:DescribeDataSetRefreshProperties",
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:DescribeTemplate",
            "quicksight:DescribeTemplatePermissions",
            "quicksight:DescribeTheme",
            "quicksight:DescribeThemePermissions",
            "quicksight:ListAnalyses",
            "quicksight:ListDashboards",
            "quicksight:ListDataSets",
            "quicksight:ListDataSources",
            "quicksight:ListTagsForResource",
            "quicksight:ListTemplates",
            "quicksight:ListThemes",
            "ram:GetPermission",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares",
            "ram:ListPermissionAssociations",
            "ram:ListPermissionVersions",
            "ram:ListPermissions",
            "ram:ListResourceSharePermissions",
            "ram:ListResources",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyEndpoints",
            "rds:DescribeDBProxyTargetGroups",
            "rds:DescribeDBProxyTargets",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshotAttributes",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:ListTagsForResource",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListTagsForResource",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterParameters",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusters",
            "redshift:DescribeEndpointAccess",
            "redshift:DescribeEndpointAuthorization",
            "redshift:DescribeEventSubscriptions",
            "redshift:DescribeLoggingStatus",
            "redshift:DescribeScheduledpermissions",
            "redshift:DescribeTags",
            "refactor-spaces:GetEnvironment",
            "refactor-spaces:GetService",
            "refactor-spaces:ListApplications",
            "refactor-spaces:ListEnvironments",
            "refactor-spaces:ListServices",
            "rekognition:DescribeProjects",
            "rekognition:DescribeStreamProcessor",
            "rekognition:ListStreamProcessors",
            "rekognition:ListTagsForResource",
            "resiliencehub:DescribeApp",
            "resiliencehub:DescribeAppVersionTemplate",
            "resiliencehub:DescribeResiliencyPolicy",
            "resiliencehub:ListAppVersionResourceMappings",
            "resiliencehub:ListApps",
            "resiliencehub:ListResiliencyPolicies",
            "resiliencehub:ListTagsForResource",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListTagsForResource",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:GetGroupQuery",
            "resource-groups:GetTags",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "robomaker:DescribeRobotApplication",
            "robomaker:DescribeSimulationApplication",
            "robomaker:ListRobotApplications",
            "robomaker:ListSimulationApplications",
            "route53-recovery-control-config:DescribeCluster",
            "route53-recovery-control-config:DescribeControlPanel",
            "route53-recovery-control-config:DescribeRoutingControl",
            "route53-recovery-control-config:DescribeSafetyRule",
            "route53-recovery-control-config:ListClusters",
            "route53-recovery-control-config:ListControlPanels",
            "route53-recovery-control-config:ListRoutingControls",
            "route53-recovery-control-config:ListSafetyRules",
            "route53-recovery-control-config:ListTagsForResource",
            "route53-recovery-readiness:GetCell",
            "route53-recovery-readiness:GetReadinessCheck",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:ListCells",
            "route53-recovery-readiness:ListReadinessChecks",
            "route53-recovery-readiness:ListRecoveryGroups",
            "route53-recovery-readiness:ListResourceSets",
            "route53:GetChange",
            "route53:GetDNSSEC",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListCidrBlocks",
            "route53:ListCidrCollections",
            "route53:ListCidrLocations",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListQueryLoggingConfigs",
            "route53:ListResourceRecordSets",
            "route53:ListTagsForResource",
            "route53resolver:GetFirewallDomainList",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:GetResolverDnssecConfig",
            "route53resolver:GetResolverEndpoint",
            "route53resolver:GetResolverQueryLogConfig",
            "route53resolver:GetResolverQueryLogConfigAssociation",
            "route53resolver:GetResolverRule",
            "route53resolver:GetResolverRuleAssociation",
            "route53resolver:ListFirewallDomainLists",
            "route53resolver:ListFirewallDomains",
            "route53resolver:ListFirewallRuleGroupAssociations",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListFirewallRules",
            "route53resolver:ListResolverDnssecConfigs",
            "route53resolver:ListResolverEndpointIpAddresses",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverQueryLogConfigAssociations",
            "route53resolver:ListResolverQueryLogConfigs",
            "route53resolver:ListResolverRuleAssociations",
            "route53resolver:ListResolverRules",
            "route53resolver:ListTagsForResource",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "rum:ListTagsForResource",
            "s3-outposts:GetAccessPoint",
            "s3-outposts:GetAccessPointPolicy",
            "s3-outposts:GetBucket",
            "s3-outposts:GetBucketPolicy",
            "s3-outposts:GetBucketTagging",
            "s3-outposts:GetLifecycleConfiguration",
            "s3-outposts:ListAccessPoints",
            "s3-outposts:ListEndpoints",
            "s3-outposts:ListRegionalBuckets",
            "s3:GetAccelerateConfiguration",
            "s3:GetAccessPoint",
            "s3:GetAccessPointForObjectLambda",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyForObjectLambda",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccessPointPolicyStatusForObjectLambda",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketNotification",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketRequestPayment",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetMultiRegionAccessPoint",
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPointPolicyStatus",
            "s3:GetReplicationConfiguration",
            "s3:GetStorageLensConfiguration",
            "s3:GetStorageLensConfigurationTagging",
            "s3:GetStorageLensGroup",
            "s3:ListAccessPoints",
            "s3:ListAccessPointsForObjectLambda",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultiRegionAccessPoints",
            "s3:ListStorageLensConfigurations",
            "s3:ListStorageLensGroups",
            "s3:ListTagsForResource",
            "s3express:GetBucketPolicy",
            "s3express:GetEncryptionConfiguration",
            "s3express:GetLifecycleConfiguration",
            "s3express:ListAllMyDirectoryBuckets",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceExperiment",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeWorkteam",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDomains",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListImageVersions",
            "sagemaker:ListImages",
            "sagemaker:ListInferenceExperiments",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelines",
            "sagemaker:ListProjects",
            "sagemaker:ListTags",
            "sagemaker:ListWorkteams",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListScheduleGroups",
            "scheduler:ListSchedules",
            "scheduler:ListTagsForResource",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemas",
            "sdb:GetAttributes",
            "sdb:ListDomains",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:ListSecrets",
            "securityhub:DescribeHub",
            "serviceCatalog:DescribePortfolioShares",
            "servicediscovery:GetInstance",
            "servicediscovery:GetNamespace",
            "servicediscovery:GetService",
            "servicediscovery:ListInstances",
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices",
            "servicediscovery:ListTagsForResource",
            "ses:DescribeReceiptRule",
            "ses:DescribeReceiptRuleSet",
            "ses:GetConfigurationSet",
            "ses:GetConfigurationSetEventDestinations",
            "ses:GetContactList",
            "ses:GetDedicatedIpPool",
            "ses:GetDedicatedIps",
            "ses:GetEmailTemplate",
            "ses:GetTemplate",
            "ses:ListConfigurationSets",
            "ses:ListContactLists",
            "ses:ListDedicatedIpPools",
            "ses:ListEmailTemplates",
            "ses:ListReceiptFilters",
            "ses:ListReceiptRuleSets",
            "ses:ListTemplates",
            "shield:DescribeDRTAccess",
            "shield:DescribeProtection",
            "shield:DescribeSubscription",
            "signer:GetSigningProfile",
            "signer:ListProfilePermissions",
            "signer:ListSigningProfiles",
            "sns:GetDataProtectionPolicy",
            "sns:GetSMSSandboxAccountStatus",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTagsForResource",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:ListQueueTags",
            "sqs:ListQueues",
            "ssm-sap:ListTagsForResource",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeDocument",
            "ssm:DescribeDocumentPermission",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetDocument",
            "ssm:GetServiceSetting",
            "ssm:ListDocuments",
            "ssm:ListTagsForResource",
            "sso:DescribeInstanceAccessControlAttributeConfiguration",
            "sso:DescribePermissionSet",
            "sso:GetInlinePolicyForPermissionSet",
            "sso:ListManagedPoliciesInPermissionSet",
            "sso:ListPermissionSets",
            "sso:ListTagsForResource",
            "states:DescribeActivity",
            "states:DescribeStateMachine",
            "states:ListActivities",
            "states:ListStateMachines",
            "states:ListTagsForResource",
            "storagegateway:ListGateways",
            "storagegateway:ListTagsForResource",
            "storagegateway:ListVolumes",
            "sts:GetCallerIdentity",
            "support:DescribeCases",
            "synthetics:DescribeCanaries",
            "synthetics:DescribeCanariesLastRun",
            "synthetics:DescribeRuntimeVersions",
            "synthetics:GetCanary",
            "synthetics:GetCanaryRuns",
            "synthetics:GetGroup",
            "synthetics:ListAssociatedGroups",
            "synthetics:ListGroupResources",
            "synthetics:ListGroups",
            "synthetics:ListTagsForResource",
            "tag:GetResources",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:ListDatabases",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "transfer:DescribeAgreement",
            "transfer:DescribeCertificate",
            "transfer:DescribeConnector",
            "transfer:DescribeProfile",
            "transfer:DescribeServer",
            "transfer:DescribeUser",
            "transfer:DescribeWorkflow",
            "transfer:ListAgreements",
            "transfer:ListCertificates",
            "transfer:ListConnectors",
            "transfer:ListProfiles",
            "transfer:ListServers",
            "transfer:ListTagsForResource",
            "transfer:ListUsers",
            "transfer:ListWorkflows",
            "voiceid:DescribeDomain",
            "voiceid:ListTagsForResource",
            "vpc-lattice:GetAccessLogSubscription",
            "vpc-lattice:GetService",
            "vpc-lattice:GetServiceNetwork",
            "vpc-lattice:GetTargetGroup",
            "vpc-lattice:ListAccessLogSubscriptions",
            "vpc-lattice:ListServiceNetworks",
            "vpc-lattice:ListServices",
            "vpc-lattice:ListTagsForResource",
            "vpc-lattice:ListTargetGroups",
            "vpc-lattice:ListTargets",
            "waf-regional:GetLoggingConfiguration",
            "waf-regional:GetWebACL",
            "waf-regional:GetWebACLForResource",
            "waf-regional:ListLoggingConfigurations",
            "waf:GetLoggingConfiguration",
            "waf:GetWebACL",
            "wafv2:GetLoggingConfiguration",
            "wafv2:GetRuleGroup",
            "wafv2:ListRuleGroups",
            "wafv2:ListTagsForResource",
            "workspaces:DescribeConnectionAliases",
            "workspaces:DescribeTags",
            "workspaces:DescribeWorkspaces"
        ]
    },
    "AmazonRDSPreviewServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateCoipPoolPermission",
            "ec2:CreateLocalGatewayRouteTablePermission",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteCoipPoolPermission",
            "ec2:DeleteLocalGatewayRouteTablePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTablePermissions",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeLocalGatewayRouteTables",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupIngress",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "rds:CrossRegionCommunication",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RotateSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage"
        ]
    },
    "AWSApplicationAutoScalingCustomResourcePolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "execute-api:Invoke"
        ]
    },
    "AWSShieldDRTAccessPolicy": {
        "permissions": [
            "apigateway:SetWebACL",
            "cloudfront:GetDistribution*",
            "cloudfront:List*",
            "cloudfront:UpdateDistribution",
            "cloudwatch:Describe*",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "ec2:DescribeAddresses",
            "ec2:DescribeRegions",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:SetWebACL",
            "globalaccelerator:DescribeAccelerator",
            "globalaccelerator:ListAccelerators",
            "route53:List*",
            "shield:*",
            "waf-regional:*",
            "waf:*",
            "wafv2:*"
        ]
    },
    "AmazonElasticTranscoder_ReadOnlyAccess": {
        "permissions": [
            "elastictranscoder:List*",
            "elastictranscoder:Read*",
            "iam:ListRoles",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:ListTopics"
        ]
    },
    "AmazonElasticTranscoder_JobsSubmitter": {
        "permissions": [
            "elastictranscoder:*Job",
            "elastictranscoder:*Preset",
            "elastictranscoder:List*",
            "elastictranscoder:Read*",
            "iam:ListRoles",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:ListTopics"
        ]
    },
    "AWSCloudFrontLogger": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSLambdaSQSQueueExecutionRole": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:ReceiveMessage"
        ]
    },
    "AWSIoTAnalyticsReadOnlyAccess": {
        "permissions": [
            "iotanalytics:Describe*",
            "iotanalytics:Get*",
            "iotanalytics:List*",
            "iotanalytics:SampleChannelData"
        ]
    },
    "AWSIoTAnalyticsFullAccess": {
        "permissions": [
            "iotanalytics:*"
        ]
    },
    "NeptuneConsoleFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "neptune-graph:CancelImportTask",
            "neptune-graph:CreateGraph",
            "neptune-graph:CreateGraphSnapshot",
            "neptune-graph:CreateGraphUsingImportTask",
            "neptune-graph:CreatePrivateGraphEndpoint",
            "neptune-graph:DeleteGraph",
            "neptune-graph:DeleteGraphSnapshot",
            "neptune-graph:DeletePrivateGraphEndpoint",
            "neptune-graph:GetGraph",
            "neptune-graph:GetGraphSnapshot",
            "neptune-graph:GetImportTask",
            "neptune-graph:GetPrivateGraphEndpoint",
            "neptune-graph:ListGraphSnapshots",
            "neptune-graph:ListGraphs",
            "neptune-graph:ListImportTasks",
            "neptune-graph:ListPrivateGraphEndpoints",
            "neptune-graph:ResetGraph",
            "neptune-graph:RestoreGraphFromSnapshot",
            "neptune-graph:UpdateGraph",
            "rds:AddRoleToDBCluster",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CreateDBCluster",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBInstance",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenancepermissions",
            "rds:DescribeValidDBInstanceModifications",
            "rds:DownloadDBLogFilePortion",
            "rds:FailoverDBCluster",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:PromoteReadReplicaDBCluster",
            "rds:RebootDBInstance",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
        ]
    },
    "AmazonMacieServiceRolePolicy": {
        "permissions": [
            "iam:ListAccountAliases",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "organizations:DescribeAccount",
            "organizations:ListAccounts",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectTagging",
            "s3:GetReplicationConfiguration",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AWSElementalMediaConvertReadOnly": {
        "permissions": [
            "mediaconvert:DescribeEndpoints",
            "mediaconvert:Get*",
            "mediaconvert:List*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AWSElementalMediaConvertFullAccess": {
        "permissions": [
            "iam:PassRole",
            "mediaconvert:*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AWSSSOReadOnly": {
        "permissions": [
            "access-analyzer:ValidatePolicy",
            "ds:DescribeDirectories",
            "ds:DescribeTrusts",
            "iam:ListPolicies",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots",
            "signin:ListTrustedIdentityPropagationApplicationsForConsole",
            "sso-directory:DescribeDirectory",
            "sso:Describe*",
            "sso:Get*",
            "sso:List*",
            "sso:Search*"
        ]
    },
    "AWSSSOMasterAccountAdministrator": {
        "permissions": [
            "access-analyzer:ValidatePolicy",
            "ds:AuthorizeApplication",
            "ds:CreateAlias",
            "ds:DescribeDirectories",
            "ds:DescribeTrusts",
            "ds:UnauthorizeApplication",
            "iam:CreateServiceLinkedRole",
            "iam:ListPolicies",
            "iam:PassRole",
            "identity-sync:DeleteSyncProfile",
            "identitystore-auth:*",
            "identitystore:*",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots",
            "organizations:RegisterDelegatedAdministrator",
            "signin:CreateTrustedIdentityPropagationApplicationForConsole",
            "signin:ListTrustedIdentityPropagationApplicationsForConsole",
            "sso-directory:*",
            "sso:*"
        ]
    },
    "AWSSSOMemberAccountAdministrator": {
        "permissions": [
            "access-analyzer:ValidatePolicy",
            "ds:AuthorizeApplication",
            "ds:CreateAlias",
            "ds:DescribeDirectories",
            "ds:DescribeTrusts",
            "ds:UnauthorizeApplication",
            "iam:ListPolicies",
            "identitystore-auth:*",
            "identitystore:*",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots",
            "organizations:RegisterDelegatedAdministrator",
            "signin:CreateTrustedIdentityPropagationApplicationForConsole",
            "signin:ListTrustedIdentityPropagationApplicationsForConsole",
            "sso-directory:*",
            "sso:*"
        ]
    },
    "AmazonMacieHandshakeRole": {
        "permissions": [
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AWSDataLifecycleManagerServiceRole": {
        "permissions": [
            "ec2:CopySnapshot",
            "ec2:CreateSnapshot",
            "ec2:CreateSnapshots",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeFastSnapshotRestores",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshotAttribute",
            "ec2:DescribeSnapshotTierStatus",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:DisableFastSnapshotRestores",
            "ec2:EnableFastSnapshotRestores",
            "ec2:ModifySnapshotAttribute",
            "ec2:ModifySnapshotTier",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets"
        ]
    },
    "AWSIoTDeviceDefenderAudit": {
        "permissions": [
            "cognito-identity:GetIdentityPoolRoles",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetServiceLastAccessedDetails",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeRoleAlias",
            "iot:GetEffectivePolicies",
            "iot:GetLoggingOptions",
            "iot:GetPolicy",
            "iot:GetV2LoggingOptions",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListPolicies",
            "iot:ListRoleAliases"
        ]
    },
    "AWSMarketplaceImageBuildFullAccess": {
        "permissions": [
            "aws-marketplace:DescribeBuilds",
            "aws-marketplace:ListBuilds",
            "aws-marketplace:StartBuild",
            "ec2:CopyImage",
            "ec2:CreateImage",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DeregisterImage",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:PassRole",
            "s3:GetObject",
            "s3:ListBucket",
            "sns:GetTopicAttributes",
            "sns:Publish",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "ssm:ListDocuments",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWSDiscoveryContinuousExportFirehosePolicy": {
        "permissions": [
            "glue:GetTableVersions",
            "logs:PutLogEvents",
            "s3:AbortMultipartUpload",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutObject"
        ]
    },
    "ApplicationDiscoveryServiceContinuousExportServiceRolePolicy": {
        "permissions": [
            "firehose:CreateDeliveryStream",
            "firehose:DeleteDeliveryStream",
            "firehose:DescribeDeliveryStream",
            "firehose:PutRecord",
            "firehose:PutRecordBatch",
            "firehose:UpdateDestination",
            "glue:CreateDatabase",
            "glue:CreateTable",
            "glue:UpdateDatabase",
            "glue:UpdateTable",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutRetentionPolicy",
            "s3:CreateBucket",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutBucketLogging",
            "s3:PutEncryptionConfiguration"
        ]
    },
    "AWSAutoScalingPlansEC2AutoScalingPolicy": {
        "permissions": [
            "autoscaling:BatchDeleteScheduledAction",
            "autoscaling:BatchPutScheduledUpdateGroupAction",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeScheduledpermissions",
            "cloudwatch:GetMetricData"
        ]
    },
    "WAFRegionalLoggingServiceRolePolicy": {
        "permissions": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
        ]
    },
    "WAFLoggingServiceRolePolicy": {
        "permissions": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
        ]
    },
    "AmazonFreeRTOSOTAUpdate": {
        "permissions": [
            "iot:CreateJob",
            "iot:CreateStream",
            "iot:DeleteJob",
            "iot:DeleteStream",
            "iot:DescribeJob",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject",
            "signer:DescribeSigningJob",
            "signer:GetSigningProfile",
            "signer:PutSigningProfile",
            "signer:StartSigningJob"
        ]
    },
    "AWSXRayDaemonWriteAccess": {
        "permissions": [
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries",
            "xray:GetSamplingTargets",
            "xray:PutTelemetryRecords",
            "xray:PutTraceSegments"
        ]
    },
    "AmazonConnectServiceLinkedRolePolicy": {
        "permissions": [
            "chime:GetVoiceConnector",
            "chime:ListVoiceConnectors",
            "cloudwatch:PutMetricData",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:ListUserPoolClients",
            "connect:*",
            "iam:DeleteRole",
            "iam:PassRole",
            "lex:ListBotAliases",
            "lex:ListBots",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "mobiletargeting:SendMessages",
            "profile:AddProfileKey",
            "profile:BatchGetCalculatedAttributeForProfile",
            "profile:BatchGetProfile",
            "profile:CreateCalculatedAttributeDefinition",
            "profile:CreateEventTrigger",
            "profile:CreateProfile",
            "profile:CreateSegmentDefinition",
            "profile:CreateSegmentEstimate",
            "profile:CreateSegmentSnapshot",
            "profile:DeleteCalculatedAttributeDefinition",
            "profile:DeleteEventTrigger",
            "profile:DeleteIntegration",
            "profile:DeleteSegmentDefinition",
            "profile:GetCalculatedAttributeDefinition",
            "profile:GetCalculatedAttributeForProfile",
            "profile:GetDomain",
            "profile:GetEventTrigger",
            "profile:GetIntegration",
            "profile:GetProfileObjectType",
            "profile:GetProfileObjectTypeTemplate",
            "profile:GetSegmentDefinition",
            "profile:GetSegmentEstimate",
            "profile:GetSegmentMembership",
            "profile:GetSegmentSnapshot",
            "profile:ListAccountIntegrations",
            "profile:ListCalculatedAttributeDefinitions",
            "profile:ListCalculatedAttributesForProfile",
            "profile:ListEventTriggers",
            "profile:ListIntegrations",
            "profile:ListObjectTypeAttributes",
            "profile:ListProfileAttributeValues",
            "profile:ListProfileObjectTypeTemplates",
            "profile:ListProfileObjectTypes",
            "profile:ListProfileObjects",
            "profile:ListSegmentDefinitions",
            "profile:PutIntegration",
            "profile:PutProfileObject",
            "profile:SearchProfiles",
            "profile:UpdateCalculatedAttributeDefinition",
            "profile:UpdateEventTrigger",
            "profile:UpdateProfile",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "ses:DeleteEmailIdentity",
            "ses:DescribeReceiptRule",
            "ses:SendRawEmail",
            "ses:UpdateReceiptRule",
            "sms-voice:DescribePhoneNumbers",
            "sms-voice:SendTextMessage",
            "social-messaging:GetLinkedWhatsAppBusinessAccountPhoneNumber",
            "social-messaging:GetWhatsAppMessageMedia",
            "social-messaging:PostWhatsAppMessageMedia",
            "social-messaging:SendWhatsAppMessage",
            "wisdom:ActivateMessageTemplate",
            "wisdom:CreateAIAgent",
            "wisdom:CreateAIAgentVersion",
            "wisdom:CreateAIGuardrail",
            "wisdom:CreateAIGuardrailVersion",
            "wisdom:CreateAIPrompt",
            "wisdom:CreateAIPromptVersion",
            "wisdom:CreateAssistant",
            "wisdom:CreateContent",
            "wisdom:CreateKnowledgeBase",
            "wisdom:CreateMessageTemplate",
            "wisdom:CreateMessageTemplateAttachment",
            "wisdom:CreateMessageTemplateVersion",
            "wisdom:CreateQuickResponse",
            "wisdom:CreateSession",
            "wisdom:DeactivateMessageTemplate",
            "wisdom:DeleteAIAgent",
            "wisdom:DeleteAIAgentVersion",
            "wisdom:DeleteAIGuardrail",
            "wisdom:DeleteAIGuardrailVersion",
            "wisdom:DeleteAIPrompt",
            "wisdom:DeleteAIPromptVersion",
            "wisdom:DeleteContent",
            "wisdom:DeleteMessageTemplate",
            "wisdom:DeleteMessageTemplateAttachment",
            "wisdom:DeleteQuickResponse",
            "wisdom:GetAIAgent",
            "wisdom:GetAIGuardrail",
            "wisdom:GetAIPrompt",
            "wisdom:GetAssistant",
            "wisdom:GetContent",
            "wisdom:GetImportJob",
            "wisdom:GetKnowledgeBase",
            "wisdom:GetMessageTemplate",
            "wisdom:GetQuickResponse",
            "wisdom:GetRecommendations",
            "wisdom:GetSession",
            "wisdom:ListAIAgentVersions",
            "wisdom:ListAIAgents",
            "wisdom:ListAIGuardrailVersions",
            "wisdom:ListAIGuardrails",
            "wisdom:ListAIPromptVersions",
            "wisdom:ListAIPrompts",
            "wisdom:ListAssistants",
            "wisdom:ListContentAssociations",
            "wisdom:ListImportJobs",
            "wisdom:ListKnowledgeBases",
            "wisdom:ListMessageTemplateVersions",
            "wisdom:ListMessageTemplates",
            "wisdom:ListQuickResponses",
            "wisdom:ListTagsForResource",
            "wisdom:NotifyRecommendationsReceived",
            "wisdom:PutFeedback",
            "wisdom:QueryAssistant",
            "wisdom:RemoveAssistantAIAgent",
            "wisdom:RenderMessageTemplate",
            "wisdom:SearchMessageTemplates",
            "wisdom:SearchQuickResponses",
            "wisdom:StartContentUpload",
            "wisdom:StartImportJob",
            "wisdom:TagResource",
            "wisdom:UntagResource",
            "wisdom:UpdateAIAgent",
            "wisdom:UpdateAIGuardrail",
            "wisdom:UpdateAIPrompt",
            "wisdom:UpdateAssistantAIAgent",
            "wisdom:UpdateContent",
            "wisdom:UpdateMessageTemplate",
            "wisdom:UpdateMessageTemplateMetadata",
            "wisdom:UpdateQuickResponse"
        ]
    },
    "ElasticLoadBalancingReadOnly": {
        "permissions": [
            "arc-zonal-shift:GetManagedResource",
            "arc-zonal-shift:ListManagedResources",
            "arc-zonal-shift:ListZonalShifts",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:Get*"
        ]
    },
    "ElasticLoadBalancingFullAccess": {
        "permissions": [
            "arc-zonal-shift:*",
            "arc-zonal-shift:ListManagedResources",
            "arc-zonal-shift:ListZonalShifts",
            "cognito-idp:DescribeUserPoolClient",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:GetCoipPoolUsage",
            "ec2:GetSecurityGroupsForVpc",
            "elasticloadbalancing:*",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "LightsailExportAccess": {
        "permissions": [
            "ec2:CopyImage",
            "ec2:CopySnapshot",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "s3:GetAccountPublicAccessBlock"
        ]
    },
    "AmazonRedshiftQueryEditor": {
        "permissions": [
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListStatements",
            "redshift-data:ListTables",
            "redshift:CancelQuery",
            "redshift:CreateSavedQuery",
            "redshift:DeleteSavedQueries",
            "redshift:DescribeClusters",
            "redshift:DescribeQuery",
            "redshift:DescribeSavedQueries",
            "redshift:DescribeTable",
            "redshift:ExecuteQuery",
            "redshift:FetchResults",
            "redshift:GetClusterCredentials",
            "redshift:ListDatabases",
            "redshift:ListSchemas",
            "redshift:ListTables",
            "redshift:ModifySavedQuery",
            "redshift:ViewQueriesFromConsole",
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets",
            "secretsmanager:TagResource"
        ]
    },
    "AWSGlueConsoleSageMakerNotebookFullAccess": {
        "permissions": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListDashboards",
            "dynamodb:ListTables",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteTags",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "glue:*",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "logs:GetLogEvents",
            "rds:DescribeDBInstances",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusters",
            "s3:CreateBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListTags",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StopNotebookInstance",
            "sagemaker:UpdateNotebookInstance",
            "tag:GetResources"
        ]
    },
    "AmazonConnectReadOnlyAccess": {
        "permissions": [
            "connect:AdminGetEmergencyAccessToken",
            "connect:Describe*",
            "connect:Get*",
            "connect:List*",
            "ds:DescribeDirectories"
        ]
    },
    "AWSCertificateManagerPrivateCAAuditor": {
        "permissions": [
            "acm-pca:CreateCertificateAuthorityAuditReport",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:GetCertificate",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:GetPolicy",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags"
        ]
    },
    "AWSCertificateManagerPrivateCAUser": {
        "permissions": [
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:RevokeCertificate"
        ]
    },
    "AWSCertificateManagerPrivateCAFullAccess": {
        "permissions": [
            "acm-pca:*"
        ]
    },
    "AWSCertificateManagerPrivateCAReadOnly": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:GetCertificate",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:GetPolicy",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags"
        ]
    },
    "CloudTrailServiceRolePolicy": {
        "permissions": [
            "cloudtrail:*",
            "glue:DeleteTable",
            "lakeformation:DeregisterResource",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AWSGreengrassReadOnlyAccess": {
        "permissions": [
            "greengrass:Get*",
            "greengrass:List*"
        ]
    },
    "AWSSSODirectoryReadOnly": {
        "permissions": [
            "identitystore-auth:BatchGetSession",
            "identitystore-auth:ListSessions",
            "identitystore:Describe*",
            "identitystore:List*",
            "sso-directory:Describe*",
            "sso-directory:Get*",
            "sso-directory:List*",
            "sso-directory:Search*"
        ]
    },
    "AWSSSODirectoryAdministrator": {
        "permissions": [
            "identitystore-auth:*",
            "identitystore:*",
            "sso-directory:*",
            "sso:ListDirectoryAssociations"
        ]
    },
    "AWSOrganizationsFullAccess": {
        "permissions": [
            "account:DeleteAlternateContact",
            "account:DisableRegion",
            "account:EnableRegion",
            "account:GetAlternateContact",
            "account:GetContactInformation",
            "account:ListRegions",
            "account:PutAlternateContact",
            "account:PutContactInformation",
            "iam:CreateServiceLinkedRole",
            "organizations:*"
        ]
    },
    "AWSOrganizationsReadOnlyAccess": {
        "permissions": [
            "account:GetAlternateContact",
            "account:GetContactInformation",
            "account:GetPrimaryEmail",
            "account:GetRegionOptStatus",
            "account:ListRegions",
            "organizations:Describe*",
            "organizations:List*"
        ]
    },
    "AWSServiceRoleForIoTSiteWise": {
        "permissions": [
            "greengrass:GetAssociatedRole",
            "greengrass:GetCoreDefinition",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupVersion",
            "iottwinmaker:ExecuteQuery",
            "iottwinmaker:GetWorkspace",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AWSResourceAccessManagerServiceRolePolicy": {
        "permissions": [
            "iam:DeleteRole",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots"
        ]
    },
    "AWSKeyManagementServiceCustomKeyStoresServiceRolePolicy": {
        "permissions": [
            "cloudhsm:Describe*",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupEgress"
        ]
    },
    "KafkaServiceRolePolicy": {
        "permissions": [
            "acm-pca:GetCertificateAuthorityCertificate",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcEndpoints",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyVpcEndpoint",
            "secretsmanager:DeleteResourcePolicy",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:ListSecrets",
            "secretsmanager:PutResourcePolicy"
        ]
    },
    "AmazonElasticMapReduceEditorsRole": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupEgress",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSteps"
        ]
    },
    "AmazonRDSDataFullAccess": {
        "permissions": [
            "dbqms:CreateFavoriteQuery",
            "dbqms:CreateQueryHistory",
            "dbqms:DeleteFavoriteQueries",
            "dbqms:DeleteQueryHistory",
            "dbqms:DescribeFavoriteQueries",
            "dbqms:DescribeQueryHistory",
            "dbqms:GetQueryString",
            "dbqms:UpdateFavoriteQuery",
            "dbqms:UpdateQueryHistory",
            "rds-data:BatchExecuteStatement",
            "rds-data:BeginTransaction",
            "rds-data:CommitTransaction",
            "rds-data:ExecuteSql",
            "rds-data:ExecuteStatement",
            "rds-data:RollbackTransaction",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:PutSecretValue",
            "secretsmanager:TagResource",
            "tag:GetResources"
        ]
    },
    "AWSRoboMakerReadOnlyAccess": {
        "permissions": [
            "robomaker:BatchDescribe*",
            "robomaker:Describe*",
            "robomaker:Get*",
            "robomaker:List*"
        ]
    },
    "AWSRoboMakerServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "greengrass:CreateDeployment",
            "greengrass:CreateFunctionDefinition",
            "greengrass:CreateFunctionDefinitionVersion",
            "greengrass:CreateGroupVersion",
            "greengrass:GetAssociatedRole",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetDeploymentStatus",
            "greengrass:GetFunctionDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupVersion",
            "iam:PassRole",
            "lambda:CreateFunction",
            "lambda:GetFunction",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration"
        ]
    },
    "AWSRoboMakerServicePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "greengrass:CreateDeployment",
            "greengrass:CreateFunctionDefinition",
            "greengrass:CreateFunctionDefinitionVersion",
            "greengrass:CreateGroupVersion",
            "greengrass:GetAssociatedRole",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetDeploymentStatus",
            "greengrass:GetFunctionDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupVersion",
            "iam:PassRole",
            "lambda:CreateAlias",
            "lambda:CreateFunction",
            "lambda:DeleteAlias",
            "lambda:DeleteFunction",
            "lambda:GetAlias",
            "lambda:GetFunction",
            "lambda:ListVersionsByFunction",
            "lambda:UpdateAlias",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "robomaker:CancelSimulationJob",
            "robomaker:CreateSimulationJob",
            "robomaker:TagResource"
        ]
    },
    "AWSVPCTransitGatewayServiceRolePolicy": {
        "permissions": [
            "ec2:AssignIpv6Addresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnAssignIpv6Addresses"
        ]
    },
    "AWSLicenseManagerServiceRolePolicy": {
        "permissions": [
            "ec2:DescribeHosts",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "iam:CreateServiceLinkedRole",
            "license-manager:GetLicense*",
            "license-manager:GetServiceSettings",
            "license-manager:List*",
            "license-manager:UpdateLicenseSpecificationsForResource",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "sns:ListTopics",
            "sns:Publish",
            "ssm:CreateAssociation",
            "ssm:GetInventory",
            "ssm:ListInventoryEntries"
        ]
    },
    "AWSLicenseManagerMasterAccountRolePolicy": {
        "permissions": [
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:StartQueryExecution",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateStack",
            "glue:CreateTable",
            "glue:DeleteTable",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:UpdateCrawler",
            "glue:UpdateJob",
            "glue:UpdateTable",
            "iam:GetRole",
            "iam:PassRole",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListRoots",
            "ram:AssociateResourceShare",
            "ram:CreateResourceShare",
            "ram:DeleteResourceShare",
            "ram:DisassociateResourceShare",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares",
            "ram:TagResource",
            "ram:UpdateResourceShare",
            "resource-groups:PutGroupPolicy",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutBucketPolicy",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject"
        ]
    },
    "AWSLicenseManagerMemberAccountRolePolicy": {
        "permissions": [
            "license-manager:GetLicenseConfiguration",
            "license-manager:UpdateLicenseSpecificationsForResource",
            "ram:AcceptResourceShareInvitation",
            "ram:GetResourceShareInvitations",
            "ssm:CreateAssociation",
            "ssm:CreateResourceDataSync",
            "ssm:DeleteResourceDataSync",
            "ssm:GetInventory",
            "ssm:ListAssociations",
            "ssm:ListInventoryEntries",
            "ssm:ListResourceDataSync"
        ]
    },
    "ServerMigrationServiceLaunchRole": {
        "permissions": [
            "applicationinsights:CreateApplication",
            "applicationinsights:CreateComponent",
            "applicationinsights:DeleteApplication",
            "applicationinsights:DeleteComponent",
            "applicationinsights:Describe*",
            "applicationinsights:List*",
            "applicationinsights:UpdateApplication",
            "applicationinsights:UpdateComponentConfiguration",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "ec2:AssociateIamInstanceProfile",
            "ec2:CreateTags",
            "ec2:Describe*",
            "ec2:DisassociateIamInstanceProfile",
            "ec2:ModifyInstanceAttribute",
            "ec2:ReplaceIamInstanceProfileAssociation",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroup",
            "resource-groups:UpdateGroup"
        ]
    },
    "GlobalAcceleratorReadOnlyAccess": {
        "permissions": [
            "globalaccelerator:Describe*",
            "globalaccelerator:List*"
        ]
    },
    "GlobalAcceleratorFullAccess": {
        "permissions": [
            "ec2:DescribeAddresses",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeRegions",
            "ec2:DescribeSubnets",
            "elasticloadbalancing:DescribeLoadBalancers",
            "globalaccelerator:*",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AWSPrivateMarketplaceAdminFullAccess": {
        "permissions": [
            "aws-marketplace:AssociateProductsWithPrivateMarketplace",
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:DescribePrivateMarketplaceRequests",
            "aws-marketplace:DisassociateProductsFromPrivateMarketplace",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:ListPrivateMarketplaceRequests",
            "aws-marketplace:ListTagsForResource",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:TagResource",
            "aws-marketplace:UntagResource",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots"
        ]
    },
    "ComprehendMedicalFullAccess": {
        "permissions": [
            "comprehendmedical:*"
        ]
    },
    "AWSCodeDeployRoleForECS": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "ecs:CreateTaskSet",
            "ecs:DeleteTaskSet",
            "ecs:DescribeServices",
            "ecs:UpdateServicePrimaryTaskSet",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:ModifyRule",
            "iam:PassRole",
            "lambda:InvokeFunction",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "sns:Publish"
        ]
    },
    "AWSCodeDeployRoleForECSLimited": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "ecs:CreateTaskSet",
            "ecs:DeleteTaskSet",
            "ecs:DescribeServices",
            "ecs:UpdateServicePrimaryTaskSet",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:ModifyRule",
            "iam:PassRole",
            "lambda:InvokeFunction",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "sns:Publish"
        ]
    },
    "TranslateFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "comprehend:DetectDominantLanguage",
            "iam:GetRole",
            "iam:ListRoles",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "translate:*"
        ]
    },
    "AWSSecurityHubServiceRolePolicy": {
        "permissions": [
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetTrailStatus",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "config:BatchGetResourceConfig",
            "config:DeleteConfigRule",
            "config:DescribeConfigRuleEvaluationStatus",
            "config:DescribeConfigRules",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "config:GetComplianceDetailsByConfigRule",
            "config:PutConfigRule",
            "config:PutEvaluations",
            "config:SelectResourceConfig",
            "iam:GenerateCredentialReport",
            "iam:GetCredentialReport",
            "logs:DescribeMetricFilters",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "securityhub:BatchDisableStandards",
            "securityhub:BatchEnableStandards",
            "securityhub:BatchGetSecurityControls",
            "securityhub:BatchGetStandardsControlAssociations",
            "securityhub:BatchUpdateStandardsControlAssociations",
            "securityhub:CreateMembers",
            "securityhub:DeleteMembers",
            "securityhub:DescribeHub",
            "securityhub:DescribeOrganizationConfiguration",
            "securityhub:DescribeStandards",
            "securityhub:DescribeStandardsControls",
            "securityhub:DisableSecurityHub",
            "securityhub:DisassociateFromAdministratorAccount",
            "securityhub:DisassociateMembers",
            "securityhub:EnableSecurityHub",
            "securityhub:GetEnabledStandards",
            "securityhub:ListSecurityControlDefinitions",
            "securityhub:ListStandardsControlAssociations",
            "securityhub:UpdateOrganizationConfiguration",
            "securityhub:UpdateSecurityControl",
            "securityhub:UpdateSecurityHubConfiguration",
            "securityhub:UpdateStandardsControl",
            "sns:ListSubscriptionsByTopic",
            "tag:GetResources"
        ]
    },
    "AWSSecurityHubFullAccess": {
        "permissions": [
            "guardduty:GetDetector",
            "guardduty:ListDetectors",
            "iam:CreateServiceLinkedRole",
            "inspector2:BatchGetAccountStatus",
            "pricing:GetProducts",
            "securityhub:*"
        ]
    },
    "AWSSecurityHubReadOnlyAccess": {
        "permissions": [
            "securityhub:BatchGet*",
            "securityhub:Describe*",
            "securityhub:Get*",
            "securityhub:List*"
        ]
    },
    "AmazonFSxServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ds:AuthorizeApplication",
            "ds:GetAuthorizedApplicationDetails",
            "ds:UnauthorizeApplication",
            "ec2:AssignPrivateIpAddresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateRoute",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteRoute",
            "ec2:DescribeAddresses",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ReplaceRoute",
            "ec2:UnassignPrivateIpAddresses",
            "firehose:DescribeDeliveryStream",
            "firehose:PutRecord",
            "firehose:PutRecordBatch",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "route53:AssociateVPCWithHostedZone"
        ]
    },
    "FSxDeleteServiceLinkedRoleAccess": {
        "permissions": [
            "iam:DeleteServiceLinkedRole",
            "iam:GetRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
        ]
    },
    "AmazonFSxReadOnlyAccess": {
        "permissions": [
            "fsx:Describe*",
            "fsx:ListTagsForResource"
        ]
    },
    "AmazonFSxFullAccess": {
        "permissions": [
            "ds:DescribeDirectories",
            "ec2:CreateTags",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:GetSecurityGroupsForVpc",
            "firehose:PutRecord",
            "fsx:AssociateFileGateway",
            "fsx:AssociateFileSystemAliases",
            "fsx:CancelDataRepositoryTask",
            "fsx:CopyBackup",
            "fsx:CopySnapshotAndUpdateVolume",
            "fsx:CreateBackup",
            "fsx:CreateDataRepositoryAssociation",
            "fsx:CreateDataRepositoryTask",
            "fsx:CreateFileCache",
            "fsx:CreateFileSystem",
            "fsx:CreateFileSystemFromBackup",
            "fsx:CreateSnapshot",
            "fsx:CreateStorageVirtualMachine",
            "fsx:CreateVolume",
            "fsx:CreateVolumeFromBackup",
            "fsx:DeleteBackup",
            "fsx:DeleteDataRepositoryAssociation",
            "fsx:DeleteFileCache",
            "fsx:DeleteFileSystem",
            "fsx:DeleteResourcePolicy",
            "fsx:DeleteSnapshot",
            "fsx:DeleteStorageVirtualMachine",
            "fsx:DeleteVolume",
            "fsx:DescribeAssociatedFileGateways",
            "fsx:DescribeBackups",
            "fsx:DescribeDataRepositoryAssociations",
            "fsx:DescribeDataRepositoryTasks",
            "fsx:DescribeFileCaches",
            "fsx:DescribeFileSystemAliases",
            "fsx:DescribeFileSystems",
            "fsx:DescribeSharedVpcConfiguration",
            "fsx:DescribeSnapshots",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:DisassociateFileGateway",
            "fsx:DisassociateFileSystemAliases",
            "fsx:GetResourcePolicy",
            "fsx:ListTagsForResource",
            "fsx:ManageBackupPrincipalAssociations",
            "fsx:PutResourcePolicy",
            "fsx:ReleaseFileSystemNfsV3Locks",
            "fsx:RestoreVolumeFromSnapshot",
            "fsx:TagResource",
            "fsx:UntagResource",
            "fsx:UpdateDataRepositoryAssociation",
            "fsx:UpdateFileCache",
            "fsx:UpdateFileSystem",
            "fsx:UpdateSharedVpcConfiguration",
            "fsx:UpdateSnapshot",
            "fsx:UpdateStorageVirtualMachine",
            "fsx:UpdateVolume",
            "iam:CreateServiceLinkedRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AmazonFSxConsoleReadOnlyAccess": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "ds:DescribeDirectories",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:GetSecurityGroupsForVpc",
            "firehose:ListDeliveryStreams",
            "fsx:Describe*",
            "fsx:ListTagsForResource",
            "kms:DescribeKey",
            "logs:DescribeLogGroups"
        ]
    },
    "AmazonFSxConsoleFullAccess": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "ds:DescribeDirectories",
            "ec2:CreateTags",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:GetSecurityGroupsForVpc",
            "firehose:ListDeliveryStreams",
            "fsx:AssociateFileGateway",
            "fsx:AssociateFileSystemAliases",
            "fsx:CancelDataRepositoryTask",
            "fsx:CopyBackup",
            "fsx:CopySnapshotAndUpdateVolume",
            "fsx:CreateBackup",
            "fsx:CreateDataRepositoryAssociation",
            "fsx:CreateDataRepositoryTask",
            "fsx:CreateFileCache",
            "fsx:CreateFileSystem",
            "fsx:CreateFileSystemFromBackup",
            "fsx:CreateSnapshot",
            "fsx:CreateStorageVirtualMachine",
            "fsx:CreateVolume",
            "fsx:CreateVolumeFromBackup",
            "fsx:DeleteBackup",
            "fsx:DeleteDataRepositoryAssociation",
            "fsx:DeleteFileCache",
            "fsx:DeleteFileSystem",
            "fsx:DeleteResourcePolicy",
            "fsx:DeleteSnapshot",
            "fsx:DeleteStorageVirtualMachine",
            "fsx:DeleteVolume",
            "fsx:DescribeAssociatedFileGateways",
            "fsx:DescribeBackups",
            "fsx:DescribeDataRepositoryAssociations",
            "fsx:DescribeDataRepositoryTasks",
            "fsx:DescribeFileCaches",
            "fsx:DescribeFileSystemAliases",
            "fsx:DescribeFileSystems",
            "fsx:DescribeSharedVpcConfiguration",
            "fsx:DescribeSnapshots",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:DisassociateFileGateway",
            "fsx:DisassociateFileSystemAliases",
            "fsx:GetResourcePolicy",
            "fsx:ListTagsForResource",
            "fsx:ManageBackupPrincipalAssociations",
            "fsx:PutResourcePolicy",
            "fsx:ReleaseFileSystemNfsV3Locks",
            "fsx:RestoreVolumeFromSnapshot",
            "fsx:TagResource",
            "fsx:UntagResource",
            "fsx:UpdateDataRepositoryAssociation",
            "fsx:UpdateFileCache",
            "fsx:UpdateFileSystem",
            "fsx:UpdateSharedVpcConfiguration",
            "fsx:UpdateSnapshot",
            "fsx:UpdateStorageVirtualMachine",
            "fsx:UpdateVolume",
            "iam:CreateServiceLinkedRole",
            "kms:ListAliases",
            "logs:DescribeLogGroups",
            "s3:ListBucket"
        ]
    },
    "AmazonTextractFullAccess": {
        "permissions": [
            "textract:*"
        ]
    },
    "AmazonTextractServiceRole": {
        "permissions": [
            "sns:Publish"
        ]
    },
    "AWSCloudMapReadOnlyAccess": {
        "permissions": [
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision",
            "servicediscovery:Get*",
            "servicediscovery:List*"
        ]
    },
    "AWSCloudMapFullAccess": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "ec2:DescribeVpcs",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:CreateHostedZone",
            "route53:DeleteHealthCheck",
            "route53:DeleteHostedZone",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "route53:UpdateHealthCheck",
            "servicediscovery:*"
        ]
    },
    "AWSCloudMapDiscoverInstanceAccess": {
        "permissions": [
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision"
        ]
    },
    "AWSCloudMapRegisterInstanceAccess": {
        "permissions": [
            "ec2:DescribeInstances",
            "route53:ChangeResourceRecordSets",
            "route53:CreateHealthCheck",
            "route53:DeleteHealthCheck",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHostedZonesByName",
            "route53:UpdateHealthCheck",
            "servicediscovery:DeregisterInstance",
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision",
            "servicediscovery:Get*",
            "servicediscovery:List*",
            "servicediscovery:RegisterInstance"
        ]
    },
    "WellArchitectedConsoleFullAccess": {
        "permissions": [
            "wellarchitected:*"
        ]
    },
    "WellArchitectedConsoleReadOnlyAccess": {
        "permissions": [
            "wellarchitected:ExportLens",
            "wellarchitected:Get*",
            "wellarchitected:List*"
        ]
    },
    "CloudwatchApplicationInsightsServiceLinkedRolePolicy": {
        "permissions": [
            "apigateway:GET",
            "application-autoscaling:DescribeScalableTargets",
            "autoscaling:DescribeAutoScalingGroups",
            "cloudFormation:CreateStack",
            "cloudFormation:DeleteStack",
            "cloudFormation:DescribeStackResources",
            "cloudFormation:DescribeStacks",
            "cloudFormation:ListStackResources",
            "cloudFormation:ListStacks",
            "cloudFormation:UpdateStack",
            "cloudFormation:UpdateTerminationProtection",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DeleteAnomalyDetector",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAnomalyDetectors",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutAnomalyDetector",
            "cloudwatch:PutMetricAlarm",
            "dynamodb:DescribeContributorInsights",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListTables",
            "ec2:DescribeInstances",
            "ec2:DescribeNatGateways",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTaskSets",
            "ecs:DescribeTasks",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListServices",
            "ecs:ListTasks",
            "ecs:UpdateClusterSettings",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeNodegroup",
            "eks:ListClusters",
            "eks:ListFargateProfiles",
            "eks:ListNodegroups",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "fsx:DescribeFileSystems",
            "fsx:DescribeVolumes",
            "lambda:GetFunctionConfiguration",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "logs:DeleteSubscriptionFilter",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:PutSubscriptionFilter",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupQuery",
            "resource-groups:ListGroupResources",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListQueryLoggingConfigs",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:GetResolverEndpoint",
            "route53resolver:GetResolverQueryLogConfig",
            "route53resolver:ListFirewallRuleGroupAssociations",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverQueryLogConfigAssociations",
            "route53resolver:ListResolverQueryLogConfigs",
            "s3:GetMetricsConfiguration",
            "s3:GetReplicationConfiguration",
            "s3:ListAllMyBuckets",
            "sns:GetSMSAttributes",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sqs:ListQueues",
            "ssm:AddTagsToResource",
            "ssm:CreateAssociation",
            "ssm:CreateOpsItem",
            "ssm:DeleteAssociation",
            "ssm:DeleteParameter",
            "ssm:DescribeAssociation",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeOpsItems",
            "ssm:GetCommandInvocation",
            "ssm:GetOpsItem",
            "ssm:GetParameters",
            "ssm:ListCommandInvocations",
            "ssm:PutParameter",
            "ssm:RemoveTagsFromResource",
            "ssm:SendCommand",
            "ssm:UpdateAssociation",
            "ssm:UpdateOpsItem",
            "states:DescribeExecution",
            "states:DescribeStateMachine",
            "states:GetExecutionHistory",
            "states:ListStateMachines",
            "tag:GetResources",
            "xray:GetServiceGraph",
            "xray:GetTimeSeriesServiceStatistics",
            "xray:GetTraceGraph",
            "xray:GetTraceSummaries"
        ]
    },
    "AWSIoTSiteWiseFullAccess": {
        "permissions": [
            "iotsitewise:*"
        ]
    },
    "AWSIoTSiteWiseReadOnlyAccess": {
        "permissions": [
            "iotsitewise:BatchGet*",
            "iotsitewise:Describe*",
            "iotsitewise:Get*",
            "iotsitewise:List*"
        ]
    },
    "AmazonPersonalizeFullAccess": {
        "permissions": [
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricData",
            "iam:PassRole",
            "personalize:*",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "ClientVPNServiceRolePolicy": {
        "permissions": [
            "acm:DescribeCertificate",
            "acm:GetCertificate",
            "ds:AuthorizeApplication",
            "ds:DescribeDirectories",
            "ds:GetDirectoryLimits",
            "ds:UnauthorizeApplication",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "iam:GetSAMLProvider",
            "lambda:GetFunctionConfiguration",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AmazonMQApiReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "mq:Describe*",
            "mq:List*"
        ]
    },
    "AmazonMQApiFullAccess": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "iam:CreateServiceLinkedRole",
            "logs:CreateLogGroup",
            "mq:*"
        ]
    },
    "AmazonDocDBFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "rds:AddRoleToDBCluster",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CreateDBCluster",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBInstance",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenancepermissions",
            "rds:DescribeValidDBInstanceModifications",
            "rds:DownloadDBLogFilePortion",
            "rds:FailoverDBCluster",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:PromoteReadReplicaDBCluster",
            "rds:RebootDBInstance",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
        ]
    },
    "AmazonDocDBReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenancepermissions",
            "rds:DownloadDBLogFilePortion",
            "rds:ListTagsForResource"
        ]
    },
    "AmazonDocDBConsoleFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "docdb-elastic:CopyClusterSnapshot",
            "docdb-elastic:CreateCluster",
            "docdb-elastic:CreateClusterSnapshot",
            "docdb-elastic:DeleteCluster",
            "docdb-elastic:DeleteClusterSnapshot",
            "docdb-elastic:GetCluster",
            "docdb-elastic:GetClusterSnapshot",
            "docdb-elastic:ListClusterSnapshots",
            "docdb-elastic:ListClusters",
            "docdb-elastic:ListTagsForResource",
            "docdb-elastic:RestoreClusterFromSnapshot",
            "docdb-elastic:StartCluster",
            "docdb-elastic:StopCluster",
            "docdb-elastic:TagResource",
            "docdb-elastic:UntagResource",
            "docdb-elastic:UpdateCluster",
            "ec2:AllocateAddress",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:CreateCustomerGateway",
            "ec2:CreateDefaultSubnet",
            "ec2:CreateDefaultVpc",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ModifyVpcEndpoint",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "kms:ListRetirableGrants",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "rds:AddRoleToDBCluster",
            "rds:AddSourceIdentifierToSubscription",
            "rds:AddTagsToResource",
            "rds:ApplyPendingMaintenanceAction",
            "rds:CopyDBClusterParameterGroup",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBParameterGroup",
            "rds:CreateDBCluster",
            "rds:CreateDBClusterParameterGroup",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBInstance",
            "rds:CreateDBParameterGroup",
            "rds:CreateDBSubnetGroup",
            "rds:CreateEventSubscription",
            "rds:CreateGlobalCluster",
            "rds:DeleteDBCluster",
            "rds:DeleteDBClusterParameterGroup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstance",
            "rds:DeleteDBParameterGroup",
            "rds:DeleteDBSubnetGroup",
            "rds:DeleteEventSubscription",
            "rds:DeleteGlobalCluster",
            "rds:DescribeAccountAttributes",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBLogFiles",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEngineDefaultParameters",
            "rds:DescribeEventCategories",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeEvents",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:DescribeOrderableDBInstanceOptions",
            "rds:DescribePendingMaintenancepermissions",
            "rds:DescribeValidDBInstanceModifications",
            "rds:DownloadDBLogFilePortion",
            "rds:FailoverDBCluster",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterParameterGroup",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBParameterGroup",
            "rds:ModifyDBSubnetGroup",
            "rds:ModifyEventSubscription",
            "rds:ModifyGlobalCluster",
            "rds:PromoteReadReplicaDBCluster",
            "rds:RebootDBInstance",
            "rds:RemoveFromGlobalCluster",
            "rds:RemoveRoleFromDBCluster",
            "rds:RemoveSourceIdentifierFromSubscription",
            "rds:RemoveTagsFromResource",
            "rds:ResetDBClusterParameterGroup",
            "rds:ResetDBParameterGroup",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime",
            "sns:ListSubscriptions",
            "sns:ListTopics",
            "sns:Publish"
        ]
    },
    "AWSBackupServiceRolePolicyForBackup": {
        "permissions": [
            "backup-gateway:Backup",
            "backup-gateway:ListTagsForResource",
            "backup:CopyFromBackupVault",
            "backup:CopyIntoBackupVault",
            "backup:DescribeBackupVault",
            "backup:TagResource",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "dynamodb:CreateBackup",
            "dynamodb:DeleteBackup",
            "dynamodb:DescribeBackup",
            "dynamodb:DescribeTable",
            "dynamodb:ListTagsOfResource",
            "dynamodb:StartAwsBackupJob",
            "ec2:CopyImage",
            "ec2:CopySnapshot",
            "ec2:CreateImage",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DeregisterImage",
            "ec2:DescribeElasticGpus",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceCreditSpecifications",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSnapshotTierStatus",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:ModifyImageAttribute",
            "ec2:ModifySnapshotAttribute",
            "ec2:ModifySnapshotTier",
            "elasticfilesystem:Backup",
            "elasticfilesystem:DescribeTags",
            "fsx:CopyBackup",
            "fsx:CreateBackup",
            "fsx:DeleteBackup",
            "fsx:DescribeBackups",
            "fsx:DescribeFileSystems",
            "fsx:DescribeVolumes",
            "fsx:ListTagsForResource",
            "fsx:ManageBackupPrincipalAssociations",
            "fsx:TagResource",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "kms:GenerateDataKeyWithoutPlaintext",
            "rds:AddTagsToResource",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBSnapshot",
            "rds:CreateDBClusterSnapshot",
            "rds:CreateDBSnapshot",
            "rds:DeleteDBClusterAutomatedBackup",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstanceAutomatedBackup",
            "rds:DeleteDBSnapshot",
            "rds:DescribeDBClusterAutomatedBackups",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "rds:ModifyDBCluster",
            "rds:ModifyDBClusterSnapshotAttribute",
            "rds:ModifyDBInstance",
            "rds:ModifyDBSnapshotAttribute",
            "redshift:CreateClusterSnapshot",
            "redshift:CreateTags",
            "redshift:DeleteClusterSnapshot",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusters",
            "redshift:DescribeTags",
            "ssm-sap:BackupDatabase",
            "ssm-sap:GetDatabase",
            "ssm-sap:GetOperation",
            "ssm-sap:ListDatabases",
            "ssm-sap:ListTagsForResource",
            "ssm-sap:UpdateHanaBackupSettings",
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation",
            "ssm:SendCommand",
            "storagegateway:CreateSnapshot",
            "storagegateway:ListTagsForResource",
            "tag:GetResources",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:GetAwsBackupStatus",
            "timestream:ListDatabases",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "timestream:StartAwsBackupJob"
        ]
    },
    "AWSIoTEventsReadOnlyAccess": {
        "permissions": [
            "iotevents:Describe*",
            "iotevents:List*"
        ]
    },
    "AWSIoTEventsFullAccess": {
        "permissions": [
            "iotevents:*"
        ]
    },
    "AWSElasticBeanstalkMaintenance": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:ListChangeSets",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "elasticloadbalancing:DescribeLoadBalancers"
        ]
    },
    "AWSBackupServiceRolePolicyForRestores": {
        "permissions": [
            "backup-gateway:Restore",
            "cloudformation:CreateChangeSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:TagResource",
            "ds:DescribeDirectories",
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteItem",
            "dynamodb:DescribeTable",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:RestoreTableFromAwsBackup",
            "dynamodb:RestoreTableFromBackup",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "ebs:CompleteSnapshot",
            "ebs:PutSnapshotBlock",
            "ebs:StartSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshotTierStatus",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcs",
            "ec2:RestoreSnapshotTier",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "elasticfilesystem:CreateFilesystem",
            "elasticfilesystem:DeleteFilesystem",
            "elasticfilesystem:DescribeFilesystems",
            "elasticfilesystem:Restore",
            "elasticfilesystem:TagResource",
            "fsx:CreateFileSystemFromBackup",
            "fsx:CreateVolumeFromBackup",
            "fsx:DeleteFileSystem",
            "fsx:DeleteVolume",
            "fsx:DescribeBackups",
            "fsx:DescribeFileSystems",
            "fsx:DescribeVolumes",
            "fsx:TagResource",
            "fsx:UntagResource",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:GenerateDataKeyWithoutPlaintext",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
            "rds:AddTagsToResource",
            "rds:CreateDBInstance",
            "rds:CreateTenantDatabase",
            "rds:DeleteDBCluster",
            "rds:DeleteDBInstance",
            "rds:DeleteTenantDatabase",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "rds:RestoreDBClusterFromSnapshot",
            "rds:RestoreDBClusterToPointInTime",
            "rds:RestoreDBInstanceFromDBSnapshot",
            "rds:RestoreDBInstanceToPointInTime",
            "redshift:DescribeClusters",
            "redshift:DescribeTableRestoreStatus",
            "redshift:RestoreFromClusterSnapshot",
            "redshift:RestoreTableFromClusterSnapshot",
            "storagegateway:AddTagsToResource",
            "storagegateway:CreateCachediSCSIVolume",
            "storagegateway:CreateStorediSCSIVolume",
            "storagegateway:DeleteVolume",
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:DescribeStorediSCSIVolumes",
            "storagegateway:ListVolumes",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:GetAwsRestoreStatus",
            "timestream:ListDatabases",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "timestream:StartAwsRestoreJob"
        ]
    },
    "AWSTransferLoggingAccess": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AmazonMSKFullAccess": {
        "permissions": [
            "S3:GetBucketPolicy",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "firehose:TagDeliveryStream",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "kafka:*",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery"
        ]
    },
    "AmazonMSKReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kafka:Describe*",
            "kafka:Get*",
            "kafka:List*",
            "kms:DescribeKey"
        ]
    },
    "AmazonForecastFullAccess": {
        "permissions": [
            "forecast:*",
            "iam:PassRole"
        ]
    },
    "AWSDataSyncReadOnlyAccess": {
        "permissions": [
            "datasync:Describe*",
            "datasync:List*",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "fsx:DescribeFileSystems",
            "iam:GetRole",
            "iam:ListRoles",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AWSDataSyncFullAccess": {
        "permissions": [
            "datasync:*",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRegions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:ModifyNetworkInterfaceAttribute",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "fsx:DescribeFileSystems",
            "fsx:DescribeStorageVirtualMachines",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "outposts:ListOutposts",
            "s3-outposts:ListAccessPoints",
            "s3-outposts:ListRegionalBuckets",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions"
        ]
    },
    "WorkLinkServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:ModifyNetworkInterfaceAttribute",
            "kinesis:PutRecord",
            "kinesis:PutRecords"
        ]
    },
    "AWSDeepRacerServiceRolePolicy": {
        "permissions": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackDriftDetectionStatus",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResourceDrifts",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:DetectStackDrift",
            "cloudformation:ListStackResources",
            "cloudwatch:GetMetricData",
            "deepracer:*",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "kinesisvideo:CreateStream",
            "kinesisvideo:DeleteStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:GetHLSStreamingSessionURL",
            "kinesisvideo:GetMedia",
            "kinesisvideo:PutMedia",
            "kinesisvideo:TagStream",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:UpdateFunctionCode",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "robomaker:*",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutObject",
            "sagemaker:*"
        ]
    },
    "AWSDeepRacerCloudFormationAccessPolicy": {
        "permissions": [
            "cloudformation:*",
            "ec2:AllocateAddress",
            "ec2:AssociateRouteTable",
            "ec2:AttachInternetGateway",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateInternetGateway",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkAclEntry",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAddresses",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DetachInternetGateway",
            "ec2:DisassociateRouteTable",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ReleaseAddress",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "iam:PassRole",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:TagResource",
            "lambda:UpdateFunctionCode",
            "robomaker:CreateSimulationApplication",
            "robomaker:CreateSimulationApplicationVersion",
            "robomaker:DeleteSimulationApplication",
            "robomaker:DescribeSimulationApplication",
            "robomaker:ListSimulationApplications",
            "robomaker:TagResource",
            "robomaker:UpdateSimulationApplication",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetBucketAcl",
            "s3:ListBucket",
            "s3:PutBucketPolicy"
        ]
    },
    "AWSDeepRacerRoboMakerAccessPolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kinesisvideo:CreateStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:PutMedia",
            "kinesisvideo:TagStream",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "robomaker:*",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "ComprehendDataAccessRolePolicy": {
        "permissions": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AlexaForBusinessNetworkProfileServicePolicy": {
        "permissions": [
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate",
            "acm-pca:RevokeCertificate",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AmazonSSMManagedInstanceCore": {
        "permissions": [
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply",
            "ssm:DescribeAssociation",
            "ssm:DescribeDocument",
            "ssm:GetDeployablePatchSnapshotForInstance",
            "ssm:GetDocument",
            "ssm:GetManifest",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:ListAssociations",
            "ssm:ListInstanceAssociations",
            "ssm:PutComplianceItems",
            "ssm:PutConfigurePackageResult",
            "ssm:PutInventory",
            "ssm:UpdateAssociationStatus",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "AmazonSSMDirectoryServiceAccess": {
        "permissions": [
            "ds:CreateComputer",
            "ds:DescribeDirectories"
        ]
    },
    "AmazonCognitoIdpEmailServiceRolePolicy": {
        "permissions": [
            "ses:List*",
            "ses:SendEmail",
            "ses:SendRawEmail"
        ]
    },
    "AWSIQFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "iq-permission:*",
            "iq:*"
        ]
    },
    "AWSGlobalAcceleratorSLRPolicy": {
        "permissions": [
            "ec2:AssignIpv6Addresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAddresses",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRegions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignIpv6Addresses",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups"
        ]
    },
    "AmazonWorkMailEventsServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSAppMeshFullAccess": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:ListCertificateAuthorities",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "appmesh:*",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStack*",
            "cloudformation:UpdateStack",
            "iam:CreateServiceLinkedRole",
            "servicediscovery:ListInstances",
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices"
        ]
    },
    "AWSAppMeshReadOnly": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:ListCertificateAuthorities",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "appmesh:Describe*",
            "appmesh:List*",
            "cloudformation:DescribeStack*",
            "servicediscovery:ListInstances",
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices"
        ]
    },
    "AmazonManagedBlockchainConsoleFullAccess": {
        "permissions": [
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kms:DescribeKey",
            "kms:ListAliases",
            "managedblockchain:*"
        ]
    },
    "AmazonManagedBlockchainFullAccess": {
        "permissions": [
            "managedblockchain:*"
        ]
    },
    "AmazonManagedBlockchainReadOnlyAccess": {
        "permissions": [
            "managedblockchain:Get*",
            "managedblockchain:List*"
        ]
    },
    "AWSDenyAll": {
        "permissions": [
            "*"
        ]
    },
    "AWSControlTowerServiceRolePolicy": {
        "permissions": [
            "account:EnableRegion",
            "account:GetRegionOptStatus",
            "account:ListRegions",
            "cloudformation:ActivateType",
            "cloudformation:CreateStack",
            "cloudformation:CreateStackInstances",
            "cloudformation:CreateStackSet",
            "cloudformation:DeactivateType",
            "cloudformation:DeleteStack",
            "cloudformation:DeleteStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackInstances",
            "cloudformation:SetTypeConfiguration",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateStackInstances",
            "cloudformation:UpdateStackSet",
            "cloudtrail:CreateTrail",
            "cloudtrail:DeleteTrail",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:PutEventSelectors",
            "cloudtrail:StartLogging",
            "cloudtrail:StopLogging",
            "cloudtrail:UpdateTrail",
            "config:DeleteConfigurationAggregator",
            "config:PutConfigurationAggregator",
            "config:TagResource",
            "ec2:DescribeAvailabilityZones",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetUser",
            "iam:ListAttachedRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "organizations:CreateAccount",
            "organizations:DescribeAccount",
            "organizations:DescribeCreateAccountStatus",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:DisableAWSServiceAccess",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListTargetsForPolicy",
            "organizations:MoveAccount",
            "s3:GetObject",
            "servicecatalog:AssociatePrincipalWithPortfolio",
            "sts:AssumeRole"
        ]
    },
    "AmazonRoute53ResolverFullAccess": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "route53resolver:*"
        ]
    },
    "AmazonRoute53ResolverReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "route53resolver:Get*",
            "route53resolver:List*"
        ]
    },
    "AWSIoTSiteWiseConsoleFullAccess": {
        "permissions": [
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupVersion",
            "greengrass:ListGroups",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "iot:DescribeEndpoint",
            "iot:GetThingShadow",
            "iotanalytics:Create*",
            "iotanalytics:Describe*",
            "iotanalytics:List*",
            "iotsitewise:*",
            "secretsmanager:CreateSecret",
            "secretsmanager:ListSecrets",
            "secretsmanager:UpdateSecret",
            "tag:GetResources"
        ]
    },
    "AWSAppMeshServiceRolePolicy": {
        "permissions": [
            "acm:DescribeCertificate",
            "servicediscovery:DiscoverInstances",
            "servicediscovery:DiscoverInstancesRevision"
        ]
    },
    "AWSResourceAccessManagerFullAccess": {
        "permissions": [
            "ram:*"
        ]
    },
    "MigrationHubServiceRolePolicy": {
        "permissions": [
            "discovery:DescribeConfigurations",
            "discovery:ListConfigurations",
            "dms:AddTagsToResource",
            "ec2:CreateTags",
            "ec2:DescribeInstanceAttribute"
        ]
    },
    "MigrationHubDMSAccessServiceRolePolicy": {
        "permissions": [
            "mgh:AssociateCreatedArtifact",
            "mgh:AssociateDiscoveredResource",
            "mgh:CreateProgressUpdateStream",
            "mgh:DescribeApplicationState",
            "mgh:DescribeMigrationTask",
            "mgh:DisassociateCreatedArtifact",
            "mgh:DisassociateDiscoveredResource",
            "mgh:GetHomeRegion",
            "mgh:ImportMigrationTask",
            "mgh:ListCreatedArtifacts",
            "mgh:ListDiscoveredResources",
            "mgh:ListMigrationTasks",
            "mgh:NotifyApplicationState",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes"
        ]
    },
    "MigrationHubSMSAccessServiceRolePolicy": {
        "permissions": [
            "mgh:AssociateCreatedArtifact",
            "mgh:AssociateDiscoveredResource",
            "mgh:CreateProgressUpdateStream",
            "mgh:DescribeApplicationState",
            "mgh:DescribeMigrationTask",
            "mgh:DisassociateCreatedArtifact",
            "mgh:DisassociateDiscoveredResource",
            "mgh:GetHomeRegion",
            "mgh:ImportMigrationTask",
            "mgh:ListCreatedArtifacts",
            "mgh:ListDiscoveredResources",
            "mgh:ListMigrationTasks",
            "mgh:NotifyApplicationState",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes"
        ]
    },
    "AWSConfigMultiAccountSetupPolicy": {
        "permissions": [
            "config:DeleteConfigRule",
            "config:DeleteConformancePack",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConformancePackStatus",
            "config:PutConfigRule",
            "config:PutConformancePack",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:PassRole",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts"
        ]
    },
    "AWSOpsWorksRegisterCLI_OnPremises": {
        "permissions": [
            "ec2:DescribeInstances",
            "iam:AddUserToGroup",
            "iam:AttachUserPolicy",
            "iam:CreateAccessKey",
            "iam:CreateGroup",
            "iam:CreateUser",
            "opsworks:AssignInstance",
            "opsworks:CreateLayer",
            "opsworks:DeregisterInstance",
            "opsworks:DescribeInstances",
            "opsworks:DescribeStackProvisioningParameters",
            "opsworks:DescribeStacks",
            "opsworks:UnassignInstance"
        ]
    },
    "AWSOpsWorksRegisterCLI_EC2": {
        "permissions": [
            "ec2:DescribeInstances",
            "opsworks:AssignInstance",
            "opsworks:CreateLayer",
            "opsworks:DeregisterInstance",
            "opsworks:DescribeInstances",
            "opsworks:DescribeStackProvisioningParameters",
            "opsworks:DescribeStacks",
            "opsworks:UnassignInstance"
        ]
    },
    "AWSConfigRemediationServiceRolePolicy": {
        "permissions": [
            "iam:PassRole",
            "ssm:DescribeDocument",
            "ssm:GetDocument",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWSAppMeshPreviewServiceRolePolicy": {
        "permissions": [
            "acm:DescribeCertificate",
            "servicediscovery:DiscoverInstances"
        ]
    },
    "AWSCertificateManagerPrivateCAPrivilegedUser": {
        "permissions": [
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:RevokeCertificate"
        ]
    },
    "LakeFormationDataAccessServiceRolePolicy": {
        "permissions": [
            "s3:ListAllMyBuckets"
        ]
    },
    "IAMAccessAdvisorReadOnly": {
        "permissions": [
            "iam:GenerateCredentialReport",
            "iam:GenerateOrganizationsAccessReport",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:GetOrganizationsAccessReport",
            "iam:GetPolicy",
            "iam:GetRole",
            "iam:GetServiceLastAccessedDetails",
            "iam:GetServiceLastAccessedDetailsWithEntities",
            "iam:ListGroups",
            "iam:ListPolicies",
            "iam:ListPoliciesGrantingServiceAccess",
            "iam:ListRoles",
            "iam:ListUsers",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListPolicies",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListTargetsForPolicy"
        ]
    },
    "ServiceQuotasServiceRolePolicy": {
        "permissions": [
            "support:*"
        ]
    },
    "ServiceQuotasReadOnlyAccess": {
        "permissions": [
            "autoscaling:DescribeAccountLimits",
            "cloudformation:DescribeAccountLimits",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "dynamodb:DescribeLimits",
            "elasticloadbalancing:DescribeAccountLimits",
            "iam:GetAccountSummary",
            "kinesis:DescribeLimits",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "rds:DescribeAccountAttributes",
            "route53:GetAccountLimit",
            "servicequotas:GetAWSDefaultServiceQuota",
            "servicequotas:GetAssociationForServiceQuotaTemplate",
            "servicequotas:GetRequestedServiceQuotaChange",
            "servicequotas:GetServiceQuota",
            "servicequotas:GetServiceQuotaIncreaseRequestFromTemplate",
            "servicequotas:ListAWSDefaultServiceQuotas",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListRequestedServiceQuotaChangeHistoryByQuota",
            "servicequotas:ListServiceQuotaIncreaseRequestsInTemplate",
            "servicequotas:ListServiceQuotas",
            "servicequotas:ListServices",
            "servicequotas:ListTagsForResource",
            "tag:GetTagKeys",
            "tag:GetTagValues"
        ]
    },
    "ServiceQuotasFullAccess": {
        "permissions": [
            "autoscaling:DescribeAccountLimits",
            "cloudformation:DescribeAccountLimits",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "dynamodb:DescribeLimits",
            "elasticloadbalancing:DescribeAccountLimits",
            "iam:CreateServiceLinkedRole",
            "iam:GetAccountSummary",
            "kinesis:DescribeLimits",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "rds:DescribeAccountAttributes",
            "route53:GetAccountLimit",
            "servicequotas:*",
            "tag:GetTagKeys",
            "tag:GetTagValues"
        ]
    },
    "AWSMarketplaceProcurementSystemAdminFullAccess": {
        "permissions": [
            "aws-marketplace:DescribeProcurementSystemConfiguration",
            "aws-marketplace:PutProcurementSystemConfiguration",
            "organizations:Describe*",
            "organizations:List*"
        ]
    },
    "EC2InstanceConnect": {
        "permissions": [
            "ec2-instance-connect:SendSSHPublicKey",
            "ec2:DescribeInstances"
        ]
    },
    "AmazonWorkSpacesServiceAccess": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces"
        ]
    },
    "AmazonWorkSpacesSelfServiceAccess": {
        "permissions": [
            "workspaces:ModifyWorkspaceProperties",
            "workspaces:RebootWorkspaces",
            "workspaces:RebuildWorkspaces"
        ]
    },
    "AWSMarketplaceSellerFullAccess": {
        "permissions": [
            "aws-marketplace-management:GetAdditionalSellerNotificationRecipients",
            "aws-marketplace-management:GetBankAccountVerificationDetails",
            "aws-marketplace-management:GetSecondaryUserVerificationDetails",
            "aws-marketplace-management:GetSellerVerificationDetails",
            "aws-marketplace-management:PutAdditionalSellerNotificationRecipients",
            "aws-marketplace-management:PutBankAccountVerificationDetails",
            "aws-marketplace-management:PutSecondaryUserVerificationDetails",
            "aws-marketplace-management:PutSellerVerificationDetails",
            "aws-marketplace-management:uploadFiles",
            "aws-marketplace-management:viewReports",
            "aws-marketplace-management:viewSupport",
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:DeleteResourcePolicy",
            "aws-marketplace:DescribeAgreement",
            "aws-marketplace:DescribeAssessment",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetAgreementTerms",
            "aws-marketplace:GetResourcePolicy",
            "aws-marketplace:GetSellerDashboard",
            "aws-marketplace:ListAssessments",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:ListTagsForResource",
            "aws-marketplace:PutResourcePolicy",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:TagResource",
            "aws-marketplace:UntagResource",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "ec2:ModifyImageAttribute",
            "ec2:ModifySnapshotAttribute",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:PassRole",
            "payments:CreatePaymentInstrument",
            "payments:GetPaymentInstrument",
            "support:CreateCase",
            "tax:DeleteSupplementalTaxRegistration",
            "tax:GetTaxInfoReportingDocument",
            "tax:GetTaxInterview",
            "tax:GetTaxRegistration",
            "tax:ListSupplementalTaxRegistrations",
            "tax:PutSupplementalTaxRegistration",
            "tax:PutTaxInterview",
            "vendor-insights:GetDataSource",
            "vendor-insights:GetSecurityProfile",
            "vendor-insights:GetSecurityProfileSnapshot",
            "vendor-insights:ListDataSources",
            "vendor-insights:ListSecurityProfileSnapshots",
            "vendor-insights:ListSecurityProfiles"
        ]
    },
    "AWSMarketplaceSellerProductsFullAccess": {
        "permissions": [
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:DeleteResourcePolicy",
            "aws-marketplace:DescribeAssessment",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetResourcePolicy",
            "aws-marketplace:ListAssessments",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:ListTagsForResource",
            "aws-marketplace:PutResourcePolicy",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:TagResource",
            "aws-marketplace:UntagResource",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "ec2:ModifyImageAttribute",
            "ec2:ModifySnapshotAttribute",
            "iam:GetRole",
            "iam:PassRole",
            "vendor-insights:GetDataSource",
            "vendor-insights:GetSecurityProfile",
            "vendor-insights:GetSecurityProfileSnapshot",
            "vendor-insights:ListDataSources",
            "vendor-insights:ListSecurityProfileSnapshots",
            "vendor-insights:ListSecurityProfiles"
        ]
    },
    "AWSMarketplaceSellerProductsReadOnly": {
        "permissions": [
            "aws-marketplace:DescribeAssessment",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetResourcePolicy",
            "aws-marketplace:ListAssessments",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:ListTagsForResource",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots"
        ]
    },
    "AWSAppMeshEnvoyAccess": {
        "permissions": [
            "appmesh:StreamAggregatedResources"
        ]
    },
    "AmazonEventBridgeReadOnlyAccess": {
        "permissions": [
            "events:DescribeApiDestination",
            "events:DescribeArchive",
            "events:DescribeConnection",
            "events:DescribeEndpoint",
            "events:DescribeEventBus",
            "events:DescribeEventSource",
            "events:DescribeReplay",
            "events:DescribeRule",
            "events:ListApiDestinations",
            "events:ListArchives",
            "events:ListConnections",
            "events:ListEndpoints",
            "events:ListEventBuses",
            "events:ListEventSources",
            "events:ListReplays",
            "events:ListRuleNamesByTarget",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:TestEventPattern",
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListScheduleGroups",
            "scheduler:ListSchedules",
            "scheduler:ListTagsForResource",
            "schemas:DescribeCodeBinding",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:ExportSchema",
            "schemas:GetCodeBindingSource",
            "schemas:GetDiscoveredSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemaVersions",
            "schemas:ListSchemas",
            "schemas:ListTagsForResource",
            "schemas:SearchSchemas"
        ]
    },
    "AmazonEventBridgeFullAccess": {
        "permissions": [
            "events:*",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "pipes:*",
            "scheduler:*",
            "schemas:*",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "secretsmanager:UpdateSecret"
        ]
    },
    "CloudWatch-CrossAccountAccess": {
        "permissions": [
            "sts:AssumeRole"
        ]
    },
    "CloudWatchAutomaticDashboardsAccess": {
        "permissions": [
            "apigateway:GET",
            "autoscaling:DescribeAutoScalingGroups",
            "cloudfront:GetDistribution",
            "cloudfront:ListDistributions",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListServices",
            "elasticache:DescribeCacheClusters",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeLoadBalancers",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "lambda:GetFunction",
            "lambda:ListFunctions",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "route53:GetHealthCheck",
            "route53:ListHealthChecks",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListQueues",
            "synthetics:DescribeCanariesLastRun",
            "tag:GetResources"
        ]
    },
    "ConfigConformsServiceRolePolicy": {
        "permissions": [
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:GetStackPolicy",
            "cloudformation:ListStackResources",
            "cloudformation:SetStackPolicy",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateTerminationProtection",
            "cloudformation:ValidateTemplate",
            "cloudwatch:PutMetricData",
            "config:DeleteConfigRule",
            "config:DeleteRemediationConfiguration",
            "config:DescribeConfigRules",
            "config:DescribeRemediationConfigurations",
            "config:PutConfigRule",
            "config:PutRemediationConfigurations",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:PassRole",
            "s3:GetBucketAcl",
            "s3:GetObject",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "ssm:DescribeDocument",
            "ssm:GetDocument"
        ]
    },
    "AWSCloudFormationFullAccess": {
        "permissions": [
            "cloudformation:*"
        ]
    },
    "ElementalAppliancesSoftwareFullAccess": {
        "permissions": [
            "elemental-activations:CompleteAccountRegistration",
            "elemental-appliances-software:*"
        ]
    },
    "AWSAppMeshPreviewEnvoyAccess": {
        "permissions": [
            "appmesh-preview:StreamAggregatedResources"
        ]
    },
    "AWSVPCS2SVpnServiceRolePolicy": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm:DescribeCertificate",
            "acm:ExportCertificate",
            "acm:ListCertificates"
        ]
    },
    "AWSServiceRoleForSMS": {
        "permissions": [
            "applicationinsights:CreateApplication",
            "applicationinsights:CreateComponent",
            "applicationinsights:DeleteApplication",
            "applicationinsights:DeleteComponent",
            "applicationinsights:Describe*",
            "applicationinsights:List*",
            "applicationinsights:UpdateApplication",
            "applicationinsights:UpdateComponentConfiguration",
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackResources",
            "cloudformation:ValidateTemplate",
            "ec2:AssociateIamInstanceProfile",
            "ec2:CopyImage",
            "ec2:CopySnapshot",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeregisterImage",
            "ec2:DescribeImages",
            "ec2:DescribeImportImageTasks",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshotAttribute",
            "ec2:DescribeSnapshots",
            "ec2:DisassociateIamInstanceProfile",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:ImportImage",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySnapshotAttribute",
            "ec2:ReplaceIamInstanceProfileAssociation",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:CreateServiceLinkedRole",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:PassRole",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroup",
            "resource-groups:UpdateGroup",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "sms:CreateReplicationJob",
            "sms:DeleteReplicationJob",
            "sms:GetReplicationJobs",
            "sms:GetReplicationRuns",
            "sms:GetServers",
            "sms:ImportServerCatalog",
            "sms:StartOnDemandReplicationRun",
            "sms:UpdateReplicationJob",
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation",
            "ssm:SendCommand"
        ]
    },
    "AWSIoTDeviceDefenderEnableIoTLoggingMitigationAction": {
        "permissions": [
            "iam:PassRole",
            "iot:SetV2LoggingOptions"
        ]
    },
    "AWSIoTDeviceDefenderPublishFindingsToSNSMitigationAction": {
        "permissions": [
            "sns:Publish"
        ]
    },
    "AWSIoTDeviceDefenderReplaceDefaultPolicyMitigationAction": {
        "permissions": [
            "iot:CreatePolicyVersion"
        ]
    },
    "AWSIoTDeviceDefenderUpdateCACertMitigationAction": {
        "permissions": [
            "iot:UpdateCACertificate"
        ]
    },
    "AWSIoTDeviceDefenderUpdateDeviceCertMitigationAction": {
        "permissions": [
            "iot:UpdateCertificate"
        ]
    },
    "AWSIoTDeviceDefenderAddThingsToThingGroupMitigationAction": {
        "permissions": [
            "iot:AddThingToThingGroup",
            "iot:ListPrincipalThings"
        ]
    },
    "AWSLakeFormationDataAdmin": {
        "permissions": [
            "cloudtrail:DescribeTrails",
            "cloudtrail:LookupEvents",
            "glue:BatchGetWorkflows",
            "glue:CreateCatalog",
            "glue:CreateDatabase",
            "glue:CreateTable",
            "glue:DeleteCatalog",
            "glue:DeleteDatabase",
            "glue:DeleteTable",
            "glue:DeleteWorkflow",
            "glue:GetCatalog",
            "glue:GetCatalogs",
            "glue:GetConnections",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:GetWorkflow",
            "glue:GetWorkflowRuns",
            "glue:ListWorkflows",
            "glue:SearchTables",
            "glue:StartWorkflowRun",
            "glue:UpdateCatalog",
            "glue:UpdateDatabase",
            "glue:UpdateTable",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListRoles",
            "iam:ListUsers",
            "lakeformation:*",
            "lakeformation:PutDataLakeSettings",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AWSIQContractServiceRolePolicy": {
        "permissions": [
            "aws-marketplace:Subscribe"
        ]
    },
    "AWSIQPermissionServiceRolePolicy": {
        "permissions": [
            "iam:AttachRolePolicy",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "iam:ListAttachedRolePolicies"
        ]
    },
    "AmazonQLDBReadOnly": {
        "permissions": [
            "qldb:DescribeJournalKinesisStream",
            "qldb:DescribeJournalS3Export",
            "qldb:DescribeLedger",
            "qldb:GetBlock",
            "qldb:GetDigest",
            "qldb:GetRevision",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:ListLedgers",
            "qldb:ListTagsForResource"
        ]
    },
    "AmazonQLDBFullAccess": {
        "permissions": [
            "iam:PassRole",
            "qldb:CancelJournalKinesisStream",
            "qldb:CreateLedger",
            "qldb:DeleteLedger",
            "qldb:DescribeJournalKinesisStream",
            "qldb:DescribeJournalS3Export",
            "qldb:DescribeLedger",
            "qldb:ExportJournalToS3",
            "qldb:GetBlock",
            "qldb:GetDigest",
            "qldb:GetRevision",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:ListLedgers",
            "qldb:ListTagsForResource",
            "qldb:PartiQLCreateIndex",
            "qldb:PartiQLCreateTable",
            "qldb:PartiQLDelete",
            "qldb:PartiQLDropIndex",
            "qldb:PartiQLDropTable",
            "qldb:PartiQLHistoryFunction",
            "qldb:PartiQLInsert",
            "qldb:PartiQLRedact",
            "qldb:PartiQLSelect",
            "qldb:PartiQLUndropTable",
            "qldb:PartiQLUpdate",
            "qldb:SendCommand",
            "qldb:StreamJournalToKinesis",
            "qldb:TagResource",
            "qldb:UntagResource",
            "qldb:UpdateLedger",
            "qldb:UpdateLedgerPermissionsMode"
        ]
    },
    "AmazonQLDBConsoleFullAccess": {
        "permissions": [
            "dbqms:*",
            "iam:PassRole",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "qldb:CancelJournalKinesisStream",
            "qldb:CreateLedger",
            "qldb:DeleteLedger",
            "qldb:DescribeJournalKinesisStream",
            "qldb:DescribeJournalS3Export",
            "qldb:DescribeLedger",
            "qldb:ExecuteStatement",
            "qldb:ExportJournalToS3",
            "qldb:GetBlock",
            "qldb:GetDigest",
            "qldb:GetRevision",
            "qldb:InsertSampleData",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:ListJournalS3Exports",
            "qldb:ListJournalS3ExportsForLedger",
            "qldb:ListLedgers",
            "qldb:ListTagsForResource",
            "qldb:PartiQLCreateIndex",
            "qldb:PartiQLCreateTable",
            "qldb:PartiQLDelete",
            "qldb:PartiQLDropIndex",
            "qldb:PartiQLDropTable",
            "qldb:PartiQLHistoryFunction",
            "qldb:PartiQLInsert",
            "qldb:PartiQLRedact",
            "qldb:PartiQLSelect",
            "qldb:PartiQLUndropTable",
            "qldb:PartiQLUpdate",
            "qldb:SendCommand",
            "qldb:ShowCatalog",
            "qldb:StreamJournalToKinesis",
            "qldb:TagResource",
            "qldb:UntagResource",
            "qldb:UpdateLedger",
            "qldb:UpdateLedgerPermissionsMode"
        ]
    },
    "AmazonChimeVoiceConnectorServiceLinkedRolePolicy": {
        "permissions": [
            "SNS:Publish",
            "chime:CreateMediaInsightsPipeline",
            "chime:GetMediaInsightsPipelineConfiguration",
            "chime:GetVoiceConnector*",
            "kinesisvideo:CreateStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:ListStreams",
            "kinesisvideo:PutMedia",
            "kinesisvideo:UpdateDataRetention",
            "polly:SynthesizeSpeech",
            "sqs:SendMessage"
        ]
    },
    "AmazonChimeServiceRolePolicy": {
        "permissions": [
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AWSServiceRoleForLogDeliveryPolicy": {
        "permissions": [
            "firehose:ListTagsForDeliveryStream",
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
        ]
    },
    "AlexaForBusinessPolyDelegatedAccessPolicy": {
        "permissions": [
            "a4b:AssociateDeviceWithRoom",
            "a4b:AssociateSkillGroupWithRoom",
            "a4b:CreateRoom",
            "a4b:DeleteDevice",
            "a4b:DisassociateDeviceFromRoom",
            "a4b:DisassociateSkillGroupFromRoom",
            "a4b:GetAddressBook",
            "a4b:GetDevice",
            "a4b:GetProfile",
            "a4b:GetRoom",
            "a4b:GetSkillGroup",
            "a4b:RegisterAVSDevice",
            "a4b:SearchDevices",
            "a4b:SearchProfiles",
            "a4b:SearchRooms",
            "a4b:SearchSkillGroups",
            "a4b:UpdateDevice",
            "a4b:UpdateRoom"
        ]
    },
    "AmazonSageMakerNotebooksServiceRolePolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "elasticfilesystem:CreateAccessPoint",
            "elasticfilesystem:CreateFileSystem",
            "elasticfilesystem:CreateMountTarget",
            "elasticfilesystem:DeleteAccessPoint",
            "elasticfilesystem:DeleteFileSystem",
            "elasticfilesystem:DeleteMountTarget",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:TagResource",
            "fsx:DescribeFileSystems",
            "sagemaker:AddTags",
            "sagemaker:CreateSpace",
            "sagemaker:CreateUserProfile",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteSpace",
            "sagemaker:DescribeSpace",
            "sagemaker:DescribeUserProfile",
            "sagemaker:ListTags",
            "sso:CreateManagedApplicationInstance",
            "sso:DeleteManagedApplicationInstance",
            "sso:GetManagedApplicationInstance"
        ]
    },
    "AWSApplicationAutoscalingLambdaConcurrencyPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "lambda:DeleteProvisionedConcurrencyConfig",
            "lambda:GetProvisionedConcurrencyConfig",
            "lambda:PutProvisionedConcurrencyConfig"
        ]
    },
    "AWSSystemsManagerAccountDiscoveryServicePolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListDelegatedServicesForAccount",
            "organizations:ListParents",
            "organizations:ListRoots"
        ]
    },
    "AWSServiceCatalogEndUserReadOnlyAccess": {
        "permissions": [
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListChangeSets",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackResources",
            "cloudformation:ListStackSetOperationResults",
            "cloudformation:ListStackSetOperations",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "servicecatalog:DescribeProduct",
            "servicecatalog:DescribeProductView",
            "servicecatalog:DescribeProvisionedProduct",
            "servicecatalog:DescribeProvisionedProductPlan",
            "servicecatalog:DescribeProvisioningParameters",
            "servicecatalog:DescribeRecord",
            "servicecatalog:DescribeServiceActionExecutionParameters",
            "servicecatalog:ListLaunchPaths",
            "servicecatalog:ListProvisionedProductPlans",
            "servicecatalog:ListRecordHistory",
            "servicecatalog:ListServicepermissionsForProvisioningArtifact",
            "servicecatalog:ListStackInstancesForProvisionedProduct",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:SearchProducts",
            "servicecatalog:SearchProvisionedProducts",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution"
        ]
    },
    "AWSServiceCatalogAdminReadOnlyAccess": {
        "permissions": [
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListChangeSets",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackResources",
            "cloudformation:ListStackSetOperationResults",
            "cloudformation:ListStackSetOperations",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "iam:GetGroup",
            "iam:GetRole",
            "iam:GetUser",
            "iam:ListGroups",
            "iam:ListRoles",
            "iam:ListUsers",
            "servicecatalog:Describe*",
            "servicecatalog:Get*",
            "servicecatalog:List*",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:Search*",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "ssm:ListDocumentVersions",
            "ssm:ListDocuments"
        ]
    },
    "AWSPrivateMarketplaceRequests": {
        "permissions": [
            "aws-marketplace:CreatePrivateMarketplaceRequests",
            "aws-marketplace:DescribePrivateMarketplaceRequests",
            "aws-marketplace:ListPrivateMarketplaceRequests"
        ]
    },
    "AWSForWordPressPluginPolicy": {
        "permissions": [
            "acm:AddTagsToCertificate",
            "acm:DeleteCertificate",
            "acm:DescribeCertificate",
            "acm:RequestCertificate",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:UpdateStack",
            "cloudfront:CreateDistribution",
            "cloudfront:CreateInvalidation",
            "cloudfront:DeleteDistribution",
            "cloudfront:GetDistribution",
            "cloudfront:GetInvalidation",
            "cloudfront:ListDistributions",
            "cloudfront:TagResource",
            "cloudfront:UpdateDistribution",
            "polly:DescribeVoices",
            "polly:SynthesizeSpeech",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketPolicy",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "translate:TranslateText"
        ]
    },
    "AWSCodeStarNotificationsServiceRolePolicy": {
        "permissions": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:UpdateSlackChannelConfiguration",
            "codecommit:GetCommentsForComparedCommit",
            "codecommit:GetCommentsForPullRequest",
            "codecommit:GetDifferences",
            "codecommit:GetFile",
            "codepipeline:ListActionExecutions",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "sns:CreateTopic"
        ]
    },
    "AmazonElasticFileSystemServiceRolePolicy": {
        "permissions": [
            "backup-storage:MountCapsule",
            "backup:CreateBackupPlan",
            "backup:CreateBackupSelection",
            "backup:CreateBackupVault",
            "backup:PutBackupVaultAccessPolicy",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:ModifyNetworkInterfaceAttribute",
            "elasticfilesystem:CreateReplicationConfiguration",
            "elasticfilesystem:DeleteReplicationConfiguration",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticfilesystem:ReplicationRead",
            "elasticfilesystem:ReplicationWrite",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "kms:DescribeKey",
            "tag:GetResources"
        ]
    },
    "AWSSavingsPlansReadOnlyAccess": {
        "permissions": [
            "savingsplans:Describe*",
            "savingsplans:List*"
        ]
    },
    "AWSSavingsPlansFullAccess": {
        "permissions": [
            "savingsplans:*"
        ]
    },
    "WAFV2LoggingServiceRolePolicy": {
        "permissions": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch",
            "organizations:DescribeOrganization"
        ]
    },
    "AWSServiceRoleForAmazonEKSNodegroup": {
        "permissions": [
            "autoscaling:CompleteLifecycleAction",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:EnableMetricsCollection",
            "autoscaling:PutLifecycleHook",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:ResumeProcesses",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:GetConsoleOutput",
            "ec2:RebootInstances",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteInstanceProfile",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:PassRole",
            "iam:RemoveRoleFromInstanceProfile"
        ]
    },
    "AmazonEC2RolePolicyForLaunchWizard": {
        "permissions": [
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:SignalResource",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricData",
            "dynamodb:BatchGetItem",
            "dynamodb:CreateTable",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "dynamodb:UpdateTable",
            "ec2:AssociateAddress",
            "ec2:AttachVolume",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:Describe*",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeVolumes",
            "ec2:ModifyInstanceAttribute",
            "ec2:RebootInstances",
            "ec2:ReplaceRoute",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "fsx:DescribeFileSystems",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:ListTagsForResource",
            "logs:Create*",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectTagging",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "ssm:GetCommandInvocation",
            "ssm:GetDocument",
            "ssm:SendCommand"
        ]
    },
    "AWSDataExchangeReadOnly": {
        "permissions": [
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetAgreementApprovalRequest",
            "aws-marketplace:GetAgreementRequest",
            "aws-marketplace:GetAgreementTerms",
            "aws-marketplace:ListAgreementApprovalRequests",
            "aws-marketplace:ListAgreementRequests",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:ListPrivateListings",
            "aws-marketplace:ListTagsForResource",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:ViewSubscriptions",
            "dataexchange:GetAsset",
            "dataexchange:GetDataGrant",
            "dataexchange:GetDataSet",
            "dataexchange:GetEventAction",
            "dataexchange:GetJob",
            "dataexchange:GetReceivedDataGrant",
            "dataexchange:GetRevision",
            "dataexchange:ListDataGrants",
            "dataexchange:ListDataSetRevisions",
            "dataexchange:ListDataSets",
            "dataexchange:ListEventpermissions",
            "dataexchange:ListJobs",
            "dataexchange:ListReceivedDataGrants",
            "dataexchange:ListRevisionAssets",
            "dataexchange:ListTagsForResource"
        ]
    },
    "AWSDataExchangeSubscriberFullAccess": {
        "permissions": [
            "aws-marketplace:CancelAgreementRequest",
            "aws-marketplace:GetAgreementRequest",
            "aws-marketplace:ListAgreementRequests",
            "aws-marketplace:ListPrivateListings",
            "aws-marketplace:Subscribe",
            "aws-marketplace:Unsubscribe",
            "aws-marketplace:ViewSubscriptions",
            "dataexchange:CancelJob",
            "dataexchange:CreateEventAction",
            "dataexchange:CreateJob",
            "dataexchange:DeleteEventAction",
            "dataexchange:Get*",
            "dataexchange:List*",
            "dataexchange:SendApiAsset",
            "dataexchange:StartJob",
            "dataexchange:UpdateEventAction",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AWSDataExchangeProviderFullAccess": {
        "permissions": [
            "apigateway:GET",
            "aws-marketplace:AcceptAgreementApprovalRequest",
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetAgreementApprovalRequest",
            "aws-marketplace:GetAgreementTerms",
            "aws-marketplace:ListAgreementApprovalRequests",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:RejectAgreementApprovalRequest",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:UpdateAgreementApprovalRequest",
            "dataexchange:CancelJob",
            "dataexchange:CreateAsset",
            "dataexchange:CreateDataSet",
            "dataexchange:CreateJob",
            "dataexchange:CreateRevision",
            "dataexchange:Delete*",
            "dataexchange:Get*",
            "dataexchange:List*",
            "dataexchange:PublishDataSet",
            "dataexchange:RevokeRevision",
            "dataexchange:SendApiAsset",
            "dataexchange:SendDataSetNotification",
            "dataexchange:StartJob",
            "dataexchange:TagResource",
            "dataexchange:UntagResource",
            "dataexchange:Update*",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "redshift:AuthorizeDataShare",
            "redshift:DescribeDataShares",
            "redshift:DescribeDataSharesForProducer",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "tag:GetTagKeys",
            "tag:GetTagValues"
        ]
    },
    "AWSDataExchangeFullAccess": {
        "permissions": [
            "apigateway:GET",
            "aws-marketplace:AcceptAgreementApprovalRequest",
            "aws-marketplace:CancelAgreementRequest",
            "aws-marketplace:CancelChangeSet",
            "aws-marketplace:DescribeAgreement",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetAgreementApprovalRequest",
            "aws-marketplace:GetAgreementRequest",
            "aws-marketplace:GetAgreementTerms",
            "aws-marketplace:ListAgreementApprovalRequests",
            "aws-marketplace:ListAgreementRequests",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:ListPrivateListings",
            "aws-marketplace:ListTagsForResource",
            "aws-marketplace:RejectAgreementApprovalRequest",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:StartChangeSet",
            "aws-marketplace:Subscribe",
            "aws-marketplace:TagResource",
            "aws-marketplace:Unsubscribe",
            "aws-marketplace:UntagResource",
            "aws-marketplace:UpdateAgreementApprovalRequest",
            "aws-marketplace:ViewSubscriptions",
            "dataexchange:*",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "redshift:AuthorizeDataShare",
            "redshift:DescribeDataShares",
            "redshift:DescribeDataSharesForProducer",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl"
        ]
    },
    "AWSIoTSiteWiseMonitorServiceRolePolicy": {
        "permissions": [
            "iotsitewise:BatchAssociateProjectAssets",
            "iotsitewise:BatchDisassociateProjectAssets",
            "iotsitewise:CreateAccessPolicy",
            "iotsitewise:CreateDashboard",
            "iotsitewise:CreateProject",
            "iotsitewise:DeleteAccessPolicy",
            "iotsitewise:DeleteDashboard",
            "iotsitewise:DeleteProject",
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetProperty",
            "iotsitewise:DescribeDashboard",
            "iotsitewise:DescribeProject",
            "iotsitewise:GetAssetPropertyAggregates",
            "iotsitewise:GetAssetPropertyValue",
            "iotsitewise:GetAssetPropertyValueHistory",
            "iotsitewise:ListAccessPolicies",
            "iotsitewise:ListAssets",
            "iotsitewise:ListAssociatedAssets",
            "iotsitewise:ListDashboards",
            "iotsitewise:ListProjectAssets",
            "iotsitewise:ListProjects",
            "iotsitewise:UpdateAccessPolicy",
            "iotsitewise:UpdateDashboard",
            "iotsitewise:UpdateProject",
            "sso-directory:DescribeUsers"
        ]
    },
    "AWSApplicationAutoscalingComprehendEndpointPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "comprehend:DescribeEndpoint",
            "comprehend:UpdateEndpoint"
        ]
    },
    "DynamoDBCloudWatchContributorInsightsServiceRolePolicy": {
        "permissions": [
            "cloudwatch:DeleteInsightRules",
            "cloudwatch:DescribeInsightRules",
            "cloudwatch:PutInsightRule"
        ]
    },
    "AWSChatbotServiceLinkedRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "sns:Unsubscribe"
        ]
    },
    "AWSBackupFullAccess": {
        "permissions": [
            "backup-gateway:AssociateGatewayToServer",
            "backup-gateway:CreateGateway",
            "backup-gateway:DeleteGateway",
            "backup-gateway:DeleteHypervisor",
            "backup-gateway:DisassociateGatewayFromServer",
            "backup-gateway:GetBandwidthRateLimitSchedule",
            "backup-gateway:GetGateway",
            "backup-gateway:GetHypervisor",
            "backup-gateway:GetHypervisorPropertyMappings",
            "backup-gateway:GetVirtualMachine",
            "backup-gateway:ImportHypervisorConfiguration",
            "backup-gateway:ListGateways",
            "backup-gateway:ListHypervisors",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup-gateway:PutBandwidthRateLimitSchedule",
            "backup-gateway:PutHypervisorPropertyMappings",
            "backup-gateway:PutMaintenanceStartTime",
            "backup-gateway:StartVirtualMachinesMetadataSync",
            "backup-gateway:TagResource",
            "backup-gateway:TestHypervisorConfiguration",
            "backup-gateway:UntagResource",
            "backup-gateway:UpdateGatewayInformation",
            "backup-gateway:UpdateHypervisor",
            "backup-storage:*",
            "backup:*",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "ds:DescribeDirectories",
            "dynamodb:DeleteBackup",
            "dynamodb:ListBackups",
            "dynamodb:ListTables",
            "ec2:DeleteSnapshot",
            "ec2:DeregisterImage",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:describeAvailabilityZones",
            "elasticfilesystem:DescribeFilesystems",
            "fsx:DeleteBackup",
            "fsx:DescribeBackups",
            "fsx:DescribeFileSystems",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "organizations:DescribeOrganization",
            "ram:GetResourceShareAssociations",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBSnapshot",
            "rds:DescribeDBClusterAutomatedBackups",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "rds:describeDBClusterSnapshots",
            "rds:describeDBClusters",
            "rds:describeDBEngineVersions",
            "rds:describeDBParameterGroups",
            "rds:describeDBSubnetGroups",
            "rds:describeOptionGroups",
            "rds:describeOrderableDBInstanceOptions",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusterTracks",
            "redshift:DescribeClusters",
            "redshift:DescribeNodeConfigurationOptions",
            "redshift:DescribeOrderableClusterOptions",
            "redshift:DescribeSnapshotSchedules",
            "s3:ListAllMyBuckets",
            "ssm-sap:GetDatabase",
            "ssm-sap:GetOperation",
            "ssm-sap:ListDatabases",
            "ssm-sap:ListTagsForResource",
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation",
            "ssm:SendCommand",
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:DescribeStorediSCSIVolumes",
            "storagegateway:ListGateways",
            "storagegateway:ListLocalDisks",
            "storagegateway:ListVolumes",
            "tag:GetResources",
            "tag:GetTagKeys",
            "tag:GetTagValues",
            "timestream:DescribeEndpoints",
            "timestream:ListDatabases",
            "timestream:ListTables"
        ]
    },
    "AWSBackupOperatorAccess": {
        "permissions": [
            "backup-gateway:GetBandwidthRateLimitSchedule",
            "backup-gateway:GetGateway",
            "backup-gateway:GetHypervisor",
            "backup-gateway:GetHypervisorPropertyMappings",
            "backup-gateway:GetVirtualMachine",
            "backup-gateway:ListGateways",
            "backup-gateway:ListHypervisors",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup:CreateBackupSelection",
            "backup:DeleteBackupSelection",
            "backup:Describe*",
            "backup:Get*",
            "backup:List*",
            "backup:StartBackupJob",
            "backup:StartCopyJob",
            "backup:StartRestoreJob",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "ds:DescribeDirectories",
            "dynamodb:ListBackups",
            "dynamodb:ListTables",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:describeAvailabilityZones",
            "elasticfilesystem:DescribeFilesystems",
            "fsx:DescribeBackups",
            "fsx:DescribeFileSystems",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "organizations:DescribeOrganization",
            "ram:GetResourceShareAssociations",
            "rds:DescribeDBClusterAutomatedBackups",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBSnapshots",
            "rds:ListTagsForResource",
            "rds:describeDBEngineVersions",
            "rds:describeDBSubnetGroups",
            "rds:describeOptionGroups",
            "rds:describeOrderableDBInstanceOptions",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusterTracks",
            "redshift:DescribeClusters",
            "redshift:DescribeNodeConfigurationOptions",
            "redshift:DescribeOrderableClusterOptions",
            "redshift:DescribeSnapshotSchedules",
            "s3:ListAllMyBuckets",
            "ssm-sap:GetDatabase",
            "ssm-sap:GetOperation",
            "ssm-sap:ListDatabases",
            "ssm-sap:ListTagsForResource",
            "ssm:CancelCommand",
            "ssm:GetCommandInvocation",
            "ssm:SendCommand",
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeGatewayInformation",
            "storagegateway:DescribeStorediSCSIVolumes",
            "storagegateway:ListGateways",
            "storagegateway:ListLocalDisks",
            "storagegateway:ListVolumes",
            "tag:GetResources",
            "tag:GetTagKeys",
            "tag:GetTagValues",
            "timestream:DescribeEndpoints",
            "timestream:ListDatabases",
            "timestream:ListTables"
        ]
    },
    "AWSTrustedAdvisorReportingServiceRolePolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents"
        ]
    },
    "AWSMarketplaceMeteringRegisterUsage": {
        "permissions": [
            "aws-marketplace:RegisterUsage"
        ]
    },
    "AWSElasticBeanstalkManagedUpdatesServiceRolePolicy": {
        "permissions": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DeleteScheduledAction",
            "autoscaling:Describe*",
            "autoscaling:DetachInstances",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:ResumeProcesses",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudformation:CancelUpdateStack",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:Describe*",
            "cloudformation:GetTemplate",
            "cloudformation:List*",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack",
            "ec2:AssociateAddress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:Describe*",
            "ec2:DisassociateAddress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ec2:allocateAddress",
            "ec2:releaseAddress",
            "ecs:DeRegisterTaskDefinition",
            "ecs:Describe*",
            "ecs:List*",
            "ecs:RegisterTaskDefinition",
            "ecs:TagResource",
            "elasticbeanstalk:*",
            "elasticloadbalancing:DeRegisterTargets",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:DescribeLogGroups",
            "logs:PutRetentionPolicy",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutObjectVersionAcl",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic"
        ]
    },
    "AmazonEKSFargatePodExecutionRolePolicy": {
        "permissions": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer"
        ]
    },
    "AmazonEKSForFargateServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
        ]
    },
    "CloudWatchSyntheticsFullAccess": {
        "permissions": [
            "apigateway:GET",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:DeleteLayerVersion",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:GetLayerVersion",
            "lambda:ListTags",
            "lambda:PublishLayerVersion",
            "lambda:PublishVersion",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetLogRecord",
            "logs:StartQuery",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutEncryptionConfiguration",
            "sns:CreateTopic",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "synthetics:*",
            "xray:BatchGetTraces",
            "xray:GetTraceSummaries"
        ]
    },
    "CloudWatchSyntheticsReadOnlyAccess": {
        "permissions": [
            "synthetics:Describe*",
            "synthetics:Get*",
            "synthetics:List*"
        ]
    },
    "AmazonEventBridgeSchemasServiceRolePolicy": {
        "permissions": [
            "events:DeleteRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets"
        ]
    },
    "AmazonEventBridgeSchemasReadOnlyAccess": {
        "permissions": [
            "schemas:DescribeCodeBinding",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:GetCodeBindingSource",
            "schemas:GetDiscoveredSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemaVersions",
            "schemas:ListSchemas",
            "schemas:ListTagsForResource",
            "schemas:SearchSchemas"
        ]
    },
    "AmazonEventBridgeSchemasFullAccess": {
        "permissions": [
            "events:DeleteRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "schemas:*"
        ]
    },
    "AWSServiceRoleForImageBuilder": {
        "permissions": [
            "ec2:CancelExportTask",
            "ec2:CopyImage",
            "ec2:CreateImage",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateTags",
            "ec2:DeregisterImage",
            "ec2:DescribeExportImageTasks",
            "ec2:DescribeHosts",
            "ec2:DescribeImages",
            "ec2:DescribeImportImageTasks",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:EnableFastLaunch",
            "ec2:ExportImage",
            "ec2:ModifyImageAttribute",
            "ec2:ModifyLaunchTemplate",
            "ec2:ModifySnapshotAttribute",
            "ec2:RegisterImage",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "ecr:BatchDeleteImage",
            "ecr:CreateRepository",
            "ecr:TagResource",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "inspector2:ListCoverage",
            "inspector2:ListFindings",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKeyWithoutPlaintext",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
            "license-manager:UpdateLicenseSpecificationsForResource",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "sns:Publish",
            "ssm:AddTagsToResource",
            "ssm:CreateAssociation",
            "ssm:DeleteAssociation",
            "ssm:DescribeAssociationExecutions",
            "ssm:DescribeInstanceAssociationsStatus",
            "ssm:DescribeInstanceInformation",
            "ssm:GetAutomationExecution",
            "ssm:GetCommandInvocation",
            "ssm:ListCommandInvocations",
            "ssm:ListCommands",
            "ssm:ListInventoryEntries",
            "ssm:SendAutomationSignal",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution",
            "sts:AssumeRole"
        ]
    },
    "EC2InstanceProfileForImageBuilder": {
        "permissions": [
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "imagebuilder:GetComponent",
            "imagebuilder:GetMarketplaceResource",
            "kms:Decrypt",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:GetObject"
        ]
    },
    "IAMAccessAnalyzerFullAccess": {
        "permissions": [
            "access-analyzer:*",
            "iam:CreateServiceLinkedRole",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots"
        ]
    },
    "IAMAccessAnalyzerReadOnlyAccess": {
        "permissions": [
            "access-analyzer:CheckAccessNotGranted",
            "access-analyzer:CheckNoNewAccess",
            "access-analyzer:CheckNoPublicAccess",
            "access-analyzer:Get*",
            "access-analyzer:List*",
            "access-analyzer:ValidatePolicy"
        ]
    },
    "AccessAnalyzerServiceRolePolicy": {
        "permissions": [
            "dynamodb:GetResourcePolicy",
            "dynamodb:ListStreams",
            "dynamodb:ListTables",
            "ec2:DescribeAddresses",
            "ec2:DescribeByoipCidrs",
            "ec2:DescribeSnapshotAttribute",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:GetSnapshotBlockPublicAccessState",
            "ecr:DescribeRepositories",
            "ecr:GetAccountSetting",
            "ecr:GetRegistryPolicy",
            "ecr:GetRepositoryPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "iam:GenerateServiceLastAccessedDetails",
            "iam:GetAccessKeyLastUsed",
            "iam:GetGroup",
            "iam:GetLoginProfile",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetServiceLastAccessedDetails",
            "iam:GetUser",
            "iam:GetUserPolicy",
            "iam:ListAccessKeys",
            "iam:ListAttachedRolePolicies",
            "iam:ListAttachedUserPolicies",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupsForUser",
            "iam:ListRolePolicies",
            "iam:ListRoleTags",
            "iam:ListRoles",
            "iam:ListUserPolicies",
            "iam:ListUserTags",
            "iam:ListUsers",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:ListGrants",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "lambda:GetFunctionUrlConfig",
            "lambda:GetLayerVersionPolicy",
            "lambda:GetPolicy",
            "lambda:ListAliases",
            "lambda:ListFunctions",
            "lambda:ListLayerVersions",
            "lambda:ListLayers",
            "lambda:ListVersionsByFunction",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListRoots",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBSnapshotAttributes",
            "rds:DescribeDBSnapshots",
            "s3:DescribeMultiRegionAccessPointOperation",
            "s3:GetAccessPoint",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetMultiRegionAccessPoint",
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPointPolicyStatus",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets",
            "s3:ListMultiRegionAccessPoints",
            "s3express:GetBucketPolicy",
            "s3express:ListAllMyDirectoryBuckets",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:ListSecrets",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:ListQueues"
        ]
    },
    "AmazonCodeGuruReviewerServiceRolePolicy": {
        "permissions": [
            "codecommit:DescribePullRequestEvents",
            "codecommit:GetBranch",
            "codecommit:GetCommentsForPullRequest",
            "codecommit:GetDifferences",
            "codecommit:GetPullRequest",
            "codecommit:GetRepository",
            "codecommit:GitPull",
            "codecommit:ListPullRequests",
            "codecommit:PostCommentForPullRequest",
            "codecommit:UntagResource",
            "codestar-connections:UseConnection",
            "events:DeleteRule",
            "events:RemoveTargets",
            "s3:GetObject"
        ]
    },
    "AmazonCodeGuruReviewerFullAccess": {
        "permissions": [
            "codecommit:ListRepositories",
            "codecommit:TagResource",
            "codecommit:UntagResource",
            "codeguru-reviewer:*",
            "codeguru:*",
            "codestar-connections:ListConnections",
            "codestar-connections:ListTagsForResource",
            "codestar-connections:PassConnection",
            "codestar-connections:TagResource",
            "codestar-connections:UntagResource",
            "codestar-connections:UseConnection",
            "events:DeleteRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus"
        ]
    },
    "ComputeOptimizerServiceRolePolicy": {
        "permissions": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScheduledpermissions",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "compute-optimizer:*",
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AmazonCodeGuruReviewerReadOnlyAccess": {
        "permissions": [
            "codeguru-reviewer:Describe*",
            "codeguru-reviewer:Get*",
            "codeguru-reviewer:List*",
            "codeguru:Get*"
        ]
    },
    "AmazonCodeGuruProfilerFullAccess": {
        "permissions": [
            "codeguru-profiler:*",
            "codeguru:*",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "iam:ListUsers",
            "sns:ListTopics"
        ]
    },
    "AmazonCodeGuruProfilerReadOnlyAccess": {
        "permissions": [
            "codeguru-profiler:BatchGet*",
            "codeguru-profiler:Describe*",
            "codeguru-profiler:Get*",
            "codeguru-profiler:List*",
            "codeguru:Get*",
            "iam:ListRoles",
            "iam:ListUsers"
        ]
    },
    "AmazonMCSFullAccess": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "cassandra:*",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AmazonMCSReadOnlyAccess": {
        "permissions": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "cassandra:Select",
            "cloudwatch:DescribeAlarms"
        ]
    },
    "AWSNetworkManagerServiceRolePolicy": {
        "permissions": [
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeLocations",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeRegions",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnectPeers",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayPolicyTables",
            "ec2:DescribeTransitGatewayRouteTableAnnouncements",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:GetTransitGatewayPolicyTableAssociations",
            "ec2:GetTransitGatewayPolicyTableEntries",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AmazonKendraReadOnlyAccess": {
        "permissions": [
            "kendra:Describe*",
            "kendra:GetQuerySuggestions",
            "kendra:List*",
            "kendra:Query"
        ]
    },
    "AmazonKendraFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:ListRoles",
            "iam:PassRole",
            "kendra:*",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "secretsmanager:CreateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:ListSecrets"
        ]
    },
    "AmazonSageMakerMechanicalTurkAccess": {
        "permissions": [
            "sagemaker:*FlowDefinition",
            "sagemaker:*FlowDefinitions"
        ]
    },
    "AmazonAugmentedAIHumanLoopFullAccess": {
        "permissions": [
            "sagemaker:*HumanLoop",
            "sagemaker:*HumanLoops"
        ]
    },
    "AmazonAugmentedAIFullAccess": {
        "permissions": [
            "iam:PassRole",
            "sagemaker:*FlowDefinition",
            "sagemaker:*FlowDefinitions",
            "sagemaker:*HumanLoop",
            "sagemaker:*HumanLoops",
            "sagemaker:*HumanTaskUi",
            "sagemaker:*HumanTaskUis"
        ]
    },
    "AWSNetworkManagerReadOnlyAccess": {
        "permissions": [
            "networkmanager:Describe*",
            "networkmanager:Get*",
            "networkmanager:List*"
        ]
    },
    "AWSNetworkManagerFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "networkmanager:*"
        ]
    },
    "AmazonFraudDetectorFullAccessPolicy": {
        "permissions": [
            "frauddetector:*",
            "iam:ListRoles",
            "iam:PassRole",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "sagemaker:DescribeEndpoint",
            "sagemaker:ListEndpoints"
        ]
    },
    "AWSResourceAccessManagerResourceShareParticipantAccess": {
        "permissions": [
            "ram:AcceptResourceShareInvitation",
            "ram:GetResourcePolicies",
            "ram:GetResourceShareInvitations",
            "ram:GetResourceShares",
            "ram:ListPendingInvitationResources",
            "ram:ListPrincipals",
            "ram:ListResources",
            "ram:RejectResourceShareInvitation"
        ]
    },
    "AWSResourceAccessManagerReadOnlyAccess": {
        "permissions": [
            "ram:Get*",
            "ram:List*"
        ]
    },
    "CloudFormationStackSetsOrgMemberServiceRolePolicy": {
        "permissions": [
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "iam:GetRole"
        ]
    },
    "CloudFormationStackSetsOrgAdminServiceRolePolicy": {
        "permissions": [
            "organizations:Describe*",
            "organizations:List*",
            "sts:AssumeRole"
        ]
    },
    "Health_OrganizationsServiceRolePolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AWSImageBuilderReadOnlyAccess": {
        "permissions": [
            "iam:GetRole",
            "imagebuilder:Get*",
            "imagebuilder:List*"
        ]
    },
    "AWSImageBuilderFullAccess": {
        "permissions": [
            "ec2:DescribeImages",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeRegions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:PassRole",
            "imagebuilder:*",
            "license-manager:ListLicenseConfigurations",
            "license-manager:ListLicenseSpecificationsForResource",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:ListTopics",
            "sns:Publish"
        ]
    },
    "EC2FleetTimeShiftableServiceRolePolicy": {
        "permissions": [
            "ec2:CreateFleet",
            "ec2:CreateTags",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:PassRole"
        ]
    },
    "AmazonRekognitionCustomLabelsFullAccess": {
        "permissions": [
            "rekognition:CopyProjectVersion",
            "rekognition:CreateDataset",
            "rekognition:CreateProject",
            "rekognition:CreateProjectVersion",
            "rekognition:DeleteDataset",
            "rekognition:DeleteProject",
            "rekognition:DeleteProjectPolicy",
            "rekognition:DeleteProjectVersion",
            "rekognition:DescribeDataset",
            "rekognition:DescribeProjectVersions",
            "rekognition:DescribeProjects",
            "rekognition:DetectCustomLabels",
            "rekognition:DistributeDatasetEntries",
            "rekognition:ListDatasetEntries",
            "rekognition:ListDatasetLabels",
            "rekognition:ListProjectPolicies",
            "rekognition:ListTagsForResource",
            "rekognition:PutProjectPolicy",
            "rekognition:StartProjectVersion",
            "rekognition:StopProjectVersion",
            "rekognition:TagResource",
            "rekognition:UntagResource",
            "rekognition:UpdateDatasetEntries",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectTagging",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AmazonWorkDocsReadOnlyAccess": {
        "permissions": [
            "ds:DescribeDirectories",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "workdocs:Describe*"
        ]
    },
    "AmazonElasticFileSystemClientReadWriteAccess": {
        "permissions": [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:ClientWrite",
            "elasticfilesystem:DescribeMountTargets"
        ]
    },
    "AmazonElasticFileSystemClientReadOnlyAccess": {
        "permissions": [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:DescribeMountTargets"
        ]
    },
    "AmazonElasticFileSystemClientFullAccess": {
        "permissions": [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:ClientRootAccess",
            "elasticfilesystem:ClientWrite",
            "elasticfilesystem:DescribeMountTargets"
        ]
    },
    "AWSQuickSightSageMakerPolicy": {
        "permissions": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "sagemaker:CreateTransformJob",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeTransformJob",
            "sagemaker:ListModels",
            "sagemaker:StopTransformJob"
        ]
    },
    "AmazonManagedBlockchainServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AWSAppSyncServiceRolePolicy": {
        "permissions": [
            "xray:GetSamplingRules",
            "xray:GetSamplingStatisticSummaries",
            "xray:GetSamplingTargets",
            "xray:PutTelemetryRecords",
            "xray:PutTraceSegments"
        ]
    },
    "AmazonChimeSDK": {
        "permissions": [
            "chime:BatchCreateAttendee",
            "chime:CreateAttendee",
            "chime:CreateMediaCapturePipeline",
            "chime:CreateMediaConcatenationPipeline",
            "chime:CreateMediaLiveConnectorPipeline",
            "chime:CreateMeeting",
            "chime:CreateMeetingWithAttendees",
            "chime:DeleteAttendee",
            "chime:DeleteMediaCapturePipeline",
            "chime:DeleteMediaPipeline",
            "chime:DeleteMeeting",
            "chime:GetAttendee",
            "chime:GetMediaCapturePipeline",
            "chime:GetMediaPipeline",
            "chime:GetMeeting",
            "chime:ListAttendeeTags",
            "chime:ListAttendees",
            "chime:ListMediaCapturePipelines",
            "chime:ListMediaPipelines",
            "chime:ListMeetingTags",
            "chime:ListMeetings",
            "chime:ListTagsForResource",
            "chime:StartMeetingTranscription",
            "chime:StopMeetingTranscription",
            "chime:TagAttendee",
            "chime:TagMeeting",
            "chime:TagResource",
            "chime:UntagAttendee",
            "chime:UntagMeeting",
            "chime:UntagResource"
        ]
    },
    "AWSIoTDeviceTesterForFreeRTOSFullAccess": {
        "permissions": [
            "acm:GetCertificate",
            "acm:ListCertificates",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "execute-api:Invoke",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "iot-device-tester:CheckVersion",
            "iot-device-tester:DownloadTestSuite",
            "iot-device-tester:LatestIdt",
            "iot-device-tester:SendMetrics",
            "iot-device-tester:SupportedVersion",
            "iot:AttachPolicy",
            "iot:AttachThingPrincipal",
            "iot:CancelJobExecution",
            "iot:CreateCertificateFromCsr",
            "iot:CreateKeysAndCertificate",
            "iot:CreateOTAUpdate",
            "iot:CreatePolicy",
            "iot:CreateStream",
            "iot:CreateThing",
            "iot:DeleteCACertificate",
            "iot:DeleteCertificate",
            "iot:DeleteOTAUpdate",
            "iot:DeletePolicy",
            "iot:DeleteStream",
            "iot:DeleteThing",
            "iot:DescribeEndpoint",
            "iot:DescribeJobExecution",
            "iot:DetachPolicy",
            "iot:DetachThingPrincipal",
            "iot:GetOTAUpdate",
            "iot:GetRegistrationCode",
            "iot:RegisterCACertificate",
            "iot:RegisterCertificate",
            "iot:UpdateCACertificate",
            "iot:UpdateCertificate",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutBucketVersioning",
            "s3:PutObject",
            "signer:CancelSigningProfile",
            "signer:DescribeSigningJob",
            "signer:ListSigningJobs",
            "signer:ListSigningPlatforms",
            "signer:PutSigningProfile",
            "signer:StartSigningJob",
            "ssm:DescribeParameters",
            "ssm:GetParameters"
        ]
    },
    "AWSIoTDeviceTesterForGreengrassFullAccess": {
        "permissions": [
            "execute-api:Invoke",
            "greengrass:*",
            "iam:ListAttachedRolePolicies",
            "iam:PassRole",
            "iot-device-tester:CheckVersion",
            "iot-device-tester:DownloadTestSuite",
            "iot-device-tester:LatestIdt",
            "iot-device-tester:SendMetrics",
            "iot-device-tester:SupportedVersion",
            "iot:AttachPolicy",
            "iot:AttachThingPrincipal",
            "iot:CreateCertificateFromCsr",
            "iot:CreateJob",
            "iot:CreateKeysAndCertificate",
            "iot:CreatePolicy",
            "iot:CreateThing",
            "iot:DeleteCertificate",
            "iot:DeleteJob",
            "iot:DeletePolicy",
            "iot:DeleteThing",
            "iot:DescribeEndpoint",
            "iot:DescribeJob",
            "iot:DescribeJobExecution",
            "iot:DetachPolicy",
            "iot:DetachThingPrincipal",
            "iot:GetThingShadow",
            "iot:ListThings",
            "iot:UpdateCertificate",
            "iot:UpdateThingShadow",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:ListBucketVersions",
            "s3:PutObject"
        ]
    },
    "AmazonEKSServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:GetCoipPoolUsage",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:TerminateInstances",
            "eks:AssociateAccessPolicy",
            "eks:CreateAccessEntry",
            "eks:DeleteAccessEntry",
            "eks:DescribeAccessEntry",
            "eks:DescribeCluster",
            "eks:DisassociateAccessPolicy",
            "eks:ListAssociatedAccessPolicies",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteRule",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeListenerAttributes",
            "elasticloadbalancing:DescribeListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeSSLPolicies",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DescribeTrustStores",
            "events:PutRule",
            "events:PutTargets",
            "iam:CreateInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:GetInstanceProfile",
            "iam:ListAttachedRolePolicies",
            "iam:RemoveRoleFromInstanceProfile",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "pricing:GetProducts",
            "route53:AssociateVPCWithHostedZone",
            "shield:DescribeProtection",
            "shield:GetSubscriptionState",
            "tag:GetResources"
        ]
    },
    "ComputeOptimizerReadOnlyAccess": {
        "permissions": [
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "cloudwatch:GetMetricData",
            "compute-optimizer:DescribeRecommendationExportJobs",
            "compute-optimizer:GetAutoScalingGroupRecommendations",
            "compute-optimizer:GetEBSVolumeRecommendations",
            "compute-optimizer:GetEC2InstanceRecommendations",
            "compute-optimizer:GetEC2RecommendationProjectedMetrics",
            "compute-optimizer:GetECSServiceRecommendationProjectedMetrics",
            "compute-optimizer:GetECSServiceRecommendations",
            "compute-optimizer:GetEffectiveRecommendationPreferences",
            "compute-optimizer:GetEnrollmentStatus",
            "compute-optimizer:GetEnrollmentStatusesForOrganization",
            "compute-optimizer:GetIdleRecommendations",
            "compute-optimizer:GetLambdaFunctionRecommendations",
            "compute-optimizer:GetLicenseRecommendations",
            "compute-optimizer:GetRDSDatabaseRecommendationProjectedMetrics",
            "compute-optimizer:GetRDSDatabaseRecommendations",
            "compute-optimizer:GetRecommendationPreferences",
            "compute-optimizer:GetRecommendationSummaries",
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "ecs:ListClusters",
            "ecs:ListServices",
            "lambda:ListFunctions",
            "lambda:ListProvisionedConcurrencyConfigs",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances"
        ]
    },
    "AWSApplicationAutoscalingCassandraTablePolicy": {
        "permissions": [
            "cassandra:Alter",
            "cassandra:Select",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm"
        ]
    },
    "ElementalAppliancesSoftwareReadOnlyAccess": {
        "permissions": [
            "elemental-appliances-software:Get*",
            "elemental-appliances-software:List*"
        ]
    },
    "GameLiftGameServerGroupPolicy": {
        "permissions": [
            "autoscaling:CompleteLifecycleAction",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DetachInstances",
            "autoscaling:EnterStandby",
            "autoscaling:ResumeProcesses",
            "autoscaling:SetInstanceProtection",
            "autoscaling:SuspendProcesses",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudwatch:PutMetricData",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSubnets",
            "ec2:TerminateInstances",
            "sns:Publish"
        ]
    },
    "AWSWAFConsoleFullAccess": {
        "permissions": [
            "apigateway:GET",
            "apigateway:SetWebACL",
            "apprunner:AssociateWebAcl",
            "apprunner:DescribeWebAclForService",
            "apprunner:DisassociateWebAcl",
            "apprunner:ListAssociatedServicesForWebAcl",
            "apprunner:ListServices",
            "appsync:ListGraphqlApis",
            "appsync:SetWebACL",
            "cloudfront:ListDistributions",
            "cloudfront:ListDistributionsByWebACLId",
            "cloudfront:UpdateDistribution",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cognito-idp:AssociateWebACL",
            "cognito-idp:DisassociateWebACL",
            "cognito-idp:GetWebACLForResource",
            "cognito-idp:ListResourcesForWebACL",
            "cognito-idp:ListUserPools",
            "ec2:AssociateVerifiedAccessInstanceWebAcl",
            "ec2:DescribeRegions",
            "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
            "ec2:DescribeVerifiedAccessInstances",
            "ec2:DisassociateVerifiedAccessInstanceWebAcl",
            "ec2:GetVerifiedAccessInstanceWebAcl",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:SetWebACL",
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:PutResourcePolicy",
            "s3:GetBucketPolicy",
            "s3:ListAllMyBuckets",
            "s3:PutBucketPolicy",
            "waf-regional:*",
            "waf:*",
            "wafv2:*"
        ]
    },
    "AWSWAFConsoleReadOnlyAccess": {
        "permissions": [
            "apigateway:GET",
            "apprunner:DescribeWebAclForService",
            "apprunner:ListAssociatedServicesForWebAcl",
            "apprunner:ListServices",
            "appsync:ListGraphqlApis",
            "cloudfront:ListDistributions",
            "cloudfront:ListDistributionsByWebACLId",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cognito-idp:GetWebACLForResource",
            "cognito-idp:ListResourcesForWebACL",
            "cognito-idp:ListUserPools",
            "ec2:DescribeRegions",
            "ec2:DescribeVerifiedAccessInstanceWebAclAssociations",
            "ec2:DescribeVerifiedAccessInstances",
            "ec2:GetVerifiedAccessInstanceWebAcl",
            "elasticloadbalancing:DescribeLoadBalancers",
            "waf-regional:Get*",
            "waf-regional:List*",
            "waf:Get*",
            "waf:List*",
            "wafv2:CheckCapacity",
            "wafv2:Describe*",
            "wafv2:Get*",
            "wafv2:List*"
        ]
    },
    "AmazonWorkDocsFullAccess": {
        "permissions": [
            "ds:DescribeDirectories",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "workdocs:*"
        ]
    },
    "AmazonAugmentedAIIntegratedAPIAccess": {
        "permissions": [
            "iam:PassRole",
            "rekognition:DetectModerationLabels",
            "sagemaker:*FlowDefinition",
            "sagemaker:*FlowDefinitions",
            "sagemaker:*HumanLoop",
            "sagemaker:*HumanLoops",
            "sagemaker:*HumanTaskUi",
            "sagemaker:*HumanTaskUis",
            "textract:AnalyzeDocument"
        ]
    },
    "AmazonKeyspacesFullAccess": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "cassandra:*",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricAlarm",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcEndpoints",
            "iam:CreateServiceLinkedRole",
            "kms:DescribeKey",
            "kms:ListAliases"
        ]
    },
    "AmazonKeyspacesReadOnlyAccess": {
        "permissions": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "cassandra:Select",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "kms:DescribeKey",
            "kms:ListAliases"
        ]
    },
    "AmazonDetectiveFullAccess": {
        "permissions": [
            "detective:*",
            "guardduty:ArchiveFindings",
            "guardduty:GetFindings",
            "guardduty:ListDetectors",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "securityHub:GetFindings"
        ]
    },
    "AWSPurchaseOrdersServiceRolePolicy": {
        "permissions": [
            "account:GetAccountInformation",
            "account:GetContactInformation",
            "aws-portal:*Billing",
            "consolidatedbilling:GetAccountBillingRole",
            "invoicing:GetInvoicePDF",
            "invoicing:ListInvoiceUnits",
            "payments:GetPaymentInstrument",
            "payments:ListPaymentPreferences",
            "purchase-orders:AddPurchaseOrder",
            "purchase-orders:DeletePurchaseOrder",
            "purchase-orders:GetPurchaseOrder",
            "purchase-orders:ListPurchaseOrderInvoices",
            "purchase-orders:ListPurchaseOrders",
            "purchase-orders:ListTagsForResource",
            "purchase-orders:ModifyPurchaseOrders",
            "purchase-orders:TagResource",
            "purchase-orders:UntagResource",
            "purchase-orders:UpdatePurchaseOrder",
            "purchase-orders:UpdatePurchaseOrderStatus",
            "purchase-orders:ViewPurchaseOrders",
            "tax:ListTaxRegistrations"
        ]
    },
    "ServerMigrationServiceConsoleFullAccess": {
        "permissions": [
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "iam:GetInstanceProfile",
            "iam:ListRoles",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "sms:*"
        ]
    },
    "AWSBackupServiceLinkedRolePolicyForBackupTest": {
        "permissions": [
            "elasticfilesystem:Backup",
            "elasticfilesystem:DescribeTags",
            "tag:GetResources"
        ]
    },
    "AmazonSSMPatchAssociation": {
        "permissions": [
            "ssm:DescribeEffectivePatchesForPatchBaseline",
            "ssm:DescribePatchBaselines",
            "ssm:GetPatchBaseline",
            "tag:GetResources"
        ]
    },
    "AWSCloud9SSMInstanceProfile": {
        "permissions": [
            "ssm:UpdateInstanceInformation",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "AWSCodeDeployRoleForCloudFormation": {
        "permissions": [
            "lambda:InvokeFunction"
        ]
    },
    "AWSIoTSiteWiseMonitorPortalAccess": {
        "permissions": [
            "iotsitewise:BatchAssociateProjectAssets",
            "iotsitewise:BatchDisassociateProjectAssets",
            "iotsitewise:CreateAccessPolicy",
            "iotsitewise:CreateDashboard",
            "iotsitewise:CreateProject",
            "iotsitewise:DeleteAccessPolicy",
            "iotsitewise:DeleteDashboard",
            "iotsitewise:DeleteProject",
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetProperty",
            "iotsitewise:DescribeDashboard",
            "iotsitewise:DescribeProject",
            "iotsitewise:GetAssetPropertyAggregates",
            "iotsitewise:GetAssetPropertyValue",
            "iotsitewise:GetAssetPropertyValueHistory",
            "iotsitewise:ListAccessPolicies",
            "iotsitewise:ListAssets",
            "iotsitewise:ListAssociatedAssets",
            "iotsitewise:ListDashboards",
            "iotsitewise:ListProjectAssets",
            "iotsitewise:ListProjects",
            "iotsitewise:UpdateAccessPolicy",
            "iotsitewise:UpdateDashboard",
            "iotsitewise:UpdateProject",
            "sso-directory:DescribeUsers"
        ]
    },
    "AWSThinkboxAWSPortalGatewayPolicy": {
        "permissions": [
            "dynamodb:Scan",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AWSThinkboxAWSPortalWorkerPolicy": {
        "permissions": [
            "ec2:DescribeTags",
            "ec2:TerminateInstances",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "sqs:GetQueueUrl",
            "sqs:SendMessage"
        ]
    },
    "AWSThinkboxAssetServerPolicy": {
        "permissions": [
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AWSThinkboxDeadlineResourceTrackerAccessPolicy": {
        "permissions": [
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteItem",
            "dynamodb:DescribeStream",
            "dynamodb:DescribeTable",
            "dynamodb:GetItem",
            "dynamodb:GetRecords",
            "dynamodb:GetShardIterator",
            "dynamodb:ListStreams",
            "dynamodb:PutItem",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "dynamodb:UpdateTable",
            "ec2:CancelSpotFleetRequests",
            "ec2:DeleteFleets",
            "ec2:DescribeFleetInstances",
            "ec2:DescribeFleets",
            "ec2:DescribeInstances",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequests",
            "ec2:RebootInstances",
            "ec2:TerminateInstances",
            "events:PutEvents",
            "lambda:InvokeFunction",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:ReceiveMessage"
        ]
    },
    "AWSThinkboxDeadlineResourceTrackerAdminPolicy": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateTerminationProtection",
            "dynamodb:BatchWriteItem",
            "dynamodb:CreateTable",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "dynamodb:ListTagsOfResource",
            "dynamodb:Scan",
            "dynamodb:TagResource",
            "dynamodb:UntagResource",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:GetUser",
            "iam:ListAttachedRolePolicies",
            "iam:PassRole",
            "lambda:AddPermission",
            "lambda:CreateEventSourceMapping",
            "lambda:CreateFunction",
            "lambda:DeleteEventSourceMapping",
            "lambda:DeleteFunction",
            "lambda:DeleteFunctionConcurrency",
            "lambda:GetEventSourceMapping",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListTags",
            "lambda:PutFunctionConcurrency",
            "lambda:RemovePermission",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "s3:GetObject",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:ListQueueTags",
            "sqs:TagQueue",
            "sqs:UntagQueue"
        ]
    },
    "AWSThinkboxDeadlineSpotEventPluginWorkerPolicy": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeTags",
            "ec2:TerminateInstances",
            "sqs:GetQueueUrl",
            "sqs:SendMessage"
        ]
    },
    "AWSThinkboxDeadlineSpotEventPluginAdminPolicy": {
        "permissions": [
            "ec2:CancelSpotFleetRequests",
            "ec2:CreateTags",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequests",
            "ec2:ModifySpotFleetRequest",
            "ec2:RequestSpotFleet",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:CreateServiceLinkedRole",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:GetUser",
            "iam:PassRole"
        ]
    },
    "AWSThinkboxAWSPortalAdminPolicy": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:EstimateTemplateCost",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateTerminationProtection",
            "dynamodb:Scan",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AssociateRouteTable",
            "ec2:AttachInternetGateway",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CancelSpotFleetRequests",
            "ec2:CreateFleet",
            "ec2:CreateInternetGateway",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateNatGateway",
            "ec2:CreatePlacementGroup",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteFleets",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteNatGateway",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVpc",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeFleetHistory",
            "ec2:DescribeFleetInstances",
            "ec2:DescribeFleets",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNatGateways",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequestHistory",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DetachInternetGateway",
            "ec2:DisassociateAddress",
            "ec2:DisassociateRouteTable",
            "ec2:GetConsoleOutput",
            "ec2:ImportKeyPair",
            "ec2:ModifyFleet",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifySpotFleetRequest",
            "ec2:ModifyVpcAttribute",
            "ec2:ReleaseAddress",
            "ec2:RequestSpotFleet",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:CreateServiceLinkedRole",
            "iam:GetInstanceProfile",
            "iam:GetPolicy",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetUser",
            "iam:ListEntitiesForPolicy",
            "iam:ListPolicyVersions",
            "iam:PassRole",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "logs:CreateLogGroup",
            "logs:DeleteRetentionPolicy",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:PutRetentionPolicy",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketVersioning",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutBucketAcl",
            "s3:PutBucketCORS",
            "s3:PutBucketLogging",
            "s3:PutBucketOwnershipControls",
            "s3:PutBucketPolicy",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UpdateSecret"
        ]
    },
    "AWSBackupServiceLinkedRolePolicyForBackup": {
        "permissions": [
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup:TagResource",
            "cloudformation:ListStacks",
            "dynamodb:DeleteBackup",
            "dynamodb:DescribeTable",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:CopyImage",
            "ec2:CopySnapshot",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DeregisterImage",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshotTierStatus",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:ModifySnapshotTier",
            "elasticfilesystem:Backup",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeTags",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "fsx:CopyBackup",
            "fsx:DeleteBackup",
            "fsx:DescribeBackups",
            "fsx:DescribeFileSystems",
            "fsx:DescribeVolumes",
            "fsx:TagResource",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:GenerateDataKeyWithoutPlaintext",
            "kms:ListGrants",
            "kms:ReEncryptFrom",
            "rds:AddTagsToResource",
            "rds:CopyDBClusterSnapshot",
            "rds:CopyDBSnapshot",
            "rds:DeleteDBClusterSnapshot",
            "rds:DeleteDBInstanceAutomatedBackup",
            "rds:DeleteDBSnapshot",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSnapshots",
            "redshift:DeleteClusterSnapshot",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusters",
            "redshift:DescribeTags",
            "s3:GetBucketTagging",
            "s3:ListAllMyBuckets",
            "ssm-sap:GetOperation",
            "ssm-sap:UpdateHANABackupSettings",
            "storagegateway:DescribeCachediSCSIVolumes",
            "storagegateway:DescribeStorediSCSIVolumes",
            "storagegateway:ListVolumes",
            "tag:GetResources",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:GetAwsBackupStatus",
            "timestream:GetAwsRestoreStatus",
            "timestream:ListDatabases",
            "timestream:ListTables",
            "timestream:ListTagsForResource"
        ]
    },
    "AmazonAppFlowReadOnlyAccess": {
        "permissions": [
            "appflow:DescribeConnector",
            "appflow:DescribeConnectorFields",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeConnectors",
            "appflow:DescribeFlowExecution",
            "appflow:DescribeFlows",
            "appflow:ListConnectorFields",
            "appflow:ListConnectors",
            "appflow:ListTagsForResource"
        ]
    },
    "AmazonAppFlowFullAccess": {
        "permissions": [
            "appflow:*",
            "iam:ListRoles",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListGrants",
            "kms:ListKeys",
            "lambda:ListFunctions",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "secretsmanager:CreateSecret",
            "secretsmanager:PutResourcePolicy"
        ]
    },
    "AlexaForBusinessLifesizeDelegatedAccessPolicy": {
        "permissions": [
            "a4b:AssociateContactWithAddressBook",
            "a4b:AssociateDeviceWithRoom",
            "a4b:CreateAddressBook",
            "a4b:CreateConferenceProvider",
            "a4b:CreateContact",
            "a4b:CreateRoom",
            "a4b:DeleteAddressBook",
            "a4b:DeleteContact",
            "a4b:DeleteDevice",
            "a4b:DeleteRoom",
            "a4b:DisassociateContactFromAddressBook",
            "a4b:DisassociateDeviceFromRoom",
            "a4b:GetAddressBook",
            "a4b:GetContact",
            "a4b:GetDevice",
            "a4b:GetRoom",
            "a4b:ListConferenceProviders",
            "a4b:PutConferencePreference",
            "a4b:RegisterAVSDevice",
            "a4b:SearchDevices",
            "a4b:SearchProfiles",
            "a4b:SearchRooms",
            "a4b:UpdateContact",
            "a4b:UpdateDevice",
            "a4b:UpdateProfile",
            "kms:DescribeKey"
        ]
    },
    "ElementalActivationsFullAccess": {
        "permissions": [
            "elemental-activations:*"
        ]
    },
    "AWSElasticBeanstalkRoleWorkerTier": {
        "permissions": [
            "dynamodb:CreateTable",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "dynamodb:TagResource",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:TagQueue"
        ]
    },
    "AWSElasticBeanstalkRoleSNS": {
        "permissions": [
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:GetTopicAttributes",
            "sns:Publish",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe"
        ]
    },
    "AWSElasticBeanstalkRoleRDS": {
        "permissions": [
            "rds:AuthorizeDBSecurityGroupIngress",
            "rds:CreateDBInstance",
            "rds:CreateDBSecurityGroup",
            "rds:DeleteDBInstance",
            "rds:DeleteDBSecurityGroup",
            "rds:ModifyDBInstance"
        ]
    },
    "AWSElasticBeanstalkRoleECS": {
        "permissions": [
            "ecs:CreateCluster",
            "ecs:DeRegisterTaskDefinition",
            "ecs:DeleteCluster",
            "ecs:RegisterTaskDefinition",
            "ecs:TagResource"
        ]
    },
    "AWSElasticBeanstalkRoleCore": {
        "permissions": [
            "acm:Describe*",
            "acm:List*",
            "autoscaling:*AutoScalingGroup",
            "autoscaling:*LaunchConfiguration",
            "autoscaling:*LoadBalancer*",
            "autoscaling:*Tags",
            "autoscaling:AttachInstances",
            "autoscaling:DeletePolicy",
            "autoscaling:DeleteScheduledAction",
            "autoscaling:Describe*",
            "autoscaling:DetachInstances",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:ResumeProcesses",
            "autoscaling:SuspendProcesses",
            "cloudformation:CancelUpdateStack",
            "cloudformation:ContinueUpdateRollback",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:Describe*",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackResources",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:PutMetricAlarm",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroup*",
            "ec2:CreateLaunchTemplate*",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate*",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroup*",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ecs:Describe*",
            "ecs:List*",
            "elasticloadbalancing:*Tags",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:Create*",
            "elasticloadbalancing:DeRegisterTargets",
            "elasticloadbalancing:Delete*",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:Modify*",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
            "elasticloadbalancing:SetRulePriorities",
            "iam:CreateServiceLinkedRole",
            "iam:List*",
            "iam:PassRole",
            "logs:Describe*",
            "rds:Describe*",
            "s3:Delete*",
            "s3:Get*",
            "s3:GetBucket*",
            "s3:ListBucket",
            "s3:Put*",
            "s3:PutBucketPolicy",
            "sns:List*"
        ]
    },
    "AWSElasticBeanstalkRoleCWL": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:PutRetentionPolicy"
        ]
    },
    "AWSCodeArtifactAdminAccess": {
        "permissions": [
            "codeartifact:*",
            "sts:GetServiceBearerToken"
        ]
    },
    "AWSBackupOrganizationAdminAccess": {
        "permissions": [
            "organizations:AttachPolicy",
            "organizations:CreatePolicy",
            "organizations:DeletePolicy",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeEffectivePolicy",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:DetachPolicy",
            "organizations:DisableAWSServiceAccess",
            "organizations:DisablePolicyType",
            "organizations:EnableAWSServiceAccess",
            "organizations:EnablePolicyType",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListPolicies",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListTargetsForPolicy",
            "organizations:RegisterDelegatedAdministrator",
            "organizations:UpdatePolicy"
        ]
    },
    "AmazonMachineLearningRoleforRedshiftDataSourceV3": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:RevokeSecurityGroupIngress",
            "redshift:AuthorizeClusterSecurityGroupIngress",
            "redshift:CreateClusterSecurityGroup",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusters",
            "redshift:ModifyCluster",
            "redshift:RevokeClusterSecurityGroupIngress",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:PutBucketPolicy",
            "s3:PutObject"
        ]
    },
    "AmazonHoneycodeTeamAssociationReadOnlyAccess": {
        "permissions": [
            "honeycode:ListTeamAssociations"
        ]
    },
    "AmazonHoneycodeWorkbookReadOnlyAccess": {
        "permissions": [
            "honeycode:DescribeTableDataImportJob",
            "honeycode:GetScreenData",
            "honeycode:ListTableColumns",
            "honeycode:ListTableRows",
            "honeycode:ListTables",
            "honeycode:QueryTableRows"
        ]
    },
    "AmazonHoneycodeFullAccess": {
        "permissions": [
            "honeycode:*"
        ]
    },
    "AmazonHoneycodeReadOnlyAccess": {
        "permissions": [
            "honeycode:Describe*",
            "honeycode:Get*",
            "honeycode:List*",
            "honeycode:Query*"
        ]
    },
    "AmazonHoneycodeTeamAssociationFullAccess": {
        "permissions": [
            "honeycode:ApproveTeamAssociation",
            "honeycode:ListTeamAssociations",
            "honeycode:RejectTeamAssociation"
        ]
    },
    "AmazonHoneycodeWorkbookFullAccess": {
        "permissions": [
            "honeycode:BatchCreateTableRows",
            "honeycode:BatchDeleteTableRows",
            "honeycode:BatchUpdateTableRows",
            "honeycode:BatchUpsertTableRows",
            "honeycode:DescribeTableDataImportJob",
            "honeycode:GetScreenData",
            "honeycode:InvokeScreenAutomation",
            "honeycode:ListTableColumns",
            "honeycode:ListTableRows",
            "honeycode:ListTables",
            "honeycode:QueryTableRows",
            "honeycode:StartTableDataImportJob"
        ]
    },
    "CertificateManagerServiceRolePolicy": {
        "permissions": [
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate"
        ]
    },
    "AWSCodeArtifactReadOnlyAccess": {
        "permissions": [
            "codeartifact:Describe*",
            "codeartifact:Get*",
            "codeartifact:List*",
            "codeartifact:ReadFromRepository",
            "sts:GetServiceBearerToken"
        ]
    },
    "AWSServiceRoleForCodeGuru-Profiler": {
        "permissions": [
            "sns:Publish"
        ]
    },
    "AmazonCognitoIdpServiceRolePolicy": {
        "permissions": [
            "cognito-idp:Describe*"
        ]
    },
    "AWSElementalMediaLiveReadOnly": {
        "permissions": [
            "medialive:Describe*",
            "medialive:Get*",
            "medialive:List*"
        ]
    },
    "AWSElementalMediaLiveFullAccess": {
        "permissions": [
            "medialive:*"
        ]
    },
    "AmazonSageMakerGroundTruthExecution": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeVpcEndpoints",
            "lambda:InvokeFunction",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:AbortMultipartUpload",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "sns:Publish",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sqs:CreateQueue",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "sqs:SetQueueAttributes"
        ]
    },
    "ServerMigrationServiceRoleForInstanceValidation": {
        "permissions": [
            "s3:GetObject",
            "sms:NotifyAppValidationOutput"
        ]
    },
    "AWSCodePipeline_ReadOnlyAccess": {
        "permissions": [
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineExecution",
            "codepipeline:GetPipelineState",
            "codepipeline:ListActionExecutions",
            "codepipeline:ListActionTypes",
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListPipelines",
            "codepipeline:ListTagsForResource",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTargets",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AWSCodePipeline_FullAccess": {
        "permissions": [
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:ListMicrosoftTeamsChannelConfigurations",
            "cloudformation:DescribeStacks",
            "cloudformation:ListChangeSets",
            "cloudformation:ListStacks",
            "cloudtrail:CreateTrail",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:PutEventSelectors",
            "cloudtrail:StartLogging",
            "codebuild:BatchGetProjects",
            "codebuild:CreateProject",
            "codebuild:ListCuratedEnvironmentImages",
            "codebuild:ListProjects",
            "codecommit:GetReferences",
            "codecommit:ListBranches",
            "codecommit:ListRepositories",
            "codedeploy:BatchGetDeploymentGroups",
            "codedeploy:ListApplications",
            "codedeploy:ListDeploymentGroups",
            "codepipeline:*",
            "codestar-notifications:CreateNotificationRule",
            "codestar-notifications:DeleteNotificationRule",
            "codestar-notifications:DescribeNotificationRule",
            "codestar-notifications:ListEventTypes",
            "codestar-notifications:ListNotificationRules",
            "codestar-notifications:ListTagsforResource",
            "codestar-notifications:ListTargets",
            "codestar-notifications:Subscribe",
            "codestar-notifications:Unsubscribe",
            "codestar-notifications:UpdateNotificationRule",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "ecs:ListClusters",
            "ecs:ListServices",
            "elasticbeanstalk:DescribeApplications",
            "elasticbeanstalk:DescribeEnvironments",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "lambda:ListFunctions",
            "opsworks:DescribeApps",
            "opsworks:DescribeLayers",
            "opsworks:DescribeStacks",
            "s3:CreateBucket",
            "s3:GetBucketPolicy",
            "s3:GetBucketVersioning",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "sns:CreateTopic",
            "sns:ListTopics",
            "sns:SetTopicAttributes",
            "states:ListStateMachines"
        ]
    },
    "AmazonBraketServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AWSLakeFormationCrossAccountManager": {
        "permissions": [
            "glue:DeleteResourcePolicy",
            "glue:PutResourcePolicy",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccountsForParent",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots",
            "ram:AssociateResourceShare",
            "ram:AssociateResourceSharePermission",
            "ram:CreateResourceShare",
            "ram:DeleteResourceShare",
            "ram:DisassociateResourceShare",
            "ram:Get*",
            "ram:GetResourceShares",
            "ram:List*",
            "ram:UpdateResourceShare"
        ]
    },
    "AmazonBraketFullAccess": {
        "permissions": [
            "braket:*",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricData",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:Describe*",
            "logs:FilterLogEvents",
            "logs:Get*",
            "logs:GetQueryResults",
            "logs:List*",
            "logs:PutLogEvents",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "s3:CreateBucket",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutObject",
            "sagemaker:AddTags",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:DeleteTags",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListTags",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StopNotebookInstance",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:UpdateNotebookInstanceLifecycleConfig",
            "servicequotas:GetServiceQuota"
        ]
    },
    "AWSLambdaMSKExecutionRole": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kafka:DescribeCluster",
            "kafka:DescribeClusterV2",
            "kafka:GetBootstrapBrokers",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSCompromisedKeyQuarantine": {
        "permissions": [
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "iam:AttachGroupPolicy",
            "iam:AttachRolePolicy",
            "iam:AttachUserPolicy",
            "iam:ChangePassword",
            "iam:CreateAccessKey",
            "iam:CreateInstanceProfile",
            "iam:CreateLoginProfile",
            "iam:CreateRole",
            "iam:CreateUser",
            "iam:DetachUserPolicy",
            "iam:PutUserPermissionsBoundary",
            "iam:PutUserPolicy",
            "iam:UpdateAccessKey",
            "iam:UpdateAccountPasswordPolicy",
            "iam:UpdateUser",
            "lambda:CreateFunction",
            "lightsail:Create*",
            "lightsail:Delete*",
            "lightsail:DownloadDefaultKeyPair",
            "lightsail:GetInstanceAccessDetails",
            "lightsail:Start*",
            "lightsail:Update*",
            "organizations:CreateAccount",
            "organizations:CreateOrganization",
            "organizations:InviteAccountToOrganization"
        ]
    },
    "AmazonEKSVPCResourceController": {
        "permissions": [
            "ec2:AssignPrivateIpAddresses",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignPrivateIpAddresses"
        ]
    },
    "Route53ResolverServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:UpdateLogDelivery",
            "s3:GetBucketPolicy"
        ]
    },
    "ClientVPNServiceConnectionsRolePolicy": {
        "permissions": [
            "lambda:InvokeFunction"
        ]
    },
    "AWSCodeDeployRoleForLambdaLimited": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "lambda:GetAlias",
            "lambda:GetProvisionedConcurrencyConfig",
            "lambda:InvokeFunction",
            "lambda:UpdateAlias",
            "s3:GetObject",
            "s3:GetObjectVersion"
        ]
    },
    "AmazonEC2RoleforAWSCodeDeployLimited": {
        "permissions": [
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket"
        ]
    },
    "AWSApplicationAutoscalingKafkaClusterPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "kafka:DescribeCluster",
            "kafka:DescribeClusterOperation",
            "kafka:UpdateBrokerStorage"
        ]
    },
    "AWSTransferReadOnlyAccess": {
        "permissions": [
            "transfer:DescribeServer",
            "transfer:DescribeUser",
            "transfer:ListServers",
            "transfer:ListTagsForResource",
            "transfer:ListUsers",
            "transfer:TestIdentityProvider"
        ]
    },
    "AWSBillingReadOnlyAccess": {
        "permissions": [
            "account:GetAccountInformation",
            "aws-portal:ViewBilling",
            "billing:GetBillingData",
            "billing:GetBillingDetails",
            "billing:GetBillingNotifications",
            "billing:GetBillingPreferences",
            "billing:GetContractInformation",
            "billing:GetCredits",
            "billing:GetIAMAccessPreference",
            "billing:GetSellerOfRecord",
            "billing:ListBillingViews",
            "budgets:DescribeBudgetAction",
            "budgets:DescribeBudgetActionHistories",
            "budgets:DescribeBudgetpermissionsForAccount",
            "budgets:DescribeBudgetpermissionsForBudget",
            "budgets:ViewBudget",
            "ce:DescribeCostCategoryDefinition",
            "ce:GetCostAndUsage",
            "ce:GetDimensionValues",
            "ce:GetTags",
            "ce:ListCostAllocationTagBackfillHistory",
            "ce:ListCostAllocationTags",
            "ce:ListCostCategoryDefinitions",
            "ce:ListTagsForResource",
            "consolidatedbilling:GetAccountBillingRole",
            "consolidatedbilling:ListLinkedAccounts",
            "cur:DescribeReportDefinitions",
            "cur:GetClassicReport",
            "cur:GetClassicReportPreferences",
            "cur:GetUsageReport",
            "freetier:GetFreeTierAlertPreference",
            "freetier:GetFreeTierUsage",
            "invoicing:BatchGetInvoiceProfile",
            "invoicing:GetInvoiceEmailDeliveryPreferences",
            "invoicing:GetInvoicePDF",
            "invoicing:GetInvoiceUnit",
            "invoicing:ListInvoiceSummaries",
            "invoicing:ListInvoiceUnits",
            "invoicing:ListTagsForResource",
            "payments:GetFinancingApplication",
            "payments:GetFinancingLine",
            "payments:GetFinancingLineWithdrawal",
            "payments:GetFinancingOption",
            "payments:GetPaymentInstrument",
            "payments:GetPaymentStatus",
            "payments:ListFinancingApplications",
            "payments:ListFinancingLineWithdrawals",
            "payments:ListFinancingLines",
            "payments:ListPaymentInstruments",
            "payments:ListPaymentPreferences",
            "payments:ListPaymentProgramOptions",
            "payments:ListPaymentProgramStatus",
            "payments:ListTagsForResource",
            "purchase-orders:GetPurchaseOrder",
            "purchase-orders:ListPurchaseOrderInvoices",
            "purchase-orders:ListPurchaseOrders",
            "purchase-orders:ListTagsForResource",
            "purchase-orders:ViewPurchaseOrders",
            "sustainability:GetCarbonFootprintSummary",
            "tax:GetTaxInheritance",
            "tax:GetTaxRegistrationDocument",
            "tax:ListTaxRegistrations"
        ]
    },
    "ElementalActivationsReadOnlyAccess": {
        "permissions": [
            "elemental-activations:Get*"
        ]
    },
    "ElementalActivationsGenerateLicenses": {
        "permissions": [
            "elemental-activations:CompleteFileUpload",
            "elemental-activations:GenerateLicenses",
            "elemental-activations:Get*",
            "elemental-activations:StartFileUpload"
        ]
    },
    "ElementalActivationsDownloadSoftwareAccess": {
        "permissions": [
            "elemental-activations:Download*",
            "elemental-activations:Get*"
        ]
    },
    "AWSQuickSightElasticsearchPolicy": {
        "permissions": [
            "es:DescribeDomain",
            "es:DescribeElasticsearchDomain",
            "es:ESHttpGet",
            "es:ESHttpPost",
            "es:ListDomainNames"
        ]
    },
    "AmazonRedshiftDataFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "redshift-data:BatchExecuteStatement",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListStatements",
            "redshift-data:ListTables",
            "redshift-serverless:GetCredentials",
            "redshift:CreateClusterUser",
            "redshift:GetClusterCredentials",
            "redshift:GetClusterCredentialsWithIAM",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AWSRoboMaker_FullAccess": {
        "permissions": [
            "ecr-public:DescribeImages",
            "ecr:BatchGetImage",
            "iam:CreateServiceLinkedRole",
            "robomaker:*",
            "s3:GetObject"
        ]
    },
    "AWS_ConfigRole": {
        "permissions": [
            "APS:DescribeRuleGroupsNamespace",
            "APS:DescribeWorkspace",
            "APS:ListWorkspaces",
            "access-analyzer:GetAnalyzer",
            "access-analyzer:GetArchiveRule",
            "access-analyzer:ListAnalyzers",
            "access-analyzer:ListArchiveRules",
            "access-analyzer:ListTagsForResource",
            "account:GetAlternateContact",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListTags",
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "acm:ListTagsForCertificate",
            "airflow:GetEnvironment",
            "airflow:ListEnvironments",
            "airflow:ListTagsForResource",
            "amplify:GetApp",
            "amplify:GetBranch",
            "amplify:ListApps",
            "amplify:ListBranches",
            "amplifyuibuilder:ExportThemes",
            "amplifyuibuilder:GetTheme",
            "amplifyuibuilder:ListThemes",
            "aoss:BatchGetCollection",
            "aoss:BatchGetLifecyclePolicy",
            "aoss:BatchGetVpcEndpoint",
            "aoss:GetAccessPolicy",
            "aoss:GetSecurityConfig",
            "aoss:GetSecurityPolicy",
            "aoss:ListAccessPolicies",
            "aoss:ListCollections",
            "aoss:ListLifecyclePolicies",
            "aoss:ListSecurityConfigs",
            "aoss:ListSecurityPolicies",
            "aoss:ListVpcEndpoints",
            "apigateway:GET",
            "app-integrations:GetApplication",
            "app-integrations:GetEventIntegration",
            "app-integrations:ListApplications",
            "app-integrations:ListEventIntegrationAssociations",
            "app-integrations:ListEventIntegrations",
            "app-integrations:ListTagsForResource",
            "appconfig:GetApplication",
            "appconfig:GetConfigurationProfile",
            "appconfig:GetDeployment",
            "appconfig:GetDeploymentStrategy",
            "appconfig:GetEnvironment",
            "appconfig:GetExtension",
            "appconfig:GetExtensionAssociation",
            "appconfig:GetHostedConfigurationVersion",
            "appconfig:ListApplications",
            "appconfig:ListConfigurationProfiles",
            "appconfig:ListDeploymentStrategies",
            "appconfig:ListDeployments",
            "appconfig:ListEnvironments",
            "appconfig:ListExtensionAssociations",
            "appconfig:ListExtensions",
            "appconfig:ListHostedConfigurationVersions",
            "appconfig:ListTagsForResource",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeFlow",
            "appflow:ListFlows",
            "appflow:ListTagsForResource",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "appmesh:DescribeGatewayRoute",
            "appmesh:DescribeMesh",
            "appmesh:DescribeRoute",
            "appmesh:DescribeVirtualGateway",
            "appmesh:DescribeVirtualNode",
            "appmesh:DescribeVirtualRouter",
            "appmesh:DescribeVirtualService",
            "appmesh:ListGatewayRoutes",
            "appmesh:ListMeshes",
            "appmesh:ListRoutes",
            "appmesh:ListTagsForResource",
            "appmesh:ListVirtualGateways",
            "appmesh:ListVirtualNodes",
            "appmesh:ListVirtualRouters",
            "appmesh:ListVirtualServices",
            "apprunner:DescribeService",
            "apprunner:DescribeVpcConnector",
            "apprunner:ListServices",
            "apprunner:ListTagsForResource",
            "apprunner:ListVpcConnectors",
            "appstream:DescribeAppBlockBuilders",
            "appstream:DescribeApplications",
            "appstream:DescribeDirectoryConfigs",
            "appstream:DescribeFleets",
            "appstream:DescribeStacks",
            "appstream:ListTagsForResource",
            "appsync:GetApiCache",
            "appsync:GetGraphqlApi",
            "appsync:ListGraphqlApis",
            "aps:DescribeAlertManagerDefinition",
            "aps:DescribeLoggingConfiguration",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListTagsForResource",
            "athena:GetDataCatalog",
            "athena:GetPreparedStatement",
            "athena:GetWorkGroup",
            "athena:ListDataCatalogs",
            "athena:ListPreparedStatements",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "auditmanager:GetAccountStatus",
            "auditmanager:GetAssessment",
            "auditmanager:ListAssessments",
            "autoscaling-plans:DescribeScalingPlanResources",
            "autoscaling-plans:DescribeScalingPlans",
            "autoscaling-plans:GetScalingPlanResourceForecastData",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScheduledpermissions",
            "autoscaling:DescribeTags",
            "autoscaling:DescribeWarmPool",
            "backup-gateway:ListTagsForResource",
            "backup-gateway:ListVirtualMachines",
            "backup:DescribeBackupVault",
            "backup:DescribeFramework",
            "backup:DescribeProtectedResource",
            "backup:DescribeRecoveryPoint",
            "backup:DescribeReportPlan",
            "backup:GetBackupPlan",
            "backup:GetBackupSelection",
            "backup:GetBackupVaultAccessPolicy",
            "backup:GetBackupVaultNotifications",
            "backup:GetRestoreTestingPlan",
            "backup:GetRestoreTestingSelection",
            "backup:ListBackupPlans",
            "backup:ListBackupSelections",
            "backup:ListBackupVaults",
            "backup:ListFrameworks",
            "backup:ListRecoveryPointsByBackupVault",
            "backup:ListReportPlans",
            "backup:ListRestoreTestingPlans",
            "backup:ListRestoreTestingSelections",
            "backup:ListTags",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobQueues",
            "batch:DescribeSchedulingPolicies",
            "batch:ListSchedulingPolicies",
            "batch:ListTagsForResource",
            "billingconductor:ListAccountAssociations",
            "billingconductor:ListBillingGroups",
            "billingconductor:ListCustomLineItems",
            "billingconductor:ListPricingPlans",
            "billingconductor:ListPricingRules",
            "billingconductor:ListPricingRulesAssociatedToPricingPlan",
            "billingconductor:ListTagsForResource",
            "budgets:DescribeBudgetAction",
            "budgets:DescribeBudgetpermissionsForAccount",
            "budgets:DescribeBudgetpermissionsForBudget",
            "budgets:ViewBudget",
            "cassandra:Select",
            "ce:GetAnomalyMonitors",
            "ce:GetAnomalySubscriptions",
            "cleanrooms-ml:GetTrainingDataset",
            "cleanrooms-ml:ListTrainingDatasets",
            "cloud9:DescribeEnvironmentMemberships",
            "cloud9:DescribeEnvironments",
            "cloud9:ListEnvironments",
            "cloud9:ListTagsForResource",
            "cloudTrail:GetChannel",
            "cloudTrail:ListChannels",
            "cloudformation:DescribeType",
            "cloudformation:GetResource",
            "cloudformation:ListResources",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudformation:ListTypes",
            "cloudfront:GetFunction",
            "cloudfront:GetOriginAccessControl",
            "cloudfront:GetResponseHeadersPolicy",
            "cloudfront:ListDistributions",
            "cloudfront:ListFunctions",
            "cloudfront:ListOriginAccessControls",
            "cloudfront:ListResponseHeadersPolicies",
            "cloudfront:ListTagsForResource",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetEventDataStore",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetInsightSelectors",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:ListEventDataStores",
            "cloudtrail:ListTags",
            "cloudtrail:ListTrails",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:DescribeAnomalyDetectors",
            "cloudwatch:GetDashboard",
            "cloudwatch:GetMetricStream",
            "cloudwatch:ListDashboards",
            "cloudwatch:ListMetricStreams",
            "cloudwatch:ListTagsForResource",
            "codeartifact:DescribeRepository",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:ListDomains",
            "codeartifact:ListPackageVersions",
            "codeartifact:ListPackages",
            "codeartifact:ListRepositories",
            "codeartifact:ListTagsForResource",
            "codebuild:BatchGetReportGroups",
            "codebuild:ListReportGroups",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codecommit:ListRepositories",
            "codecommit:ListTagsForResource",
            "codedeploy:GetDeploymentConfig",
            "codeguru-profiler:DescribeProfilingGroup",
            "codeguru-profiler:GetNotificationConfiguration",
            "codeguru-profiler:GetPolicy",
            "codeguru-profiler:ListProfilingGroups",
            "codeguru-reviewer:DescribeRepositoryAssociation",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelines",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:GetPrincipalTagAttributeMap",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:ListTagsForResource",
            "cognito-idp:DescribeIdentityProvider",
            "cognito-idp:DescribeResourceServer",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:DescribeUserPoolDomain",
            "cognito-idp:GetGroup",
            "cognito-idp:GetUserPoolMfaConfig",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListResourceServers",
            "cognito-idp:ListTagsForResource",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "comprehend:DescribeFlywheel",
            "comprehend:ListFlywheels",
            "comprehend:ListTagsForResource",
            "config:BatchGet*",
            "config:Describe*",
            "config:Get*",
            "config:List*",
            "config:Put*",
            "config:Select*",
            "connect:DescribeEvaluationForm",
            "connect:DescribeInstance",
            "connect:DescribeInstanceStorageConfig",
            "connect:DescribePhoneNumber",
            "connect:DescribePrompt",
            "connect:DescribeQueue",
            "connect:DescribeQuickConnect",
            "connect:DescribeRoutingProfile",
            "connect:DescribeRule",
            "connect:DescribeSecurityProfile",
            "connect:DescribeUser",
            "connect:GetTaskTemplate",
            "connect:ListApprovedOrigins",
            "connect:ListEvaluationForms",
            "connect:ListInstanceAttributes",
            "connect:ListInstanceStorageConfigs",
            "connect:ListInstances",
            "connect:ListIntegrationAssociations",
            "connect:ListPhoneNumbers",
            "connect:ListPhoneNumbersV2",
            "connect:ListPrompts",
            "connect:ListQueueQuickConnects",
            "connect:ListQueues",
            "connect:ListQuickConnects",
            "connect:ListRoutingProfileQueues",
            "connect:ListRoutingProfiles",
            "connect:ListRules",
            "connect:ListSecurityKeys",
            "connect:ListSecurityProfileApplications",
            "connect:ListSecurityProfilePermissions",
            "connect:ListSecurityProfiles",
            "connect:ListTagsForResource",
            "connect:ListTaskTemplates",
            "connect:ListUsers",
            "connect:SearchAvailablePhoneNumbers",
            "databrew:DescribeDataset",
            "databrew:DescribeJob",
            "databrew:DescribeProject",
            "databrew:DescribeRecipe",
            "databrew:DescribeRuleset",
            "databrew:DescribeSchedule",
            "databrew:ListDatasets",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "databrew:ListRecipeVersions",
            "databrew:ListRecipes",
            "databrew:ListRulesets",
            "databrew:ListSchedules",
            "datasync:DescribeAgent",
            "datasync:DescribeLocationEfs",
            "datasync:DescribeLocationFsxLustre",
            "datasync:DescribeLocationFsxWindows",
            "datasync:DescribeLocationHdfs",
            "datasync:DescribeLocationNfs",
            "datasync:DescribeLocationObjectStorage",
            "datasync:DescribeLocationS3",
            "datasync:DescribeLocationSmb",
            "datasync:DescribeTask",
            "datasync:ListAgents",
            "datasync:ListLocations",
            "datasync:ListTagsForResource",
            "datasync:ListTasks",
            "datazone:GetDomain",
            "datazone:ListDomains",
            "dax:DescribeClusters",
            "dax:DescribeParameterGroups",
            "dax:DescribeParameters",
            "dax:DescribeSubnetGroups",
            "dax:ListTags",
            "detective:ListGraphs",
            "detective:ListTagsForResource",
            "devicefarm:GetInstanceProfile",
            "devicefarm:GetNetworkProfile",
            "devicefarm:GetProject",
            "devicefarm:GetTestGridProject",
            "devicefarm:ListInstanceProfiles",
            "devicefarm:ListNetworkProfiles",
            "devicefarm:ListProjects",
            "devicefarm:ListTagsForResource",
            "devicefarm:ListTestGridProjects",
            "devops-guru:GetResourceCollection",
            "devops-guru:ListNotificationChannels",
            "dms:DescribeCertificates",
            "dms:DescribeEndpoints",
            "dms:DescribeEventSubscriptions",
            "dms:DescribeReplicationInstances",
            "dms:DescribeReplicationSubnetGroups",
            "dms:DescribeReplicationTaskAssessmentRuns",
            "dms:DescribeReplicationTasks",
            "dms:ListTagsForResource",
            "ds:DescribeDirectories",
            "ds:DescribeDomainControllers",
            "ds:DescribeEventTopics",
            "ds:ListLogSubscriptions",
            "ds:ListTagsForResource",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeGlobalTableSettings",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTableReplicaAutoScaling",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "ec2:Describe*",
            "ec2:DescribeClientVpnAuthorizationRules",
            "ec2:DescribeClientVpnEndpoints",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeFleets",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeTags",
            "ec2:DescribeTrafficMirrorFilters",
            "ec2:DescribeTrafficMirrorSessions",
            "ec2:DescribeTrafficMirrorTargets",
            "ec2:DescribeVolumeAttribute",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpoints",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetInstanceTypesFromInstanceRequirements",
            "ec2:GetIpamPoolAllocations",
            "ec2:GetIpamPoolCidrs",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ec2:GetSnapshotBlockPublicAccessState",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:ListTagsForResource",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:DescribePullThroughCacheRules",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRegistryPolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:ListTagsForResource",
            "ecs:DescribeCapacityProviders",
            "ecs:DescribeClusters",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTaskSets",
            "ecs:ListClusters",
            "ecs:ListServices",
            "ecs:ListTagsForResource",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "eks:DescribeAddon",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeIdentityProviderConfig",
            "eks:DescribeNodegroup",
            "eks:ListAddons",
            "eks:ListClusters",
            "eks:ListFargateProfiles",
            "eks:ListIdentityProviderConfigs",
            "eks:ListNodegroups",
            "eks:ListTagsForResource",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameterGroups",
            "elasticache:DescribeCacheParameters",
            "elasticache:DescribeCacheSecurityGroups",
            "elasticache:DescribeCacheSubnetGroups",
            "elasticache:DescribeGlobalReplicationGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeSnapshots",
            "elasticache:DescribeUserGroups",
            "elasticache:DescribeUsers",
            "elasticache:ListTagsForResource",
            "elasticbeanstalk:DescribeConfigurationSettings",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeBackupPolicy",
            "elasticfilesystem:DescribeFileSystemPolicy",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeTags",
            "elasticloadbalancing:DescribeListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:DescribeStudio",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:GetStudioSessionMapping",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListStudioSessionMappings",
            "elasticmapreduce:ListStudios",
            "emr-containers:DescribeVirtualCluster",
            "emr-containers:ListVirtualClusters",
            "emr-serverless:GetApplication",
            "emr-serverless:ListApplications",
            "es:DescribeDomain",
            "es:DescribeDomains",
            "es:DescribeElasticsearchDomain",
            "es:DescribeElasticsearchDomains",
            "es:GetCompatibleElasticsearchVersions",
            "es:GetCompatibleVersions",
            "es:ListDomainNames",
            "es:ListTags",
            "events:DescribeApiDestination",
            "events:DescribeArchive",
            "events:DescribeConnection",
            "events:DescribeEndpoint",
            "events:DescribeEventBus",
            "events:DescribeRule",
            "events:ListApiDestinations",
            "events:ListArchives",
            "events:ListConnections",
            "events:ListEndpoints",
            "events:ListEventBuses",
            "events:ListRules",
            "events:ListTagsForResource",
            "events:ListTargetsByRule",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:GetSegment",
            "evidently:ListLaunches",
            "evidently:ListProjects",
            "evidently:ListSegments",
            "evidently:ListTagsForResource",
            "finspace:GetEnvironment",
            "finspace:ListEnvironments",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "firehose:ListTagsForDeliveryStream",
            "fis:GetExperimentTemplate",
            "fis:ListExperimentTemplates",
            "fms:GetNotificationChannel",
            "fms:GetPolicy",
            "fms:ListPolicies",
            "fms:ListTagsForResource",
            "forecast:DescribeDataset",
            "forecast:DescribeDatasetGroup",
            "forecast:ListDatasetGroups",
            "forecast:ListDatasets",
            "forecast:ListTagsForResource",
            "frauddetector:GetDetectorVersion",
            "frauddetector:GetDetectors",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetLabels",
            "frauddetector:GetModels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:ListTagsForResource",
            "fsx:DescribeBackups",
            "fsx:DescribeDataRepositoryAssociations",
            "fsx:DescribeFileSystems",
            "fsx:DescribeSnapshots",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:ListTagsForResource",
            "gamelift:DescribeAlias",
            "gamelift:DescribeBuild",
            "gamelift:DescribeFleetAttributes",
            "gamelift:DescribeFleetCapacity",
            "gamelift:DescribeFleetLocationAttributes",
            "gamelift:DescribeFleetLocationCapacity",
            "gamelift:DescribeFleetPortSettings",
            "gamelift:DescribeGameServerGroup",
            "gamelift:DescribeGameSessionQueues",
            "gamelift:DescribeMatchmakingConfigurations",
            "gamelift:DescribeMatchmakingRuleSets",
            "gamelift:DescribeRuntimeConfiguration",
            "gamelift:DescribeScript",
            "gamelift:DescribeVpcPeeringAuthorizations",
            "gamelift:DescribeVpcPeeringConnections",
            "gamelift:ListAliases",
            "gamelift:ListBuilds",
            "gamelift:ListFleets",
            "gamelift:ListGameServerGroups",
            "gamelift:ListScripts",
            "gamelift:ListTagsForResource",
            "geo:DescribeGeofenceCollection",
            "geo:DescribeMap",
            "geo:DescribePlaceIndex",
            "geo:DescribeRouteCalculator",
            "geo:DescribeTracker",
            "geo:ListGeofenceCollections",
            "geo:ListMaps",
            "geo:ListPlaceIndexes",
            "geo:ListRouteCalculators",
            "geo:ListTrackerConsumers",
            "geo:ListTrackers",
            "globalaccelerator:DescribeAccelerator",
            "globalaccelerator:DescribeEndpointGroup",
            "globalaccelerator:DescribeListener",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "globalaccelerator:ListTagsForResource",
            "glue:BatchGetDevEndpoints",
            "glue:BatchGetJobs",
            "glue:BatchGetWorkflows",
            "glue:GetClassifier",
            "glue:GetClassifiers",
            "glue:GetCrawler",
            "glue:GetCrawlers",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetDevEndpoint",
            "glue:GetDevEndpoints",
            "glue:GetJob",
            "glue:GetJobs",
            "glue:GetMLTransform",
            "glue:GetMLTransforms",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetRegistry",
            "glue:GetSecurityConfiguration",
            "glue:GetSecurityConfigurations",
            "glue:GetTable",
            "glue:GetTags",
            "glue:GetTrigger",
            "glue:GetWorkflow",
            "glue:ListCrawlers",
            "glue:ListDevEndpoints",
            "glue:ListJobs",
            "glue:ListMLTransforms",
            "glue:ListRegistries",
            "glue:ListTriggers",
            "glue:ListWorkflows",
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:DescribeWorkspaceConfiguration",
            "grafana:ListWorkspaces",
            "greengrass:DescribeComponent",
            "greengrass:GetComponent",
            "greengrass:ListComponentVersions",
            "greengrass:ListComponents",
            "groundstation:GetConfig",
            "groundstation:GetDataflowEndpointGroup",
            "groundstation:GetMissionProfile",
            "groundstation:ListConfigs",
            "groundstation:ListDataflowEndpointGroups",
            "groundstation:ListMissionProfiles",
            "groundstation:ListTagsForResource",
            "guardduty:DescribePublishingDestination",
            "guardduty:GetAdministratorAccount",
            "guardduty:GetDetector",
            "guardduty:GetFilter",
            "guardduty:GetFindings",
            "guardduty:GetIPSet",
            "guardduty:GetMasterAccount",
            "guardduty:GetMemberDetectors",
            "guardduty:GetMembers",
            "guardduty:GetThreatIntelSet",
            "guardduty:ListDetectors",
            "guardduty:ListFilters",
            "guardduty:ListFindings",
            "guardduty:ListIPSets",
            "guardduty:ListMembers",
            "guardduty:ListOrganizationAdminAccounts",
            "guardduty:ListPublishingDestinations",
            "guardduty:ListTagsForResource",
            "guardduty:ListThreatIntelSets",
            "healthlake:DescribeFHIRDatastore",
            "healthlake:ListFHIRDatastores",
            "healthlake:ListTagsForResource",
            "iam:GenerateCredentialReport",
            "iam:GetAccountAuthorizationDetails",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:GetGroup",
            "iam:GetGroupPolicy",
            "iam:GetInstanceProfile",
            "iam:GetOpenIDConnectProvider",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetSAMLProvider",
            "iam:GetServerCertificate",
            "iam:GetUser",
            "iam:GetUserPolicy",
            "iam:ListAccessKeys",
            "iam:ListAttachedGroupPolicies",
            "iam:ListAttachedRolePolicies",
            "iam:ListAttachedUserPolicies",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroups",
            "iam:ListGroupsForUser",
            "iam:ListInstanceProfileTags",
            "iam:ListInstanceProfiles",
            "iam:ListInstanceProfilesForRole",
            "iam:ListMFADeviceTags",
            "iam:ListMFADevices",
            "iam:ListOpenIDConnectProviders",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "iam:ListServerCertificates",
            "iam:ListUserPolicies",
            "iam:ListUsers",
            "iam:ListVirtualMFADevices",
            "identitystore:DescribeGroup",
            "identitystore:DescribeGroupMembership",
            "identitystore:ListGroupMemberships",
            "identitystore:ListGroups",
            "imagebuilder:GetComponent",
            "imagebuilder:GetContainerRecipe",
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:GetImage",
            "imagebuilder:GetImagePipeline",
            "imagebuilder:GetImageRecipe",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:GetLifecyclePolicy",
            "imagebuilder:ListComponentBuildVersions",
            "imagebuilder:ListComponents",
            "imagebuilder:ListContainerRecipes",
            "imagebuilder:ListDistributionConfigurations",
            "imagebuilder:ListImageBuildVersions",
            "imagebuilder:ListImagePipelines",
            "imagebuilder:ListImageRecipes",
            "imagebuilder:ListImages",
            "imagebuilder:ListInfrastructureConfigurations",
            "imagebuilder:ListLifecyclePolicies",
            "inspector2:BatchGetAccountStatus",
            "inspector2:GetDelegatedAdminAccount",
            "inspector2:ListFilters",
            "inspector2:ListMembers",
            "iot:DescribeAccountAuditConfiguration",
            "iot:DescribeAuthorizer",
            "iot:DescribeBillingGroup",
            "iot:DescribeCACertificate",
            "iot:DescribeCertificate",
            "iot:DescribeCustomMetric",
            "iot:DescribeDimension",
            "iot:DescribeDomainConfiguration",
            "iot:DescribeFleetMetric",
            "iot:DescribeJobTemplate",
            "iot:DescribeMitigationAction",
            "iot:DescribeProvisioningTemplate",
            "iot:DescribeRoleAlias",
            "iot:DescribeScheduledAudit",
            "iot:DescribeSecurityProfile",
            "iot:DescribeThingGroup",
            "iot:DescribeThingType",
            "iot:GetPolicy",
            "iot:GetTopicRule",
            "iot:GetTopicRuleDestination",
            "iot:ListAuthorizers",
            "iot:ListBillingGroups",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListCustomMetrics",
            "iot:ListDimensions",
            "iot:ListDomainConfigurations",
            "iot:ListFleetMetrics",
            "iot:ListJobTemplates",
            "iot:ListMitigationpermissions",
            "iot:ListPolicies",
            "iot:ListProvisioningTemplates",
            "iot:ListRoleAliases",
            "iot:ListScheduledAudits",
            "iot:ListSecurityProfiles",
            "iot:ListSecurityProfilesForTarget",
            "iot:ListTagsForResource",
            "iot:ListTargetsForSecurityProfile",
            "iot:ListThingGroups",
            "iot:ListThingTypes",
            "iot:ListTopicRuleDestinations",
            "iot:ListTopicRules",
            "iot:ListV2LoggingLevels",
            "iot:ValidateSecurityProfileBehaviors",
            "iotanalytics:DescribeChannel",
            "iotanalytics:DescribeDataset",
            "iotanalytics:DescribeDatastore",
            "iotanalytics:DescribePipeline",
            "iotanalytics:ListChannels",
            "iotanalytics:ListDatasets",
            "iotanalytics:ListDatastores",
            "iotanalytics:ListPipelines",
            "iotanalytics:ListTagsForResource",
            "iotevents:DescribeAlarmModel",
            "iotevents:DescribeDetectorModel",
            "iotevents:DescribeInput",
            "iotevents:ListAlarmModels",
            "iotevents:ListDetectorModels",
            "iotevents:ListInputs",
            "iotevents:ListTagsForResource",
            "iotfleetwise:GetDecoderManifest",
            "iotfleetwise:GetFleet",
            "iotfleetwise:GetModelManifest",
            "iotfleetwise:GetSignalCatalog",
            "iotfleetwise:GetVehicle",
            "iotfleetwise:ListDecoderManifestNetworkInterfaces",
            "iotfleetwise:ListDecoderManifestSignals",
            "iotfleetwise:ListDecoderManifests",
            "iotfleetwise:ListFleets",
            "iotfleetwise:ListModelManifestNodes",
            "iotfleetwise:ListModelManifests",
            "iotfleetwise:ListSignalCatalogNodes",
            "iotfleetwise:ListSignalCatalogs",
            "iotfleetwise:ListTagsForResource",
            "iotfleetwise:ListVehicles",
            "iotsitewise:DescribeAccessPolicy",
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:DescribeDashboard",
            "iotsitewise:DescribeGateway",
            "iotsitewise:DescribePortal",
            "iotsitewise:DescribeProject",
            "iotsitewise:ListAccessPolicies",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListAssets",
            "iotsitewise:ListDashboards",
            "iotsitewise:ListGateways",
            "iotsitewise:ListPortals",
            "iotsitewise:ListProjectAssets",
            "iotsitewise:ListProjects",
            "iotsitewise:ListTagsForResource",
            "iottwinmaker:GetComponentType",
            "iottwinmaker:GetEntity",
            "iottwinmaker:GetScene",
            "iottwinmaker:GetSyncJob",
            "iottwinmaker:GetWorkspace",
            "iottwinmaker:ListComponentTypes",
            "iottwinmaker:ListEntities",
            "iottwinmaker:ListScenes",
            "iottwinmaker:ListSyncJobs",
            "iottwinmaker:ListTagsForResource",
            "iottwinmaker:ListWorkspaces",
            "iotwireless:GetDestination",
            "iotwireless:GetDeviceProfile",
            "iotwireless:GetFuotaTask",
            "iotwireless:GetMulticastGroup",
            "iotwireless:GetServiceProfile",
            "iotwireless:GetWirelessDevice",
            "iotwireless:GetWirelessGateway",
            "iotwireless:GetWirelessGatewayTaskDefinition",
            "iotwireless:ListDestinations",
            "iotwireless:ListDeviceProfiles",
            "iotwireless:ListFuotaTasks",
            "iotwireless:ListMulticastGroups",
            "iotwireless:ListServiceProfiles",
            "iotwireless:ListTagsForResource",
            "iotwireless:ListWirelessDevices",
            "iotwireless:ListWirelessGatewayTaskDefinitions",
            "iotwireless:ListWirelessGateways",
            "ivs:GetChannel",
            "ivs:GetEncoderConfiguration",
            "ivs:GetPlaybackKeyPair",
            "ivs:GetPlaybackRestrictionPolicy",
            "ivs:GetRecordingConfiguration",
            "ivs:GetStage",
            "ivs:GetStorageConfiguration",
            "ivs:GetStreamKey",
            "ivs:ListChannels",
            "ivs:ListEncoderConfigurations",
            "ivs:ListPlaybackKeyPairs",
            "ivs:ListPlaybackRestrictionPolicies",
            "ivs:ListRecordingConfigurations",
            "ivs:ListStages",
            "ivs:ListStorageConfigurations",
            "ivs:ListStreamKeys",
            "ivs:ListTagsForResource",
            "ivschat:GetLoggingConfiguration",
            "ivschat:GetRoom",
            "ivschat:ListLoggingConfigurations",
            "ivschat:ListRooms",
            "ivschat:ListTagsForResource",
            "kafka:DescribeCluster",
            "kafka:DescribeClusterV2",
            "kafka:DescribeConfiguration",
            "kafka:DescribeConfigurationRevision",
            "kafka:DescribeVpcConnection",
            "kafka:GetClusterPolicy",
            "kafka:ListClusters",
            "kafka:ListClustersV2",
            "kafka:ListConfigurations",
            "kafka:ListScramSecrets",
            "kafka:ListTagsForResource",
            "kafka:ListVpcConnections",
            "kafkaconnect:DescribeConnector",
            "kafkaconnect:ListConnectors",
            "kendra:DescribeIndex",
            "kendra:ListIndices",
            "kendra:ListTagsForResource",
            "kinesis:DescribeStreamConsumer",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesis:ListTagsForStream",
            "kinesisanalytics:DescribeApplication",
            "kinesisanalytics:ListApplications",
            "kinesisanalytics:ListTagsForResource",
            "kinesisvideo:DescribeSignalingChannel",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:ListSignalingChannels",
            "kinesisvideo:ListStreams",
            "kinesisvideo:ListTagsForResource",
            "kinesisvideo:ListTagsForStream",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:ListAliases",
            "kms:ListKeys",
            "kms:ListResourceTags",
            "lakeformation:DescribeResource",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:ListPermissions",
            "lakeformation:ListResources",
            "lambda:GetAlias",
            "lambda:GetCodeSigningConfig",
            "lambda:GetFunction",
            "lambda:GetFunctionCodeSigningConfig",
            "lambda:GetLayerVersion",
            "lambda:GetPolicy",
            "lambda:ListAliases",
            "lambda:ListCodeSigningConfigs",
            "lambda:ListFunctions",
            "lambda:ListLayerVersions",
            "lambda:ListLayers",
            "lambda:ListTags",
            "lambda:ListVersionsByFunction",
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotVersion",
            "lex:DescribeResourcePolicy",
            "lex:ListBotAliases",
            "lex:ListBotLocales",
            "lex:ListBotVersions",
            "lex:ListBots",
            "lex:ListTagsForResource",
            "license-manager:GetGrant",
            "license-manager:GetLicense",
            "license-manager:ListDistributedGrants",
            "license-manager:ListLicenses",
            "license-manager:ListReceivedGrants",
            "lightsail:GetAlarms",
            "lightsail:GetBuckets",
            "lightsail:GetCertificates",
            "lightsail:GetContainerServices",
            "lightsail:GetDisk",
            "lightsail:GetDisks",
            "lightsail:GetDistributions",
            "lightsail:GetInstance",
            "lightsail:GetInstances",
            "lightsail:GetKeyPair",
            "lightsail:GetLoadBalancer",
            "lightsail:GetLoadBalancerTlsCertificates",
            "lightsail:GetLoadBalancers",
            "lightsail:GetRelationalDatabase",
            "lightsail:GetRelationalDatabaseParameters",
            "lightsail:GetRelationalDatabases",
            "lightsail:GetStaticIp",
            "lightsail:GetStaticIps",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeDestinations",
            "logs:DescribeLogGroups",
            "logs:DescribeMetricFilters",
            "logs:GetDataProtectionPolicy",
            "logs:GetLogAnomalyDetector",
            "logs:GetLogDelivery",
            "logs:ListLogAnomalyDetectors",
            "logs:ListLogDeliveries",
            "logs:ListTagsLogGroup",
            "logs:PutLogEvents",
            "lookoutequipment:DescribeInferenceScheduler",
            "lookoutequipment:ListTagsForResource",
            "lookoutmetrics:DescribeAlert",
            "lookoutmetrics:DescribeAnomalyDetector",
            "lookoutmetrics:ListAlerts",
            "lookoutmetrics:ListAnomalyDetectors",
            "lookoutmetrics:ListMetricSets",
            "lookoutmetrics:ListTagsForResource",
            "lookoutvision:DescribeProject",
            "lookoutvision:ListProjects",
            "m2:GetEnvironment",
            "m2:ListEnvironments",
            "m2:ListTagsForResource",
            "macie2:DescribeOrganizationConfiguration",
            "macie2:GetAutomatedDiscoveryConfiguration",
            "macie2:GetClassificationExportConfiguration",
            "macie2:GetCustomDataIdentifier",
            "macie2:GetFindingsPublicationConfiguration",
            "macie2:GetMacieSession",
            "macie2:ListCustomDataIdentifiers",
            "macie2:ListTagsForResource",
            "managedblockchain:GetMember",
            "managedblockchain:GetNetwork",
            "managedblockchain:GetNode",
            "managedblockchain:ListInvitations",
            "managedblockchain:ListMembers",
            "managedblockchain:ListNodes",
            "mediaconnect:DescribeBridge",
            "mediaconnect:DescribeFlow",
            "mediaconnect:DescribeGateway",
            "mediaconnect:ListBridges",
            "mediaconnect:ListFlows",
            "mediaconnect:ListGateways",
            "mediaconnect:ListTagsForResource",
            "mediapackage-vod:DescribePackagingConfiguration",
            "mediapackage-vod:DescribePackagingGroup",
            "mediapackage-vod:ListPackagingConfigurations",
            "mediapackage-vod:ListPackagingGroups",
            "mediapackage-vod:ListTagsForResource",
            "mediatailor:DescribeChannel",
            "mediatailor:DescribeLiveSource",
            "mediatailor:DescribeSourceLocation",
            "mediatailor:DescribeVodSource",
            "mediatailor:GetPlaybackConfiguration",
            "mediatailor:ListChannels",
            "mediatailor:ListLiveSources",
            "mediatailor:ListPlaybackConfigurations",
            "mediatailor:ListSourceLocations",
            "mediatailor:ListVodSources",
            "memorydb:DescribeAcls",
            "memorydb:DescribeClusters",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeParameters",
            "memorydb:DescribeSubnetGroups",
            "memorydb:DescribeUsers",
            "memorydb:ListTags",
            "mobiletargeting:GetApp",
            "mobiletargeting:GetApplicationSettings",
            "mobiletargeting:GetApps",
            "mobiletargeting:GetCampaign",
            "mobiletargeting:GetCampaigns",
            "mobiletargeting:GetEmailChannel",
            "mobiletargeting:GetEmailTemplate",
            "mobiletargeting:GetEventStream",
            "mobiletargeting:GetInAppTemplate",
            "mobiletargeting:GetSegment",
            "mobiletargeting:GetSegments",
            "mobiletargeting:ListTagsForResource",
            "mobiletargeting:ListTemplates",
            "mq:DescribeBroker",
            "mq:ListBrokers",
            "network-firewall:DescribeLoggingConfiguration",
            "network-firewall:ListFirewalls",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:GetConnectPeer",
            "networkmanager:GetCustomerGatewayAssociations",
            "networkmanager:GetDevices",
            "networkmanager:GetLinkAssociations",
            "networkmanager:GetLinks",
            "networkmanager:GetSites",
            "networkmanager:GetTransitGatewayRegistrations",
            "networkmanager:ListConnectPeers",
            "networkmanager:ListTagsForResource",
            "nimble:GetLaunchProfile",
            "nimble:GetLaunchProfileDetails",
            "nimble:GetStreamingImage",
            "nimble:GetStudio",
            "nimble:GetStudioComponent",
            "nimble:ListLaunchProfiles",
            "nimble:ListStreamingImages",
            "nimble:ListStudioComponents",
            "nimble:ListStudios",
            "oam:GetSink",
            "oam:GetSinkPolicy",
            "oam:ListSinks",
            "omics:GetAnnotationStore",
            "omics:GetRunGroup",
            "omics:GetSequenceStore",
            "omics:GetVariantStore",
            "omics:GetWorkflow",
            "omics:ListAnnotationStores",
            "omics:ListRunGroups",
            "omics:ListSequenceStores",
            "omics:ListTagsForResource",
            "omics:ListVariantStores",
            "omics:ListWorkflows",
            "opsworks:DescribeInstances",
            "opsworks:DescribeLayers",
            "opsworks:DescribeTimeBasedAutoScaling",
            "opsworks:DescribeVolumes",
            "opsworks:ListTags",
            "organizations:DescribeAccount",
            "organizations:DescribeEffectivePolicy",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:DescribePolicy",
            "organizations:DescribeResourcePolicy",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListParents",
            "organizations:ListPolicies",
            "organizations:ListPoliciesForTarget",
            "organizations:ListRoots",
            "organizations:ListTagsForResource",
            "organizations:ListTargetsForPolicy",
            "panorama:DescribeApplicationInstance",
            "panorama:DescribeApplicationInstanceDetails",
            "panorama:DescribePackage",
            "panorama:DescribePackageVersion",
            "panorama:ListApplicationInstances",
            "panorama:ListNodes",
            "panorama:ListPackages",
            "payment-cryptography:GetAlias",
            "payment-cryptography:GetKey",
            "payment-cryptography:ListAliases",
            "payment-cryptography:ListKeys",
            "payment-cryptography:ListTagsForResource",
            "personalize:DescribeDataset",
            "personalize:DescribeDatasetGroup",
            "personalize:DescribeSchema",
            "personalize:DescribeSolution",
            "personalize:ListDatasetGroups",
            "personalize:ListDatasetImportJobs",
            "personalize:ListDatasets",
            "personalize:ListSchemas",
            "personalize:ListSolutions",
            "personalize:ListTagsForResource",
            "profile:GetDomain",
            "profile:GetIntegration",
            "profile:GetProfileObjectType",
            "profile:ListDomains",
            "profile:ListIntegrations",
            "profile:ListProfileObjectTypes",
            "profile:ListTagsForResource",
            "quicksight:DescribeAccountSubscription",
            "quicksight:DescribeAnalysis",
            "quicksight:DescribeAnalysisPermissions",
            "quicksight:DescribeDashboard",
            "quicksight:DescribeDashboardPermissions",
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:DescribeDataSetRefreshProperties",
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:DescribeTemplate",
            "quicksight:DescribeTemplatePermissions",
            "quicksight:DescribeTheme",
            "quicksight:DescribeThemePermissions",
            "quicksight:ListAnalyses",
            "quicksight:ListDashboards",
            "quicksight:ListDataSets",
            "quicksight:ListDataSources",
            "quicksight:ListTagsForResource",
            "quicksight:ListTemplates",
            "quicksight:ListThemes",
            "ram:GetPermission",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares",
            "ram:ListPermissionAssociations",
            "ram:ListPermissionVersions",
            "ram:ListPermissions",
            "ram:ListResourceSharePermissions",
            "ram:ListResources",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusterSnapshotAttributes",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBParameters",
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyEndpoints",
            "rds:DescribeDBProxyTargetGroups",
            "rds:DescribeDBProxyTargets",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshotAttributes",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEngineDefaultClusterParameters",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:ListTagsForResource",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListTagsForResource",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterParameters",
            "redshift:DescribeClusterSecurityGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusters",
            "redshift:DescribeEndpointAccess",
            "redshift:DescribeEndpointAuthorization",
            "redshift:DescribeEventSubscriptions",
            "redshift:DescribeLoggingStatus",
            "redshift:DescribeScheduledpermissions",
            "redshift:DescribeTags",
            "refactor-spaces:GetEnvironment",
            "refactor-spaces:GetService",
            "refactor-spaces:ListApplications",
            "refactor-spaces:ListEnvironments",
            "refactor-spaces:ListServices",
            "rekognition:DescribeProjects",
            "rekognition:DescribeStreamProcessor",
            "rekognition:ListStreamProcessors",
            "rekognition:ListTagsForResource",
            "resiliencehub:DescribeApp",
            "resiliencehub:DescribeAppVersionTemplate",
            "resiliencehub:DescribeResiliencyPolicy",
            "resiliencehub:ListAppVersionResourceMappings",
            "resiliencehub:ListApps",
            "resiliencehub:ListResiliencyPolicies",
            "resiliencehub:ListTagsForResource",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListTagsForResource",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:GetGroupQuery",
            "resource-groups:GetTags",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "robomaker:DescribeRobotApplication",
            "robomaker:DescribeSimulationApplication",
            "robomaker:ListRobotApplications",
            "robomaker:ListSimulationApplications",
            "route53-recovery-control-config:DescribeCluster",
            "route53-recovery-control-config:DescribeControlPanel",
            "route53-recovery-control-config:DescribeRoutingControl",
            "route53-recovery-control-config:DescribeSafetyRule",
            "route53-recovery-control-config:ListClusters",
            "route53-recovery-control-config:ListControlPanels",
            "route53-recovery-control-config:ListRoutingControls",
            "route53-recovery-control-config:ListSafetyRules",
            "route53-recovery-control-config:ListTagsForResource",
            "route53-recovery-readiness:GetCell",
            "route53-recovery-readiness:GetReadinessCheck",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:ListCells",
            "route53-recovery-readiness:ListReadinessChecks",
            "route53-recovery-readiness:ListRecoveryGroups",
            "route53-recovery-readiness:ListResourceSets",
            "route53:GetChange",
            "route53:GetDNSSEC",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:ListCidrBlocks",
            "route53:ListCidrCollections",
            "route53:ListCidrLocations",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListQueryLoggingConfigs",
            "route53:ListResourceRecordSets",
            "route53:ListTagsForResource",
            "route53resolver:GetFirewallDomainList",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:GetResolverDnssecConfig",
            "route53resolver:GetResolverEndpoint",
            "route53resolver:GetResolverQueryLogConfig",
            "route53resolver:GetResolverQueryLogConfigAssociation",
            "route53resolver:GetResolverRule",
            "route53resolver:GetResolverRuleAssociation",
            "route53resolver:ListFirewallDomainLists",
            "route53resolver:ListFirewallDomains",
            "route53resolver:ListFirewallRuleGroupAssociations",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListFirewallRules",
            "route53resolver:ListResolverDnssecConfigs",
            "route53resolver:ListResolverEndpointIpAddresses",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverQueryLogConfigAssociations",
            "route53resolver:ListResolverQueryLogConfigs",
            "route53resolver:ListResolverRuleAssociations",
            "route53resolver:ListResolverRules",
            "route53resolver:ListTagsForResource",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "rum:ListTagsForResource",
            "s3-outposts:GetAccessPoint",
            "s3-outposts:GetAccessPointPolicy",
            "s3-outposts:GetBucket",
            "s3-outposts:GetBucketPolicy",
            "s3-outposts:GetBucketTagging",
            "s3-outposts:GetLifecycleConfiguration",
            "s3-outposts:ListAccessPoints",
            "s3-outposts:ListEndpoints",
            "s3-outposts:ListRegionalBuckets",
            "s3:GetAccelerateConfiguration",
            "s3:GetAccessPoint",
            "s3:GetAccessPointForObjectLambda",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyForObjectLambda",
            "s3:GetAccessPointPolicyStatus",
            "s3:GetAccessPointPolicyStatusForObjectLambda",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketAcl",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketNotification",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetBucketPolicy",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketRequestPayment",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetBucketWebsite",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetMultiRegionAccessPoint",
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPointPolicyStatus",
            "s3:GetReplicationConfiguration",
            "s3:GetStorageLensConfiguration",
            "s3:GetStorageLensConfigurationTagging",
            "s3:GetStorageLensGroup",
            "s3:ListAccessPoints",
            "s3:ListAccessPointsForObjectLambda",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultiRegionAccessPoints",
            "s3:ListStorageLensConfigurations",
            "s3:ListStorageLensGroups",
            "s3:ListTagsForResource",
            "s3express:GetBucketPolicy",
            "s3express:GetEncryptionConfiguration",
            "s3express:GetLifecycleConfiguration",
            "s3express:ListAllMyDirectoryBuckets",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceExperiment",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeWorkteam",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDomains",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListImageVersions",
            "sagemaker:ListImages",
            "sagemaker:ListInferenceExperiments",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelines",
            "sagemaker:ListProjects",
            "sagemaker:ListTags",
            "sagemaker:ListWorkteams",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListScheduleGroups",
            "scheduler:ListSchedules",
            "scheduler:ListTagsForResource",
            "schemas:DescribeDiscoverer",
            "schemas:DescribeRegistry",
            "schemas:DescribeSchema",
            "schemas:GetResourcePolicy",
            "schemas:ListDiscoverers",
            "schemas:ListRegistries",
            "schemas:ListSchemas",
            "sdb:GetAttributes",
            "sdb:ListDomains",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:ListSecrets",
            "securityhub:DescribeHub",
            "serviceCatalog:DescribePortfolioShares",
            "servicediscovery:GetInstance",
            "servicediscovery:GetNamespace",
            "servicediscovery:GetService",
            "servicediscovery:ListInstances",
            "servicediscovery:ListNamespaces",
            "servicediscovery:ListServices",
            "servicediscovery:ListTagsForResource",
            "ses:DescribeReceiptRule",
            "ses:DescribeReceiptRuleSet",
            "ses:GetConfigurationSet",
            "ses:GetConfigurationSetEventDestinations",
            "ses:GetContactList",
            "ses:GetDedicatedIpPool",
            "ses:GetDedicatedIps",
            "ses:GetEmailTemplate",
            "ses:GetTemplate",
            "ses:ListConfigurationSets",
            "ses:ListContactLists",
            "ses:ListDedicatedIpPools",
            "ses:ListEmailTemplates",
            "ses:ListReceiptFilters",
            "ses:ListReceiptRuleSets",
            "ses:ListTemplates",
            "shield:DescribeDRTAccess",
            "shield:DescribeProtection",
            "shield:DescribeSubscription",
            "signer:GetSigningProfile",
            "signer:ListProfilePermissions",
            "signer:ListSigningProfiles",
            "sns:GetDataProtectionPolicy",
            "sns:GetSMSSandboxAccountStatus",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTagsForResource",
            "sns:ListTopics",
            "sqs:GetQueueAttributes",
            "sqs:ListQueueTags",
            "sqs:ListQueues",
            "ssm-sap:ListTagsForResource",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeDocument",
            "ssm:DescribeDocumentPermission",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetDocument",
            "ssm:GetServiceSetting",
            "ssm:ListDocuments",
            "ssm:ListTagsForResource",
            "sso:DescribeInstanceAccessControlAttributeConfiguration",
            "sso:DescribePermissionSet",
            "sso:GetInlinePolicyForPermissionSet",
            "sso:ListManagedPoliciesInPermissionSet",
            "sso:ListPermissionSets",
            "sso:ListTagsForResource",
            "states:DescribeActivity",
            "states:DescribeStateMachine",
            "states:ListActivities",
            "states:ListStateMachines",
            "states:ListTagsForResource",
            "storagegateway:ListGateways",
            "storagegateway:ListTagsForResource",
            "storagegateway:ListVolumes",
            "sts:GetCallerIdentity",
            "support:DescribeCases",
            "synthetics:DescribeCanaries",
            "synthetics:DescribeCanariesLastRun",
            "synthetics:DescribeRuntimeVersions",
            "synthetics:GetCanary",
            "synthetics:GetCanaryRuns",
            "synthetics:GetGroup",
            "synthetics:ListAssociatedGroups",
            "synthetics:ListGroupResources",
            "synthetics:ListGroups",
            "synthetics:ListTagsForResource",
            "tag:GetResources",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:ListDatabases",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "transfer:DescribeAgreement",
            "transfer:DescribeCertificate",
            "transfer:DescribeConnector",
            "transfer:DescribeProfile",
            "transfer:DescribeServer",
            "transfer:DescribeUser",
            "transfer:DescribeWorkflow",
            "transfer:ListAgreements",
            "transfer:ListCertificates",
            "transfer:ListConnectors",
            "transfer:ListProfiles",
            "transfer:ListServers",
            "transfer:ListTagsForResource",
            "transfer:ListUsers",
            "transfer:ListWorkflows",
            "voiceid:DescribeDomain",
            "voiceid:ListTagsForResource",
            "vpc-lattice:GetAccessLogSubscription",
            "vpc-lattice:GetService",
            "vpc-lattice:GetServiceNetwork",
            "vpc-lattice:GetTargetGroup",
            "vpc-lattice:ListAccessLogSubscriptions",
            "vpc-lattice:ListServiceNetworks",
            "vpc-lattice:ListServices",
            "vpc-lattice:ListTagsForResource",
            "vpc-lattice:ListTargetGroups",
            "vpc-lattice:ListTargets",
            "waf-regional:GetLoggingConfiguration",
            "waf-regional:GetWebACL",
            "waf-regional:GetWebACLForResource",
            "waf-regional:ListLoggingConfigurations",
            "waf:GetLoggingConfiguration",
            "waf:GetWebACL",
            "wafv2:GetLoggingConfiguration",
            "wafv2:GetRuleGroup",
            "wafv2:ListRuleGroups",
            "wafv2:ListTagsForResource",
            "workspaces:DescribeConnectionAliases",
            "workspaces:DescribeTags",
            "workspaces:DescribeWorkspaces"
        ]
    },
    "MediaPackageServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AWSMarketplaceAmiIngestion": {
        "permissions": [
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshotAttribute",
            "ec2:ModifyImageAttribute",
            "ec2:ModifySnapshotAttribute"
        ]
    },
    "AmazonElasticMapReducePlacementGroupPolicy": {
        "permissions": [
            "ec2:CreatePlacementGroup",
            "ec2:DeletePlacementGroup",
            "ec2:DescribePlacementGroups"
        ]
    },
    "AmazonElasticFileSystemsUtils": {
        "permissions": [
            "ec2:DescribeAvailabilityZones",
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply",
            "elasticfilesystem:DescribeMountTargets",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "ssm:DescribeAssociation",
            "ssm:DescribeDocument",
            "ssm:GetDeployablePatchSnapshotForInstance",
            "ssm:GetDocument",
            "ssm:GetManifest",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:ListAssociations",
            "ssm:ListInstanceAssociations",
            "ssm:PutComplianceItems",
            "ssm:PutConfigurePackageResult",
            "ssm:PutInventory",
            "ssm:UpdateAssociationStatus",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "Ec2ImageBuilderCrossAccountDistributionAccess": {
        "permissions": [
            "ec2:CopyImage",
            "ec2:CreateTags",
            "ec2:DescribeImages",
            "ec2:ModifyImageAttribute"
        ]
    },
    "AWSQuickSightTimestreamPolicy": {
        "permissions": [
            "timestream:CancelQuery",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeTable",
            "timestream:ListDatabases",
            "timestream:ListMeasures",
            "timestream:ListTables",
            "timestream:Select",
            "timestream:SelectValues"
        ]
    },
    "AmazonTimestreamReadOnlyAccess": {
        "permissions": [
            "timestream:CancelQuery",
            "timestream:DescribeAccountSettings",
            "timestream:DescribeBatchLoadTask",
            "timestream:DescribeDatabase",
            "timestream:DescribeEndpoints",
            "timestream:DescribeScheduledQuery",
            "timestream:DescribeTable",
            "timestream:ListBatchLoadTasks",
            "timestream:ListDatabases",
            "timestream:ListMeasures",
            "timestream:ListScheduledQueries",
            "timestream:ListTables",
            "timestream:ListTagsForResource",
            "timestream:Select",
            "timestream:SelectValues"
        ]
    },
    "AmazonTimestreamFullAccess": {
        "permissions": [
            "kms:CreateGrant",
            "kms:DescribeKey",
            "s3:ListAllMyBuckets",
            "timestream:*"
        ]
    },
    "AmazonTimestreamConsoleFullAccess": {
        "permissions": [
            "dbqms:CreateFavoriteQuery",
            "dbqms:CreateQueryHistory",
            "dbqms:DeleteFavoriteQueries",
            "dbqms:DeleteQueryHistory",
            "dbqms:DescribeFavoriteQueries",
            "dbqms:DescribeQueryHistory",
            "dbqms:GetQueryString",
            "dbqms:UpdateFavoriteQuery",
            "dbqms:UpdateQueryHistory",
            "iam:ListRoles",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "s3:ListAllMyBuckets",
            "sns:ListTopics",
            "timestream:*"
        ]
    },
    "AWSServiceRoleForCloudWatchAlarmspermissionsSMServiceRolePolicy": {
        "permissions": [
            "ssm:CreateOpsItem"
        ]
    },
    "AmazonS3OutpostsFullAccess": {
        "permissions": [
            "datasync:DescribeLocation*",
            "datasync:DescribeTask",
            "datasync:ListLocations",
            "datasync:ListTasks",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "outposts:GetOutpost",
            "outposts:ListOutposts",
            "s3-outposts:*"
        ]
    },
    "AmazonS3OutpostsReadOnlyAccess": {
        "permissions": [
            "datasync:DescribeLocation*",
            "datasync:DescribeTask",
            "datasync:ListLocations",
            "datasync:ListTasks",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "outposts:GetOutpost",
            "outposts:ListOutposts",
            "s3-outposts:Get*",
            "s3-outposts:List*"
        ]
    },
    "AWSDeepRacerFullAccess": {
        "permissions": [
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketPolicy"
        ]
    },
    "CloudWatchLambdaInsightsExecutionRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSCloudTrail_FullAccess": {
        "permissions": [
            "cloudtrail:*",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListTables",
            "iam:GetRolePolicy",
            "iam:GetUser",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:CreateAlias",
            "kms:CreateKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "lambda:ListFunctions",
            "logs:CreateLogGroup",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:ListAllMyBuckets",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "sns:AddPermission",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "sns:SetTopicAttributes"
        ]
    },
    "AWSSupportServiceRolePolicy": {
        "permissions": [
            "access-analyzer:getAccessPreview",
            "access-analyzer:getAnalyzedResource",
            "access-analyzer:getAnalyzer",
            "access-analyzer:getArchiveRule",
            "access-analyzer:getFinding",
            "access-analyzer:getGeneratedPolicy",
            "access-analyzer:listAccessPreviewFindings",
            "access-analyzer:listAccessPreviews",
            "access-analyzer:listAnalyzedResources",
            "access-analyzer:listAnalyzers",
            "access-analyzer:listArchiveRules",
            "access-analyzer:listFindings",
            "access-analyzer:listPolicyGenerations",
            "account:getRegionOptStatus",
            "account:listRegions",
            "acm-pca:describeCertificateAuthority",
            "acm-pca:describeCertificateAuthorityAuditReport",
            "acm-pca:getCertificate",
            "acm-pca:getCertificateAuthorityCertificate",
            "acm-pca:getCertificateAuthorityCsr",
            "acm-pca:listCertificateAuthorities",
            "acm-pca:listTags",
            "acm:describeCertificate",
            "acm:getAccountConfiguration",
            "acm:getCertificate",
            "acm:listCertificates",
            "acm:listTagsForCertificate",
            "airflow:getEnvironment",
            "airflow:listEnvironments",
            "airflow:listTagsForResource",
            "amplify:getApp",
            "amplify:getBackendEnvironment",
            "amplify:getBranch",
            "amplify:getDomainAssociation",
            "amplify:getJob",
            "amplify:getWebhook",
            "amplify:listApps",
            "amplify:listBackendEnvironments",
            "amplify:listBranches",
            "amplify:listDomainAssociations",
            "amplify:listWebhooks",
            "amplifyuibuilder:exportComponents",
            "amplifyuibuilder:exportThemes",
            "aoss:batchGetCollection",
            "aoss:batchGetEffectiveLifecyclePolicy",
            "aoss:batchGetLifecyclePolicy",
            "aoss:batchGetVpcEndpoint",
            "aoss:getAccessPolicy",
            "aoss:getAccountSettings",
            "aoss:getPoliciesStats",
            "aoss:getSecurityConfig",
            "aoss:getSecurityPolicy",
            "aoss:listAccessPolicies",
            "aoss:listCollections",
            "aoss:listLifecyclePolicies",
            "aoss:listSecurityConfigs",
            "aoss:listSecurityPolicies",
            "aoss:listTagsForResource",
            "aoss:listVpcEndpoints",
            "apigateway:GET",
            "appconfig:getApplication",
            "appconfig:getConfigurationProfile",
            "appconfig:getDeployment",
            "appconfig:getDeploymentStrategy",
            "appconfig:getEnvironment",
            "appconfig:getExtension",
            "appconfig:getExtensionAssociation",
            "appconfig:listApplications",
            "appconfig:listConfigurationProfiles",
            "appconfig:listDeploymentStrategies",
            "appconfig:listDeployments",
            "appconfig:listEnvironments",
            "appconfig:listExtensionAssociations",
            "appconfig:listExtensions",
            "appconfig:listHostedConfigurationVersions",
            "appflow:describeConnectorEntity",
            "appflow:describeConnectorProfiles",
            "appflow:describeConnectors",
            "appflow:describeFlow",
            "appflow:describeFlowExecutionRecords",
            "appflow:listConnectorEntities",
            "appflow:listFlows",
            "application-autoscaling:describeScalableTargets",
            "application-autoscaling:describeScalingActivities",
            "application-autoscaling:describeScalingPolicies",
            "application-autoscaling:describeScheduledpermissions",
            "application-signals:getService",
            "application-signals:getServiceLevelObjective",
            "application-signals:listServiceDependencies",
            "application-signals:listServiceDependents",
            "application-signals:listServiceLevelObjectives",
            "application-signals:listServiceOperations",
            "application-signals:listServices",
            "applicationinsights:describeApplication",
            "applicationinsights:describeComponent",
            "applicationinsights:describeComponentConfiguration",
            "applicationinsights:describeComponentConfigurationRecommendation",
            "applicationinsights:describeLogPattern",
            "applicationinsights:describeObservation",
            "applicationinsights:describeProblem",
            "applicationinsights:describeProblemObservations",
            "applicationinsights:listApplications",
            "applicationinsights:listComponents",
            "applicationinsights:listConfigurationHistory",
            "applicationinsights:listLogPatternSets",
            "applicationinsights:listLogPatterns",
            "applicationinsights:listProblems",
            "appmesh:describeGatewayRoute",
            "appmesh:describeMesh",
            "appmesh:describeRoute",
            "appmesh:describeVirtualGateway",
            "appmesh:describeVirtualNode",
            "appmesh:describeVirtualRouter",
            "appmesh:describeVirtualService",
            "appmesh:listGatewayRoutes",
            "appmesh:listMeshes",
            "appmesh:listRoutes",
            "appmesh:listTagsForResource",
            "appmesh:listVirtualGateways",
            "appmesh:listVirtualNodes",
            "appmesh:listVirtualRouters",
            "appmesh:listVirtualServices",
            "apprunner:describeAutoScalingConfiguration",
            "apprunner:describeCustomDomains",
            "apprunner:describeOperation",
            "apprunner:describeService",
            "apprunner:listAutoScalingConfigurations",
            "apprunner:listConnections",
            "apprunner:listOperations",
            "apprunner:listServices",
            "apprunner:listTagsForResource",
            "appstream:describeAppBlockBuilderAppBlockAssociations",
            "appstream:describeAppBlockBuilders",
            "appstream:describeAppBlocks",
            "appstream:describeApplicationFleetAssociations",
            "appstream:describeApplications",
            "appstream:describeDirectoryConfigs",
            "appstream:describeEntitlements",
            "appstream:describeFleets",
            "appstream:describeImageBuilders",
            "appstream:describeImagePermissions",
            "appstream:describeImages",
            "appstream:describeSessions",
            "appstream:describeStacks",
            "appstream:describeUsageReportSubscriptions",
            "appstream:describeUserStackAssociations",
            "appstream:describeUsers",
            "appstream:listAssociatedFleets",
            "appstream:listAssociatedStacks",
            "appstream:listEntitledApplications",
            "appstream:listTagsForResource",
            "appsync:getApiAssociation",
            "appsync:getApiCache",
            "appsync:getDomainName",
            "appsync:getFunction",
            "appsync:getGraphqlApi",
            "appsync:getIntrospectionSchema",
            "appsync:getResolver",
            "appsync:getSchemaCreationStatus",
            "appsync:getSourceApiAssociation",
            "appsync:getType",
            "appsync:listDataSources",
            "appsync:listDomainNames",
            "appsync:listFunctions",
            "appsync:listGraphqlApis",
            "appsync:listResolvers",
            "appsync:listResolversByFunction",
            "appsync:listSourceApiAssociations",
            "appsync:listTypes",
            "appsync:listTypesByAssociation",
            "aps:describeAlertManagerDefinition",
            "aps:describeRuleGroupsNamespace",
            "aps:describeScraper",
            "aps:describeWorkspace",
            "aps:listRuleGroupsNamespaces",
            "aps:listScrapers",
            "aps:listWorkspaces",
            "athena:batchGetNamedQuery",
            "athena:batchGetQueryExecution",
            "athena:getCalculationExecution",
            "athena:getCalculationExecutionStatus",
            "athena:getCapacityAssignmentConfiguration",
            "athena:getCapacityReservation",
            "athena:getDataCatalog",
            "athena:getNamedQuery",
            "athena:getNotebookMetadata",
            "athena:getQueryExecution",
            "athena:getQueryRuntimeStatistics",
            "athena:getSession",
            "athena:getSessionStatus",
            "athena:getWorkGroup",
            "athena:listApplicationDPUSizes",
            "athena:listCalculationExecutions",
            "athena:listCapacityReservations",
            "athena:listDataCatalogs",
            "athena:listEngineVersions",
            "athena:listExecutors",
            "athena:listNamedQueries",
            "athena:listNotebookMetadata",
            "athena:listNotebookSessions",
            "athena:listQueryExecutions",
            "athena:listSessions",
            "athena:listTagsForResource",
            "athena:listWorkGroups",
            "auditmanager:getAccountStatus",
            "auditmanager:getDelegations",
            "auditmanager:listAssessmentFrameworks",
            "auditmanager:listAssessmentReports",
            "auditmanager:listAssessments",
            "auditmanager:listControls",
            "auditmanager:listKeywordsForDataSource",
            "auditmanager:listNotifications",
            "autoscaling-plans:describeScalingPlanResources",
            "autoscaling-plans:describeScalingPlans",
            "autoscaling-plans:getScalingPlanResourceForecastData",
            "autoscaling:describeAccountLimits",
            "autoscaling:describeAdjustmentTypes",
            "autoscaling:describeAutoScalingGroups",
            "autoscaling:describeAutoScalingInstances",
            "autoscaling:describeAutoScalingNotificationTypes",
            "autoscaling:describeInstanceRefreshes",
            "autoscaling:describeLaunchConfigurations",
            "autoscaling:describeLifecycleHookTypes",
            "autoscaling:describeLifecycleHooks",
            "autoscaling:describeLoadBalancerTargetGroups",
            "autoscaling:describeLoadBalancers",
            "autoscaling:describeMetricCollectionTypes",
            "autoscaling:describeNotificationConfigurations",
            "autoscaling:describePolicies",
            "autoscaling:describeScalingActivities",
            "autoscaling:describeScalingProcessTypes",
            "autoscaling:describeScheduledpermissions",
            "autoscaling:describeTags",
            "autoscaling:describeTerminationPolicyTypes",
            "autoscaling:describeTrafficSources",
            "autoscaling:describeWarmPool",
            "backup-gateway:getGateway",
            "backup-gateway:getHypervisor",
            "backup-gateway:getHypervisorPropertyMappings",
            "backup-gateway:getVirtualMachine",
            "backup-gateway:listGateways",
            "backup-gateway:listHypervisors",
            "backup-gateway:listVirtualMachines",
            "backup:describeBackupJob",
            "backup:describeBackupVault",
            "backup:describeCopyJob",
            "backup:describeFramework",
            "backup:describeGlobalSettings",
            "backup:describeProtectedResource",
            "backup:describeRecoveryPoint",
            "backup:describeRegionSettings",
            "backup:describeReportJob",
            "backup:describeReportPlan",
            "backup:describeRestoreJob",
            "backup:getBackupPlan",
            "backup:getBackupPlanFromJSON",
            "backup:getBackupPlanFromTemplate",
            "backup:getBackupSelection",
            "backup:getBackupVaultAccessPolicy",
            "backup:getBackupVaultNotifications",
            "backup:getLegalHold",
            "backup:getRecoveryPointRestoreMetadata",
            "backup:getRestoreJobMetadata",
            "backup:getRestoreTestingInferredMetadata",
            "backup:getRestoreTestingPlan",
            "backup:getRestoreTestingSelection",
            "backup:getSupportedResourceTypes",
            "backup:listBackupJobs",
            "backup:listBackupPlanTemplates",
            "backup:listBackupPlanVersions",
            "backup:listBackupPlans",
            "backup:listBackupSelections",
            "backup:listBackupVaults",
            "backup:listCopyJobs",
            "backup:listFrameworks",
            "backup:listLegalHolds",
            "backup:listProtectedResources",
            "backup:listRecoveryPointsByBackupVault",
            "backup:listRecoveryPointsByLegalHold",
            "backup:listRecoveryPointsByResource",
            "backup:listReportJobs",
            "backup:listReportPlans",
            "backup:listRestoreJobs",
            "backup:listRestoreJobsByProtectedResource",
            "backup:listRestoreTestingPlans",
            "backup:listRestoreTestingSelections",
            "backup:listTags",
            "batch:describeComputeEnvironments",
            "batch:describeJobDefinitions",
            "batch:describeJobQueues",
            "batch:describeJobs",
            "batch:listJobs",
            "bedrock:getAgent",
            "bedrock:getAgentActionGroup",
            "bedrock:getAgentAlias",
            "bedrock:getAgentKnowledgeBase",
            "bedrock:getAgentVersion",
            "bedrock:getCustomModel",
            "bedrock:getDataSource",
            "bedrock:getEvaluationJob",
            "bedrock:getFlow",
            "bedrock:getFlowAlias",
            "bedrock:getFlowVersion",
            "bedrock:getFoundationModel",
            "bedrock:getGuardrail",
            "bedrock:getImportedModel",
            "bedrock:getInferenceProfile",
            "bedrock:getIngestionJob",
            "bedrock:getKnowledgeBase",
            "bedrock:getModelCopyJob",
            "bedrock:getModelCustomizationJob",
            "bedrock:getModelImportJob",
            "bedrock:getModelInvocationJob",
            "bedrock:getModelInvocationLoggingConfiguration",
            "bedrock:getPrompt",
            "bedrock:getProvisionedModelThroughput",
            "bedrock:listAgentActionGroups",
            "bedrock:listAgentAliases",
            "bedrock:listAgentKnowledgeBases",
            "bedrock:listAgentVersions",
            "bedrock:listAgents",
            "bedrock:listCustomModels",
            "bedrock:listDataSources",
            "bedrock:listEvaluationJobs",
            "bedrock:listFlowAliases",
            "bedrock:listFlowVersions",
            "bedrock:listFlows",
            "bedrock:listFoundationModels",
            "bedrock:listGuardrails",
            "bedrock:listImportedModels",
            "bedrock:listInferenceProfiles",
            "bedrock:listIngestionJobs",
            "bedrock:listKnowledgeBases",
            "bedrock:listModelCopyJobs",
            "bedrock:listModelCustomizationJobs",
            "bedrock:listModelImportJobs",
            "bedrock:listModelInvocationJobs",
            "bedrock:listPrompts",
            "bedrock:listProvisionedModelThroughputs",
            "braket:getDevice",
            "braket:getQuantumTask",
            "braket:searchDevices",
            "braket:searchQuantumTasks",
            "budgets:viewBudget",
            "ce:getCostAndUsage",
            "ce:getCostAndUsageWithResources",
            "ce:getCostForecast",
            "ce:getDimensionValues",
            "ce:getReservationCoverage",
            "ce:getReservationPurchaseRecommendation",
            "ce:getReservationUtilization",
            "ce:getRightsizingRecommendation",
            "ce:getSavingsPlansCoverage",
            "ce:getSavingsPlansPurchaseRecommendation",
            "ce:getSavingsPlansUtilization",
            "ce:getSavingsPlansUtilizationDetails",
            "ce:getTags",
            "chime:describeAppInstance",
            "chime:getAttendee",
            "chime:getGlobalSettings",
            "chime:getMediaCapturePipeline",
            "chime:getMediaPipeline",
            "chime:getMeeting",
            "chime:getProxySession",
            "chime:getSipMediaApplication",
            "chime:getSipRule",
            "chime:getVoiceConnector",
            "chime:getVoiceConnectorGroup",
            "chime:getVoiceConnectorLoggingConfiguration",
            "chime:listAppInstances",
            "chime:listAttendees",
            "chime:listChannelBans",
            "chime:listChannels",
            "chime:listChannelsModeratedByAppInstanceUser",
            "chime:listMediaCapturePipelines",
            "chime:listMediaPipelines",
            "chime:listMeetings",
            "chime:listSipMediaApplications",
            "chime:listSipRules",
            "chime:listVoiceConnectorGroups",
            "chime:listVoiceConnectors",
            "cleanrooms:batchGetCollaborationAnalysisTemplate",
            "cleanrooms:batchGetSchema",
            "cleanrooms:getAnalysisTemplate",
            "cleanrooms:getCollaboration",
            "cleanrooms:getCollaborationAnalysisTemplate",
            "cleanrooms:getConfiguredTable",
            "cleanrooms:getConfiguredTableAssociation",
            "cleanrooms:getMembership",
            "cleanrooms:getSchema",
            "cleanrooms:listAnalysisTemplates",
            "cleanrooms:listCollaborationAnalysisTemplates",
            "cleanrooms:listCollaborations",
            "cleanrooms:listConfiguredTableAssociations",
            "cleanrooms:listConfiguredTables",
            "cleanrooms:listMembers",
            "cleanrooms:listMemberships",
            "cleanrooms:listSchemas",
            "cloud9:describeEnvironmentMemberships",
            "cloud9:describeEnvironments",
            "cloud9:listEnvironments",
            "cloudWatch:getMetricWidgetImage",
            "clouddirectory:getDirectory",
            "clouddirectory:listDirectories",
            "cloudformation:batchDescribeTypeConfigurations",
            "cloudformation:describeAccountLimits",
            "cloudformation:describeChangeSet",
            "cloudformation:describeChangeSetHooks",
            "cloudformation:describePublisher",
            "cloudformation:describeStackEvents",
            "cloudformation:describeStackInstance",
            "cloudformation:describeStackResource",
            "cloudformation:describeStackResources",
            "cloudformation:describeStackSet",
            "cloudformation:describeStackSetOperation",
            "cloudformation:describeStacks",
            "cloudformation:describeType",
            "cloudformation:describeTypeRegistration",
            "cloudformation:estimateTemplateCost",
            "cloudformation:getStackPolicy",
            "cloudformation:getTemplate",
            "cloudformation:getTemplateSummary",
            "cloudformation:listChangeSets",
            "cloudformation:listExports",
            "cloudformation:listImports",
            "cloudformation:listStackInstances",
            "cloudformation:listStackResources",
            "cloudformation:listStackSetOperationResults",
            "cloudformation:listStackSetOperations",
            "cloudformation:listStackSets",
            "cloudformation:listStacks",
            "cloudformation:listTypeRegistrations",
            "cloudformation:listTypeVersions",
            "cloudformation:listTypes",
            "cloudfront:describeFunction",
            "cloudfront:getCachePolicy",
            "cloudfront:getCachePolicyConfig",
            "cloudfront:getCloudFrontOriginAccessIdentity",
            "cloudfront:getCloudFrontOriginAccessIdentityConfig",
            "cloudfront:getContinuousDeploymentPolicy",
            "cloudfront:getContinuousDeploymentPolicyConfig",
            "cloudfront:getDistribution",
            "cloudfront:getDistributionConfig",
            "cloudfront:getInvalidation",
            "cloudfront:getKeyGroup",
            "cloudfront:getKeyGroupConfig",
            "cloudfront:getMonitoringSubscription",
            "cloudfront:getOriginAccessControl",
            "cloudfront:getOriginAccessControlConfig",
            "cloudfront:getOriginRequestPolicy",
            "cloudfront:getOriginRequestPolicyConfig",
            "cloudfront:getPublicKey",
            "cloudfront:getPublicKeyConfig",
            "cloudfront:getRealtimeLogConfig",
            "cloudfront:getResponseHeadersPolicy",
            "cloudfront:getResponseHeadersPolicyConfig",
            "cloudfront:getStreamingDistribution",
            "cloudfront:getStreamingDistributionConfig",
            "cloudfront:listCachePolicies",
            "cloudfront:listCloudFrontOriginAccessIdentities",
            "cloudfront:listContinuousDeploymentPolicies",
            "cloudfront:listDistributions",
            "cloudfront:listDistributionsByCachePolicyId",
            "cloudfront:listDistributionsByKeyGroup",
            "cloudfront:listDistributionsByOriginRequestPolicyId",
            "cloudfront:listDistributionsByRealtimeLogConfig",
            "cloudfront:listDistributionsByResponseHeadersPolicyId",
            "cloudfront:listDistributionsByWebACLId",
            "cloudfront:listFunctions",
            "cloudfront:listInvalidations",
            "cloudfront:listKeyGroups",
            "cloudfront:listOriginAccessControls",
            "cloudfront:listOriginRequestPolicies",
            "cloudfront:listPublicKeys",
            "cloudfront:listRealtimeLogConfigs",
            "cloudfront:listResponseHeadersPolicies",
            "cloudfront:listStreamingDistributions",
            "cloudhsm:describeBackups",
            "cloudhsm:describeClusters",
            "cloudsearch:describeAnalysisSchemes",
            "cloudsearch:describeAvailabilityOptions",
            "cloudsearch:describeDomains",
            "cloudsearch:describeExpressions",
            "cloudsearch:describeIndexFields",
            "cloudsearch:describeScalingParameters",
            "cloudsearch:describeServiceAccessPolicies",
            "cloudsearch:describeSuggesters",
            "cloudsearch:listDomainNames",
            "cloudtrail:describeTrails",
            "cloudtrail:getEventSelectors",
            "cloudtrail:getInsightSelectors",
            "cloudtrail:getTrail",
            "cloudtrail:getTrailStatus",
            "cloudtrail:listPublicKeys",
            "cloudtrail:listTags",
            "cloudtrail:listTrails",
            "cloudtrail:lookupEvents",
            "cloudwatch:describeAlarmHistory",
            "cloudwatch:describeAlarms",
            "cloudwatch:describeAlarmsForMetric",
            "cloudwatch:describeAnomalyDetectors",
            "cloudwatch:describeInsightRules",
            "cloudwatch:getDashboard",
            "cloudwatch:getInsightRuleReport",
            "cloudwatch:getMetricData",
            "cloudwatch:getMetricStatistics",
            "cloudwatch:getMetricStream",
            "cloudwatch:listDashboards",
            "cloudwatch:listManagedInsightRules",
            "cloudwatch:listMetricStreams",
            "cloudwatch:listMetrics",
            "codeartifact:describeDomain",
            "codeartifact:describePackageVersion",
            "codeartifact:describeRepository",
            "codeartifact:getDomainPermissionsPolicy",
            "codeartifact:getRepositoryEndpoint",
            "codeartifact:getRepositoryPermissionsPolicy",
            "codeartifact:listDomains",
            "codeartifact:listPackageVersionAssets",
            "codeartifact:listPackageVersions",
            "codeartifact:listPackages",
            "codeartifact:listRepositories",
            "codeartifact:listRepositoriesInDomain",
            "codebuild:batchGetBuildBatches",
            "codebuild:batchGetBuilds",
            "codebuild:batchGetFleets",
            "codebuild:batchGetProjects",
            "codebuild:listBuildBatches",
            "codebuild:listBuildBatchesForProject",
            "codebuild:listBuilds",
            "codebuild:listBuildsForProject",
            "codebuild:listCuratedEnvironmentImages",
            "codebuild:listFleets",
            "codebuild:listProjects",
            "codebuild:listSourceCredentials",
            "codecommit:batchGetRepositories",
            "codecommit:getBranch",
            "codecommit:getRepository",
            "codecommit:getRepositoryTriggers",
            "codecommit:listBranches",
            "codecommit:listRepositories",
            "codeconnections:getConnection",
            "codeconnections:getHost",
            "codeconnections:getRepositoryLink",
            "codeconnections:getRepositorySyncStatus",
            "codeconnections:getResourceSyncStatus",
            "codeconnections:getSyncBlockerSummary",
            "codeconnections:getSyncConfiguration",
            "codeconnections:listConnections",
            "codeconnections:listHosts",
            "codeconnections:listRepositoryLinks",
            "codeconnections:listRepositorySyncDefinitions",
            "codeconnections:listSyncConfigurations",
            "codedeploy:batchGetApplicationRevisions",
            "codedeploy:batchGetApplications",
            "codedeploy:batchGetDeploymentGroups",
            "codedeploy:batchGetDeploymentInstances",
            "codedeploy:batchGetDeploymentTargets",
            "codedeploy:batchGetDeployments",
            "codedeploy:batchGetOnPremisesInstances",
            "codedeploy:getApplication",
            "codedeploy:getApplicationRevision",
            "codedeploy:getDeployment",
            "codedeploy:getDeploymentConfig",
            "codedeploy:getDeploymentGroup",
            "codedeploy:getDeploymentInstance",
            "codedeploy:getDeploymentTarget",
            "codedeploy:getOnPremisesInstance",
            "codedeploy:listApplicationRevisions",
            "codedeploy:listApplications",
            "codedeploy:listDeploymentConfigs",
            "codedeploy:listDeploymentGroups",
            "codedeploy:listDeploymentInstances",
            "codedeploy:listDeploymentTargets",
            "codedeploy:listDeployments",
            "codedeploy:listGitHubAccountTokenNames",
            "codedeploy:listOnPremisesInstances",
            "codepipeline:getJobDetails",
            "codepipeline:getPipeline",
            "codepipeline:getPipelineExecution",
            "codepipeline:getPipelineState",
            "codepipeline:listActionExecutions",
            "codepipeline:listActionTypes",
            "codepipeline:listPipelineExecutions",
            "codepipeline:listPipelines",
            "codepipeline:listWebhooks",
            "codestar-connections:getConnection",
            "codestar-connections:getHost",
            "codestar-connections:listConnections",
            "codestar-connections:listHosts",
            "codestar:describeProject",
            "codestar:listProjects",
            "codestar:listResources",
            "codestar:listTeamMembers",
            "codestar:listUserProfiles",
            "cognito-identity:describeIdentityPool",
            "cognito-identity:getIdentityPoolRoles",
            "cognito-identity:listIdentities",
            "cognito-identity:listIdentityPools",
            "cognito-idp:describeIdentityProvider",
            "cognito-idp:describeResourceServer",
            "cognito-idp:describeRiskConfiguration",
            "cognito-idp:describeUserImportJob",
            "cognito-idp:describeUserPool",
            "cognito-idp:describeUserPoolClient",
            "cognito-idp:describeUserPoolDomain",
            "cognito-idp:getGroup",
            "cognito-idp:getUICustomization",
            "cognito-idp:getUserPoolMfaConfig",
            "cognito-idp:listGroups",
            "cognito-idp:listIdentityProviders",
            "cognito-idp:listResourceServers",
            "cognito-idp:listUserImportJobs",
            "cognito-idp:listUserPoolClients",
            "cognito-idp:listUserPools",
            "cognito-sync:describeDataset",
            "cognito-sync:describeIdentityPoolUsage",
            "cognito-sync:describeIdentityUsage",
            "cognito-sync:getCognitoEvents",
            "cognito-sync:getIdentityPoolConfiguration",
            "cognito-sync:listDatasets",
            "cognito-sync:listIdentityPoolUsage",
            "comprehend:describeDocumentClassificationJob",
            "comprehend:describeDocumentClassifier",
            "comprehend:describeDominantLanguageDetectionJob",
            "comprehend:describeEndpoint",
            "comprehend:describeEntitiesDetectionJob",
            "comprehend:describeEntityRecognizer",
            "comprehend:describeEventsDetectionJob",
            "comprehend:describeFlywheel",
            "comprehend:describeFlywheelIteration",
            "comprehend:describeKeyPhrasesDetectionJob",
            "comprehend:describePiiEntitiesDetectionJob",
            "comprehend:describeSentimentDetectionJob",
            "comprehend:describeTargetedSentimentDetectionJob",
            "comprehend:describeTopicsDetectionJob",
            "comprehend:listDocumentClassificationJobs",
            "comprehend:listDocumentClassifiers",
            "comprehend:listDominantLanguageDetectionJobs",
            "comprehend:listEndpoints",
            "comprehend:listEntitiesDetectionJobs",
            "comprehend:listEntityRecognizers",
            "comprehend:listEventsDetectionJobs",
            "comprehend:listFlywheelIterationHistory",
            "comprehend:listFlywheels",
            "comprehend:listKeyPhrasesDetectionJobs",
            "comprehend:listPiiEntitiesDetectionJobs",
            "comprehend:listSentimentDetectionJobs",
            "comprehend:listTargetedSentimentDetectionJobs",
            "comprehend:listTopicsDetectionJobs",
            "compute-optimizer:getAutoScalingGroupRecommendations",
            "compute-optimizer:getEBSVolumeRecommendations",
            "compute-optimizer:getEC2InstanceRecommendations",
            "compute-optimizer:getEC2RecommendationProjectedMetrics",
            "compute-optimizer:getECSServiceRecommendationProjectedMetrics",
            "compute-optimizer:getECSServiceRecommendations",
            "compute-optimizer:getEnrollmentStatus",
            "compute-optimizer:getRecommendationSummaries",
            "config:batchGetAggregateResourceConfig",
            "config:batchGetResourceConfig",
            "config:describeAggregateComplianceByConfigRules",
            "config:describeAggregationAuthorizations",
            "config:describeComplianceByConfigRule",
            "config:describeComplianceByResource",
            "config:describeConfigRuleEvaluationStatus",
            "config:describeConfigRules",
            "config:describeConfigurationAggregatorSourcesStatus",
            "config:describeConfigurationAggregators",
            "config:describeConfigurationRecorderStatus",
            "config:describeConfigurationRecorders",
            "config:describeConformancePackCompliance",
            "config:describeConformancePackStatus",
            "config:describeConformancePacks",
            "config:describeDeliveryChannelStatus",
            "config:describeDeliveryChannels",
            "config:describeOrganizationConfigRuleStatuses",
            "config:describeOrganizationConfigRules",
            "config:describeOrganizationConformancePackStatuses",
            "config:describeOrganizationConformancePacks",
            "config:describePendingAggregationRequests",
            "config:describeRemediationConfigurations",
            "config:describeRemediationExceptions",
            "config:describeRemediationExecutionStatus",
            "config:describeRetentionConfigurations",
            "config:getAggregateComplianceDetailsByConfigRule",
            "config:getAggregateConfigRuleComplianceSummary",
            "config:getAggregateDiscoveredResourceCounts",
            "config:getAggregateResourceConfig",
            "config:getComplianceDetailsByConfigRule",
            "config:getComplianceDetailsByResource",
            "config:getComplianceSummaryByConfigRule",
            "config:getComplianceSummaryByResourceType",
            "config:getConformancePackComplianceDetails",
            "config:getConformancePackComplianceSummary",
            "config:getDiscoveredResourceCounts",
            "config:getOrganizationConfigRuleDetailedStatus",
            "config:getOrganizationConformancePackDetailedStatus",
            "config:getResourceConfigHistory",
            "config:listAggregateDiscoveredResources",
            "config:listDiscoveredResources",
            "config:listTagsForResource",
            "connect:describeContact",
            "connect:describePhoneNumber",
            "connect:describeQueue",
            "connect:describeQuickConnect",
            "connect:describeRoutingProfile",
            "connect:describeUser",
            "connect:describeUserHierarchyStructure",
            "connect:getCurrentMetricData",
            "connect:getMetricData",
            "connect:listContactEvaluations",
            "connect:listEvaluationFormVersions",
            "connect:listEvaluationForms",
            "connect:listPhoneNumbersV2",
            "connect:listQueueQuickConnects",
            "connect:listQueues",
            "connect:listQuickConnects",
            "connect:listRoutingProfileQueues",
            "connect:listRoutingProfiles",
            "connect:listSecurityProfiles",
            "connect:listUsers",
            "connect:listViewVersions",
            "connect:listViews",
            "connect:searchQueues",
            "connect:searchRoutingProfiles",
            "connect:searchUsers",
            "controltower:describeAccountFactoryConfig",
            "controltower:describeCoreService",
            "controltower:describeGuardrail",
            "controltower:describeGuardrailForTarget",
            "controltower:describeManagedAccount",
            "controltower:describeSingleSignOn",
            "controltower:getAvailableUpdates",
            "controltower:getHomeRegion",
            "controltower:getLandingZone",
            "controltower:getLandingZoneStatus",
            "controltower:listDirectoryGroups",
            "controltower:listEnabledControls",
            "controltower:listGuardrailViolations",
            "controltower:listGuardrailsForTarget",
            "controltower:listLandingZones",
            "controltower:listManagedAccounts",
            "controltower:listManagedAccountsForGuardrail",
            "controltower:listManagedAccountsForParent",
            "controltower:listManagedOrganizationalUnits",
            "controltower:listManagedOrganizationalUnitsForGuardrail",
            "cost-optimization-hub:getPreferences",
            "cost-optimization-hub:getRecommendation",
            "cost-optimization-hub:listEnrollmentStatuses",
            "cost-optimization-hub:listRecommendationSummaries",
            "cost-optimization-hub:listRecommendations",
            "databrew:describeDataset",
            "databrew:describeJob",
            "databrew:describeProject",
            "databrew:describeRecipe",
            "databrew:listDatasets",
            "databrew:listJobRuns",
            "databrew:listJobs",
            "databrew:listProjects",
            "databrew:listRecipeVersions",
            "databrew:listRecipes",
            "databrew:listTagsForResource",
            "datapipeline:describeObjects",
            "datapipeline:describePipelines",
            "datapipeline:getPipelineDefinition",
            "datapipeline:listPipelines",
            "datapipeline:queryObjects",
            "datasync:describeAgent",
            "datasync:describeLocationEfs",
            "datasync:describeLocationFsxLustre",
            "datasync:describeLocationFsxOpenZfs",
            "datasync:describeLocationFsxWindows",
            "datasync:describeLocationHdfs",
            "datasync:describeLocationNfs",
            "datasync:describeLocationObjectStorage",
            "datasync:describeLocationS3",
            "datasync:describeLocationSmb",
            "datasync:describeTask",
            "datasync:describeTaskExecution",
            "datasync:listAgents",
            "datasync:listLocations",
            "datasync:listTaskExecutions",
            "datasync:listTasks",
            "datazone:getAsset",
            "datazone:getAssetType",
            "datazone:getDataSource",
            "datazone:getDataSourceRun",
            "datazone:getDomain",
            "datazone:getEnvironment",
            "datazone:getEnvironmentBlueprint",
            "datazone:getEnvironmentBlueprintConfiguration",
            "datazone:getEnvironmentProfile",
            "datazone:getFormType",
            "datazone:getGlossary",
            "datazone:getGlossaryTerm",
            "datazone:getGroupProfile",
            "datazone:getListing",
            "datazone:getMetadataGenerationRun",
            "datazone:getProject",
            "datazone:getSubscription",
            "datazone:getSubscriptionGrant",
            "datazone:getSubscriptionRequestDetails",
            "datazone:getSubscriptionTarget",
            "datazone:getUserProfile",
            "datazone:listAssetRevisions",
            "datazone:listDataSourceRunActivities",
            "datazone:listDataSourceRuns",
            "datazone:listDataSources",
            "datazone:listDomains",
            "datazone:listEnvironmentBlueprintConfigurations",
            "datazone:listEnvironmentBlueprints",
            "datazone:listEnvironmentProfiles",
            "datazone:listEnvironments",
            "datazone:listMetadataGenerationRuns",
            "datazone:listProjectMemberships",
            "datazone:listProjects",
            "datazone:listSubscriptionGrants",
            "datazone:listSubscriptionRequests",
            "datazone:listSubscriptionTargets",
            "datazone:listSubscriptions",
            "datazone:searchGroupProfiles",
            "datazone:searchUserProfiles",
            "dax:describeClusters",
            "dax:describeDefaultParameters",
            "dax:describeEvents",
            "dax:describeParameterGroups",
            "dax:describeParameters",
            "dax:describeSubnetGroups",
            "deadline:listAvailableMeteredProducts",
            "deadline:listBudgets",
            "deadline:listFarmMembers",
            "deadline:listFarms",
            "deadline:listFleetMembers",
            "deadline:listFleets",
            "deadline:listJobMembers",
            "deadline:listJobs",
            "deadline:listLicenseEndpoints",
            "deadline:listMeteredProducts",
            "deadline:listMonitors",
            "deadline:listQueueEnvironments",
            "deadline:listQueueFleetAssociations",
            "deadline:listQueueMembers",
            "deadline:listQueues",
            "deadline:listStorageProfiles",
            "deadline:listWorkers",
            "detective:getMembers",
            "detective:listGraphs",
            "detective:listInvitations",
            "detective:listMembers",
            "devicefarm:getAccountSettings",
            "devicefarm:getDevice",
            "devicefarm:getDevicePool",
            "devicefarm:getDevicePoolCompatibility",
            "devicefarm:getJob",
            "devicefarm:getProject",
            "devicefarm:getRemoteAccessSession",
            "devicefarm:getRun",
            "devicefarm:getSuite",
            "devicefarm:getTest",
            "devicefarm:getTestGridProject",
            "devicefarm:getTestGridSession",
            "devicefarm:getUpload",
            "devicefarm:listArtifacts",
            "devicefarm:listDevicePools",
            "devicefarm:listDevices",
            "devicefarm:listJobs",
            "devicefarm:listProjects",
            "devicefarm:listRemoteAccessSessions",
            "devicefarm:listRuns",
            "devicefarm:listSamples",
            "devicefarm:listSuites",
            "devicefarm:listTestGridProjects",
            "devicefarm:listTestGridSessionpermissions",
            "devicefarm:listTestGridSessionArtifacts",
            "devicefarm:listTestGridSessions",
            "devicefarm:listTests",
            "devicefarm:listUniqueProblems",
            "devicefarm:listUploads",
            "directconnect:describeConnectionLoa",
            "directconnect:describeConnections",
            "directconnect:describeConnectionsOnInterconnect",
            "directconnect:describeCustomerMetadata",
            "directconnect:describeDirectConnectGatewayAssociationProposals",
            "directconnect:describeDirectConnectGatewayAssociations",
            "directconnect:describeDirectConnectGatewayAttachments",
            "directconnect:describeDirectConnectGateways",
            "directconnect:describeHostedConnections",
            "directconnect:describeInterconnectLoa",
            "directconnect:describeInterconnects",
            "directconnect:describeLags",
            "directconnect:describeLoa",
            "directconnect:describeLocations",
            "directconnect:describeRouterConfiguration",
            "directconnect:describeVirtualGateways",
            "directconnect:describeVirtualInterfaces",
            "dlm:getLifecyclePolicies",
            "dlm:getLifecyclePolicy",
            "dms:describeAccountAttributes",
            "dms:describeApplicableIndividualAssessments",
            "dms:describeConnections",
            "dms:describeEndpointSettings",
            "dms:describeEndpointTypes",
            "dms:describeEndpoints",
            "dms:describeEventCategories",
            "dms:describeEventSubscriptions",
            "dms:describeEvents",
            "dms:describeFleetAdvisorCollectors",
            "dms:describeFleetAdvisorDatabases",
            "dms:describeFleetAdvisorLsaAnalysis",
            "dms:describeFleetAdvisorSchemaObjectSummary",
            "dms:describeFleetAdvisorSchemas",
            "dms:describeOrderableReplicationInstances",
            "dms:describePendingMaintenancepermissions",
            "dms:describeRefreshSchemasStatus",
            "dms:describeReplicationInstanceTaskLogs",
            "dms:describeReplicationInstances",
            "dms:describeReplicationSubnetGroups",
            "dms:describeReplicationTaskAssessmentResults",
            "dms:describeReplicationTaskAssessmentRuns",
            "dms:describeReplicationTaskIndividualAssessments",
            "dms:describeReplicationTasks",
            "dms:describeSchemas",
            "dms:describeTableStatistics",
            "docdb-elastic:getCluster",
            "docdb-elastic:getClusterSnapshot",
            "docdb-elastic:listClusterSnapshots",
            "docdb-elastic:listClusters",
            "drs:describeJobLogItems",
            "drs:describeJobs",
            "drs:describeLaunchConfigurationTemplates",
            "drs:describeRecoveryInstances",
            "drs:describeRecoverySnapshots",
            "drs:describeReplicationConfigurationTemplates",
            "drs:describeSourceNetworks",
            "drs:describeSourceServers",
            "drs:getLaunchConfiguration",
            "drs:getReplicationConfiguration",
            "drs:listExtensibleSourceServers",
            "drs:listLaunchpermissions",
            "drs:listStagingAccounts",
            "ds:describeClientAuthenticationSettings",
            "ds:describeConditionalForwarders",
            "ds:describeDirectories",
            "ds:describeDomainControllers",
            "ds:describeEventTopics",
            "ds:describeLDAPSSettings",
            "ds:describeSharedDirectories",
            "ds:describeSnapshots",
            "ds:describeTrusts",
            "ds:getDirectoryLimits",
            "ds:getSnapshotLimits",
            "ds:listIpRoutes",
            "ds:listSchemaExtensions",
            "ds:listTagsForResource",
            "dynamodb:describeBackup",
            "dynamodb:describeContinuousBackups",
            "dynamodb:describeContributorInsights",
            "dynamodb:describeExport",
            "dynamodb:describeGlobalTable",
            "dynamodb:describeImport",
            "dynamodb:describeKinesisStreamingDestination",
            "dynamodb:describeLimits",
            "dynamodb:describeStream",
            "dynamodb:describeTable",
            "dynamodb:describeTimeToLive",
            "dynamodb:getResourcePolicy",
            "dynamodb:listBackups",
            "dynamodb:listContributorInsights",
            "dynamodb:listExports",
            "dynamodb:listGlobalTables",
            "dynamodb:listImports",
            "dynamodb:listStreams",
            "dynamodb:listTables",
            "dynamodb:listTagsOfResource",
            "ec2:describeAccountAttributes",
            "ec2:describeAddressTransfers",
            "ec2:describeAddresses",
            "ec2:describeAddressesAttribute",
            "ec2:describeAggregateIdFormat",
            "ec2:describeAvailabilityZones",
            "ec2:describeBundleTasks",
            "ec2:describeByoipCidrs",
            "ec2:describeCapacityReservationFleets",
            "ec2:describeCapacityReservations",
            "ec2:describeCarrierGateways",
            "ec2:describeClassicLinkInstances",
            "ec2:describeClientVpnAuthorizationRules",
            "ec2:describeClientVpnConnections",
            "ec2:describeClientVpnEndpoints",
            "ec2:describeClientVpnRoutes",
            "ec2:describeClientVpnTargetNetworks",
            "ec2:describeCoipPools",
            "ec2:describeConversionTasks",
            "ec2:describeCustomerGateways",
            "ec2:describeDhcpOptions",
            "ec2:describeEgressOnlyInternetGateways",
            "ec2:describeExportImageTasks",
            "ec2:describeExportTasks",
            "ec2:describeFastLaunchImages",
            "ec2:describeFastSnapshotRestores",
            "ec2:describeFleetHistory",
            "ec2:describeFleetInstances",
            "ec2:describeFleets",
            "ec2:describeFlowLogs",
            "ec2:describeFpgaImageAttribute",
            "ec2:describeFpgaImages",
            "ec2:describeHostReservationOfferings",
            "ec2:describeHostReservations",
            "ec2:describeHosts",
            "ec2:describeIamInstanceProfileAssociations",
            "ec2:describeIdFormat",
            "ec2:describeIdentityIdFormat",
            "ec2:describeImageAttribute",
            "ec2:describeImages",
            "ec2:describeImportImageTasks",
            "ec2:describeImportSnapshotTasks",
            "ec2:describeInstanceAttribute",
            "ec2:describeInstanceCreditSpecifications",
            "ec2:describeInstanceEventNotificationAttributes",
            "ec2:describeInstanceEventWindows",
            "ec2:describeInstanceStatus",
            "ec2:describeInstanceTypeOfferings",
            "ec2:describeInstanceTypes",
            "ec2:describeInstances",
            "ec2:describeInternetGateways",
            "ec2:describeIpamByoasn",
            "ec2:describeIpamPools",
            "ec2:describeIpamResourceDiscoveries",
            "ec2:describeIpamResourceDiscoveryAssociations",
            "ec2:describeIpamScopes",
            "ec2:describeIpams",
            "ec2:describeIpv6Pools",
            "ec2:describeKeyPairs",
            "ec2:describeLaunchTemplateVersions",
            "ec2:describeLaunchTemplates",
            "ec2:describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:describeLocalGatewayRouteTableVpcAssociations",
            "ec2:describeLocalGatewayRouteTables",
            "ec2:describeLocalGatewayVirtualInterfaceGroups",
            "ec2:describeLocalGatewayVirtualInterfaces",
            "ec2:describeLocalGateways",
            "ec2:describeManagedPrefixLists",
            "ec2:describeMovingAddresses",
            "ec2:describeNatGateways",
            "ec2:describeNetworkAcls",
            "ec2:describeNetworkInsightsAccessScopes",
            "ec2:describeNetworkInsightsAnalyses",
            "ec2:describeNetworkInsightsPaths",
            "ec2:describeNetworkInterfaceAttribute",
            "ec2:describeNetworkInterfaces",
            "ec2:describePlacementGroups",
            "ec2:describePrefixLists",
            "ec2:describePrincipalIdFormat",
            "ec2:describePublicIpv4Pools",
            "ec2:describeRegions",
            "ec2:describeReservedInstances",
            "ec2:describeReservedInstancesListings",
            "ec2:describeReservedInstancesModifications",
            "ec2:describeReservedInstancesOfferings",
            "ec2:describeRouteTables",
            "ec2:describeScheduledInstanceAvailability",
            "ec2:describeScheduledInstances",
            "ec2:describeSecurityGroupReferences",
            "ec2:describeSecurityGroupRules",
            "ec2:describeSecurityGroups",
            "ec2:describeSnapshotAttribute",
            "ec2:describeSnapshotTierStatus",
            "ec2:describeSnapshots",
            "ec2:describeSpotDatafeedSubscription",
            "ec2:describeSpotFleetInstances",
            "ec2:describeSpotFleetRequestHistory",
            "ec2:describeSpotFleetRequests",
            "ec2:describeSpotInstanceRequests",
            "ec2:describeSpotPriceHistory",
            "ec2:describeStaleSecurityGroups",
            "ec2:describeStoreImageTasks",
            "ec2:describeSubnets",
            "ec2:describeTags",
            "ec2:describeTrafficMirrorFilterRules",
            "ec2:describeTrafficMirrorFilters",
            "ec2:describeTrafficMirrorSessions",
            "ec2:describeTrafficMirrorTargets",
            "ec2:describeTransitGatewayAttachments",
            "ec2:describeTransitGatewayConnectPeers",
            "ec2:describeTransitGatewayMulticastDomains",
            "ec2:describeTransitGatewayPeeringAttachments",
            "ec2:describeTransitGatewayPolicyTables",
            "ec2:describeTransitGatewayRouteTableAnnouncements",
            "ec2:describeTransitGatewayRouteTables",
            "ec2:describeTransitGatewayVpcAttachments",
            "ec2:describeTransitGateways",
            "ec2:describeVerifiedAccessEndpoints",
            "ec2:describeVerifiedAccessGroups",
            "ec2:describeVerifiedAccessInstances",
            "ec2:describeVerifiedAccessTrustProviders",
            "ec2:describeVolumeAttribute",
            "ec2:describeVolumeStatus",
            "ec2:describeVolumes",
            "ec2:describeVolumesModifications",
            "ec2:describeVpcAttribute",
            "ec2:describeVpcClassicLink",
            "ec2:describeVpcClassicLinkDnsSupport",
            "ec2:describeVpcEndpointConnectionNotifications",
            "ec2:describeVpcEndpointConnections",
            "ec2:describeVpcEndpointServiceConfigurations",
            "ec2:describeVpcEndpointServicePermissions",
            "ec2:describeVpcEndpointServices",
            "ec2:describeVpcEndpoints",
            "ec2:describeVpcPeeringConnections",
            "ec2:describeVpcs",
            "ec2:describeVpnConnections",
            "ec2:describeVpnGateways",
            "ec2:getAssociatedIpv6PoolCidrs",
            "ec2:getCapacityReservationUsage",
            "ec2:getCoipPoolUsage",
            "ec2:getConsoleOutput",
            "ec2:getConsoleScreenshot",
            "ec2:getDefaultCreditSpecification",
            "ec2:getEbsDefaultKmsKeyId",
            "ec2:getEbsEncryptionByDefault",
            "ec2:getGroupsForCapacityReservation",
            "ec2:getHostReservationPurchasePreview",
            "ec2:getInstanceTypesFromInstanceRequirements",
            "ec2:getIpamAddressHistory",
            "ec2:getIpamDiscoveredAccounts",
            "ec2:getIpamDiscoveredPublicAddresses",
            "ec2:getIpamDiscoveredResourceCidrs",
            "ec2:getIpamPoolAllocations",
            "ec2:getIpamPoolCidrs",
            "ec2:getIpamResourceCidrs",
            "ec2:getLaunchTemplateData",
            "ec2:getManagedPrefixListAssociations",
            "ec2:getManagedPrefixListEntries",
            "ec2:getReservedInstancesExchangeQuote",
            "ec2:getSerialConsoleAccessStatus",
            "ec2:getSpotPlacementScores",
            "ec2:getSubnetCidrReservations",
            "ec2:getTransitGatewayMulticastDomainAssociations",
            "ec2:getTransitGatewayPrefixListReferences",
            "ec2:getVerifiedAccessEndpointPolicy",
            "ec2:getVerifiedAccessGroupPolicy",
            "ec2:listImagesInRecycleBin",
            "ec2:listSnapshotsInRecycleBin",
            "ec2:searchLocalGatewayRoutes",
            "ec2:searchTransitGatewayMulticastGroups",
            "ec2:searchTransitGatewayRoutes",
            "ecr-public:describeImageTags",
            "ecr-public:describeImages",
            "ecr-public:describeRegistries",
            "ecr-public:describeRepositories",
            "ecr-public:getRegistryCatalogData",
            "ecr-public:getRepositoryCatalogData",
            "ecr-public:getRepositoryPolicy",
            "ecr-public:listTagsForResource",
            "ecr:batchCheckLayerAvailability",
            "ecr:batchGetRepositoryScanningConfiguration",
            "ecr:describeImageReplicationStatus",
            "ecr:describeImageScanFindings",
            "ecr:describeImages",
            "ecr:describePullThroughCacheRules",
            "ecr:describeRegistry",
            "ecr:describeRepositories",
            "ecr:getLifecyclePolicy",
            "ecr:getLifecyclePolicyPreview",
            "ecr:getRegistryPolicy",
            "ecr:getRegistryScanningConfiguration",
            "ecr:getRepositoryPolicy",
            "ecr:listImages",
            "ecr:listTagsForResource",
            "ecs:describeCapacityProviders",
            "ecs:describeClusters",
            "ecs:describeContainerInstances",
            "ecs:describeServices",
            "ecs:describeTaskDefinition",
            "ecs:describeTaskSets",
            "ecs:describeTasks",
            "ecs:getTaskProtection",
            "ecs:listAccountSettings",
            "ecs:listAttributes",
            "ecs:listClusters",
            "ecs:listContainerInstances",
            "ecs:listServices",
            "ecs:listServicesByNamespace",
            "ecs:listTagsForResource",
            "ecs:listTaskDefinitionFamilies",
            "ecs:listTaskDefinitions",
            "ecs:listTasks",
            "eks:describeAccessEntry",
            "eks:describeAddon",
            "eks:describeAddonConfiguration",
            "eks:describeAddonVersions",
            "eks:describeCluster",
            "eks:describeEksAnywhereSubscription",
            "eks:describeFargateProfile",
            "eks:describeIdentityProviderConfig",
            "eks:describeInsight",
            "eks:describeNodegroup",
            "eks:describePodIdentityAssociation",
            "eks:describeUpdate",
            "eks:listAccessEntries",
            "eks:listAccessPolicies",
            "eks:listAddons",
            "eks:listAssociatedAccessPolicies",
            "eks:listClusters",
            "eks:listEksAnywhereSubscriptions",
            "eks:listFargateProfiles",
            "eks:listIdentityProviderConfigs",
            "eks:listInsights",
            "eks:listNodegroups",
            "eks:listPodIdentityAssociations",
            "eks:listUpdates",
            "elasticache:describeCacheClusters",
            "elasticache:describeCacheEngineVersions",
            "elasticache:describeCacheParameterGroups",
            "elasticache:describeCacheParameters",
            "elasticache:describeCacheSecurityGroups",
            "elasticache:describeCacheSubnetGroups",
            "elasticache:describeEngineDefaultParameters",
            "elasticache:describeEvents",
            "elasticache:describeGlobalReplicationGroups",
            "elasticache:describeReplicationGroups",
            "elasticache:describeReservedCacheNodes",
            "elasticache:describeReservedCacheNodesOfferings",
            "elasticache:describeServerlessCacheSnapshots",
            "elasticache:describeServerlessCaches",
            "elasticache:describeServiceUpdates",
            "elasticache:describeSnapshots",
            "elasticache:describeUpdatepermissions",
            "elasticache:describeUserGroups",
            "elasticache:describeUsers",
            "elasticache:listAllowedNodeTypeModifications",
            "elasticache:listTagsForResource",
            "elasticbeanstalk:checkDNSAvailability",
            "elasticbeanstalk:describeAccountAttributes",
            "elasticbeanstalk:describeApplicationVersions",
            "elasticbeanstalk:describeApplications",
            "elasticbeanstalk:describeConfigurationOptions",
            "elasticbeanstalk:describeEnvironmentHealth",
            "elasticbeanstalk:describeEnvironmentManagedActionHistory",
            "elasticbeanstalk:describeEnvironmentManagedpermissions",
            "elasticbeanstalk:describeEnvironmentResources",
            "elasticbeanstalk:describeEnvironments",
            "elasticbeanstalk:describeEvents",
            "elasticbeanstalk:describeInstancesHealth",
            "elasticbeanstalk:describePlatformVersion",
            "elasticbeanstalk:listAvailableSolutionStacks",
            "elasticbeanstalk:listPlatformBranches",
            "elasticbeanstalk:listPlatformVersions",
            "elasticbeanstalk:validateConfigurationSettings",
            "elasticfilesystem:describeAccessPoints",
            "elasticfilesystem:describeBackupPolicy",
            "elasticfilesystem:describeFileSystemPolicy",
            "elasticfilesystem:describeFileSystems",
            "elasticfilesystem:describeLifecycleConfiguration",
            "elasticfilesystem:describeMountTargetSecurityGroups",
            "elasticfilesystem:describeMountTargets",
            "elasticfilesystem:describeReplicationConfigurations",
            "elasticfilesystem:describeTags",
            "elasticfilesystem:listTagsForResource",
            "elasticloadbalancing:describeAccountLimits",
            "elasticloadbalancing:describeInstanceHealth",
            "elasticloadbalancing:describeListenerCertificates",
            "elasticloadbalancing:describeListeners",
            "elasticloadbalancing:describeLoadBalancerAttributes",
            "elasticloadbalancing:describeLoadBalancerPolicies",
            "elasticloadbalancing:describeLoadBalancerPolicyTypes",
            "elasticloadbalancing:describeLoadBalancers",
            "elasticloadbalancing:describeRules",
            "elasticloadbalancing:describeSSLPolicies",
            "elasticloadbalancing:describeTags",
            "elasticloadbalancing:describeTargetGroupAttributes",
            "elasticloadbalancing:describeTargetGroups",
            "elasticloadbalancing:describeTargetHealth",
            "elasticloadbalancing:describeTrustStoreAssociations",
            "elasticloadbalancing:describeTrustStoreRevocations",
            "elasticloadbalancing:describeTrustStores",
            "elasticmapreduce:describeCluster",
            "elasticmapreduce:describeNotebookExecution",
            "elasticmapreduce:describeReleaseLabel",
            "elasticmapreduce:describeSecurityConfiguration",
            "elasticmapreduce:describeStep",
            "elasticmapreduce:describeStudio",
            "elasticmapreduce:getAutoTerminationPolicy",
            "elasticmapreduce:getBlockPublicAccessConfiguration",
            "elasticmapreduce:getManagedScalingPolicy",
            "elasticmapreduce:getStudioSessionMapping",
            "elasticmapreduce:listBootstrappermissions",
            "elasticmapreduce:listClusters",
            "elasticmapreduce:listInstanceFleets",
            "elasticmapreduce:listInstanceGroups",
            "elasticmapreduce:listInstances",
            "elasticmapreduce:listNotebookExecutions",
            "elasticmapreduce:listReleaseLabels",
            "elasticmapreduce:listSecurityConfigurations",
            "elasticmapreduce:listSteps",
            "elasticmapreduce:listStudioSessionMappings",
            "elasticmapreduce:listStudios",
            "elastictranscoder:listJobsByPipeline",
            "elastictranscoder:listJobsByStatus",
            "elastictranscoder:listPipelines",
            "elastictranscoder:listPresets",
            "elastictranscoder:readPipeline",
            "elastictranscoder:readPreset",
            "emr-containers:describeJobRun",
            "emr-containers:describeJobTemplate",
            "emr-containers:describeManagedEndpoint",
            "emr-containers:describeVirtualCluster",
            "emr-containers:listJobRuns",
            "emr-containers:listJobTemplates",
            "emr-containers:listManagedEndpoints",
            "emr-containers:listVirtualClusters",
            "emr-serverless:getApplication",
            "emr-serverless:getJobRun",
            "emr-serverless:listApplications",
            "es:describeDomain",
            "es:describeDomainAutoTunes",
            "es:describeDomainChangeProgress",
            "es:describeDomainConfig",
            "es:describeDomains",
            "es:describeDryRunProgress",
            "es:describeElasticsearchDomain",
            "es:describeElasticsearchDomainConfig",
            "es:describeElasticsearchDomains",
            "es:describeInboundConnections",
            "es:describeInstanceTypeLimits",
            "es:describeOutboundConnections",
            "es:describePackages",
            "es:describeReservedInstanceOfferings",
            "es:describeReservedInstances",
            "es:describeVpcEndpoints",
            "es:getCompatibleVersions",
            "es:getPackageVersionHistory",
            "es:getUpgradeHistory",
            "es:getUpgradeStatus",
            "es:listDomainNames",
            "es:listDomainsForPackage",
            "es:listInstanceTypeDetails",
            "es:listPackagesForDomain",
            "es:listScheduledpermissions",
            "es:listTags",
            "es:listVersions",
            "es:listVpcEndpointAccess",
            "es:listVpcEndpoints",
            "es:listVpcEndpointsForDomain",
            "events:describeApiDestination",
            "events:describeArchive",
            "events:describeConnection",
            "events:describeEndpoint",
            "events:describeEventBus",
            "events:describeEventSource",
            "events:describePartnerEventSource",
            "events:describeReplay",
            "events:describeRule",
            "events:listApiDestinations",
            "events:listArchives",
            "events:listConnections",
            "events:listEndpoints",
            "events:listEventBuses",
            "events:listEventSources",
            "events:listPartnerEventSourceAccounts",
            "events:listPartnerEventSources",
            "events:listReplays",
            "events:listRuleNamesByTarget",
            "events:listRules",
            "events:listTargetsByRule",
            "events:testEventPattern",
            "evidently:getExperiment",
            "evidently:getFeature",
            "evidently:getLaunch",
            "evidently:getProject",
            "evidently:getSegment",
            "evidently:listExperiments",
            "evidently:listFeatures",
            "evidently:listLaunches",
            "evidently:listProjects",
            "evidently:listSegmentReferences",
            "evidently:listSegments",
            "firehose:describeDeliveryStream",
            "firehose:listDeliveryStreams",
            "fms:getAdminAccount",
            "fms:getComplianceDetail",
            "fms:getNotificationChannel",
            "fms:getPolicy",
            "fms:getProtectionStatus",
            "fms:listComplianceStatus",
            "fms:listMemberAccounts",
            "fms:listPolicies",
            "forecast:describeDataset",
            "forecast:describeDatasetGroup",
            "forecast:describeDatasetImportJob",
            "forecast:describeForecast",
            "forecast:describeForecastExportJob",
            "forecast:describePredictor",
            "forecast:getAccuracyMetrics",
            "forecast:listDatasetGroups",
            "forecast:listDatasetImportJobs",
            "forecast:listDatasets",
            "forecast:listForecastExportJobs",
            "forecast:listForecasts",
            "forecast:listPredictors",
            "freetier:getFreeTierUsage",
            "fsx:describeBackups",
            "fsx:describeDataRepositoryAssociations",
            "fsx:describeDataRepositoryTasks",
            "fsx:describeFileCaches",
            "fsx:describeFileSystems",
            "fsx:describeSnapshots",
            "fsx:describeStorageVirtualMachines",
            "fsx:describeVolumes",
            "fsx:listTagsForResource",
            "gamelift:describeAlias",
            "gamelift:describeBuild",
            "gamelift:describeEC2InstanceLimits",
            "gamelift:describeFleetAttributes",
            "gamelift:describeFleetCapacity",
            "gamelift:describeFleetEvents",
            "gamelift:describeFleetLocationAttributes",
            "gamelift:describeFleetLocationCapacity",
            "gamelift:describeFleetLocationUtilization",
            "gamelift:describeFleetPortSettings",
            "gamelift:describeFleetUtilization",
            "gamelift:describeGameServer",
            "gamelift:describeGameServerGroup",
            "gamelift:describeGameSessionDetails",
            "gamelift:describeGameSessionPlacement",
            "gamelift:describeGameSessionQueues",
            "gamelift:describeGameSessions",
            "gamelift:describeInstances",
            "gamelift:describeMatchmaking",
            "gamelift:describeMatchmakingConfigurations",
            "gamelift:describeMatchmakingRuleSets",
            "gamelift:describePlayerSessions",
            "gamelift:describeRuntimeConfiguration",
            "gamelift:describeScalingPolicies",
            "gamelift:describeScript",
            "gamelift:listAliases",
            "gamelift:listBuilds",
            "gamelift:listFleets",
            "gamelift:listGameServerGroups",
            "gamelift:listGameServers",
            "gamelift:listScripts",
            "gamelift:resolveAlias",
            "glacier:describeJob",
            "glacier:describeVault",
            "glacier:getDataRetrievalPolicy",
            "glacier:getVaultAccessPolicy",
            "glacier:getVaultLock",
            "glacier:getVaultNotifications",
            "glacier:listJobs",
            "glacier:listTagsForVault",
            "glacier:listVaults",
            "globalaccelerator:describeAccelerator",
            "globalaccelerator:describeAcceleratorAttributes",
            "globalaccelerator:describeEndpointGroup",
            "globalaccelerator:describeListener",
            "globalaccelerator:listAccelerators",
            "globalaccelerator:listEndpointGroups",
            "globalaccelerator:listListeners",
            "glue:batchGetBlueprints",
            "glue:batchGetCrawlers",
            "glue:batchGetDevEndpoints",
            "glue:batchGetJobs",
            "glue:batchGetPartition",
            "glue:batchGetTriggers",
            "glue:batchGetWorkflows",
            "glue:checkSchemaVersionValidity",
            "glue:getBlueprint",
            "glue:getBlueprintRun",
            "glue:getBlueprintRuns",
            "glue:getCatalogImportStatus",
            "glue:getClassifier",
            "glue:getClassifiers",
            "glue:getColumnStatisticsForPartition",
            "glue:getColumnStatisticsForTable",
            "glue:getCrawler",
            "glue:getCrawlerMetrics",
            "glue:getCrawlers",
            "glue:getCustomEntityType",
            "glue:getDataQualityResult",
            "glue:getDataQualityRuleRecommendationRun",
            "glue:getDataQualityRuleset",
            "glue:getDataQualityRulesetEvaluationRun",
            "glue:getDatabase",
            "glue:getDatabases",
            "glue:getDataflowGraph",
            "glue:getDevEndpoint",
            "glue:getDevEndpoints",
            "glue:getJob",
            "glue:getJobRun",
            "glue:getJobRuns",
            "glue:getJobs",
            "glue:getMLTaskRun",
            "glue:getMLTaskRuns",
            "glue:getMLTransform",
            "glue:getMLTransforms",
            "glue:getMapping",
            "glue:getPartition",
            "glue:getPartitionIndexes",
            "glue:getPartitions",
            "glue:getRegistry",
            "glue:getResourcePolicies",
            "glue:getResourcePolicy",
            "glue:getSchema",
            "glue:getSchemaByDefinition",
            "glue:getSchemaVersion",
            "glue:getSchemaVersionsDiff",
            "glue:getSession",
            "glue:getStatement",
            "glue:getTable",
            "glue:getTableOptimizer",
            "glue:getTableVersions",
            "glue:getTables",
            "glue:getTrigger",
            "glue:getTriggers",
            "glue:getUserDefinedFunction",
            "glue:getUserDefinedFunctions",
            "glue:getWorkflow",
            "glue:getWorkflowRun",
            "glue:getWorkflowRuns",
            "glue:listCrawlers",
            "glue:listCrawls",
            "glue:listDataQualityResults",
            "glue:listDataQualityRuleRecommendationRuns",
            "glue:listDataQualityRulesetEvaluationRuns",
            "glue:listDataQualityRulesets",
            "glue:listDevEndpoints",
            "glue:listMLTransforms",
            "glue:listRegistries",
            "glue:listSchemaVersions",
            "glue:listSchemas",
            "glue:listSessions",
            "glue:listStatements",
            "glue:listTableOptimizerRuns",
            "glue:querySchemaVersionMetadata",
            "grafana:describeWorkspace",
            "grafana:describeWorkspaceAuthentication",
            "grafana:listPermissions",
            "grafana:listVersions",
            "grafana:listWorkspaces",
            "greengrass:getConnectivityInfo",
            "greengrass:getCoreDefinition",
            "greengrass:getCoreDefinitionVersion",
            "greengrass:getDeploymentStatus",
            "greengrass:getDeviceDefinition",
            "greengrass:getDeviceDefinitionVersion",
            "greengrass:getFunctionDefinition",
            "greengrass:getFunctionDefinitionVersion",
            "greengrass:getGroup",
            "greengrass:getGroupCertificateAuthority",
            "greengrass:getGroupVersion",
            "greengrass:getLoggerDefinition",
            "greengrass:getLoggerDefinitionVersion",
            "greengrass:getResourceDefinitionVersion",
            "greengrass:getServiceRoleForAccount",
            "greengrass:getSubscriptionDefinition",
            "greengrass:getSubscriptionDefinitionVersion",
            "greengrass:listCoreDefinitionVersions",
            "greengrass:listCoreDefinitions",
            "greengrass:listDeployments",
            "greengrass:listDeviceDefinitionVersions",
            "greengrass:listDeviceDefinitions",
            "greengrass:listFunctionDefinitionVersions",
            "greengrass:listFunctionDefinitions",
            "greengrass:listGroupVersions",
            "greengrass:listGroups",
            "greengrass:listLoggerDefinitionVersions",
            "greengrass:listLoggerDefinitions",
            "greengrass:listResourceDefinitionVersions",
            "greengrass:listResourceDefinitions",
            "greengrass:listSubscriptionDefinitionVersions",
            "greengrass:listSubscriptionDefinitions",
            "guardduty:getDetector",
            "guardduty:getFindings",
            "guardduty:getFindingsStatistics",
            "guardduty:getIPSet",
            "guardduty:getInvitationsCount",
            "guardduty:getMasterAccount",
            "guardduty:getMembers",
            "guardduty:getThreatIntelSet",
            "guardduty:listDetectors",
            "guardduty:listFindings",
            "guardduty:listIPSets",
            "guardduty:listInvitations",
            "guardduty:listMembers",
            "guardduty:listThreatIntelSets",
            "health:describeAffectedAccountsForOrganization",
            "health:describeAffectedEntities",
            "health:describeAffectedEntitiesForOrganization",
            "health:describeEntityAggregates",
            "health:describeEntityAggregatesForOrganization",
            "health:describeEventAggregates",
            "health:describeEventDetails",
            "health:describeEventDetailsForOrganization",
            "health:describeEventTypes",
            "health:describeEvents",
            "health:describeEventsForOrganization",
            "health:describeHealthServiceStatusForOrganization",
            "iam:DeleteRole",
            "iam:getAccessKeyLastUsed",
            "iam:getAccountAuthorizationDetails",
            "iam:getAccountPasswordPolicy",
            "iam:getAccountSummary",
            "iam:getContextKeysForCustomPolicy",
            "iam:getContextKeysForPrincipalPolicy",
            "iam:getCredentialReport",
            "iam:getGroup",
            "iam:getGroupPolicy",
            "iam:getInstanceProfile",
            "iam:getLoginProfile",
            "iam:getOpenIDConnectProvider",
            "iam:getPolicy",
            "iam:getPolicyVersion",
            "iam:getRole",
            "iam:getRolePolicy",
            "iam:getSAMLProvider",
            "iam:getSSHPublicKey",
            "iam:getServerCertificate",
            "iam:getServiceLinkedRoleDeletionStatus",
            "iam:getUser",
            "iam:getUserPolicy",
            "iam:listAccessKeys",
            "iam:listAccountAliases",
            "iam:listAttachedGroupPolicies",
            "iam:listAttachedRolePolicies",
            "iam:listAttachedUserPolicies",
            "iam:listEntitiesForPolicy",
            "iam:listGroupPolicies",
            "iam:listGroups",
            "iam:listGroupsForUser",
            "iam:listInstanceProfiles",
            "iam:listInstanceProfilesForRole",
            "iam:listMFADevices",
            "iam:listOpenIDConnectProviders",
            "iam:listPolicies",
            "iam:listPolicyVersions",
            "iam:listRolePolicies",
            "iam:listRoles",
            "iam:listSAMLProviders",
            "iam:listSSHPublicKeys",
            "iam:listServerCertificates",
            "iam:listSigningCertificates",
            "iam:listUserPolicies",
            "iam:listUsers",
            "iam:listVirtualMFADevices",
            "iam:simulateCustomPolicy",
            "iam:simulatePrincipalPolicy",
            "imagebuilder:getComponent",
            "imagebuilder:getComponentPolicy",
            "imagebuilder:getContainerRecipe",
            "imagebuilder:getDistributionConfiguration",
            "imagebuilder:getImage",
            "imagebuilder:getImagePipeline",
            "imagebuilder:getImagePolicy",
            "imagebuilder:getImageRecipe",
            "imagebuilder:getImageRecipePolicy",
            "imagebuilder:getInfrastructureConfiguration",
            "imagebuilder:getLifecycleExecution",
            "imagebuilder:getLifecyclePolicy",
            "imagebuilder:getWorkflow",
            "imagebuilder:getWorkflowExecution",
            "imagebuilder:getWorkflowStepExecution",
            "imagebuilder:listComponentBuildVersions",
            "imagebuilder:listComponents",
            "imagebuilder:listContainerRecipes",
            "imagebuilder:listDistributionConfigurations",
            "imagebuilder:listImageBuildVersions",
            "imagebuilder:listImagePipelineImages",
            "imagebuilder:listImagePipelines",
            "imagebuilder:listImageRecipes",
            "imagebuilder:listImageScanFindingAggregations",
            "imagebuilder:listImages",
            "imagebuilder:listInfrastructureConfigurations",
            "imagebuilder:listLifecycleExecutionResources",
            "imagebuilder:listLifecycleExecutions",
            "imagebuilder:listLifecyclePolicies",
            "imagebuilder:listTagsForResource",
            "imagebuilder:listWorkflowBuildVersions",
            "imagebuilder:listWorkflowExecutions",
            "imagebuilder:listWorkflowStepExecutions",
            "imagebuilder:listWorkflows",
            "inspector-scan:scanSbom",
            "inspector2:batchGetAccountStatus",
            "inspector2:batchGetFreeTrialInfo",
            "inspector2:describeOrganizationConfiguration",
            "inspector2:getConfiguration",
            "inspector2:getDelegatedAdminAccount",
            "inspector2:getEc2DeepInspectionConfiguration",
            "inspector2:getMember",
            "inspector2:getSbomExport",
            "inspector2:listCisScanConfigurations",
            "inspector2:listCisScanResultsAggregatedByChecks",
            "inspector2:listCisScanResultsAggregatedByTargetResource",
            "inspector2:listCisScans",
            "inspector2:listCoverage",
            "inspector2:listDelegatedAdminAccounts",
            "inspector2:listFilters",
            "inspector2:listFindings",
            "inspector2:listMembers",
            "inspector2:listUsageTotals",
            "inspector:describeAssessmentRuns",
            "inspector:describeAssessmentTargets",
            "inspector:describeAssessmentTemplates",
            "inspector:describeCrossAccountAccessRole",
            "inspector:describeResourceGroups",
            "inspector:describeRulesPackages",
            "inspector:getTelemetryMetadata",
            "inspector:listAssessmentRunAgents",
            "inspector:listAssessmentRuns",
            "inspector:listAssessmentTargets",
            "inspector:listAssessmentTemplates",
            "inspector:listEventSubscriptions",
            "inspector:listRulesPackages",
            "inspector:listTagsForResource",
            "internetmonitor:getHealthEvent",
            "internetmonitor:getMonitor",
            "internetmonitor:listHealthEvents",
            "internetmonitor:listMonitors",
            "iot:describeAuthorizer",
            "iot:describeCACertificate",
            "iot:describeCertificate",
            "iot:describeDefaultAuthorizer",
            "iot:describeDomainConfiguration",
            "iot:describeEndpoint",
            "iot:describeIndex",
            "iot:describeJobExecution",
            "iot:describeThing",
            "iot:describeThingGroup",
            "iot:describeTunnel",
            "iot:getEffectivePolicies",
            "iot:getIndexingConfiguration",
            "iot:getLoggingOptions",
            "iot:getPolicy",
            "iot:getPolicyVersion",
            "iot:getTopicRule",
            "iot:getV2LoggingOptions",
            "iot:listAttachedPolicies",
            "iot:listAuthorizers",
            "iot:listCACertificates",
            "iot:listCertificates",
            "iot:listCertificatesByCA",
            "iot:listDomainConfigurations",
            "iot:listJobExecutionsForJob",
            "iot:listJobExecutionsForThing",
            "iot:listJobs",
            "iot:listNamedShadowsForThing",
            "iot:listOutgoingCertificates",
            "iot:listPackageVersions",
            "iot:listPackages",
            "iot:listPolicies",
            "iot:listPolicyPrincipals",
            "iot:listPolicyVersions",
            "iot:listPrincipalPolicies",
            "iot:listPrincipalThings",
            "iot:listRoleAliases",
            "iot:listTargetsForPolicy",
            "iot:listThingGroups",
            "iot:listThingGroupsForThing",
            "iot:listThingPrincipals",
            "iot:listThingRegistrationTasks",
            "iot:listThingTypes",
            "iot:listThings",
            "iot:listThingsInThingGroup",
            "iot:listTopicRules",
            "iot:listTunnels",
            "iot:listV2LoggingLevels",
            "iotevents:describeDetector",
            "iotevents:describeDetectorModel",
            "iotevents:describeInput",
            "iotevents:describeLoggingOptions",
            "iotevents:listDetectorModelVersions",
            "iotevents:listDetectorModels",
            "iotevents:listDetectors",
            "iotevents:listInputs",
            "iotfleetwise:getCampaign",
            "iotfleetwise:getDecoderManifest",
            "iotfleetwise:getFleet",
            "iotfleetwise:getModelManifest",
            "iotfleetwise:getSignalCatalog",
            "iotfleetwise:getVehicle",
            "iotfleetwise:getVehicleStatus",
            "iotfleetwise:listCampaigns",
            "iotfleetwise:listDecoderManifestNetworkInterfaces",
            "iotfleetwise:listDecoderManifestSignals",
            "iotfleetwise:listDecoderManifests",
            "iotfleetwise:listFleets",
            "iotfleetwise:listFleetsForVehicle",
            "iotfleetwise:listModelManifestNodes",
            "iotfleetwise:listModelManifests",
            "iotfleetwise:listSignalCatalogNodes",
            "iotfleetwise:listSignalCatalogs",
            "iotfleetwise:listVehicles",
            "iotsitewise:describeAccessPolicy",
            "iotsitewise:describeAsset",
            "iotsitewise:describeAssetModel",
            "iotsitewise:describeAssetProperty",
            "iotsitewise:describeDashboard",
            "iotsitewise:describeGateway",
            "iotsitewise:describeGatewayCapabilityConfiguration",
            "iotsitewise:describeLoggingOptions",
            "iotsitewise:describePortal",
            "iotsitewise:describeProject",
            "iotsitewise:listAccessPolicies",
            "iotsitewise:listAssetModels",
            "iotsitewise:listAssets",
            "iotsitewise:listAssociatedAssets",
            "iotsitewise:listDashboards",
            "iotsitewise:listGateways",
            "iotsitewise:listPortals",
            "iotsitewise:listProjectAssets",
            "iotsitewise:listProjects",
            "iottwinmaker:getComponentType",
            "iottwinmaker:getEntity",
            "iottwinmaker:getPricingPlan",
            "iottwinmaker:getScene",
            "iottwinmaker:getSyncJob",
            "iottwinmaker:getWorkspace",
            "iottwinmaker:listComponentTypes",
            "iottwinmaker:listEntities",
            "iottwinmaker:listScenes",
            "iottwinmaker:listSyncJobs",
            "iottwinmaker:listSyncResources",
            "iottwinmaker:listWorkspaces",
            "iotwireless:getDestination",
            "iotwireless:getDeviceProfile",
            "iotwireless:getPartnerAccount",
            "iotwireless:getServiceEndpoint",
            "iotwireless:getServiceProfile",
            "iotwireless:getWirelessDevice",
            "iotwireless:getWirelessDeviceStatistics",
            "iotwireless:getWirelessGateway",
            "iotwireless:getWirelessGatewayCertificate",
            "iotwireless:getWirelessGatewayFirmwareInformation",
            "iotwireless:getWirelessGatewayStatistics",
            "iotwireless:getWirelessGatewayTask",
            "iotwireless:getWirelessGatewayTaskDefinition",
            "iotwireless:listDestinations",
            "iotwireless:listDeviceProfiles",
            "iotwireless:listPartnerAccounts",
            "iotwireless:listServiceProfiles",
            "iotwireless:listTagsForResource",
            "iotwireless:listWirelessDevices",
            "iotwireless:listWirelessGatewayTaskDefinitions",
            "iotwireless:listWirelessGateways",
            "ivs:getChannel",
            "ivs:getRecordingConfiguration",
            "ivs:getStream",
            "ivs:getStreamSession",
            "ivs:listChannels",
            "ivs:listPlaybackKeyPairs",
            "ivs:listRecordingConfigurations",
            "ivs:listStreamKeys",
            "ivs:listStreamSessions",
            "ivs:listStreams",
            "kafka:describeCluster",
            "kafka:describeClusterOperation",
            "kafka:describeClusterOperationV2",
            "kafka:describeClusterV2",
            "kafka:describeConfiguration",
            "kafka:describeConfigurationRevision",
            "kafka:describeReplicator",
            "kafka:describeVpcConnection",
            "kafka:getBootstrapBrokers",
            "kafka:getClusterPolicy",
            "kafka:listClientVpcConnections",
            "kafka:listClusterOperations",
            "kafka:listClusterOperationsV2",
            "kafka:listClusters",
            "kafka:listClustersV2",
            "kafka:listConfigurationRevisions",
            "kafka:listConfigurations",
            "kafka:listNodes",
            "kafka:listReplicators",
            "kafka:listScramSecrets",
            "kafka:listVpcConnections",
            "kafkaconnect:describeConnector",
            "kafkaconnect:describeCustomPlugin",
            "kafkaconnect:describeWorkerConfiguration",
            "kafkaconnect:listConnectors",
            "kafkaconnect:listCustomPlugins",
            "kafkaconnect:listWorkerConfigurations",
            "kendra:describeDataSource",
            "kendra:describeFaq",
            "kendra:describeIndex",
            "kendra:listDataSources",
            "kendra:listFaqs",
            "kendra:listIndices",
            "kinesis:describeStream",
            "kinesis:describeStreamConsumer",
            "kinesis:describeStreamSummary",
            "kinesis:listShards",
            "kinesis:listStreamConsumers",
            "kinesis:listStreams",
            "kinesis:listTagsForStream",
            "kinesisanalytics:describeApplication",
            "kinesisanalytics:describeApplicationOperation",
            "kinesisanalytics:describeApplicationSnapshot",
            "kinesisanalytics:listApplicationOperations",
            "kinesisanalytics:listApplicationSnapshots",
            "kinesisanalytics:listApplicationVersions",
            "kinesisanalytics:listApplications",
            "kinesisvideo:describeImageGenerationConfiguration",
            "kinesisvideo:describeNotificationConfiguration",
            "kinesisvideo:describeSignalingChannel",
            "kinesisvideo:describeStream",
            "kinesisvideo:getDataEndpoint",
            "kinesisvideo:getIceServerConfig",
            "kinesisvideo:getSignalingChannelEndpoint",
            "kinesisvideo:listSignalingChannels",
            "kinesisvideo:listStreams",
            "kms:describeKey",
            "kms:getKeyPolicy",
            "kms:getKeyRotationStatus",
            "kms:listAliases",
            "kms:listGrants",
            "kms:listKeyPolicies",
            "kms:listKeys",
            "kms:listResourceTags",
            "kms:listRetirableGrants",
            "lambda:getAccountSettings",
            "lambda:getAlias",
            "lambda:getCodeSigningConfig",
            "lambda:getEventSourceMapping",
            "lambda:getFunction",
            "lambda:getFunctionCodeSigningConfig",
            "lambda:getFunctionConcurrency",
            "lambda:getFunctionConfiguration",
            "lambda:getFunctionEventInvokeConfig",
            "lambda:getFunctionRecursionConfig",
            "lambda:getFunctionUrlConfig",
            "lambda:getLayerVersion",
            "lambda:getLayerVersionPolicy",
            "lambda:getPolicy",
            "lambda:getProvisionedConcurrencyConfig",
            "lambda:getRuntimeManagementConfig",
            "lambda:listAliases",
            "lambda:listCodeSigningConfigs",
            "lambda:listEventSourceMappings",
            "lambda:listFunctionEventInvokeConfigs",
            "lambda:listFunctionUrlConfigs",
            "lambda:listFunctions",
            "lambda:listFunctionsByCodeSigningConfig",
            "lambda:listLayerVersions",
            "lambda:listLayers",
            "lambda:listProvisionedConcurrencyConfigs",
            "lambda:listTags",
            "lambda:listVersionsByFunction",
            "launchwizard:describeProvisionedApp",
            "launchwizard:describeProvisioningEvents",
            "launchwizard:listDeploymentEvents",
            "launchwizard:listDeployments",
            "launchwizard:listProvisionedApps",
            "lex:describeBot",
            "lex:describeBotAlias",
            "lex:describeBotLocale",
            "lex:describeBotRecommendation",
            "lex:describeBotVersion",
            "lex:describeCustomVocabularyMetadata",
            "lex:describeExport",
            "lex:describeImport",
            "lex:describeIntent",
            "lex:describeResourcePolicy",
            "lex:describeSlot",
            "lex:describeSlotType",
            "lex:getBot",
            "lex:getBotAlias",
            "lex:getBotAliases",
            "lex:getBotChannelAssociation",
            "lex:getBotChannelAssociations",
            "lex:getBotVersions",
            "lex:getBots",
            "lex:getBuiltinIntent",
            "lex:getBuiltinIntents",
            "lex:getBuiltinSlotTypes",
            "lex:getIntent",
            "lex:getIntentVersions",
            "lex:getIntents",
            "lex:getSlotType",
            "lex:getSlotTypeVersions",
            "lex:getSlotTypes",
            "lex:listBotAliases",
            "lex:listBotLocales",
            "lex:listBotRecommendations",
            "lex:listBotVersions",
            "lex:listBots",
            "lex:listExports",
            "lex:listImports",
            "lex:listIntents",
            "lex:listRecommendedIntents",
            "lex:listSlotTypes",
            "lex:listSlots",
            "license-manager:getLicenseConfiguration",
            "license-manager:getServiceSettings",
            "license-manager:listAssociationsForLicenseConfiguration",
            "license-manager:listFailuresForLicenseConfigurationOperations",
            "license-manager:listLicenseConfigurations",
            "license-manager:listLicenseSpecificationsForResource",
            "license-manager:listResourceInventory",
            "license-manager:listUsageForLicenseConfiguration",
            "lightsail:getActiveNames",
            "lightsail:getAlarms",
            "lightsail:getAutoSnapshots",
            "lightsail:getBlueprints",
            "lightsail:getBucketBundles",
            "lightsail:getBucketMetricData",
            "lightsail:getBuckets",
            "lightsail:getBundles",
            "lightsail:getCertificates",
            "lightsail:getContainerImages",
            "lightsail:getContainerServiceDeployments",
            "lightsail:getContainerServiceMetricData",
            "lightsail:getContainerServicePowers",
            "lightsail:getContainerServices",
            "lightsail:getDisk",
            "lightsail:getDiskSnapshot",
            "lightsail:getDiskSnapshots",
            "lightsail:getDisks",
            "lightsail:getDistributionBundles",
            "lightsail:getDistributionMetricData",
            "lightsail:getDistributions",
            "lightsail:getDomain",
            "lightsail:getDomains",
            "lightsail:getExportSnapshotRecords",
            "lightsail:getInstance",
            "lightsail:getInstanceMetricData",
            "lightsail:getInstancePortStates",
            "lightsail:getInstanceSnapshot",
            "lightsail:getInstanceSnapshots",
            "lightsail:getInstanceState",
            "lightsail:getInstances",
            "lightsail:getKeyPair",
            "lightsail:getKeyPairs",
            "lightsail:getLoadBalancer",
            "lightsail:getLoadBalancerMetricData",
            "lightsail:getLoadBalancerTlsCertificates",
            "lightsail:getLoadBalancers",
            "lightsail:getOperation",
            "lightsail:getOperations",
            "lightsail:getOperationsForResource",
            "lightsail:getRegions",
            "lightsail:getRelationalDatabase",
            "lightsail:getRelationalDatabaseMetricData",
            "lightsail:getRelationalDatabaseSnapshot",
            "lightsail:getRelationalDatabaseSnapshots",
            "lightsail:getRelationalDatabases",
            "lightsail:getStaticIp",
            "lightsail:getStaticIps",
            "lightsail:isVpcPeered",
            "logs:describeAccountPolicies",
            "logs:describeDeliveries",
            "logs:describeDeliveryDestinations",
            "logs:describeDeliverySources",
            "logs:describeDestinations",
            "logs:describeExportTasks",
            "logs:describeLogGroups",
            "logs:describeLogStreams",
            "logs:describeMetricFilters",
            "logs:describeQueries",
            "logs:describeQueryDefinitions",
            "logs:describeResourcePolicies",
            "logs:describeSubscriptionFilters",
            "logs:getDataProtectionPolicy",
            "logs:getDelivery",
            "logs:getDeliveryDestination",
            "logs:getDeliveryDestinationPolicy",
            "logs:getDeliverySource",
            "logs:getLogAnomalyDetector",
            "logs:getLogDelivery",
            "logs:getLogGroupFields",
            "logs:listAnomalies",
            "logs:listLogAnomalyDetectors",
            "logs:listLogDeliveries",
            "logs:testMetricFilter",
            "lookoutequipment:describeDataIngestionJob",
            "lookoutequipment:describeDataset",
            "lookoutequipment:describeInferenceScheduler",
            "lookoutequipment:describeModel",
            "lookoutequipment:listDataIngestionJobs",
            "lookoutequipment:listDatasets",
            "lookoutequipment:listInferenceExecutions",
            "lookoutequipment:listInferenceSchedulers",
            "lookoutequipment:listModels",
            "lookoutmetrics:describeAlert",
            "lookoutmetrics:describeAnomalyDetectionExecutions",
            "lookoutmetrics:describeAnomalyDetector",
            "lookoutmetrics:describeMetricSet",
            "lookoutmetrics:getAnomalyGroup",
            "lookoutmetrics:getDataQualityMetrics",
            "lookoutmetrics:getFeedback",
            "lookoutmetrics:getSampleData",
            "lookoutmetrics:listAlerts",
            "lookoutmetrics:listAnomalyDetectors",
            "lookoutmetrics:listAnomalyGroupSummaries",
            "lookoutmetrics:listAnomalyGroupTimeSeries",
            "lookoutmetrics:listMetricSets",
            "lookoutmetrics:listTagsForResource",
            "m2:getApplication",
            "m2:getApplicationVersion",
            "m2:getBatchJobExecution",
            "m2:getDataSetDetails",
            "m2:getDataSetImportTask",
            "m2:getDeployment",
            "m2:getEnvironment",
            "m2:listApplicationVersions",
            "m2:listApplications",
            "m2:listBatchJobDefinitions",
            "m2:listBatchJobExecutions",
            "m2:listDataSetImportHistory",
            "m2:listDataSets",
            "m2:listDeployments",
            "m2:listEngineVersions",
            "m2:listEnvironments",
            "machinelearning:describeBatchPredictions",
            "machinelearning:describeDataSources",
            "machinelearning:describeEvaluations",
            "machinelearning:describeMLModels",
            "machinelearning:getBatchPrediction",
            "machinelearning:getDataSource",
            "machinelearning:getEvaluation",
            "machinelearning:getMLModel",
            "macie2:getClassificationExportConfiguration",
            "macie2:getCustomDataIdentifier",
            "macie2:getFindingStatistics",
            "macie2:getFindings",
            "macie2:listClassificationJobs",
            "macie2:listCustomDataIdentifiers",
            "macie2:listFindings",
            "managedblockchain:getMember",
            "managedblockchain:getNetwork",
            "managedblockchain:getNode",
            "managedblockchain:listMembers",
            "managedblockchain:listNetworks",
            "managedblockchain:listNodes",
            "mediaconnect:describeFlow",
            "mediaconnect:listEntitlements",
            "mediaconnect:listFlows",
            "mediaconvert:describeEndpoints",
            "mediaconvert:getJob",
            "mediaconvert:getJobTemplate",
            "mediaconvert:getPreset",
            "mediaconvert:getQueue",
            "mediaconvert:listJobTemplates",
            "mediaconvert:listJobs",
            "medialive:describeChannel",
            "medialive:describeInput",
            "medialive:describeInputDevice",
            "medialive:describeInputSecurityGroup",
            "medialive:describeMultiplex",
            "medialive:describeOffering",
            "medialive:describeReservation",
            "medialive:describeSchedule",
            "medialive:listChannels",
            "medialive:listInputDevices",
            "medialive:listInputSecurityGroups",
            "medialive:listInputs",
            "medialive:listMultiplexes",
            "medialive:listOfferings",
            "medialive:listReservations",
            "mediapackage:describeChannel",
            "mediapackage:describeOriginEndpoint",
            "mediapackage:listChannels",
            "mediapackage:listOriginEndpoints",
            "mediastore:describeContainer",
            "mediastore:getContainerPolicy",
            "mediastore:getCorsPolicy",
            "mediastore:listContainers",
            "mediatailor:getPlaybackConfiguration",
            "mediatailor:listPlaybackConfigurations",
            "medical-imaging:getDatastore",
            "medical-imaging:listDatastores",
            "mgn:describeJobLogItems",
            "mgn:describeJobs",
            "mgn:describeLaunchConfigurationTemplates",
            "mgn:describeReplicationConfigurationTemplates",
            "mgn:describeSourceServers",
            "mgn:describeVcenterClients",
            "mgn:getLaunchConfiguration",
            "mgn:getReplicationConfiguration",
            "mgn:listApplications",
            "mgn:listSourceServerpermissions",
            "mgn:listTemplatepermissions",
            "mgn:listWaves",
            "mobiletargeting:getAdmChannel",
            "mobiletargeting:getApnsChannel",
            "mobiletargeting:getApnsSandboxChannel",
            "mobiletargeting:getApnsVoipChannel",
            "mobiletargeting:getApnsVoipSandboxChannel",
            "mobiletargeting:getApp",
            "mobiletargeting:getApplicationSettings",
            "mobiletargeting:getApps",
            "mobiletargeting:getBaiduChannel",
            "mobiletargeting:getCampaign",
            "mobiletargeting:getCampaignActivities",
            "mobiletargeting:getCampaignVersion",
            "mobiletargeting:getCampaignVersions",
            "mobiletargeting:getCampaigns",
            "mobiletargeting:getEmailChannel",
            "mobiletargeting:getEndpoint",
            "mobiletargeting:getEventStream",
            "mobiletargeting:getExportJob",
            "mobiletargeting:getExportJobs",
            "mobiletargeting:getGcmChannel",
            "mobiletargeting:getImportJob",
            "mobiletargeting:getImportJobs",
            "mobiletargeting:getJourney",
            "mobiletargeting:getJourneyExecutionActivityMetrics",
            "mobiletargeting:getJourneyExecutionMetrics",
            "mobiletargeting:getJourneyRunExecutionActivityMetrics",
            "mobiletargeting:getJourneyRunExecutionMetrics",
            "mobiletargeting:getJourneyRuns",
            "mobiletargeting:getSegment",
            "mobiletargeting:getSegmentImportJobs",
            "mobiletargeting:getSegmentVersion",
            "mobiletargeting:getSegmentVersions",
            "mobiletargeting:getSegments",
            "mobiletargeting:getSmsChannel",
            "mobiletargeting:listJourneys",
            "mq:describeBroker",
            "mq:describeConfiguration",
            "mq:describeConfigurationRevision",
            "mq:describeUser",
            "mq:listBrokers",
            "mq:listConfigurationRevisions",
            "mq:listConfigurations",
            "mq:listUsers",
            "network-firewall:describeFirewall",
            "network-firewall:describeFirewallPolicy",
            "network-firewall:describeLoggingConfiguration",
            "network-firewall:describeRuleGroup",
            "network-firewall:describeTlsInspectionConfiguration",
            "network-firewall:listFirewallPolicies",
            "network-firewall:listFirewalls",
            "network-firewall:listRuleGroups",
            "network-firewall:listTlsInspectionConfigurations",
            "networkmanager:describeGlobalNetworks",
            "networkmanager:getConnectAttachment",
            "networkmanager:getConnectPeer",
            "networkmanager:getConnectPeerAssociations",
            "networkmanager:getConnections",
            "networkmanager:getCoreNetwork",
            "networkmanager:getCoreNetworkChangeEvents",
            "networkmanager:getCoreNetworkChangeSet",
            "networkmanager:getCoreNetworkPolicy",
            "networkmanager:getCustomerGatewayAssociations",
            "networkmanager:getDevices",
            "networkmanager:getLinkAssociations",
            "networkmanager:getLinks",
            "networkmanager:getNetworkResourceCounts",
            "networkmanager:getNetworkResourceRelationships",
            "networkmanager:getNetworkResources",
            "networkmanager:getNetworkRoutes",
            "networkmanager:getNetworkTelemetry",
            "networkmanager:getResourcePolicy",
            "networkmanager:getRouteAnalysis",
            "networkmanager:getSiteToSiteVpnAttachment",
            "networkmanager:getSites",
            "networkmanager:getTransitGatewayConnectPeerAssociations",
            "networkmanager:getTransitGatewayPeering",
            "networkmanager:getTransitGatewayRegistrations",
            "networkmanager:getTransitGatewayRouteTableAttachment",
            "networkmanager:getVpcAttachment",
            "networkmanager:listAttachments",
            "networkmanager:listConnectPeers",
            "networkmanager:listCoreNetworkPolicyVersions",
            "networkmanager:listCoreNetworks",
            "networkmanager:listOrganizationServiceAccessStatus",
            "networkmanager:listPeerings",
            "networkmanager:listTagsForResource",
            "networkmonitor:getMonitor",
            "networkmonitor:getProbe",
            "networkmonitor:listMonitors",
            "notifications-contacts:getEmailContact",
            "notifications-contacts:listEmailContacts",
            "notifications:getEventRule",
            "notifications:getNotificationConfiguration",
            "notifications:getNotificationEvent",
            "notifications:listChannels",
            "notifications:listEventRules",
            "notifications:listNotificationConfigurations",
            "notifications:listNotificationEvents",
            "notifications:listNotificationHubs",
            "oam:getLink",
            "oam:getSink",
            "oam:getSinkPolicy",
            "oam:listAttachedLinks",
            "oam:listLinks",
            "oam:listSinks",
            "omics:getAnnotationImportJob",
            "omics:getAnnotationStore",
            "omics:getReadSetImportJob",
            "omics:getReadSetMetadata",
            "omics:getReference",
            "omics:getReferenceImportJob",
            "omics:getReferenceMetadata",
            "omics:getReferenceStore",
            "omics:getRun",
            "omics:getRunGroup",
            "omics:getSequenceStore",
            "omics:getVariantImportJob",
            "omics:getVariantStore",
            "omics:getWorkflow",
            "omics:listAnnotationImportJobs",
            "omics:listAnnotationStores",
            "omics:listMultipartReadSetUploads",
            "omics:listReadSetImportJobs",
            "omics:listReadSetUploadParts",
            "omics:listReadSets",
            "omics:listReferenceImportJobs",
            "omics:listReferenceStores",
            "omics:listReferences",
            "omics:listRunGroups",
            "omics:listRunTasks",
            "omics:listRuns",
            "omics:listSequenceStores",
            "omics:listVariantImportJobs",
            "omics:listVariantStores",
            "omics:listWorkflows",
            "opsworks-cm:describeAccountAttributes",
            "opsworks-cm:describeBackups",
            "opsworks-cm:describeEvents",
            "opsworks-cm:describeNodeAssociationStatus",
            "opsworks-cm:describeServers",
            "opsworks:describeAgentVersions",
            "opsworks:describeApps",
            "opsworks:describeCommands",
            "opsworks:describeDeployments",
            "opsworks:describeEcsClusters",
            "opsworks:describeElasticIps",
            "opsworks:describeElasticLoadBalancers",
            "opsworks:describeInstances",
            "opsworks:describeLayers",
            "opsworks:describeLoadBasedAutoScaling",
            "opsworks:describeMyUserProfile",
            "opsworks:describePermissions",
            "opsworks:describeRaidArrays",
            "opsworks:describeRdsDbInstances",
            "opsworks:describeServiceErrors",
            "opsworks:describeStackProvisioningParameters",
            "opsworks:describeStackSummary",
            "opsworks:describeStacks",
            "opsworks:describeTimeBasedAutoScaling",
            "opsworks:describeUserProfiles",
            "opsworks:describeVolumes",
            "opsworks:getHostnameSuggestion",
            "organizations:listAccounts",
            "organizations:listTagsForResource",
            "osis:getPipeline",
            "osis:getPipelineBlueprint",
            "osis:getPipelineChangeProgress",
            "osis:listPipelineBlueprints",
            "osis:listPipelines",
            "osis:validatePipeline",
            "outposts:getCatalogItem",
            "outposts:getConnection",
            "outposts:getOrder",
            "outposts:getOutpost",
            "outposts:getOutpostInstanceTypes",
            "outposts:getSite",
            "outposts:listAssets",
            "outposts:listCatalogItems",
            "outposts:listOrders",
            "outposts:listOutposts",
            "outposts:listSites",
            "personalize:describeAlgorithm",
            "personalize:describeBatchInferenceJob",
            "personalize:describeBatchSegmentJob",
            "personalize:describeCampaign",
            "personalize:describeDataset",
            "personalize:describeDatasetExportJob",
            "personalize:describeDatasetGroup",
            "personalize:describeDatasetImportJob",
            "personalize:describeEventTracker",
            "personalize:describeFeatureTransformation",
            "personalize:describeFilter",
            "personalize:describeRecipe",
            "personalize:describeRecommender",
            "personalize:describeSchema",
            "personalize:describeSolution",
            "personalize:describeSolutionVersion",
            "personalize:getPersonalizedRanking",
            "personalize:getRecommendations",
            "personalize:getSolutionMetrics",
            "personalize:listBatchInferenceJobs",
            "personalize:listBatchSegmentJobs",
            "personalize:listCampaigns",
            "personalize:listDatasetExportJobs",
            "personalize:listDatasetGroups",
            "personalize:listDatasetImportJobs",
            "personalize:listDatasets",
            "personalize:listEventTrackers",
            "personalize:listRecipes",
            "personalize:listRecommenders",
            "personalize:listSchemas",
            "personalize:listSolutionVersions",
            "personalize:listSolutions",
            "pipes:describePipe",
            "pipes:listPipes",
            "pipes:listTagsForResource",
            "polly:describeVoices",
            "polly:getLexicon",
            "polly:listLexicons",
            "pricing:describeServices",
            "pricing:getAttributeValues",
            "pricing:getProducts",
            "private-networks:getDeviceIdentifier",
            "private-networks:getNetwork",
            "private-networks:getNetworkResource",
            "private-networks:listDeviceIdentifiers",
            "private-networks:listNetworkResources",
            "private-networks:listNetworks",
            "qbusiness:getApplication",
            "qbusiness:getDataSource",
            "qbusiness:getIndex",
            "qbusiness:getRetriever",
            "qbusiness:getWebExperience",
            "qbusiness:listApplications",
            "qbusiness:listDataSourceSyncJobs",
            "qbusiness:listDataSources",
            "qbusiness:listIndices",
            "qbusiness:listRetrievers",
            "qbusiness:listWebExperiences",
            "quicksight:describeAccountCustomization",
            "quicksight:describeAccountSettings",
            "quicksight:describeAccountSubscription",
            "quicksight:describeAnalysis",
            "quicksight:describeAnalysisPermissions",
            "quicksight:describeDashboard",
            "quicksight:describeDashboardPermissions",
            "quicksight:describeDataSet",
            "quicksight:describeDataSetPermissions",
            "quicksight:describeDataSetRefreshProperties",
            "quicksight:describeDataSource",
            "quicksight:describeDataSourcePermissions",
            "quicksight:describeFolder",
            "quicksight:describeFolderPermissions",
            "quicksight:describeFolderResolvedPermissions",
            "quicksight:describeGroup",
            "quicksight:describeGroupMembership",
            "quicksight:describeIAMPolicyAssignment",
            "quicksight:describeIngestion",
            "quicksight:describeIpRestriction",
            "quicksight:describeNamespace",
            "quicksight:describeRefreshSchedule",
            "quicksight:describeTemplate",
            "quicksight:describeTemplateAlias",
            "quicksight:describeTemplatePermissions",
            "quicksight:describeTheme",
            "quicksight:describeThemeAlias",
            "quicksight:describeThemePermissions",
            "quicksight:describeTopic",
            "quicksight:describeTopicPermissions",
            "quicksight:describeTopicRefresh",
            "quicksight:describeTopicRefreshSchedule",
            "quicksight:describeUser",
            "quicksight:describeVPCConnection",
            "quicksight:listAnalyses",
            "quicksight:listDashboardVersions",
            "quicksight:listDashboards",
            "quicksight:listDataSets",
            "quicksight:listDataSources",
            "quicksight:listFolderMembers",
            "quicksight:listFolders",
            "quicksight:listGroupMemberships",
            "quicksight:listGroups",
            "quicksight:listIAMPolicyAssignments",
            "quicksight:listIAMPolicyAssignmentsForUser",
            "quicksight:listIngestions",
            "quicksight:listNamespaces",
            "quicksight:listRefreshSchedules",
            "quicksight:listTemplateAliases",
            "quicksight:listTemplateVersions",
            "quicksight:listTemplates",
            "quicksight:listThemeAliases",
            "quicksight:listThemeVersions",
            "quicksight:listThemes",
            "quicksight:listTopicRefreshSchedules",
            "quicksight:listTopics",
            "quicksight:listUserGroups",
            "quicksight:listUsers",
            "quicksight:listVPCConnections",
            "quicksight:searchAnalyses",
            "quicksight:searchDashboards",
            "quicksight:searchDataSets",
            "quicksight:searchDataSources",
            "quicksight:searchFolders",
            "quicksight:searchGroups",
            "ram:getPermission",
            "ram:getResourceShareAssociations",
            "ram:getResourceShareInvitations",
            "ram:getResourceShares",
            "ram:listPendingInvitationResources",
            "ram:listPrincipals",
            "ram:listResourceSharePermissions",
            "ram:listResources",
            "rbin:getRule",
            "rbin:listRules",
            "rds:describeAccountAttributes",
            "rds:describeBlueGreenDeployments",
            "rds:describeCertificates",
            "rds:describeDBClusterEndpoints",
            "rds:describeDBClusterParameterGroups",
            "rds:describeDBClusterParameters",
            "rds:describeDBClusterSnapshots",
            "rds:describeDBClusters",
            "rds:describeDBEngineVersions",
            "rds:describeDBInstanceAutomatedBackups",
            "rds:describeDBInstances",
            "rds:describeDBLogFiles",
            "rds:describeDBParameterGroups",
            "rds:describeDBParameters",
            "rds:describeDBSecurityGroups",
            "rds:describeDBSnapshotAttributes",
            "rds:describeDBSnapshots",
            "rds:describeDBSubnetGroups",
            "rds:describeEngineDefaultClusterParameters",
            "rds:describeEngineDefaultParameters",
            "rds:describeEventCategories",
            "rds:describeEventSubscriptions",
            "rds:describeEvents",
            "rds:describeExportTasks",
            "rds:describeGlobalClusters",
            "rds:describeIntegrations",
            "rds:describeOptionGroupOptions",
            "rds:describeOptionGroups",
            "rds:describeOrderableDBInstanceOptions",
            "rds:describePendingMaintenancepermissions",
            "rds:describeReservedDBInstances",
            "rds:describeReservedDBInstancesOfferings",
            "rds:describeSourceRegions",
            "rds:describeValidDBInstanceModifications",
            "rds:listTagsForResource",
            "redshift-data:describeStatement",
            "redshift-data:listStatements",
            "redshift-serverless:getEndpointAccess",
            "redshift-serverless:getNamespace",
            "redshift-serverless:getRecoveryPoint",
            "redshift-serverless:getSnapshot",
            "redshift-serverless:getTableRestoreStatus",
            "redshift-serverless:getUsageLimit",
            "redshift-serverless:getWorkgroup",
            "redshift-serverless:listEndpointAccess",
            "redshift-serverless:listNamespaces",
            "redshift-serverless:listRecoveryPoints",
            "redshift-serverless:listSnapshots",
            "redshift-serverless:listTableRestoreStatus",
            "redshift-serverless:listUsageLimits",
            "redshift-serverless:listWorkgroups",
            "redshift:describeClusterParameterGroups",
            "redshift:describeClusterParameters",
            "redshift:describeClusterSecurityGroups",
            "redshift:describeClusterSnapshots",
            "redshift:describeClusterSubnetGroups",
            "redshift:describeClusterVersions",
            "redshift:describeClusters",
            "redshift:describeDataShares",
            "redshift:describeDataSharesForConsumer",
            "redshift:describeDataSharesForProducer",
            "redshift:describeDefaultClusterParameters",
            "redshift:describeEventCategories",
            "redshift:describeEventSubscriptions",
            "redshift:describeEvents",
            "redshift:describeHsmClientCertificates",
            "redshift:describeHsmConfigurations",
            "redshift:describeLoggingStatus",
            "redshift:describeOrderableClusterOptions",
            "redshift:describeReservedNodeOfferings",
            "redshift:describeReservedNodes",
            "redshift:describeResize",
            "redshift:describeSnapshotCopyGrants",
            "redshift:describeStorage",
            "redshift:describeTableRestoreStatus",
            "redshift:describeTags",
            "rekognition:listCollections",
            "rekognition:listFaces",
            "resource-explorer-2:getAccountLevelServiceConfiguration",
            "resource-explorer-2:getIndex",
            "resource-explorer-2:getView",
            "resource-explorer-2:listIndexes",
            "resource-explorer-2:listViews",
            "resource-explorer-2:search",
            "resource-groups:getGroup",
            "resource-groups:getGroupQuery",
            "resource-groups:getTags",
            "resource-groups:listGroupResources",
            "resource-groups:listGroups",
            "resource-groups:searchResources",
            "robomaker:batchDescribeSimulationJob",
            "robomaker:describeDeploymentJob",
            "robomaker:describeFleet",
            "robomaker:describeRobot",
            "robomaker:describeRobotApplication",
            "robomaker:describeSimulationApplication",
            "robomaker:describeSimulationJob",
            "robomaker:listDeploymentJobs",
            "robomaker:listFleets",
            "robomaker:listRobotApplications",
            "robomaker:listRobots",
            "robomaker:listSimulationApplications",
            "robomaker:listSimulationJobs",
            "route53-recovery-cluster:getRoutingControlState",
            "route53-recovery-cluster:listRoutingControls",
            "route53-recovery-control-config:describeControlPanel",
            "route53-recovery-control-config:describeRoutingControl",
            "route53-recovery-control-config:describeSafetyRule",
            "route53-recovery-control-config:listControlPanels",
            "route53-recovery-control-config:listRoutingControls",
            "route53-recovery-control-config:listSafetyRules",
            "route53-recovery-readiness:getCell",
            "route53-recovery-readiness:getCellReadinessSummary",
            "route53-recovery-readiness:getReadinessCheck",
            "route53-recovery-readiness:getReadinessCheckResourceStatus",
            "route53-recovery-readiness:getReadinessCheckStatus",
            "route53-recovery-readiness:getRecoveryGroup",
            "route53-recovery-readiness:getRecoveryGroupReadinessSummary",
            "route53-recovery-readiness:listCells",
            "route53-recovery-readiness:listReadinessChecks",
            "route53-recovery-readiness:listRecoveryGroups",
            "route53-recovery-readiness:listResourceSets",
            "route53:getAccountLimit",
            "route53:getChange",
            "route53:getCheckerIpRanges",
            "route53:getDNSSEC",
            "route53:getGeoLocation",
            "route53:getHealthCheck",
            "route53:getHealthCheckCount",
            "route53:getHealthCheckLastFailureReason",
            "route53:getHealthCheckStatus",
            "route53:getHostedZone",
            "route53:getHostedZoneCount",
            "route53:getHostedZoneLimit",
            "route53:getQueryLoggingConfig",
            "route53:getReusableDelegationSet",
            "route53:getTrafficPolicy",
            "route53:getTrafficPolicyInstance",
            "route53:getTrafficPolicyInstanceCount",
            "route53:listCidrBlocks",
            "route53:listCidrCollections",
            "route53:listCidrLocations",
            "route53:listGeoLocations",
            "route53:listHealthChecks",
            "route53:listHostedZones",
            "route53:listHostedZonesByName",
            "route53:listHostedZonesByVpc",
            "route53:listQueryLoggingConfigs",
            "route53:listResourceRecordSets",
            "route53:listReusableDelegationSets",
            "route53:listTrafficPolicies",
            "route53:listTrafficPolicyInstances",
            "route53:listTrafficPolicyInstancesByHostedZone",
            "route53:listTrafficPolicyInstancesByPolicy",
            "route53:listTrafficPolicyVersions",
            "route53:listVPCAssociationAuthorizations",
            "route53domains:checkDomainAvailability",
            "route53domains:getContactReachabilityStatus",
            "route53domains:getDomainDetail",
            "route53domains:getOperationDetail",
            "route53domains:listDomains",
            "route53domains:listOperations",
            "route53domains:listPrices",
            "route53domains:listTagsForDomain",
            "route53domains:viewBilling",
            "route53profiles:getProfile",
            "route53profiles:getProfileAssociation",
            "route53profiles:getProfileResourceAssociation",
            "route53profiles:listProfileAssociations",
            "route53profiles:listProfileResourceAssociations",
            "route53profiles:listProfiles",
            "route53profiles:listTagsForResource",
            "route53resolver:getFirewallConfig",
            "route53resolver:getFirewallDomainList",
            "route53resolver:getFirewallRuleGroup",
            "route53resolver:getFirewallRuleGroupAssociation",
            "route53resolver:getFirewallRuleGroupPolicy",
            "route53resolver:getOutpostResolver",
            "route53resolver:getResolverDnssecConfig",
            "route53resolver:getResolverQueryLogConfig",
            "route53resolver:getResolverQueryLogConfigAssociation",
            "route53resolver:getResolverQueryLogConfigPolicy",
            "route53resolver:getResolverRule",
            "route53resolver:getResolverRuleAssociation",
            "route53resolver:getResolverRulePolicy",
            "route53resolver:listFirewallConfigs",
            "route53resolver:listFirewallDomainLists",
            "route53resolver:listFirewallDomains",
            "route53resolver:listFirewallRuleGroupAssociations",
            "route53resolver:listFirewallRuleGroups",
            "route53resolver:listFirewallRules",
            "route53resolver:listOutpostResolvers",
            "route53resolver:listResolverConfigs",
            "route53resolver:listResolverDnssecConfigs",
            "route53resolver:listResolverEndpointIpAddresses",
            "route53resolver:listResolverEndpoints",
            "route53resolver:listResolverQueryLogConfigAssociations",
            "route53resolver:listResolverQueryLogConfigs",
            "route53resolver:listResolverRuleAssociations",
            "route53resolver:listResolverRules",
            "route53resolver:listTagsForResource",
            "rum:batchGetRumMetricDefinitions",
            "rum:getAppMonitor",
            "rum:listAppMonitors",
            "rum:listRumMetricsDestinations",
            "s3:describeJob",
            "s3:describeMultiRegionAccessPointOperation",
            "s3:getAccelerateConfiguration",
            "s3:getAccessPoint",
            "s3:getAccessPointConfigurationForObjectLambda",
            "s3:getAccessPointForObjectLambda",
            "s3:getAccessPointPolicy",
            "s3:getAccessPointPolicyForObjectLambda",
            "s3:getAccessPointPolicyStatus",
            "s3:getAccessPointPolicyStatusForObjectLambda",
            "s3:getAccountPublicAccessBlock",
            "s3:getAnalyticsConfiguration",
            "s3:getBucketAcl",
            "s3:getBucketCORS",
            "s3:getBucketLocation",
            "s3:getBucketLogging",
            "s3:getBucketNotification",
            "s3:getBucketObjectLockConfiguration",
            "s3:getBucketOwnershipControls",
            "s3:getBucketPolicy",
            "s3:getBucketPolicyStatus",
            "s3:getBucketPublicAccessBlock",
            "s3:getBucketRequestPayment",
            "s3:getBucketVersioning",
            "s3:getBucketWebsite",
            "s3:getEncryptionConfiguration",
            "s3:getIntelligentTieringConfiguration",
            "s3:getInventoryConfiguration",
            "s3:getLifecycleConfiguration",
            "s3:getMetricsConfiguration",
            "s3:getMultiRegionAccessPoint",
            "s3:getMultiRegionAccessPointPolicy",
            "s3:getMultiRegionAccessPointPolicyStatus",
            "s3:getMultiRegionAccessPointRoutes",
            "s3:getObjectLegalHold",
            "s3:getObjectRetention",
            "s3:getReplicationConfiguration",
            "s3:getStorageLensConfiguration",
            "s3:listAccessPoints",
            "s3:listAccessPointsForObjectLambda",
            "s3:listAllMyBuckets",
            "s3:listBucket",
            "s3:listBucketMultipartUploads",
            "s3:listBucketVersions",
            "s3:listJobs",
            "s3:listMultiRegionAccessPoints",
            "s3:listMultipartUploadParts",
            "s3:listStorageLensConfigurations",
            "s3express:getBucketPolicy",
            "s3express:listAllMyDirectoryBuckets",
            "sagemaker:describeAction",
            "sagemaker:describeAlgorithm",
            "sagemaker:describeApp",
            "sagemaker:describeAppImageConfig",
            "sagemaker:describeArtifact",
            "sagemaker:describeAutoMLJob",
            "sagemaker:describeCluster",
            "sagemaker:describeClusterNode",
            "sagemaker:describeCodeRepository",
            "sagemaker:describeCompilationJob",
            "sagemaker:describeContext",
            "sagemaker:describeDataQualityJobDefinition",
            "sagemaker:describeDevice",
            "sagemaker:describeDeviceFleet",
            "sagemaker:describeDomain",
            "sagemaker:describeEdgeDeploymentPlan",
            "sagemaker:describeEdgePackagingJob",
            "sagemaker:describeEndpoint",
            "sagemaker:describeEndpointConfig",
            "sagemaker:describeExperiment",
            "sagemaker:describeFeatureGroup",
            "sagemaker:describeFeatureMetadata",
            "sagemaker:describeFlowDefinition",
            "sagemaker:describeHub",
            "sagemaker:describeHubContent",
            "sagemaker:describeHumanTaskUi",
            "sagemaker:describeHyperParameterTuningJob",
            "sagemaker:describeImage",
            "sagemaker:describeImageVersion",
            "sagemaker:describeInferenceComponent",
            "sagemaker:describeInferenceExperiment",
            "sagemaker:describeInferenceRecommendationsJob",
            "sagemaker:describeLabelingJob",
            "sagemaker:describeModel",
            "sagemaker:describeModelBiasJobDefinition",
            "sagemaker:describeModelCard",
            "sagemaker:describeModelCardExportJob",
            "sagemaker:describeModelExplainabilityJobDefinition",
            "sagemaker:describeModelPackage",
            "sagemaker:describeModelPackageGroup",
            "sagemaker:describeModelQualityJobDefinition",
            "sagemaker:describeMonitoringSchedule",
            "sagemaker:describeNotebookInstance",
            "sagemaker:describeNotebookInstanceLifecycleConfig",
            "sagemaker:describePipeline",
            "sagemaker:describePipelineDefinitionForExecution",
            "sagemaker:describePipelineExecution",
            "sagemaker:describeProcessingJob",
            "sagemaker:describeProject",
            "sagemaker:describeSpace",
            "sagemaker:describeStudioLifecycleConfig",
            "sagemaker:describeSubscribedWorkteam",
            "sagemaker:describeTrainingJob",
            "sagemaker:describeTransformJob",
            "sagemaker:describeTrial",
            "sagemaker:describeTrialComponent",
            "sagemaker:describeUserProfile",
            "sagemaker:describeWorkforce",
            "sagemaker:describeWorkteam",
            "sagemaker:getDeviceFleetReport",
            "sagemaker:getModelPackageGroupPolicy",
            "sagemaker:getSagemakerServicecatalogPortfolioStatus",
            "sagemaker:listpermissions",
            "sagemaker:listAlgorithms",
            "sagemaker:listAliases",
            "sagemaker:listAppImageConfigs",
            "sagemaker:listApps",
            "sagemaker:listArtifacts",
            "sagemaker:listAssociations",
            "sagemaker:listAutoMLJobs",
            "sagemaker:listCandidatesForAutoMLJob",
            "sagemaker:listClusterNodes",
            "sagemaker:listClusters",
            "sagemaker:listCodeRepositories",
            "sagemaker:listCompilationJobs",
            "sagemaker:listContexts",
            "sagemaker:listDataQualityJobDefinitions",
            "sagemaker:listDeviceFleets",
            "sagemaker:listDevices",
            "sagemaker:listDomains",
            "sagemaker:listEdgeDeploymentPlans",
            "sagemaker:listEdgePackagingJobs",
            "sagemaker:listEndpointConfigs",
            "sagemaker:listEndpoints",
            "sagemaker:listExperiments",
            "sagemaker:listFeatureGroups",
            "sagemaker:listFlowDefinitions",
            "sagemaker:listHubContentVersions",
            "sagemaker:listHubContents",
            "sagemaker:listHubs",
            "sagemaker:listHumanTaskUis",
            "sagemaker:listHyperParameterTuningJobs",
            "sagemaker:listImageVersions",
            "sagemaker:listImages",
            "sagemaker:listInferenceComponents",
            "sagemaker:listInferenceExperiments",
            "sagemaker:listInferenceRecommendationsJobSteps",
            "sagemaker:listInferenceRecommendationsJobs",
            "sagemaker:listLabelingJobs",
            "sagemaker:listLabelingJobsForWorkteam",
            "sagemaker:listLineageGroups",
            "sagemaker:listModelBiasJobDefinitions",
            "sagemaker:listModelCardExportJobs",
            "sagemaker:listModelCardVersions",
            "sagemaker:listModelCards",
            "sagemaker:listModelExplainabilityJobDefinitions",
            "sagemaker:listModelMetadata",
            "sagemaker:listModelPackageGroups",
            "sagemaker:listModelPackages",
            "sagemaker:listModelQualityJobDefinitions",
            "sagemaker:listModels",
            "sagemaker:listMonitoringAlertHistory",
            "sagemaker:listMonitoringAlerts",
            "sagemaker:listMonitoringExecutions",
            "sagemaker:listMonitoringSchedules",
            "sagemaker:listNotebookInstanceLifecycleConfigs",
            "sagemaker:listNotebookInstances",
            "sagemaker:listPipelineExecutionSteps",
            "sagemaker:listPipelineExecutions",
            "sagemaker:listPipelineParametersForExecution",
            "sagemaker:listPipelines",
            "sagemaker:listProcessingJobs",
            "sagemaker:listProjects",
            "sagemaker:listSpaces",
            "sagemaker:listStageDevices",
            "sagemaker:listStudioLifecycleConfigs",
            "sagemaker:listSubscribedWorkteams",
            "sagemaker:listTags",
            "sagemaker:listTrainingJobs",
            "sagemaker:listTrainingJobsForHyperParameterTuningJob",
            "sagemaker:listTransformJobs",
            "sagemaker:listTrialComponents",
            "sagemaker:listTrials",
            "sagemaker:listUserProfiles",
            "sagemaker:listWorkforces",
            "sagemaker:listWorkteams",
            "savingsplans:describeSavingsPlans",
            "scheduler:getSchedule",
            "scheduler:getScheduleGroup",
            "scheduler:listScheduleGroups",
            "scheduler:listSchedules",
            "schemas:describeCodeBinding",
            "schemas:describeDiscoverer",
            "schemas:describeRegistry",
            "schemas:describeSchema",
            "schemas:getCodeBindingSource",
            "schemas:getDiscoveredSchema",
            "schemas:getResourcePolicy",
            "schemas:listDiscoverers",
            "schemas:listRegistries",
            "schemas:listSchemaVersions",
            "schemas:listSchemas",
            "sdb:domainMetadata",
            "sdb:listDomains",
            "secretsmanager:describeSecret",
            "secretsmanager:getResourcePolicy",
            "secretsmanager:listSecretVersionIds",
            "secretsmanager:listSecrets",
            "securityhub:batchGetConfigurationPolicyAssociations",
            "securityhub:describeOrganizationConfiguration",
            "securityhub:getConfigurationPolicy",
            "securityhub:getConfigurationPolicyAssociation",
            "securityhub:getEnabledStandards",
            "securityhub:getFindingAggregator",
            "securityhub:getFindings",
            "securityhub:getInsightResults",
            "securityhub:getInsights",
            "securityhub:getMasterAccount",
            "securityhub:getMembers",
            "securityhub:listConfigurationPolicies",
            "securityhub:listConfigurationPolicyAssociations",
            "securityhub:listEnabledProductsForImport",
            "securityhub:listFindingAggregators",
            "securityhub:listInvitations",
            "securityhub:listMembers",
            "securitylake:getDataLakeExceptionSubscription",
            "securitylake:getDataLakeOrganizationConfiguration",
            "securitylake:getDataLakeSources",
            "securitylake:getSubscriber",
            "securitylake:listDataLakeExceptions",
            "securitylake:listDataLakes",
            "securitylake:listLogSources",
            "securitylake:listSubscribers",
            "serverlessrepo:getApplication",
            "serverlessrepo:getApplicationPolicy",
            "serverlessrepo:getCloudFormationTemplate",
            "serverlessrepo:listApplicationDependencies",
            "serverlessrepo:listApplicationVersions",
            "serverlessrepo:listApplications",
            "servicecatalog:describeConstraint",
            "servicecatalog:describePortfolio",
            "servicecatalog:describeProduct",
            "servicecatalog:describeProductAsAdmin",
            "servicecatalog:describeProductView",
            "servicecatalog:describeProvisioningArtifact",
            "servicecatalog:describeProvisioningParameters",
            "servicecatalog:describeRecord",
            "servicecatalog:listAcceptedPortfolioShares",
            "servicecatalog:listConstraintsForPortfolio",
            "servicecatalog:listLaunchPaths",
            "servicecatalog:listPortfolioAccess",
            "servicecatalog:listPortfolios",
            "servicecatalog:listPortfoliosForProduct",
            "servicecatalog:listPrincipalsForPortfolio",
            "servicecatalog:listProvisioningArtifacts",
            "servicecatalog:listRecordHistory",
            "servicecatalog:scanProvisionedProducts",
            "servicecatalog:searchProducts",
            "servicequotas:getAWSDefaultServiceQuota",
            "servicequotas:getAssociationForServiceQuotaTemplate",
            "servicequotas:getRequestedServiceQuotaChange",
            "servicequotas:getServiceQuota",
            "servicequotas:getServiceQuotaIncreaseRequestFromTemplate",
            "servicequotas:listAWSDefaultServiceQuotas",
            "servicequotas:listRequestedServiceQuotaChangeHistory",
            "servicequotas:listRequestedServiceQuotaChangeHistoryByQuota",
            "servicequotas:listServiceQuotaIncreaseRequestsInTemplate",
            "servicequotas:listServiceQuotas",
            "servicequotas:listServices",
            "ses:describeActiveReceiptRuleSet",
            "ses:describeConfigurationSet",
            "ses:describeReceiptRule",
            "ses:describeReceiptRuleSet",
            "ses:getAccount",
            "ses:getAccountSendingEnabled",
            "ses:getBlacklistReports",
            "ses:getConfigurationSet",
            "ses:getConfigurationSetEventDestinations",
            "ses:getContactList",
            "ses:getDedicatedIp",
            "ses:getDedicatedIpPool",
            "ses:getDedicatedIps",
            "ses:getDeliverabilityDashboardOptions",
            "ses:getDeliverabilityTestReport",
            "ses:getDomainDeliverabilityCampaign",
            "ses:getDomainStatisticsReport",
            "ses:getEmailIdentity",
            "ses:getIdentityDkimAttributes",
            "ses:getIdentityMailFromDomainAttributes",
            "ses:getIdentityNotificationAttributes",
            "ses:getIdentityPolicies",
            "ses:getIdentityVerificationAttributes",
            "ses:getImportJob",
            "ses:getSendQuota",
            "ses:getSendStatistics",
            "ses:listConfigurationSets",
            "ses:listContactLists",
            "ses:listContacts",
            "ses:listCustomVerificationEmailTemplates",
            "ses:listDedicatedIpPools",
            "ses:listDeliverabilityTestReports",
            "ses:listDomainDeliverabilityCampaigns",
            "ses:listEmailIdentities",
            "ses:listEmailTemplates",
            "ses:listIdentities",
            "ses:listIdentityPolicies",
            "ses:listImportJobs",
            "ses:listReceiptFilters",
            "ses:listReceiptRuleSets",
            "ses:listRecommendations",
            "ses:listTagsForResource",
            "ses:listTemplates",
            "ses:listVerifiedEmailAddresses",
            "shield:describeAttack",
            "shield:describeProtection",
            "shield:describeSubscription",
            "shield:listAttacks",
            "shield:listProtections",
            "sms-voice:getConfigurationSetEventDestinations",
            "sms:getConnectors",
            "sms:getReplicationJobs",
            "sms:getReplicationRuns",
            "sms:getServers",
            "snowball:describeAddress",
            "snowball:describeAddresses",
            "snowball:describeJob",
            "snowball:getSnowballUsage",
            "snowball:listJobs",
            "snowball:listServiceVersions",
            "sns:checkIfPhoneNumberIsOptedOut",
            "sns:getDataProtectionPolicy",
            "sns:getEndpointAttributes",
            "sns:getPlatformApplicationAttributes",
            "sns:getSMSAttributes",
            "sns:getSMSSandboxAccountStatus",
            "sns:getSubscriptionAttributes",
            "sns:getTopicAttributes",
            "sns:listEndpointsByPlatformApplication",
            "sns:listOriginationNumbers",
            "sns:listPhoneNumbersOptedOut",
            "sns:listPlatformApplications",
            "sns:listSMSSandboxPhoneNumbers",
            "sns:listSubscriptions",
            "sns:listSubscriptionsByTopic",
            "sns:listTopics",
            "sqs:getQueueAttributes",
            "sqs:getQueueUrl",
            "sqs:listDeadLetterSourceQueues",
            "sqs:listQueues",
            "ssm-contacts:describeEngagement",
            "ssm-contacts:describePage",
            "ssm-contacts:getContact",
            "ssm-contacts:getContactChannel",
            "ssm-contacts:getContactPolicy",
            "ssm-contacts:getRotation",
            "ssm-contacts:getRotationOverride",
            "ssm-contacts:listContactChannels",
            "ssm-contacts:listContacts",
            "ssm-contacts:listEngagements",
            "ssm-contacts:listPageReceipts",
            "ssm-contacts:listPageResolutions",
            "ssm-contacts:listPagesByContact",
            "ssm-contacts:listPagesByEngagement",
            "ssm-contacts:listPreviewRotationShifts",
            "ssm-contacts:listRotationOverrides",
            "ssm-contacts:listRotationShifts",
            "ssm-contacts:listRotations",
            "ssm-incidents:getIncidentRecord",
            "ssm-incidents:getReplicationSet",
            "ssm-incidents:getResourcePolicies",
            "ssm-incidents:getResponsePlan",
            "ssm-incidents:getTimelineEvent",
            "ssm-incidents:listIncidentRecords",
            "ssm-incidents:listRelatedItems",
            "ssm-incidents:listReplicationSets",
            "ssm-incidents:listResponsePlans",
            "ssm-incidents:listTimelineEvents",
            "ssm-sap:getApplication",
            "ssm-sap:getComponent",
            "ssm-sap:getDatabase",
            "ssm-sap:getOperation",
            "ssm-sap:getResourcePermission",
            "ssm-sap:listApplications",
            "ssm-sap:listComponents",
            "ssm-sap:listDatabases",
            "ssm-sap:listOperations",
            "ssm:describeActivations",
            "ssm:describeAssociation",
            "ssm:describeAssociationExecutionTargets",
            "ssm:describeAssociationExecutions",
            "ssm:describeAutomationExecutions",
            "ssm:describeAutomationStepExecutions",
            "ssm:describeAvailablePatches",
            "ssm:describeDocument",
            "ssm:describeDocumentPermission",
            "ssm:describeEffectiveInstanceAssociations",
            "ssm:describeEffectivePatchesForPatchBaseline",
            "ssm:describeInstanceAssociationsStatus",
            "ssm:describeInstanceInformation",
            "ssm:describeInstancePatchStates",
            "ssm:describeInstancePatchStatesForPatchGroup",
            "ssm:describeInstancePatches",
            "ssm:describeInventoryDeletions",
            "ssm:describeMaintenanceWindowExecutionTaskInvocations",
            "ssm:describeMaintenanceWindowExecutionTasks",
            "ssm:describeMaintenanceWindowExecutions",
            "ssm:describeMaintenanceWindowSchedule",
            "ssm:describeMaintenanceWindowTargets",
            "ssm:describeMaintenanceWindowTasks",
            "ssm:describeMaintenanceWindows",
            "ssm:describeMaintenanceWindowsForTarget",
            "ssm:describeOpsItems",
            "ssm:describeParameters",
            "ssm:describePatchBaselines",
            "ssm:describePatchGroupState",
            "ssm:describePatchGroups",
            "ssm:describePatchProperties",
            "ssm:describeSessions",
            "ssm:getAutomationExecution",
            "ssm:getCalendarState",
            "ssm:getCommandInvocation",
            "ssm:getConnectionStatus",
            "ssm:getDefaultPatchBaseline",
            "ssm:getDeployablePatchSnapshotForInstance",
            "ssm:getInventorySchema",
            "ssm:getMaintenanceWindow",
            "ssm:getMaintenanceWindowExecution",
            "ssm:getMaintenanceWindowExecutionTask",
            "ssm:getMaintenanceWindowExecutionTaskInvocation",
            "ssm:getMaintenanceWindowTask",
            "ssm:getOpsItem",
            "ssm:getOpsMetadata",
            "ssm:getOpsSummary",
            "ssm:getPatchBaseline",
            "ssm:getPatchBaselineForPatchGroup",
            "ssm:getResourcePolicies",
            "ssm:getServiceSetting",
            "ssm:listAssociationVersions",
            "ssm:listAssociations",
            "ssm:listCommandInvocations",
            "ssm:listCommands",
            "ssm:listComplianceItems",
            "ssm:listComplianceSummaries",
            "ssm:listDocumentMetadataHistory",
            "ssm:listDocumentVersions",
            "ssm:listDocuments",
            "ssm:listOpsItemEvents",
            "ssm:listOpsItemRelatedItems",
            "ssm:listOpsMetadata",
            "ssm:listResourceComplianceSummaries",
            "ssm:listResourceDataSync",
            "ssm:listTagsForResource",
            "sso:describeApplication",
            "sso:describeApplicationAssignment",
            "sso:describeApplicationProvider",
            "sso:describeInstance",
            "sso:describeTrustedTokenIssuer",
            "sso:getApplicationAccessScope",
            "sso:getApplicationAssignmentConfiguration",
            "sso:getApplicationAuthenticationMethod",
            "sso:getApplicationGrant",
            "sso:getApplicationInstance",
            "sso:getApplicationTemplate",
            "sso:getManagedApplicationInstance",
            "sso:getSharedSsoConfiguration",
            "sso:listApplicationAccessScopes",
            "sso:listApplicationAssignments",
            "sso:listApplicationAuthenticationMethods",
            "sso:listApplicationGrants",
            "sso:listApplicationInstances",
            "sso:listApplicationProviders",
            "sso:listApplicationTemplates",
            "sso:listApplications",
            "sso:listDirectoryAssociations",
            "sso:listInstances",
            "sso:listProfileAssociations",
            "sso:listTrustedTokenIssuers",
            "states:describeActivity",
            "states:describeExecution",
            "states:describeMapRun",
            "states:describeStateMachine",
            "states:describeStateMachineAlias",
            "states:describeStateMachineForExecution",
            "states:getExecutionHistory",
            "states:listActivities",
            "states:listExecutions",
            "states:listMapRuns",
            "states:listStateMachineAliases",
            "states:listStateMachineVersions",
            "states:listStateMachines",
            "storagegateway:describeBandwidthRateLimit",
            "storagegateway:describeCache",
            "storagegateway:describeCachediSCSIVolumes",
            "storagegateway:describeFileSystemAssociations",
            "storagegateway:describeGatewayInformation",
            "storagegateway:describeMaintenanceStartTime",
            "storagegateway:describeNFSFileShares",
            "storagegateway:describeSMBFileShares",
            "storagegateway:describeSMBSettings",
            "storagegateway:describeSnapshotSchedule",
            "storagegateway:describeStorediSCSIVolumes",
            "storagegateway:describeTapeArchives",
            "storagegateway:describeTapeRecoveryPoints",
            "storagegateway:describeTapes",
            "storagegateway:describeUploadBuffer",
            "storagegateway:describeVTLDevices",
            "storagegateway:describeWorkingStorage",
            "storagegateway:listAutomaticTapeCreationPolicies",
            "storagegateway:listFileShares",
            "storagegateway:listFileSystemAssociations",
            "storagegateway:listGateways",
            "storagegateway:listLocalDisks",
            "storagegateway:listTagsForResource",
            "storagegateway:listTapes",
            "storagegateway:listVolumeInitiators",
            "storagegateway:listVolumeRecoveryPoints",
            "storagegateway:listVolumes",
            "swf:countClosedWorkflowExecutions",
            "swf:countOpenWorkflowExecutions",
            "swf:countPendingActivityTasks",
            "swf:countPendingDecisionTasks",
            "swf:describeActivityType",
            "swf:describeDomain",
            "swf:describeWorkflowExecution",
            "swf:describeWorkflowType",
            "swf:getWorkflowExecutionHistory",
            "swf:listActivityTypes",
            "swf:listClosedWorkflowExecutions",
            "swf:listDomains",
            "swf:listOpenWorkflowExecutions",
            "swf:listWorkflowTypes",
            "synthetics:describeCanaries",
            "synthetics:describeCanariesLastRun",
            "synthetics:describeRuntimeVersions",
            "synthetics:getCanary",
            "synthetics:getCanaryRuns",
            "synthetics:getGroup",
            "synthetics:listAssociatedGroups",
            "synthetics:listGroupResources",
            "synthetics:listGroups",
            "tiros:createQuery",
            "tiros:getQueryAnswer",
            "tiros:getQueryExplanation",
            "transcribe:describeLanguageModel",
            "transcribe:getCallAnalyticsCategory",
            "transcribe:getCallAnalyticsJob",
            "transcribe:getMedicalTranscriptionJob",
            "transcribe:getMedicalVocabulary",
            "transcribe:getTranscriptionJob",
            "transcribe:getVocabulary",
            "transcribe:getVocabularyFilter",
            "transcribe:listCallAnalyticsCategories",
            "transcribe:listCallAnalyticsJobs",
            "transcribe:listLanguageModels",
            "transcribe:listMedicalTranscriptionJobs",
            "transcribe:listMedicalVocabularies",
            "transcribe:listTranscriptionJobs",
            "transcribe:listVocabularies",
            "transcribe:listVocabularyFilters",
            "transfer:describeAccess",
            "transfer:describeAgreement",
            "transfer:describeConnector",
            "transfer:describeExecution",
            "transfer:describeProfile",
            "transfer:describeServer",
            "transfer:describeUser",
            "transfer:describeWorkflow",
            "transfer:listAccesses",
            "transfer:listAgreements",
            "transfer:listConnectors",
            "transfer:listExecutions",
            "transfer:listHostKeys",
            "transfer:listProfiles",
            "transfer:listServers",
            "transfer:listTagsForResource",
            "transfer:listUsers",
            "transfer:listWorkflows",
            "transfer:sendWorkflowStepState",
            "trustedadvisor:getOrganizationRecommendation",
            "trustedadvisor:getRecommendation",
            "trustedadvisor:listChecks",
            "trustedadvisor:listOrganizationRecommendationAccounts",
            "trustedadvisor:listOrganizationRecommendationResources",
            "trustedadvisor:listOrganizationRecommendations",
            "trustedadvisor:listRecommendationResources",
            "trustedadvisor:listRecommendations",
            "verifiedpermissions:getIdentitySource",
            "verifiedpermissions:getPolicy",
            "verifiedpermissions:getPolicyStore",
            "verifiedpermissions:getPolicyTemplate",
            "verifiedpermissions:getSchema",
            "verifiedpermissions:listIdentitySources",
            "verifiedpermissions:listPolicies",
            "verifiedpermissions:listPolicyStores",
            "verifiedpermissions:listPolicyTemplates",
            "vpc-lattice:getAccessLogSubscription",
            "vpc-lattice:getAuthPolicy",
            "vpc-lattice:getListener",
            "vpc-lattice:getResourcePolicy",
            "vpc-lattice:getRule",
            "vpc-lattice:getService",
            "vpc-lattice:getServiceNetwork",
            "vpc-lattice:getServiceNetworkServiceAssociation",
            "vpc-lattice:getServiceNetworkVpcAssociation",
            "vpc-lattice:getTargetGroup",
            "vpc-lattice:listAccessLogSubscriptions",
            "vpc-lattice:listListeners",
            "vpc-lattice:listRules",
            "vpc-lattice:listServiceNetworkServiceAssociations",
            "vpc-lattice:listServiceNetworkVpcAssociations",
            "vpc-lattice:listServiceNetworks",
            "vpc-lattice:listServices",
            "vpc-lattice:listTargetGroups",
            "vpc-lattice:listTargets",
            "waf-regional:getByteMatchSet",
            "waf-regional:getChangeTokenStatus",
            "waf-regional:getGeoMatchSet",
            "waf-regional:getIPSet",
            "waf-regional:getLoggingConfiguration",
            "waf-regional:getRateBasedRule",
            "waf-regional:getRegexMatchSet",
            "waf-regional:getRegexPatternSet",
            "waf-regional:getRule",
            "waf-regional:getRuleGroup",
            "waf-regional:getSqlInjectionMatchSet",
            "waf-regional:getWebACL",
            "waf-regional:getWebACLForResource",
            "waf-regional:listActivatedRulesInRuleGroup",
            "waf-regional:listByteMatchSets",
            "waf-regional:listGeoMatchSets",
            "waf-regional:listIPSets",
            "waf-regional:listLoggingConfigurations",
            "waf-regional:listRateBasedRules",
            "waf-regional:listRegexMatchSets",
            "waf-regional:listRegexPatternSets",
            "waf-regional:listResourcesForWebACL",
            "waf-regional:listRuleGroups",
            "waf-regional:listRules",
            "waf-regional:listSqlInjectionMatchSets",
            "waf-regional:listWebACLs",
            "waf:getByteMatchSet",
            "waf:getChangeTokenStatus",
            "waf:getGeoMatchSet",
            "waf:getIPSet",
            "waf:getLoggingConfiguration",
            "waf:getRateBasedRule",
            "waf:getRegexMatchSet",
            "waf:getRegexPatternSet",
            "waf:getRule",
            "waf:getRuleGroup",
            "waf:getSampledRequests",
            "waf:getSizeConstraintSet",
            "waf:getSqlInjectionMatchSet",
            "waf:getWebACL",
            "waf:getXssMatchSet",
            "waf:listActivatedRulesInRuleGroup",
            "waf:listByteMatchSets",
            "waf:listGeoMatchSets",
            "waf:listIPSets",
            "waf:listLoggingConfigurations",
            "waf:listRateBasedRules",
            "waf:listRegexMatchSets",
            "waf:listRegexPatternSets",
            "waf:listRuleGroups",
            "waf:listRules",
            "waf:listSizeConstraintSets",
            "waf:listSqlInjectionMatchSets",
            "waf:listWebACLs",
            "waf:listXssMatchSets",
            "wafv2:checkCapacity",
            "wafv2:describeManagedRuleGroup",
            "wafv2:getIPSet",
            "wafv2:getLoggingConfiguration",
            "wafv2:getPermissionPolicy",
            "wafv2:getRateBasedStatementManagedKeys",
            "wafv2:getRegexPatternSet",
            "wafv2:getRuleGroup",
            "wafv2:getSampledRequests",
            "wafv2:getWebACL",
            "wafv2:getWebACLForResource",
            "wafv2:listAvailableManagedRuleGroups",
            "wafv2:listIPSets",
            "wafv2:listLoggingConfigurations",
            "wafv2:listRegexPatternSets",
            "wafv2:listResourcesForWebACL",
            "wafv2:listRuleGroups",
            "wafv2:listTagsForResource",
            "wafv2:listWebACLs",
            "workdocs:checkAlias",
            "workdocs:describeAvailableDirectories",
            "workdocs:describeInstances",
            "workmail:describeGroup",
            "workmail:describeOrganization",
            "workmail:describeResource",
            "workmail:describeUser",
            "workmail:listAliases",
            "workmail:listGroupMembers",
            "workmail:listGroups",
            "workmail:listMailboxPermissions",
            "workmail:listOrganizations",
            "workmail:listResourceDelegates",
            "workmail:listResources",
            "workmail:listUsers",
            "workspaces-web:getBrowserSettings",
            "workspaces-web:getIdentityProvider",
            "workspaces-web:getNetworkSettings",
            "workspaces-web:getPortal",
            "workspaces-web:getPortalServiceProviderMetadata",
            "workspaces-web:getTrustStoreCertificate",
            "workspaces-web:getUserSettings",
            "workspaces-web:listBrowserSettings",
            "workspaces-web:listIdentityProviders",
            "workspaces-web:listNetworkSettings",
            "workspaces-web:listPortals",
            "workspaces-web:listTagsForResource",
            "workspaces-web:listTrustStoreCertificates",
            "workspaces-web:listTrustStores",
            "workspaces-web:listUserSettings",
            "workspaces:describeAccount",
            "workspaces:describeAccountModifications",
            "workspaces:describeApplicationAssociations",
            "workspaces:describeIpGroups",
            "workspaces:describeTags",
            "workspaces:describeWorkspaceAssociations",
            "workspaces:describeWorkspaceBundles",
            "workspaces:describeWorkspaceDirectories",
            "workspaces:describeWorkspaceImages",
            "workspaces:describeWorkspaces",
            "workspaces:describeWorkspacesConnectionStatus",
            "workspaces:describeWorkspacesPoolSessions",
            "workspaces:describeWorkspacesPools",
            "xray:getEncryptionConfig",
            "xray:getGroup",
            "xray:getGroups",
            "xray:getInsightImpactGraph",
            "xray:getSamplingRules",
            "xray:getSamplingStatisticSummaries",
            "xray:getSamplingTargets",
            "xray:getServiceGraph",
            "xray:getTimeSeriesServiceStatistics",
            "xray:getTraceGraph",
            "xray:listResourcePolicies"
        ]
    },
    "AWSBudgetsReadOnlyAccess": {
        "permissions": [
            "aws-portal:ViewBilling",
            "budgets:Describe*",
            "budgets:ListTagsForResource",
            "budgets:ViewBudget"
        ]
    },
    "AWSBudgetspermissionsWithAWSResourceControlAccess": {
        "permissions": [
            "aws-portal:ModifyBilling",
            "aws-portal:ViewBilling",
            "budgets:*",
            "ec2:DescribeInstances",
            "iam:ListGroups",
            "iam:ListPolicies",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:PassRole",
            "organizations:ListAccounts",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListPolicies",
            "organizations:ListRoots",
            "rds:DescribeDBInstances",
            "sns:ListTopics"
        ]
    },
    "AWSDataLifecycleManagerServiceRoleForAMIManagement": {
        "permissions": [
            "ec2:CopyImage",
            "ec2:CreateImage",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DeregisterImage",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:DisableImageDeprecation",
            "ec2:EnableImageDeprecation",
            "ec2:ModifyImageAttribute",
            "ec2:ResetImageAttribute"
        ]
    },
    "AmazonMQServiceRolePolicy": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeVpcEndpoints",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AWSOutpostsServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups"
        ]
    },
    "AwsGlueDataBrewFullAccessPolicy": {
        "permissions": [
            "appflow:DescribeFlow",
            "appflow:DescribeFlowExecutionRecords",
            "appflow:ListFlows",
            "cloudtrail:LookupEvents",
            "databrew:BatchDeleteRecipeVersion",
            "databrew:CreateDataset",
            "databrew:CreateProfileJob",
            "databrew:CreateProject",
            "databrew:CreateRecipe",
            "databrew:CreateRecipeJob",
            "databrew:CreateRuleset",
            "databrew:CreateSchedule",
            "databrew:DeleteDataset",
            "databrew:DeleteJob",
            "databrew:DeleteProject",
            "databrew:DeleteRecipeVersion",
            "databrew:DeleteRuleset",
            "databrew:DeleteSchedule",
            "databrew:DescribeDataset",
            "databrew:DescribeJob",
            "databrew:DescribeJobRun",
            "databrew:DescribeProject",
            "databrew:DescribeRecipe",
            "databrew:DescribeRuleset",
            "databrew:DescribeSchedule",
            "databrew:ListDatasets",
            "databrew:ListJobRuns",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "databrew:ListRecipeVersions",
            "databrew:ListRecipes",
            "databrew:ListRulesets",
            "databrew:ListSchedules",
            "databrew:ListTagsForResource",
            "databrew:PublishRecipe",
            "databrew:SendProjectSessionAction",
            "databrew:StartJobRun",
            "databrew:StartProjectSession",
            "databrew:StopJobRun",
            "databrew:TagResource",
            "databrew:UntagResource",
            "databrew:UpdateDataset",
            "databrew:UpdateProfileJob",
            "databrew:UpdateProject",
            "databrew:UpdateRecipe",
            "databrew:UpdateRecipeJob",
            "databrew:UpdateRuleset",
            "databrew:UpdateSchedule",
            "dataexchange:CreateJob",
            "dataexchange:GetJob",
            "dataexchange:ListDataSetRevisions",
            "dataexchange:ListDataSets",
            "dataexchange:ListRevisionAssets",
            "dataexchange:StartJob",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "glue:CreateConnection",
            "glue:CreateTable",
            "glue:GetConnection",
            "glue:GetConnections",
            "glue:GetDataCatalogEncryptionSettings",
            "glue:GetDatabases",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "kms:GenerateRandom",
            "kms:ListAliases",
            "kms:ListKeys",
            "redshift-data:DescribeStatement",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusters",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "secretsmanager:CreateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets",
            "sts:GetCallerIdentity"
        ]
    },
    "DynamoDBKinesisReplicationServiceRolePolicy": {
        "permissions": [
            "kinesis:DescribeStream",
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kms:GenerateDataKey"
        ]
    },
    "AWSServiceCatalogAppRegistryFullAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:UpdateStack",
            "iam:CreateServiceLinkedRole",
            "resource-groups:AssociateResource",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:DisassociateResource",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:GetTags",
            "resource-groups:Tag",
            "resource-groups:Untag",
            "servicecatalog:AssociateAttributeGroup",
            "servicecatalog:AssociateResource",
            "servicecatalog:CreateApplication",
            "servicecatalog:CreateAttributeGroup",
            "servicecatalog:DeleteApplication",
            "servicecatalog:DeleteAttributeGroup",
            "servicecatalog:DisassociateAttributeGroup",
            "servicecatalog:DisassociateResource",
            "servicecatalog:GetApplication",
            "servicecatalog:GetAssociatedResource",
            "servicecatalog:GetAttributeGroup",
            "servicecatalog:GetConfiguration",
            "servicecatalog:ListApplications",
            "servicecatalog:ListAssociatedAttributeGroups",
            "servicecatalog:ListAssociatedResources",
            "servicecatalog:ListAttributeGroups",
            "servicecatalog:ListAttributeGroupsForApplication",
            "servicecatalog:ListTagsForResource",
            "servicecatalog:PutConfiguration",
            "servicecatalog:SyncResource",
            "servicecatalog:TagResource",
            "servicecatalog:UntagResource",
            "servicecatalog:UpdateApplication",
            "servicecatalog:UpdateAttributeGroup",
            "tag:GetResources"
        ]
    },
    "AWSServiceCatalogAppRegistryReadOnlyAccess": {
        "permissions": [
            "servicecatalog:GetApplication",
            "servicecatalog:GetAssociatedResource",
            "servicecatalog:GetAttributeGroup",
            "servicecatalog:GetConfiguration",
            "servicecatalog:ListApplications",
            "servicecatalog:ListAssociatedAttributeGroups",
            "servicecatalog:ListAssociatedResources",
            "servicecatalog:ListAttributeGroups",
            "servicecatalog:ListAttributeGroupsForApplication",
            "servicecatalog:ListTagsForResource"
        ]
    },
    "AWSNetworkFirewallServiceRolePolicy": {
        "permissions": [
            "acm:DescribeCertificate",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "resource-groups:ListGroupResources",
            "tag:GetResources"
        ]
    },
    "AWSLambda_ReadOnlyAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "kms:ListAliases",
            "lambda:Get*",
            "lambda:List*",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeQueries",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetLogRecord",
            "logs:GetQueryResults",
            "logs:StartQuery",
            "logs:StopQuery",
            "states:DescribeStateMachine",
            "states:ListStateMachines",
            "tag:GetResources",
            "xray:BatchGetTraces",
            "xray:GetTraceSummaries"
        ]
    },
    "AWSLambda_FullAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:ListAliases",
            "lambda:*",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "states:DescribeStateMachine",
            "states:ListStateMachines",
            "tag:GetResources",
            "xray:BatchGetTraces",
            "xray:GetTraceSummaries"
        ]
    },
    "AmazonHoneycodeServiceRolePolicy": {
        "permissions": [
            "sso:GetManagedApplicationInstance"
        ]
    },
    "S3StorageLensServiceRolePolicy": {
        "permissions": [
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AWSGlueSchemaRegistryFullAccess": {
        "permissions": [
            "glue:CheckSchemaVersionValidity",
            "glue:CreateRegistry",
            "glue:CreateSchema",
            "glue:DeleteRegistry",
            "glue:DeleteSchema",
            "glue:DeleteSchemaVersions",
            "glue:GetRegistry",
            "glue:GetSchema",
            "glue:GetSchemaByDefinition",
            "glue:GetSchemaVersion",
            "glue:GetSchemaVersionsDiff",
            "glue:GetTags",
            "glue:ListRegistries",
            "glue:ListSchemaVersions",
            "glue:ListSchemas",
            "glue:PutSchemaVersionMetadata",
            "glue:QuerySchemaVersionMetadata",
            "glue:RegisterSchemaVersion",
            "glue:RemoveSchemaVersionMetadata",
            "glue:TagResource",
            "glue:UnTagResource",
            "glue:UpdateRegistry",
            "glue:UpdateSchema"
        ]
    },
    "AWSGlueSchemaRegistryReadonlyAccess": {
        "permissions": [
            "glue:CheckSchemaVersionValidity",
            "glue:GetRegistry",
            "glue:GetSchema",
            "glue:GetSchemaByDefinition",
            "glue:GetSchemaVersion",
            "glue:GetSchemaVersionsDiff",
            "glue:GetTags",
            "glue:ListRegistries",
            "glue:ListSchemaVersions",
            "glue:ListSchemas",
            "glue:QuerySchemaVersionMetadata"
        ]
    },
    "AmazonConnect_FullAccess": {
        "permissions": [
            "connect:*",
            "ds:AuthorizeApplication",
            "ds:CheckAlias",
            "ds:CreateAlias",
            "ds:CreateIdentityPoolDirectory",
            "ds:DeleteDirectory",
            "ds:DescribeDirectories",
            "ds:UnauthorizeApplication",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lambda:ListFunctions",
            "lex:GetBots",
            "lex:ListBotAliases",
            "lex:ListBots",
            "logs:CreateLogGroup",
            "profile:AddProfileKey",
            "profile:CreateDomain",
            "profile:CreateProfile",
            "profile:DeleteDomain",
            "profile:DeleteIntegration",
            "profile:DeleteProfile",
            "profile:DeleteProfileKey",
            "profile:DeleteProfileObject",
            "profile:DeleteProfileObjectType",
            "profile:GetDomain",
            "profile:GetIntegration",
            "profile:GetMatches",
            "profile:GetProfileObjectType",
            "profile:ListAccountIntegrations",
            "profile:ListDomains",
            "profile:ListIntegrations",
            "profile:ListProfileObjectTypeTemplates",
            "profile:ListProfileObjectTypes",
            "profile:ListProfileObjects",
            "profile:ListTagsForResource",
            "profile:MergeProfiles",
            "profile:PutIntegration",
            "profile:PutProfileObject",
            "profile:PutProfileObjectType",
            "profile:SearchProfiles",
            "profile:TagResource",
            "profile:UntagResource",
            "profile:UpdateDomain",
            "profile:UpdateProfile",
            "s3:CreateBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "servicequotas:GetServiceQuota"
        ]
    },
    "AmazonMWAAServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyVpcEndpoint",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups"
        ]
    },
    "CloudWatchApplicationInsightsFullAccess": {
        "permissions": [
            "apigateway:GET",
            "applicationinsights:*",
            "autoscaling:DescribeAutoScalingGroups",
            "dynamodb:ListTables",
            "ec2:DescribeInstances",
            "ec2:DescribeVolumes",
            "ecs:DescribeTaskDefinition",
            "ecs:ListClusters",
            "ecs:ListServices",
            "ecs:ListTasks",
            "eks:ListClusters",
            "eks:ListNodegroups",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "fsx:DescribeFileSystems",
            "iam:CreateServiceLinkedRole",
            "lambda:ListFunctions",
            "logs:DescribeLogGroups",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "s3:ListAllMyBuckets",
            "sns:ListTopics",
            "sqs:ListQueues",
            "states:ListStateMachines"
        ]
    },
    "CloudWatchApplicationInsightsReadOnlyAccess": {
        "permissions": [
            "applicationinsights:Describe*",
            "applicationinsights:List*"
        ]
    },
    "ElementalSupportCenterFullAccess": {
        "permissions": [
            "elemental-activations:CompleteAccountRegistration",
            "elemental-support-cases:*",
            "elemental-support-content:*"
        ]
    },
    "AmazonSageMakerAdmin-ServiceCatalogProductsServiceRolePolicy": {
        "permissions": [
            "apigateway:DELETE",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplateSummary",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack",
            "cloudformation:ValidateTemplate",
            "codebuild:CreateProject",
            "codebuild:DeleteProject",
            "codebuild:UpdateProject",
            "codecommit:CreateCommit",
            "codecommit:CreateRepository",
            "codecommit:DeleteRepository",
            "codecommit:GetRepository",
            "codecommit:ListRepositories",
            "codecommit:TagResource",
            "codeconnections:PassConnection",
            "codepipeline:CreatePipeline",
            "codepipeline:DeletePipeline",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:StartPipelineExecution",
            "codepipeline:TagResource",
            "codepipeline:UpdatePipeline",
            "codestar-connections:PassConnection",
            "cognito-idp:CreateGroup",
            "cognito-idp:CreateUserPool",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:CreateUserPoolDomain",
            "cognito-idp:DeleteGroup",
            "cognito-idp:DeleteUserPool",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:DeleteUserPoolDomain",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:TagResource",
            "cognito-idp:UpdateUserPool",
            "cognito-idp:UpdateUserPoolClient",
            "ecr:CreateRepository",
            "ecr:DeleteRepository",
            "ecr:TagResource",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "firehose:CreateDeliveryStream",
            "firehose:DeleteDeliveryStream",
            "firehose:DescribeDeliveryStream",
            "firehose:StartDeliveryStreamEncryption",
            "firehose:StopDeliveryStreamEncryption",
            "firehose:UpdateDestination",
            "glue:CreateClassifier",
            "glue:CreateCrawler",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreateTrigger",
            "glue:CreateWorkflow",
            "glue:DeleteClassifier",
            "glue:DeleteCrawler",
            "glue:DeleteDatabase",
            "glue:DeleteJob",
            "glue:DeleteTrigger",
            "glue:DeleteWorkflow",
            "glue:GetCrawler",
            "glue:GetTrigger",
            "glue:StopCrawler",
            "iam:PassRole",
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:InvokeFunction",
            "lambda:RemovePermission",
            "lambda:TagResource",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogGroup",
            "logs:DeleteLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutRetentionPolicy",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:PutBucketAcl",
            "s3:PutBucketCORS",
            "s3:PutBucketLogging",
            "s3:PutBucketNotification",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutEncryptionConfiguration",
            "s3:PutObjectTagging",
            "sagemaker:AddTags",
            "sagemaker:CreateCodeRepository",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateImage",
            "sagemaker:CreateModel",
            "sagemaker:CreateWorkteam",
            "sagemaker:DeleteCodeRepository",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteImage",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteWorkteam",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeWorkteam",
            "sagemaker:ListTags",
            "sagemaker:UpdateCodeRepository",
            "sagemaker:UpdateImage",
            "states:CreateStateMachine",
            "states:DeleteStateMachine",
            "states:UpdateStateMachine"
        ]
    },
    "AmazonDevOpsGuruServiceRolePolicy": {
        "permissions": [
            "apigateway:GET",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "autoscaling:DescribeAutoScalingGroups",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudformation:ListImports",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudtrail:LookupEvents",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAnomalyDetectors",
            "cloudwatch:GetDashboard",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListDashboards",
            "cloudwatch:ListMetrics",
            "codedeploy:BatchGetDeployments",
            "codedeploy:GetDeploymentGroup",
            "codedeploy:ListDeployments",
            "config:DescribeConfigurationRecorderStatus",
            "config:GetResourceConfigHistory",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeStream",
            "dynamodb:DescribeTable",
            "dynamodb:ListStreams",
            "ec2:DescribeSubnets",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListRuleNamesByTarget",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "kinesis:DescribeLimits",
            "kinesis:DescribeStream",
            "lambda:GetAccountSettings",
            "lambda:GetFunction",
            "lambda:GetFunctionConcurrency",
            "lambda:GetPolicy",
            "lambda:ListAliases",
            "lambda:ListEventSourceMappings",
            "lambda:ListProvisionedConcurrencyConfigs",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListRoots",
            "pi:GetResourceMetrics",
            "rds:DescribeAccountAttributes",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:DescribeOptionGroups",
            "s3:GetBucketNotification",
            "s3:GetBucketPolicy",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:GetBucketWebsite",
            "s3:GetIntelligentTieringConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetReplicationConfiguration",
            "s3:ListAllMyBuckets",
            "s3:ListStorageLensConfigurations",
            "servicequotas:GetServiceQuota",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListServiceQuotas",
            "sqs:GetQueueAttributes",
            "ssm:AddTagsToResource",
            "ssm:CreateOpsItem",
            "ssm:GetOpsItem",
            "ssm:UpdateOpsItem",
            "tag:GetResources",
            "xray:GetServiceGraph"
        ]
    },
    "AWSPanoramaGreengrassGroupRolePolicy": {
        "permissions": [
            "cloudwatch:PutDashboard",
            "cloudwatch:PutMetricData",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "panorama:*",
            "s3:GetBucket*",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AWSPanoramaFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:Describe*",
            "logs:DescribeLogGroups",
            "logs:FilterLogEvents",
            "logs:Get*",
            "logs:List*",
            "logs:StartQuery",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "panorama:*",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:PutSecretValue",
            "secretsmanager:UpdateSecret"
        ]
    },
    "AWSPanoramaApplianceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AWSPanoramaSageMakerRolePolicy": {
        "permissions": [
            "s3:GetBucket*",
            "s3:GetObject",
            "s3:PutObject"
        ]
    },
    "AWSPanoramaServiceRolePolicy": {
        "permissions": [
            "greengrass:AssociateRoleToGroup",
            "greengrass:AssociateServiceRoleToAccount",
            "greengrass:CreateCoreDefinition",
            "greengrass:CreateCoreDefinitionVersion",
            "greengrass:CreateDeployment",
            "greengrass:CreateFunctionDefinition",
            "greengrass:CreateFunctionDefinitionVersion",
            "greengrass:CreateGroup",
            "greengrass:CreateGroupCertificateAuthority",
            "greengrass:CreateGroupVersion",
            "greengrass:CreateLoggerDefinition",
            "greengrass:CreateLoggerDefinitionVersion",
            "greengrass:CreateResourceDefinition",
            "greengrass:CreateResourceDefinitionVersion",
            "greengrass:CreateSubscriptionDefinition",
            "greengrass:CreateSubscriptionDefinitionVersion",
            "greengrass:DeleteCoreDefinition",
            "greengrass:DeleteFunctionDefinition",
            "greengrass:DeleteGroup",
            "greengrass:DeleteLoggerDefinition",
            "greengrass:DeleteResourceDefinition",
            "greengrass:DeleteSubscriptionDefinition",
            "greengrass:DisassociateRoleFromGroup",
            "greengrass:DisassociateServiceRoleFromAccount",
            "greengrass:GetAssociatedRole",
            "greengrass:GetConnectivityInfo",
            "greengrass:GetCoreDefinition",
            "greengrass:GetCoreDefinitionVersion",
            "greengrass:GetDeploymentStatus",
            "greengrass:GetDeviceDefinition",
            "greengrass:GetDeviceDefinitionVersion",
            "greengrass:GetFunctionDefinition",
            "greengrass:GetFunctionDefinitionVersion",
            "greengrass:GetGroup",
            "greengrass:GetGroupCertificateAuthority",
            "greengrass:GetGroupCertificateConfiguration",
            "greengrass:GetGroupVersion",
            "greengrass:GetLoggerDefinition",
            "greengrass:GetLoggerDefinitionVersion",
            "greengrass:GetResourceDefinition",
            "greengrass:GetServiceRoleForAccount",
            "greengrass:GetSubscriptionDefinition",
            "greengrass:GetSubscriptionDefinitionVersion",
            "greengrass:ListCoreDefinitionVersions",
            "greengrass:ListCoreDefinitions",
            "greengrass:ListDeployments",
            "greengrass:ListDeviceDefinitionVersions",
            "greengrass:ListDeviceDefinitions",
            "greengrass:ListFunctionDefinitionVersions",
            "greengrass:ListFunctionDefinitions",
            "greengrass:ListGroupCertificateAuthorities",
            "greengrass:ListGroupVersions",
            "greengrass:ListGroups",
            "greengrass:ListLoggerDefinitionVersions",
            "greengrass:ListLoggerDefinitions",
            "greengrass:ListSubscriptionDefinitionVersions",
            "greengrass:ListSubscriptionDefinitions",
            "greengrass:ResetDeployments",
            "greengrass:UpdateConnectivityInfo",
            "greengrass:UpdateCoreDefinition",
            "greengrass:UpdateDeviceDefinition",
            "greengrass:UpdateFunctionDefinition",
            "greengrass:UpdateGroup",
            "greengrass:UpdateGroupCertificateConfiguration",
            "greengrass:UpdateLoggerDefinition",
            "greengrass:UpdateResourceDefinition",
            "greengrass:UpdateSubscriptionDefinition",
            "iam:PassRole",
            "iot:AttachPolicy",
            "iot:AttachPrincipalPolicy",
            "iot:AttachThingPrincipal",
            "iot:CreateJob",
            "iot:CreateKeysAndCertificate",
            "iot:CreatePolicy",
            "iot:CreatePolicyVersion",
            "iot:CreateRoleAlias",
            "iot:CreateThing",
            "iot:DeleteCertificate",
            "iot:DeleteJob",
            "iot:DeleteThing",
            "iot:DeleteThingShadow",
            "iot:DescribeEndpoint",
            "iot:DescribeJobExecution",
            "iot:DescribeThing",
            "iot:DetachPrincipalPolicy",
            "iot:DetachThingPrincipal",
            "iot:GetThingShadow",
            "iot:UpdateCertificate",
            "iot:UpdateThing",
            "iot:UpdateThingShadow",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction",
            "panorama:Describe*",
            "panorama:Get*",
            "panorama:List*",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucket*",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateTrainingJob",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:ListCompilationJobs",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopTrainingJob"
        ]
    },
    "AmazonElasticContainerRegistryPublicPowerUser": {
        "permissions": [
            "ecr-public:BatchCheckLayerAvailability",
            "ecr-public:CompleteLayerUpload",
            "ecr-public:DescribeImageTags",
            "ecr-public:DescribeImages",
            "ecr-public:DescribeRegistries",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetAuthorizationToken",
            "ecr-public:GetRegistryCatalogData",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "ecr-public:InitiateLayerUpload",
            "ecr-public:PutImage",
            "ecr-public:UploadLayerPart",
            "sts:GetServiceBearerToken"
        ]
    },
    "AmazonSageMakerFeatureStoreAccess": {
        "permissions": [
            "glue:GetTable",
            "glue:UpdateTable",
            "s3:GetBucketAcl",
            "s3:GetObject",
            "s3:PutObject",
            "s3:PutObjectAcl"
        ]
    },
    "AmazonDevOpsGuruReadOnlyAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "devops-guru:DescribeAccountHealth",
            "devops-guru:DescribeAccountOverview",
            "devops-guru:DescribeAnomaly",
            "devops-guru:DescribeEventSourcesConfig",
            "devops-guru:DescribeFeedback",
            "devops-guru:DescribeInsight",
            "devops-guru:DescribeResourceCollectionHealth",
            "devops-guru:DescribeServiceIntegration",
            "devops-guru:GetCostEstimation",
            "devops-guru:GetResourceCollection",
            "devops-guru:ListAnomaliesForInsight",
            "devops-guru:ListAnomalousLogGroups",
            "devops-guru:ListEvents",
            "devops-guru:ListInsights",
            "devops-guru:ListMonitoredResources",
            "devops-guru:ListNotificationChannels",
            "devops-guru:ListRecommendations",
            "devops-guru:SearchInsights",
            "devops-guru:StartCostEstimation",
            "iam:GetRole",
            "logs:FilterLogEvents",
            "rds:DescribeDBInstances"
        ]
    },
    "AmazonDevOpsGuruFullAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "devops-guru:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "logs:FilterLogEvents",
            "rds:DescribeDBInstances",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "sns:Publish",
            "sns:SetTopicAttributes"
        ]
    },
    "AmazonElasticContainerRegistryPublicFullAccess": {
        "permissions": [
            "ecr-public:*",
            "sts:GetServiceBearerToken"
        ]
    },
    "AmazonElasticContainerRegistryPublicReadOnly": {
        "permissions": [
            "ecr-public:BatchCheckLayerAvailability",
            "ecr-public:DescribeImageTags",
            "ecr-public:DescribeImages",
            "ecr-public:DescribeRegistries",
            "ecr-public:DescribeRepositories",
            "ecr-public:GetAuthorizationToken",
            "ecr-public:GetRegistryCatalogData",
            "ecr-public:GetRepositoryCatalogData",
            "ecr-public:GetRepositoryPolicy",
            "sts:GetServiceBearerToken"
        ]
    },
    "AdministratorAccess-Amplify": {
        "permissions": [
            "amplify:*",
            "amplify:GetApp",
            "amplify:GetBranch",
            "amplify:UpdateApp",
            "amplify:UpdateBranch",
            "amplifybackend:*",
            "amplifyuibuilder:*",
            "apigateway:DELETE",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "appsync:CreateApiKey",
            "appsync:CreateDataSource",
            "appsync:CreateFunction",
            "appsync:CreateGraphqlApi",
            "appsync:CreateResolver",
            "appsync:CreateType",
            "appsync:DeleteApiKey",
            "appsync:DeleteDataSource",
            "appsync:DeleteFunction",
            "appsync:DeleteGraphqlApi",
            "appsync:DeleteResolver",
            "appsync:DeleteType",
            "appsync:GetDataSource",
            "appsync:GetFunction",
            "appsync:GetGraphqlApi",
            "appsync:GetIntrospectionSchema",
            "appsync:GetResolver",
            "appsync:GetSchemaCreationStatus",
            "appsync:GetType",
            "appsync:GraphQL",
            "appsync:ListApiKeys",
            "appsync:ListDataSources",
            "appsync:ListFunctions",
            "appsync:ListGraphqlApis",
            "appsync:ListResolvers",
            "appsync:ListResolversByFunction",
            "appsync:ListTagsForResource",
            "appsync:ListTypes",
            "appsync:StartSchemaCreation",
            "appsync:TagResource",
            "appsync:UntagResource",
            "appsync:UpdateApiKey",
            "appsync:UpdateDataSource",
            "appsync:UpdateFunction",
            "appsync:UpdateGraphqlApi",
            "appsync:UpdateResolver",
            "appsync:UpdateType",
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplate",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack",
            "cloudformation:UpdateStackSet",
            "cloudfront:CreateCloudFrontOriginAccessIdentity",
            "cloudfront:CreateDistribution",
            "cloudfront:CreateInvalidation",
            "cloudfront:DeleteCloudFrontOriginAccessIdentity",
            "cloudfront:DeleteDistribution",
            "cloudfront:GetCloudFrontOriginAccessIdentity",
            "cloudfront:GetCloudFrontOriginAccessIdentityConfig",
            "cloudfront:GetDistribution",
            "cloudfront:GetDistributionConfig",
            "cloudfront:ListCloudFrontOriginAccessIdentities",
            "cloudfront:ListDistributions",
            "cloudfront:ListDistributionsByLambdaFunction",
            "cloudfront:ListDistributionsByWebACLId",
            "cloudfront:ListFieldLevelEncryptionConfigs",
            "cloudfront:ListFieldLevelEncryptionProfiles",
            "cloudfront:ListInvalidations",
            "cloudfront:ListPublicKeys",
            "cloudfront:ListStreamingDistributions",
            "cloudfront:ListTagsForResource",
            "cloudfront:TagResource",
            "cloudfront:UntagResource",
            "cloudfront:UpdateCloudFrontOriginAccessIdentity",
            "cloudfront:UpdateDistribution",
            "codecommit:GitPull",
            "cognito-identity:CreateIdentityPool",
            "cognito-identity:DeleteIdentityPool",
            "cognito-identity:DescribeIdentity",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:SetIdentityPoolRoles",
            "cognito-identity:TagResource",
            "cognito-identity:UpdateIdentityPool",
            "cognito-idp:AdminAddUserToGroup",
            "cognito-idp:AdminConfirmSignUp",
            "cognito-idp:AdminCreateUser",
            "cognito-idp:AdminDeleteUser",
            "cognito-idp:AdminDisableUser",
            "cognito-idp:AdminEnableUser",
            "cognito-idp:AdminGetUser",
            "cognito-idp:AdminListGroupsForUser",
            "cognito-idp:AdminListUserAuthEvents",
            "cognito-idp:AdminRemoveUserFromGroup",
            "cognito-idp:AdminResetUserPassword",
            "cognito-idp:AdminSetUserPassword",
            "cognito-idp:AdminUpdateUserAttributes",
            "cognito-idp:CreateGroup",
            "cognito-idp:CreateUserPool",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:DeleteGroup",
            "cognito-idp:DeleteUser",
            "cognito-idp:DeleteUserPool",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:DescribeIdentityProvider",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:GetUserPoolMfaConfig",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListTagsForResource",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListUsers",
            "cognito-idp:ListUsersInGroup",
            "cognito-idp:SetUserPoolMfaConfig",
            "cognito-idp:TagResource",
            "cognito-idp:UpdateUserPool",
            "cognito-idp:UpdateUserPoolClient",
            "dynamodb:CreateTable",
            "dynamodb:DeleteItem",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListStreams",
            "dynamodb:ListTables",
            "dynamodb:ListTagsOfResource",
            "dynamodb:PutItem",
            "dynamodb:TagResource",
            "dynamodb:UntagResource",
            "dynamodb:UpdateContinuousBackups",
            "dynamodb:UpdateItem",
            "dynamodb:UpdateTable",
            "dynamodb:UpdateTimeToLive",
            "ecr:DescribeRepositories",
            "es:AddTags",
            "es:CreateElasticsearchDomain",
            "es:DeleteElasticsearchDomain",
            "es:DescribeElasticsearchDomain",
            "es:UpdateElasticsearchDomainConfig",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListRuleNamesByTarget",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "geo:*",
            "iam:AttachRolePolicy",
            "iam:CreatePolicy",
            "iam:CreatePolicyVersion",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeletePolicy",
            "iam:DeletePolicyVersion",
            "iam:DeleteRole",
            "iam:DeleteRolePermissionsBoundary",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:GetPolicy",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListRoleTags",
            "iam:PassRole",
            "iam:PutRolePermissionsBoundary",
            "iam:PutRolePolicy",
            "iam:TagRole",
            "iam:UntagRole",
            "iam:UpdateAssumeRolePolicy",
            "iam:UpdateRole",
            "kinesis:AddTagsToStream",
            "kinesis:CreateStream",
            "kinesis:DeleteStream",
            "kinesis:DescribeStream",
            "kinesis:DescribeStreamSummary",
            "kinesis:ListTagsForStream",
            "kinesis:PutRecords",
            "lambda:AddLayerVersionPermission",
            "lambda:AddPermission",
            "lambda:CreateEventSourceMapping",
            "lambda:CreateFunction",
            "lambda:DeleteEventSourceMapping",
            "lambda:DeleteFunction",
            "lambda:DeleteLayerVersion",
            "lambda:EnableReplication",
            "lambda:GetEventSourceMapping",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:GetLayerVersion",
            "lambda:InvokeAsync",
            "lambda:InvokeFunction",
            "lambda:ListEventSourceMappings",
            "lambda:ListLayerVersions",
            "lambda:ListTags",
            "lambda:PublishLayerVersion",
            "lambda:PublishVersion",
            "lambda:RemoveLayerVersionPermission",
            "lambda:RemovePermission",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateEventSourceMapping",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "lex:GetBot",
            "lex:GetBuiltinIntent",
            "lex:GetBuiltinIntents",
            "lex:GetBuiltinSlotTypes",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "mobiletargeting:*",
            "mobiletargeting:GetApp",
            "polly:DescribeVoices",
            "rekognition:DescribeCollection",
            "route53:ChangeResourceRecordSets",
            "route53:ListHostedZonesByName",
            "route53:ListResourceRecordSets",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteBucketWebsite",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetAccelerateConfiguration",
            "s3:GetBucketLocation",
            "s3:GetBucketTagging",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutAccelerateConfiguration",
            "s3:PutBucketAcl",
            "s3:PutBucketCORS",
            "s3:PutBucketNotification",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutBucketWebsite",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "sns:CreateSMSSandboxPhoneNumber",
            "sns:DeleteSMSSandboxPhoneNumber",
            "sns:GetSMSSandboxAccountStatus",
            "sns:ListOriginationNumbers",
            "sns:ListSMSSandboxPhoneNumbers",
            "sns:VerifySMSSandboxPhoneNumber",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:SetQueueAttributes",
            "ssm:DeleteParameter",
            "ssm:DeleteParameters",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:GetParametersByPath",
            "ssm:PutParameter",
            "sts:AssumeRole"
        ]
    },
    "AWSServiceRoleForMonitronPolicy": {
        "permissions": [
            "sso-directory:DescribeUsers",
            "sso-directory:SearchUsers",
            "sso:AssociateProfile",
            "sso:CreateApplicationAssignment",
            "sso:GetManagedApplicationInstance",
            "sso:GetProfile",
            "sso:ListApplicationAssignments",
            "sso:ListDirectoryAssociations",
            "sso:ListProfileAssociations",
            "sso:ListProfiles"
        ]
    },
    "AmazonMonitronFullAccess": {
        "permissions": [
            "ds:DescribeDirectories",
            "ds:DescribeTrusts",
            "iam:CreateServiceLinkedRole",
            "kinesis:DescribeStream",
            "kinesis:ListStreams",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "logs:CreateLogGroup",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "monitron:*",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization"
        ]
    },
    "AWSMarketplaceLicenseManagementServiceRolePolicy": {
        "permissions": [
            "license-manager:AcceptGrant",
            "license-manager:CreateGrant",
            "license-manager:CreateGrantVersion",
            "license-manager:DeleteGrant",
            "license-manager:GetGrant",
            "license-manager:ListDistributedGrants",
            "license-manager:ListReceivedGrants",
            "organizations:DescribeOrganization"
        ]
    },
    "AWSGlueDataBrewServiceRole": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteTags",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "glue:BatchGetCustomEntityTypes",
            "glue:GetConnection",
            "glue:GetCustomEntityType",
            "glue:GetDatabases",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "lakeformation:GetDataAccess",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:GetObject",
            "s3:ListBucket",
            "secretsmanager:GetSecretValue"
        ]
    },
    "ECRReplicationServiceRolePolicy": {
        "permissions": [
            "ecr:CreateRepository",
            "ecr:ReplicateImage"
        ]
    },
    "IVSRecordToS3": {
        "permissions": [
            "s3:PutObject"
        ]
    },
    "AWSSystemsManagerChangeManagementServicePolicy": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "iam:GetGroup",
            "iam:PassRole",
            "ssm:CreateAssociation",
            "ssm:CreateOpsItem",
            "ssm:DeleteAssociation",
            "ssm:GetAutomationExecution",
            "ssm:GetCalendarState",
            "ssm:GetDocument",
            "ssm:GetOpsItem",
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution",
            "ssm:UpdateOpsItem",
            "sso-directory:DescribeUsers",
            "sso-directory:IsMemberInGroup",
            "sso:ListDirectoryAssociations"
        ]
    },
    "AWSAuditManagerServiceRolePolicy": {
        "permissions": [
            "acm:GetAccountConfiguration",
            "acm:ListCertificates",
            "apigateway:GET",
            "autoscaling:DescribeAutoScalingGroups",
            "backup:ListBackupPlans",
            "backup:ListRecoveryPointsByResource",
            "bedrock:GetCustomModel",
            "bedrock:GetFoundationModel",
            "bedrock:GetModelCustomizationJob",
            "bedrock:GetModelInvocationLoggingConfiguration",
            "bedrock:ListCustomModels",
            "bedrock:ListFoundationModels",
            "bedrock:ListGuardrails",
            "bedrock:ListModelCustomizationJobs",
            "cloudfront:GetDistribution",
            "cloudfront:GetDistributionConfig",
            "cloudfront:ListDistributions",
            "cloudtrail:DescribeTrails",
            "cloudtrail:GetTrail",
            "cloudtrail:ListTrails",
            "cloudtrail:LookupEvents",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cognito-idp:DescribeUserPool",
            "config:DescribeConfigRules",
            "config:DescribeDeliveryChannels",
            "config:ListDiscoveredResources",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "dynamodb:DescribeBackup",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTableReplicaAutoScaling",
            "dynamodb:ListBackups",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListTables",
            "ec2:DescribeAddresses",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceCreditSpecifications",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:DescribeLocalGatewayVirtualInterfaces",
            "ec2:DescribeLocalGateways",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetLaunchTemplateData",
            "ecs:DescribeClusters",
            "eks:DescribeAddonVersions",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeServiceUpdates",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeSslPolicies",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListSecurityConfigurations",
            "es:DescribeDomain",
            "es:DescribeDomainConfig",
            "es:DescribeDomains",
            "es:ListDomainNames",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListConnections",
            "events:ListEventBuses",
            "events:ListEventSources",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "firehose:ListDeliveryStreams",
            "fsx:DescribeFileSystems",
            "guardduty:ListDetectors",
            "iam:GenerateCredentialReport",
            "iam:GetAccessKeyLastUsed",
            "iam:GetAccountAuthorizationDetails",
            "iam:GetAccountPasswordPolicy",
            "iam:GetAccountSummary",
            "iam:GetCredentialReport",
            "iam:GetGroupPolicy",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRolePolicy",
            "iam:GetUser",
            "iam:GetUserPolicy",
            "iam:ListAccessKeys",
            "iam:ListAttachedGroupPolicies",
            "iam:ListAttachedRolePolicies",
            "iam:ListAttachedUserPolicies",
            "iam:ListEntitiesForPolicy",
            "iam:ListGroupPolicies",
            "iam:ListGroups",
            "iam:ListGroupsForUser",
            "iam:ListMfaDeviceTags",
            "iam:ListMfaDevices",
            "iam:ListOpenIdConnectProviders",
            "iam:ListPolicies",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListSamlProviders",
            "iam:ListUserPolicies",
            "iam:ListUsers",
            "iam:ListVirtualMFADevices",
            "kafka:ListClusters",
            "kafka:ListKafkaVersions",
            "kinesis:ListStreams",
            "kms:DescribeKey",
            "kms:GetKeyPolicy",
            "kms:GetKeyRotationStatus",
            "kms:ListGrants",
            "kms:ListKeyPolicies",
            "kms:ListKeys",
            "lambda:ListFunctions",
            "license-manager:ListAssociationsForLicenseConfiguration",
            "license-manager:ListLicenseConfigurations",
            "license-manager:ListUsageForLicenseConfiguration",
            "logs:DescribeDestinations",
            "logs:DescribeExportTasks",
            "logs:DescribeLogGroups",
            "logs:DescribeMetricFilters",
            "logs:DescribeResourcePolicies",
            "logs:FilterLogEvents",
            "logs:GetDataProtectionPolicy",
            "organizations:DescribeOrganization",
            "organizations:DescribePolicy",
            "rds:DescribeCertificates",
            "rds:DescribeDBClusterEndpoints",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSecurityGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusters",
            "redshift:DescribeLoggingStatus",
            "route53:GetQueryLoggingConfig",
            "s3:GetBucketAcl",
            "s3:GetBucketLogging",
            "s3:GetBucketOwnershipControls",
            "s3:GetBucketPolicy",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:ListAllMyBuckets",
            "sagemaker:DescribeAlgorithm",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeFlowDefinition",
            "sagemaker:DescribeHumanTaskUi",
            "sagemaker:DescribeLabelingJob",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelCard",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeUserProfile",
            "sagemaker:ListAlgorithms",
            "sagemaker:ListDomains",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListFlowDefinitions",
            "sagemaker:ListHumanTaskUis",
            "sagemaker:ListLabelingJobs",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelCards",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringAlerts",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListUserProfiles",
            "secretsmanager:DescribeSecret",
            "secretsmanager:ListSecrets",
            "securityhub:DescribeStandards",
            "sns:ListTagsForResource",
            "sns:ListTopics",
            "sqs:ListQueues",
            "waf-regional:GetLoggingConfiguration",
            "waf-regional:GetRule",
            "waf-regional:GetWebAcl",
            "waf-regional:ListRuleGroups",
            "waf-regional:ListRules",
            "waf-regional:ListSubscribedRuleGroups",
            "waf-regional:ListWebACLs",
            "waf:GetRule",
            "waf:GetRuleGroup",
            "waf:ListActivatedRulesInRuleGroup",
            "waf:ListRuleGroups",
            "waf:ListRules",
            "waf:ListWebAcls",
            "wafv2:ListWebAcls"
        ]
    },
    "AmazonSageMakerEdgeDeviceFleetPolicy": {
        "permissions": [
            "iam:GetRole",
            "iam:PassRole",
            "iot:CreateRoleAlias",
            "iot:DescribeRoleAlias",
            "iot:ListTagsForResource",
            "iot:TagResource",
            "iot:UpdateRoleAlias",
            "s3:GetBucketLocation",
            "s3:PutObject",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:SendHeartbeat"
        ]
    },
    "AmazonEMRContainersServiceRolePolicy": {
        "permissions": [
            "acm:AddTagsToCertificate",
            "acm:DeleteCertificate",
            "acm:ImportCertificate",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "eks:DescribeCluster",
            "eks:DescribeNodeGroup",
            "eks:ListNodeGroups",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth"
        ]
    },
    "EC2InstanceProfileForImageBuilderECRContainerBuilds": {
        "permissions": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:CompleteLayerUpload",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:UploadLayerPart",
            "imagebuilder:GetComponent",
            "imagebuilder:GetContainerRecipe",
            "kms:Decrypt",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:GetObject"
        ]
    },
    "AWSAuditManagerAdministratorAccess": {
        "permissions": [
            "auditmanager:*",
            "controlcatalog:ListCommonControls",
            "controlcatalog:ListDomains",
            "controlcatalog:ListObjectives",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:GetUser",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:UpdateRoleDescription",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:RegisterDelegatedAdministrator",
            "s3:ListAllMyBuckets",
            "sns:ListTopics",
            "tag:GetResources"
        ]
    },
    "AWSTransferConsoleFullAccess": {
        "permissions": [
            "acm:ListCertificates",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "health:DescribeEventAggregates",
            "iam:GetPolicyVersion",
            "iam:ListPolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "route53:ListHostedZones",
            "s3:ListAllMyBuckets",
            "transfer:*"
        ]
    },
    "AWSTransferFullAccess": {
        "permissions": [
            "ec2:DescribeAddresses",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcEndpoints",
            "iam:PassRole",
            "transfer:*"
        ]
    },
    "AWSIoTFleetHubFederationAccess": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "iot:CancelJob",
            "iot:CancelJobExecution",
            "iot:CreateFleetMetric",
            "iot:CreateJob",
            "iot:DeleteFleetMetric",
            "iot:DescribeCustomMetric",
            "iot:DescribeEndpoint",
            "iot:DescribeFleetMetric",
            "iot:DescribeIndex",
            "iot:DescribeJob",
            "iot:DescribeJobExecution",
            "iot:DescribeJobTemplate",
            "iot:DescribeSecurityProfile",
            "iot:DescribeThingGroup",
            "iot:GetBucketsAggregation",
            "iot:GetCardinality",
            "iot:GetIndexingConfiguration",
            "iot:GetPercentiles",
            "iot:GetStatistics",
            "iot:GetThingShadow",
            "iot:ListActiveViolations",
            "iot:ListCustomMetrics",
            "iot:ListDimensions",
            "iot:ListFleetMetrics",
            "iot:ListJobExecutionsForJob",
            "iot:ListJobExecutionsForThing",
            "iot:ListJobTemplates",
            "iot:ListJobs",
            "iot:ListMetricValues",
            "iot:ListNamedShadowsForThing",
            "iot:ListSecurityProfiles",
            "iot:ListThingGroups",
            "iot:ListThingsInThingGroup",
            "iot:SearchIndex",
            "iot:UpdateFleetMetric",
            "iotfleethub:DescribeApplication",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "sns:Unsubscribe"
        ]
    },
    "AWSIoTWirelessFullAccess": {
        "permissions": [
            "iotwireless:*"
        ]
    },
    "AWSIoTWirelessReadOnlyAccess": {
        "permissions": [
            "iotwireless:Get*",
            "iotwireless:List*"
        ]
    },
    "AWSIoTWirelessFullPublishAccess": {
        "permissions": [
            "iot:DescribeEndpoint",
            "iot:Publish"
        ]
    },
    "AWSIoTWirelessGatewayCertManager": {
        "permissions": [
            "iot:CreateKeysAndCertificate",
            "iot:DescribeCertificate",
            "iot:ListCertificates"
        ]
    },
    "AWSIoTWirelessDataAccess": {
        "permissions": [
            "iotwireless:SendDataToWirelessDevice"
        ]
    },
    "AWSIoTWirelessLogging": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AWSCloudShellFullAccess": {
        "permissions": [
            "cloudshell:*"
        ]
    },
    "AmazonPrometheusFullAccess": {
        "permissions": [
            "aps:*",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "eks:DescribeCluster",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AmazonPrometheusConsoleFullAccess": {
        "permissions": [
            "aps:CreateAlertManagerDefinition",
            "aps:CreateLoggingConfiguration",
            "aps:CreateRuleGroupsNamespace",
            "aps:CreateWorkspace",
            "aps:DeleteAlertManagerDefinition",
            "aps:DeleteLoggingConfiguration",
            "aps:DeleteRuleGroupsNamespace",
            "aps:DeleteWorkspace",
            "aps:DescribeAlertManagerDefinition",
            "aps:DescribeLoggingConfiguration",
            "aps:DescribeRuleGroupsNamespace",
            "aps:DescribeWorkspace",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListWorkspaces",
            "aps:PutAlertManagerDefinition",
            "aps:PutRuleGroupsNamespace",
            "aps:TagResource",
            "aps:UntagResource",
            "aps:UpdateLoggingConfiguration",
            "aps:UpdateWorkspaceAlias",
            "tag:GetTagKeys",
            "tag:GetTagValues"
        ]
    },
    "AmazonPrometheusQueryAccess": {
        "permissions": [
            "aps:GetLabels",
            "aps:GetMetricMetadata",
            "aps:GetSeries",
            "aps:QueryMetrics"
        ]
    },
    "AmazonPrometheusRemoteWriteAccess": {
        "permissions": [
            "aps:RemoteWrite"
        ]
    },
    "AmazonFISServiceRolePolicy": {
        "permissions": [
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "ecs:DescribeClusters",
            "ecs:DescribeTasks",
            "ecs:ListTasks",
            "eks:DescribeCluster",
            "eks:DescribeNodegroup",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:GetRole",
            "iam:GetUser",
            "iam:ListRoles",
            "iam:ListUsers",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "tag:GetResources"
        ]
    },
    "AmazonSageMakerCoreServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
        ]
    },
    "AmazonLexV2BotPolicy": {
        "permissions": [
            "polly:SynthesizeSpeech"
        ]
    },
    "AmazonLexChannelsAccess": {
        "permissions": [
            "lex:ListBots"
        ]
    },
    "AWSDirectConnectServiceRolePolicy": {
        "permissions": [
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecretVersionIds"
        ]
    },
    "AWSOpsWorks_FullAccess": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:PassRole",
            "opsworks:*"
        ]
    },
    "AWSElasticBeanstalkReadOnly": {
        "permissions": [
            "acm:ListCertificates",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLoadBalancers",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribePolicies",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DescribeScheduledpermissions",
            "cloudformation:DescribeStackResource",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "cloudformation:ValidateTemplate",
            "cloudtrail:LookupEvents",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "elasticbeanstalk:Check*",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticbeanstalk:RequestEnvironmentInfo",
            "elasticbeanstalk:RetrieveEnvironmentInfo",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeSSLPolicies",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListServerCertificates",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeDBSnapshots",
            "rds:DescribeOrderableDBInstanceOptions",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sqs:ListQueues"
        ]
    },
    "AdministratorAccess-AWSElasticBeanstalk": {
        "permissions": [
            "acm:Describe*",
            "acm:List*",
            "autoscaling:*",
            "autoscaling:Describe*",
            "cloudformation:CancelUpdateStack",
            "cloudformation:ContinueUpdateRollback",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:Describe*",
            "cloudformation:Estimate*",
            "cloudformation:Get*",
            "cloudformation:GetTemplate",
            "cloudformation:List*",
            "cloudformation:ListStackResources",
            "cloudformation:SignalResource",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack",
            "cloudformation:Validate*",
            "cloudtrail:LookupEvents",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "codebuild:BatchGetBuilds",
            "codebuild:CreateProject",
            "codebuild:DeleteProject",
            "codebuild:StartBuild",
            "codecommit:Get*",
            "codecommit:UploadArchive",
            "dynamodb:CreateTable",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "dynamodb:TagResource",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroup*",
            "ec2:CreateLaunchTemplate*",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate*",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "ec2:DisassociateAddress",
            "ec2:RebootInstances",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroup*",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ecs:CreateCluster",
            "ecs:DeRegisterTaskDefinition",
            "ecs:DeleteCluster",
            "ecs:Describe*",
            "ecs:List*",
            "ecs:RegisterTaskDefinition",
            "ecs:TagResource",
            "elasticbeanstalk:*",
            "elasticloadbalancing:*",
            "elasticloadbalancing:*Rule",
            "elasticloadbalancing:*Tags",
            "elasticloadbalancing:Describe*",
            "elasticloadbalancing:SetRulePriorities",
            "elasticloadbalancing:SetSecurityGroups",
            "iam:AddRoleToInstanceProfile",
            "iam:AttachRolePolicy",
            "iam:CreateInstanceProfile",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListServerCertificates",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:Describe*",
            "logs:PutRetentionPolicy",
            "rds:*DBSubnetGroup",
            "rds:AuthorizeDBSecurityGroupIngress",
            "rds:CreateDBInstance",
            "rds:CreateDBSecurityGroup",
            "rds:DeleteDBInstance",
            "rds:DeleteDBSecurityGroup",
            "rds:Describe*",
            "rds:ModifyDBInstance",
            "rds:RestoreDBInstanceFromDBSnapshot",
            "s3:CreateBucket",
            "s3:Delete*",
            "s3:Get*",
            "s3:GetBucket*",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:Put*",
            "s3:PutBucketPolicy",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Publish",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sqs:*QueueAttributes",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:ListQueues",
            "sqs:SendMessage",
            "sqs:TagQueue"
        ]
    },
    "AmazonWorkMailMessageFlowReadOnlyAccess": {
        "permissions": [
            "workmailmessageflow:Get*"
        ]
    },
    "AmazonCodeGuruProfilerAgentAccess": {
        "permissions": [
            "codeguru-profiler:ConfigureAgent",
            "codeguru-profiler:CreateProfilingGroup",
            "codeguru-profiler:PostAgentProfile"
        ]
    },
    "AmazonWorkMailMessageFlowFullAccess": {
        "permissions": [
            "workmailmessageflow:*"
        ]
    },
    "AmazonEventBridgeApiDestinationsServiceRolePolicy": {
        "permissions": [
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "secretsmanager:UpdateSecret"
        ]
    },
    "AmazonHealthLakeFullAccess": {
        "permissions": [
            "healthlake:*",
            "iam:ListRoles",
            "iam:PassRole",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AmazonHealthLakeReadOnlyAccess": {
        "permissions": [
            "healthlake:DescribeFHIRDatastore",
            "healthlake:DescribeFHIRExportJob",
            "healthlake:DescribeFHIRImportJob",
            "healthlake:GetCapabilities",
            "healthlake:ListFHIRDatastores",
            "healthlake:ReadResource",
            "healthlake:SearchWithGet",
            "healthlake:SearchWithPost"
        ]
    },
    "AWSProtonDeveloperAccess": {
        "permissions": [
            "codecommit:ListRepositories",
            "codeconnections:PassConnection",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineExecution",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListPipelines",
            "codestar-connections:ListConnections",
            "codestar-connections:PassConnection",
            "codestar-connections:UseConnection",
            "proton:CancelServiceInstanceDeployment",
            "proton:CancelServicePipelineDeployment",
            "proton:CreateService",
            "proton:DeleteService",
            "proton:GetAccountRoles",
            "proton:GetAccountSettings",
            "proton:GetEnvironment",
            "proton:GetEnvironmentAccountConnection",
            "proton:GetEnvironmentTemplate",
            "proton:GetEnvironmentTemplateMajorVersion",
            "proton:GetEnvironmentTemplateMinorVersion",
            "proton:GetEnvironmentTemplateVersion",
            "proton:GetRepository",
            "proton:GetRepositorySyncStatus",
            "proton:GetResourcesSummary",
            "proton:GetService",
            "proton:GetServiceInstance",
            "proton:GetServiceTemplate",
            "proton:GetServiceTemplateMajorVersion",
            "proton:GetServiceTemplateMinorVersion",
            "proton:GetServiceTemplateVersion",
            "proton:GetTemplateSyncConfig",
            "proton:GetTemplateSyncStatus",
            "proton:ListEnvironmentAccountConnections",
            "proton:ListEnvironmentOutputs",
            "proton:ListEnvironmentProvisionedResources",
            "proton:ListEnvironmentTemplateMajorVersions",
            "proton:ListEnvironmentTemplateMinorVersions",
            "proton:ListEnvironmentTemplateVersions",
            "proton:ListEnvironmentTemplates",
            "proton:ListEnvironments",
            "proton:ListRepositories",
            "proton:ListRepositorySyncDefinitions",
            "proton:ListServiceInstanceOutputs",
            "proton:ListServiceInstanceProvisionedResources",
            "proton:ListServiceInstances",
            "proton:ListServicePipelineOutputs",
            "proton:ListServicePipelineProvisionedResources",
            "proton:ListServiceTemplateMajorVersions",
            "proton:ListServiceTemplateMinorVersions",
            "proton:ListServiceTemplateVersions",
            "proton:ListServiceTemplates",
            "proton:ListServices",
            "proton:ListTagsForResource",
            "proton:UpdateService",
            "proton:UpdateServiceInstance",
            "proton:UpdateServicePipeline",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "AWSStorageGatewayServiceRolePolicy": {
        "permissions": [
            "fsx:ListTagsForResource"
        ]
    },
    "AWSProtonFullAccess": {
        "permissions": [
            "codeconnections:PassConnection",
            "codestar-connections:ListConnections",
            "codestar-connections:PassConnection",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:ListAliases",
            "proton:*"
        ]
    },
    "AWSProtonReadOnlyAccess": {
        "permissions": [
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineExecution",
            "codepipeline:GetPipelineState",
            "codepipeline:ListPipelineExecutions",
            "codepipeline:ListPipelines",
            "proton:GetAccountRoles",
            "proton:GetAccountSettings",
            "proton:GetEnvironment",
            "proton:GetEnvironmentAccountConnection",
            "proton:GetEnvironmentTemplate",
            "proton:GetEnvironmentTemplateMajorVersion",
            "proton:GetEnvironmentTemplateMinorVersion",
            "proton:GetEnvironmentTemplateVersion",
            "proton:GetRepository",
            "proton:GetRepositorySyncStatus",
            "proton:GetResourcesSummary",
            "proton:GetService",
            "proton:GetServiceInstance",
            "proton:GetServiceTemplate",
            "proton:GetServiceTemplateMajorVersion",
            "proton:GetServiceTemplateMinorVersion",
            "proton:GetServiceTemplateVersion",
            "proton:GetTemplateSyncConfig",
            "proton:GetTemplateSyncStatus",
            "proton:ListEnvironmentAccountConnections",
            "proton:ListEnvironmentOutputs",
            "proton:ListEnvironmentProvisionedResources",
            "proton:ListEnvironmentTemplateMajorVersions",
            "proton:ListEnvironmentTemplateMinorVersions",
            "proton:ListEnvironmentTemplateVersions",
            "proton:ListEnvironmentTemplates",
            "proton:ListEnvironments",
            "proton:ListRepositories",
            "proton:ListRepositorySyncDefinitions",
            "proton:ListServiceInstanceOutputs",
            "proton:ListServiceInstanceProvisionedResources",
            "proton:ListServiceInstances",
            "proton:ListServicePipelineOutputs",
            "proton:ListServicePipelineProvisionedResources",
            "proton:ListServiceTemplateMajorVersions",
            "proton:ListServiceTemplateMinorVersions",
            "proton:ListServiceTemplateVersions",
            "proton:ListServiceTemplates",
            "proton:ListServices",
            "proton:ListTagsForResource"
        ]
    },
    "AWSGrafanaConsoleReadOnlyAccess": {
        "permissions": [
            "grafana:Describe*",
            "grafana:List*"
        ]
    },
    "AWSGrafanaWorkspacePermissionManagement": {
        "permissions": [
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:ListPermissions",
            "grafana:ListWorkspaces",
            "grafana:UpdatePermissions",
            "sso-directory:DescribeGroup",
            "sso-directory:DescribeUser",
            "sso:AssociateProfile",
            "sso:DescribeRegisteredRegions",
            "sso:DisassociateProfile",
            "sso:GetManagedApplicationInstance",
            "sso:GetProfile",
            "sso:GetSharedSsoConfiguration",
            "sso:ListDirectoryAssociations",
            "sso:ListProfileAssociations",
            "sso:ListProfiles"
        ]
    },
    "AWSGrafanaAccountAdministrator": {
        "permissions": [
            "grafana:*",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole"
        ]
    },
    "AWSElasticBeanstalkManagedUpdatesCustomerRolePolicy": {
        "permissions": [
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DeletePolicy",
            "autoscaling:DeleteScheduledAction",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeLoadBalancers",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:DescribeScheduledpermissions",
            "autoscaling:DetachInstances",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:PutScalingPolicy",
            "autoscaling:PutScheduledUpdateGroupAction",
            "autoscaling:ResumeProcesses",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudformation:*",
            "cloudwatch:PutMetricAlarm",
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateSecurityGroup",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:ReleaseAddress",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ecs:CreateCluster",
            "ecs:DeleteCluster",
            "ecs:DescribeClusters",
            "ecs:RegisterTaskDefinition",
            "ecs:TagResource",
            "elasticbeanstalk:*",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:DescribeLogGroups",
            "logs:PutRetentionPolicy",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstances",
            "rds:DescribeOrderableDBInstanceOptions",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutObjectVersionAcl",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sns:SetTopicAttributes",
            "sns:Subscribe",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl"
        ]
    },
    "BatchServiceRolePolicy": {
        "permissions": [
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLaunchConfigurations",
            "autoscaling:DescribeScalingActivities",
            "autoscaling:PutNotificationConfiguration",
            "autoscaling:SetDesiredCapacity",
            "autoscaling:SuspendProcesses",
            "autoscaling:TerminateInstanceInAutoScalingGroup",
            "autoscaling:UpdateAutoScalingGroup",
            "ec2:CancelSpotFleetRequests",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeSpotFleetRequestHistory",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSpotPriceHistory",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:ModifySpotFleetRequest",
            "ec2:RequestSpotFleet",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ecs:CreateCluster",
            "ecs:DeleteCluster",
            "ecs:DeregisterContainerInstance",
            "ecs:DeregisterTaskDefinition",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTasks",
            "ecs:ListAccountSettings",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListTaskDefinitionFamilies",
            "ecs:ListTaskDefinitions",
            "ecs:ListTasks",
            "ecs:RegisterTaskDefinition",
            "ecs:RunTask",
            "ecs:StartTask",
            "ecs:StopTask",
            "ecs:TagResource",
            "eks:DescribeCluster",
            "iam:CreateServiceLinkedRole",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:PutLogEvents"
        ]
    },
    "AmazonEMRServicePolicy_v2": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateNetworkInterface",
            "ec2:CreatePlacementGroup",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteNetworkInterface",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteTags",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyInstanceAttribute",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:PassRole",
            "resource-groups:ListGroupResources"
        ]
    },
    "AmazonEMRReadOnlyAccessPolicy_v2": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeEditor",
            "elasticmapreduce:DescribeJobFlows",
            "elasticmapreduce:DescribeReleaseLabel",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:GetAutoTerminationPolicy",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:ListBootstrappermissions",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListEditors",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListSupportedInstanceTypes",
            "elasticmapreduce:ViewEventsFromAllClustersInConsole"
        ]
    },
    "AmazonEMRFullAccessPolicy_v2": {
        "permissions": [
            "cloudwatch:GetMetricStatistics",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeNatGateways",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "elasticmapreduce:AddInstanceFleet",
            "elasticmapreduce:AddInstanceGroups",
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:AddTags",
            "elasticmapreduce:CancelSteps",
            "elasticmapreduce:CreateEditor",
            "elasticmapreduce:CreateSecurityConfiguration",
            "elasticmapreduce:DeleteEditor",
            "elasticmapreduce:DeleteSecurityConfiguration",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeEditor",
            "elasticmapreduce:DescribeJobFlows",
            "elasticmapreduce:DescribeReleaseLabel",
            "elasticmapreduce:DescribeSecurityConfiguration",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:GetAutoTerminationPolicy",
            "elasticmapreduce:GetBlockPublicAccessConfiguration",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:ListBootstrappermissions",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListEditors",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListSecurityConfigurations",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:ListSupportedInstanceTypes",
            "elasticmapreduce:ModifyCluster",
            "elasticmapreduce:ModifyInstanceFleet",
            "elasticmapreduce:ModifyInstanceGroups",
            "elasticmapreduce:OpenEditorInConsole",
            "elasticmapreduce:PutAutoScalingPolicy",
            "elasticmapreduce:PutBlockPublicAccessConfiguration",
            "elasticmapreduce:PutManagedScalingPolicy",
            "elasticmapreduce:RemoveAutoScalingPolicy",
            "elasticmapreduce:RemoveManagedScalingPolicy",
            "elasticmapreduce:RemoveTags",
            "elasticmapreduce:RunJobFlow",
            "elasticmapreduce:SetTerminationProtection",
            "elasticmapreduce:StartEditor",
            "elasticmapreduce:StopEditor",
            "elasticmapreduce:TerminateJobFlows",
            "elasticmapreduce:ViewEventsFromAllClustersInConsole",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "iam:PassRole",
            "s3:ListAllMyBuckets"
        ]
    },
    "AWSSecurityHubOrganizationsAccess": {
        "permissions": [
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots",
            "organizations:RegisterDelegatedAdministrator"
        ]
    },
    "AWSApplicationMigrationServiceRolePolicy": {
        "permissions": [
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteSnapshot",
            "ec2:DeleteVolume",
            "ec2:DeregisterImage",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyLaunchTemplate",
            "ec2:RegisterImage",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:PassRole",
            "kms:ListRetirableGrants",
            "mgh:AssociateCreatedArtifact",
            "mgh:CreateProgressUpdateStream",
            "mgh:DisassociateCreatedArtifact",
            "mgh:GetHomeRegion",
            "mgh:ImportMigrationTask",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes",
            "mgn:ListTagsForResource",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AWSApplicationMigrationConversionServerPolicy": {
        "permissions": [
            "mgn:GetChannelCommandsForMgn",
            "mgn:SendChannelCommandResultForMgn",
            "mgn:SendClientLogsForMgn",
            "mgn:SendClientMetricsForMgn"
        ]
    },
    "AWSApplicationMigrationFullAccess": {
        "permissions": [
            "drs:DescribeSourceServers",
            "drs:DisconnectSourceServer",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:ListInstanceProfiles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "license-manager:ListLicenseConfigurations",
            "mgn:*",
            "servicequotas:GetServiceQuota",
            "ssm:DescribeDocument",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetCommandInvocation",
            "ssm:GetDocument",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:ListCommandInvocations",
            "ssm:ListCommands",
            "ssm:PutParameter",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWSApplicationMigrationAgentPolicy": {
        "permissions": [
            "mgn:GetAgentCommandForMgn",
            "mgn:GetAgentConfirmedResumeInfoForMgn",
            "mgn:GetAgentInstallationAssetsForMgn",
            "mgn:GetAgentReplicationInfoForMgn",
            "mgn:GetAgentRuntimeConfigurationForMgn",
            "mgn:RegisterAgentForMgn",
            "mgn:SendAgentLogsForMgn",
            "mgn:SendAgentMetricsForMgn",
            "mgn:SendClientLogsForMgn",
            "mgn:SendClientMetricsForMgn",
            "mgn:TagResource",
            "mgn:UpdateAgentBacklogForMgn",
            "mgn:UpdateAgentConversionInfoForMgn",
            "mgn:UpdateAgentReplicationInfoForMgn",
            "mgn:UpdateAgentSourcePropertiesForMgn"
        ]
    },
    "AWSApplicationMigrationEC2Access": {
        "permissions": [
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteSnapshot",
            "ec2:DeleteVolume",
            "ec2:DescribeImages",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyLaunchTemplate",
            "ec2:ModifyVolume",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:PassRole"
        ]
    },
    "AWSApplicationMigrationMGHAccess": {
        "permissions": [
            "mgh:AssociateCreatedArtifact",
            "mgh:CreateProgressUpdateStream",
            "mgh:DisassociateCreatedArtifact",
            "mgh:GetHomeRegion",
            "mgh:ImportMigrationTask",
            "mgh:NotifyMigrationTaskState",
            "mgh:PutResourceAttributes"
        ]
    },
    "AWSApplicationMigrationReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "mgn:DescribeJobLogItems",
            "mgn:DescribeJobs",
            "mgn:DescribeLaunchConfigurationTemplates",
            "mgn:DescribeReplicationConfigurationTemplates",
            "mgn:DescribeSourceServers",
            "mgn:DescribeVcenterClients",
            "mgn:GetLaunchConfiguration",
            "mgn:GetReplicationConfiguration",
            "mgn:ListApplications",
            "mgn:ListExportErrors",
            "mgn:ListExports",
            "mgn:ListImportErrors",
            "mgn:ListImports",
            "mgn:ListSourceServerpermissions",
            "mgn:ListTemplatepermissions",
            "mgn:ListWaves",
            "servicequotas:GetServiceQuota"
        ]
    },
    "AWSApplicationMigrationReplicationServerPolicy": {
        "permissions": [
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "mgn:BatchCreateVolumeSnapshotGroupForMgn",
            "mgn:BatchDeleteSnapshotRequestForMgn",
            "mgn:DescribeReplicationServerAssociationsForMgn",
            "mgn:DescribeSnapshotRequestsForMgn",
            "mgn:GetAgentSnapshotCreditsForMgn",
            "mgn:GetChannelCommandsForMgn",
            "mgn:NotifyAgentAuthenticationForMgn",
            "mgn:NotifyAgentConnectedForMgn",
            "mgn:NotifyAgentDisconnectedForMgn",
            "mgn:NotifyAgentReplicationProgressForMgn",
            "mgn:SendChannelCommandResultForMgn",
            "mgn:SendClientLogsForMgn",
            "mgn:SendClientMetricsForMgn",
            "mgn:UpdateAgentReplicationProcessStateForMgn"
        ]
    },
    "AmazonLookoutEquipmentFullAccess": {
        "permissions": [
            "iam:PassRole",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:ListAliases",
            "lookoutequipment:*"
        ]
    },
    "AWSCompromisedKeyQuarantineV2": {
        "permissions": [
            "amplify:CreateBackendEnvironment",
            "amplify:CreateDeployment",
            "bedrock:CreateFoundationModelAgreement",
            "bedrock:CreateModelInvocationJob",
            "bedrock:InvokeModel",
            "bedrock:InvokeModelWithResponseStream",
            "bedrock:PutFoundationModelEntitlement",
            "cloudtrail:LookupEvents",
            "codebuild:CreateProject",
            "ec2:AcceptReservedInstancesExchangeQuote",
            "ec2:CreateReservedInstancesListing",
            "ec2:PurchaseReservedInstancesOffering",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ecr:GetAuthorizationToken",
            "ecs:CreateCluster",
            "ecs:CreateService",
            "ecs:RegisterTaskDefinition",
            "glue:CreateJob",
            "iam:AddUserToGroup",
            "iam:AttachGroupPolicy",
            "iam:AttachRolePolicy",
            "iam:AttachUserPolicy",
            "iam:ChangePassword",
            "iam:CreateAccessKey",
            "iam:CreateInstanceProfile",
            "iam:CreateLoginProfile",
            "iam:CreatePolicyVersion",
            "iam:CreateRole",
            "iam:CreateUser",
            "iam:DeleteAccessKey",
            "iam:DeleteRole",
            "iam:DetachUserPolicy",
            "iam:ListUsers",
            "iam:PassRole",
            "iam:PutGroupPolicy",
            "iam:PutRolePolicy",
            "iam:PutUserPermissionsBoundary",
            "iam:PutUserPolicy",
            "iam:SetDefaultPolicyVersion",
            "iam:UpdateAccessKey",
            "iam:UpdateAccountPasswordPolicy",
            "iam:UpdateAssumeRolePolicy",
            "iam:UpdateLoginProfile",
            "iam:UpdateUser",
            "lambda:AddLayerVersionPermission",
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:GetEventSourceMapping",
            "lambda:GetPolicy",
            "lambda:ListTags",
            "lambda:PutProvisionedConcurrencyConfig",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateFunctionCode",
            "lightsail:Create*",
            "lightsail:Delete*",
            "lightsail:DownloadDefaultKeyPair",
            "lightsail:GetInstanceAccessDetails",
            "lightsail:Start*",
            "lightsail:Update*",
            "mediapackagev2:CreateChannel",
            "organizations:CreateAccount",
            "organizations:CreateOrganization",
            "organizations:InviteAccountToOrganization",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ObjectOwnerOverrideToBucketOwner",
            "s3:PutAccountPublicAccessBlock",
            "s3:PutBucketAcl",
            "s3:PutBucketCors",
            "s3:PutBucketOwnershipControls",
            "s3:PutBucketPolicy",
            "s3:PutLifecycleConfiguration",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateProcessingJob",
            "savingsplans:CreateSavingsPlan",
            "ses:GetSendQuota",
            "ses:ListIdentities",
            "sns:GetSMSAttributes",
            "sts:GetFederationToken",
            "sts:GetSessionToken"
        ]
    },
    "AWSSystemsManagerOpsDataSyncServiceRolePolicy": {
        "permissions": [
            "securityhub:BatchUpdateFindings",
            "securityhub:GetFindings",
            "ssm:AddTagsToResource",
            "ssm:CreateOpsItem",
            "ssm:GetOpsItem",
            "ssm:GetServiceSetting",
            "ssm:UpdateOpsItem",
            "ssm:UpdateServiceSetting"
        ]
    },
    "AWSCloudWatchAlarms_permissionsSMIncidentsServiceRolePolicy": {
        "permissions": [
            "ssm-incidents:StartIncident"
        ]
    },
    "AmazonNimbleStudio-LaunchProfileWorker": {
        "permissions": [
            "ds:DescribeDirectories",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "fsx:DescribeFileSystems"
        ]
    },
    "AmazonNimbleStudio-StudioAdmin": {
        "permissions": [
            "ds:CreateComputer",
            "ds:DescribeDirectories",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "fsx:DescribeFileSystems",
            "identitystore:DescribeUser",
            "identitystore:ListUsers",
            "nimble:AcceptEulas",
            "nimble:CreateStreamingSession",
            "nimble:CreateStreamingSessionStream",
            "nimble:DeleteLaunchProfileMember",
            "nimble:DeleteStreamingSession",
            "nimble:GetEula",
            "nimble:GetFeatureMap",
            "nimble:GetLaunchProfile",
            "nimble:GetLaunchProfileDetails",
            "nimble:GetLaunchProfileInitialization",
            "nimble:GetLaunchProfileMember",
            "nimble:GetStreamingImage",
            "nimble:GetStreamingSession",
            "nimble:GetStreamingSessionBackup",
            "nimble:GetStreamingSessionStream",
            "nimble:GetStudioMember",
            "nimble:ListEulaAcceptances",
            "nimble:ListEulas",
            "nimble:ListLaunchProfileMembers",
            "nimble:ListLaunchProfiles",
            "nimble:ListStreamingImages",
            "nimble:ListStreamingSessionBackups",
            "nimble:ListStreamingSessions",
            "nimble:ListStudioMembers",
            "nimble:PutLaunchProfileMembers",
            "nimble:PutStudioLogEvents",
            "nimble:StartStreamingSession",
            "nimble:StopStreamingSession",
            "nimble:UpdateLaunchProfileMember",
            "sso-directory:DescribeUsers",
            "sso-directory:SearchUsers"
        ]
    },
    "AmazonNimbleStudio-StudioUser": {
        "permissions": [
            "ds:CreateComputer",
            "ds:DescribeDirectories",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "fsx:DescribeFileSystems",
            "identitystore:DescribeUser",
            "identitystore:ListUsers",
            "nimble:CreateStreamingSessionStream",
            "nimble:DeleteStreamingSession",
            "nimble:GetFeatureMap",
            "nimble:GetStreamingSession",
            "nimble:GetStreamingSessionBackup",
            "nimble:GetStreamingSessionStream",
            "nimble:GetStudioMember",
            "nimble:ListEulaAcceptances",
            "nimble:ListEulas",
            "nimble:ListLaunchProfiles",
            "nimble:ListStreamingSessionBackups",
            "nimble:ListStreamingSessions",
            "nimble:ListStudioMembers",
            "nimble:PutStudioLogEvents",
            "nimble:StartStreamingSession",
            "nimble:StopStreamingSession",
            "sso-directory:DescribeUsers",
            "sso-directory:SearchUsers"
        ]
    },
    "AmazonLookoutEquipmentReadOnlyAccess": {
        "permissions": [
            "lookoutequipment:Describe*",
            "lookoutequipment:List*"
        ]
    },
    "AmazonLookoutMetricsReadOnlyAccess": {
        "permissions": [
            "lookoutmetrics:DescribeAlert",
            "lookoutmetrics:DescribeAnomalyDetectionExecutions",
            "lookoutmetrics:DescribeAnomalyDetector",
            "lookoutmetrics:DescribeMetricSet",
            "lookoutmetrics:GetAnomalyGroup",
            "lookoutmetrics:GetDataQualityMetrics",
            "lookoutmetrics:GetFeedback",
            "lookoutmetrics:GetSampleData",
            "lookoutmetrics:ListAlerts",
            "lookoutmetrics:ListAnomalyDetectors",
            "lookoutmetrics:ListAnomalyGroupRelatedMetrics",
            "lookoutmetrics:ListAnomalyGroupSummaries",
            "lookoutmetrics:ListAnomalyGroupTimeSeries",
            "lookoutmetrics:ListMetricSets",
            "lookoutmetrics:ListTagsForResource"
        ]
    },
    "AmazonLookoutMetricsFullAccess": {
        "permissions": [
            "iam:PassRole",
            "lookoutmetrics:*"
        ]
    },
    "AWSIncidentManagerServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ssm-contacts:StartEngagement",
            "ssm-incidents:CreateTimelineEvent",
            "ssm-incidents:ListIncidentRecords",
            "ssm:AssociateOpsItemRelatedItem",
            "ssm:CreateOpsItem"
        ]
    },
    "AWSIncidentManagerResolverAccess": {
        "permissions": [
            "ssm-incidents:CreateTimelineEvent",
            "ssm-incidents:DeleteTimelineEvent",
            "ssm-incidents:GetIncidentRecord",
            "ssm-incidents:GetResponsePlan",
            "ssm-incidents:GetTimelineEvent",
            "ssm-incidents:ListIncidentRecords",
            "ssm-incidents:ListRelatedItems",
            "ssm-incidents:ListResponsePlans",
            "ssm-incidents:ListTimelineEvents",
            "ssm-incidents:StartIncident",
            "ssm-incidents:UpdateIncidentRecord",
            "ssm-incidents:UpdateRelatedItems",
            "ssm-incidents:UpdateTimelineEvent"
        ]
    },
    "AmazonLookoutVisionReadOnlyAccess": {
        "permissions": [
            "lookoutvision:DescribeDataset",
            "lookoutvision:DescribeModel",
            "lookoutvision:DescribeModelPackagingJob",
            "lookoutvision:DescribeProject",
            "lookoutvision:ListDatasetEntries",
            "lookoutvision:ListModelPackagingJobs",
            "lookoutvision:ListModels",
            "lookoutvision:ListProjects",
            "lookoutvision:ListTagsForResource"
        ]
    },
    "AmazonLookoutVisionFullAccess": {
        "permissions": [
            "lookoutvision:*"
        ]
    },
    "AmazonLookoutVisionConsoleReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "lookoutvision:DescribeDataset",
            "lookoutvision:DescribeModel",
            "lookoutvision:DescribeModelPackagingJob",
            "lookoutvision:DescribeProject",
            "lookoutvision:DescribeTrialDetection",
            "lookoutvision:ListDatasetEntries",
            "lookoutvision:ListModelPackagingJobs",
            "lookoutvision:ListModels",
            "lookoutvision:ListProjects",
            "lookoutvision:ListTagsForResource",
            "lookoutvision:ListTrialDetections",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets"
        ]
    },
    "AmazonLookoutVisionConsoleFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "groundtruthlabeling:AssociatePatchToManifestJob",
            "groundtruthlabeling:DescribeConsoleJob",
            "groundtruthlabeling:RunGenerateManifestByCrawlingJob",
            "kms:ListAliases",
            "lookoutvision:*",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetBucketVersioning",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultipartUploadParts",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "tag:GetTagKeys",
            "tag:GetTagValues"
        ]
    },
    "AppRunnerServiceRolePolicy": {
        "permissions": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy"
        ]
    },
    "AWSAppRunnerServicePolicyForECRAccess": {
        "permissions": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:DescribeImages",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer"
        ]
    },
    "AWSServiceCatalogAppRegistryServiceRolePolicy": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:GetTags",
            "resource-groups:Tag",
            "resource-groups:Untag",
            "resource-groups:UpdateGroup"
        ]
    },
    "AWSDeviceFarmTestGridServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute"
        ]
    },
    "AWSKeyManagementServiceMultiRegionKeysServiceRolePolicy": {
        "permissions": [
            "kms:SynchronizeMultiRegionKey"
        ]
    },
    "AWSSSMOpsInsightsServiceRolePolicy": {
        "permissions": [
            "ssm:AddTagsToResource",
            "ssm:CreateOpsItem",
            "ssm:GetOpsItem",
            "ssm:UpdateOpsItem"
        ]
    },
    "AWSBugBustServiceRolePolicy": {
        "permissions": [
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:ListRecommendations",
            "codeguru-reviewer:UntagResource"
        ]
    },
    "AWSBugBustFullAccess": {
        "permissions": [
            "bugbust:*",
            "codeguru-profiler:DescribeProfilingGroup",
            "codeguru-profiler:ListProfilingGroups",
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:ListCodeReviews",
            "codeguru-reviewer:ListRecommendations",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AWSBugBustPlayerAccess": {
        "permissions": [
            "bugbust:GetEvent",
            "bugbust:GetJoinEventStatus",
            "bugbust:JoinEvent",
            "bugbust:ListBugs",
            "bugbust:ListEventParticipants",
            "bugbust:ListEventScores",
            "bugbust:ListEvents",
            "bugbust:ListProfilingGroups",
            "bugbust:ListPullRequests",
            "bugbust:UpdateWorkItem",
            "codeguru-profiler:DescribeProfilingGroup",
            "codeguru-reviewer:DescribeCodeReview",
            "codeguru-reviewer:ListRecommendations"
        ]
    },
    "Route53RecoveryReadinessServiceRolePolicy": {
        "permissions": [
            "apigateway:GET",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "autoscaling:DescribeAccountLimits",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribeAutoScalingInstances",
            "autoscaling:DescribeLifecycleHooks",
            "autoscaling:DescribeLoadBalancerTargetGroups",
            "autoscaling:DescribeLoadBalancers",
            "autoscaling:DescribeNotificationConfigurations",
            "autoscaling:DescribePolicies",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeReservedCapacity",
            "dynamodb:DescribeReservedCapacityOfferings",
            "dynamodb:DescribeTable",
            "dynamodb:DescribeTimeToLive",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListTables",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "iam:CreateServiceLinkedRole",
            "kafka:DescribeCluster",
            "kafka:DescribeConfigurationRevision",
            "lambda:GetFunctionConcurrency",
            "lambda:GetFunctionConfiguration",
            "lambda:GetProvisionedConcurrencyConfig",
            "lambda:ListAliases",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "lambda:ListProvisionedConcurrencyConfigs",
            "lambda:ListVersionsByFunction",
            "rds:DescribeAccountAttributes",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "route53:GetHealthCheck",
            "route53:GetHealthCheckStatus",
            "route53:GetHostedZone",
            "route53:ListResourceRecordSets",
            "servicequotas:ListAWSDefaultServiceQuotas",
            "servicequotas:ListRequestedServiceQuotaChangeHistory",
            "servicequotas:ListServiceQuotas",
            "servicequotas:ListServices",
            "servicequotas:RequestServiceQuotaIncrease",
            "sns:GetEndpointAttributes",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl"
        ]
    },
    "AmazonSageMakerPipelinesIntegrations": {
        "permissions": [
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:CancelSteps",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeStep",
            "elasticmapreduce:ListSteps",
            "elasticmapreduce:RunJobFlow",
            "elasticmapreduce:TerminateJobFlows",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "iam:PassRole",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:UpdateFunctionCode",
            "sqs:CreateQueue",
            "sqs:SendMessage"
        ]
    },
    "AmazonChimeTranscriptionServiceLinkedRolePolicy": {
        "permissions": [
            "transcribe:StartMedicalStreamTranscription",
            "transcribe:StartStreamTranscription"
        ]
    },
    "AWSLicenseManagerConsumptionPolicy": {
        "permissions": [
            "license-manager:CheckInLicense",
            "license-manager:CheckoutLicense",
            "license-manager:ExtendLicenseConsumption",
            "license-manager:GetLicense"
        ]
    },
    "MemoryDBServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "memorydb:ReplicateMultiRegionClusterData"
        ]
    },
    "AWSApplicationAutoscalingElastiCacheRGPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "elasticache:DecreaseReplicaCount",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameters",
            "elasticache:DescribeReplicationGroups",
            "elasticache:IncreaseReplicaCount",
            "elasticache:ModifyReplicationGroupShardConfiguration"
        ]
    },
    "AmazonS3ObjectLambdaExecutionRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3-object-lambda:WriteGetObjectResponse"
        ]
    },
    "AmazonRoute53RecoveryReadinessFullAccess": {
        "permissions": [
            "route53-recovery-readiness:*"
        ]
    },
    "AmazonRoute53RecoveryClusterReadOnlyAccess": {
        "permissions": [
            "route53-recovery-cluster:GetRoutingControlState",
            "route53-recovery-cluster:ListRoutingControls"
        ]
    },
    "AmazonRoute53RecoveryControlConfigFullAccess": {
        "permissions": [
            "route53-recovery-control-config:*"
        ]
    },
    "AmazonRoute53RecoveryControlConfigReadOnlyAccess": {
        "permissions": [
            "route53-recovery-control-config:DescribeCluster",
            "route53-recovery-control-config:DescribeControlPanel",
            "route53-recovery-control-config:DescribeRoutingControl",
            "route53-recovery-control-config:DescribeRoutingControlByName",
            "route53-recovery-control-config:DescribeSafetyRule",
            "route53-recovery-control-config:GetResourcePolicy",
            "route53-recovery-control-config:ListAssociatedRoute53HealthChecks",
            "route53-recovery-control-config:ListClusters",
            "route53-recovery-control-config:ListControlPanels",
            "route53-recovery-control-config:ListRoutingControls",
            "route53-recovery-control-config:ListSafetyRules",
            "route53-recovery-control-config:ListTagsForResource"
        ]
    },
    "AmazonRoute53RecoveryReadinessReadOnlyAccess": {
        "permissions": [
            "route53-recovery-readiness:GetArchitectureRecommendations",
            "route53-recovery-readiness:GetCell",
            "route53-recovery-readiness:GetCellReadinessSummary",
            "route53-recovery-readiness:GetReadinessCheck",
            "route53-recovery-readiness:GetReadinessCheckResourceStatus",
            "route53-recovery-readiness:GetReadinessCheckStatus",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetRecoveryGroupReadinessSummary",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:ListCells",
            "route53-recovery-readiness:ListCrossAccountAuthorizations",
            "route53-recovery-readiness:ListReadinessChecks",
            "route53-recovery-readiness:ListRecoveryGroups",
            "route53-recovery-readiness:ListResourceSets",
            "route53-recovery-readiness:ListRules",
            "route53-recovery-readiness:ListTagsForResources"
        ]
    },
    "AmazonRoute53RecoveryClusterFullAccess": {
        "permissions": [
            "route53-recovery-cluster:*"
        ]
    },
    "AWSServiceRolePolicyForBackupReports": {
        "permissions": [
            "backup:DescribeFramework",
            "backup:ListBackupJobs",
            "backup:ListCopyJobs",
            "backup:ListRestoreJobs",
            "config:BatchGetResourceConfig",
            "config:DeleteConfigRule",
            "config:DeleteConfigurationAggregator",
            "config:DescribeConfigRuleEvaluationStatus",
            "config:DescribeConfigRules",
            "config:DescribeConfigurationAggregators",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "config:GetComplianceDetailsByConfigRule",
            "config:PutConfigRule",
            "config:PutConfigurationAggregator",
            "config:SelectAggregateResourceConfig",
            "config:SelectResourceConfig",
            "s3:GetBucketLocation"
        ]
    },
    "AWSBackupAuditAccess": {
        "permissions": [
            "backup:CreateFramework",
            "backup:CreateReportPlan",
            "backup:DeleteFramework",
            "backup:DeleteReportPlan",
            "backup:DescribeFramework",
            "backup:DescribeReportJob",
            "backup:DescribeReportPlan",
            "backup:ListBackupPlans",
            "backup:ListBackupVaults",
            "backup:ListFrameworks",
            "backup:ListReportJobs",
            "backup:ListReportPlans",
            "backup:StartReportJob",
            "backup:UpdateFramework",
            "backup:UpdateReportPlan",
            "config:DescribeComplianceByConfigRule",
            "config:DescribeConfigurationRecorderStatus",
            "config:DescribeConfigurationRecorders",
            "config:GetComplianceDetailsByConfigRule",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
        ]
    },
    "AmazonOpenSearchServiceRolePolicy": {
        "permissions": [
            "acm:DescribeCertificate",
            "cloudwatch:PutMetricData",
            "ec2:AssignIpv6Addresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVpcEndpoint",
            "ec2:UnAssignIpv6Addresses",
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:RemoveListenerCertificates"
        ]
    },
    "AmazonOpenSearchServiceCognitoAccess": {
        "permissions": [
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:SetIdentityPoolRoles",
            "cognito-identity:UpdateIdentityPool",
            "cognito-idp:AdminInitiateAuth",
            "cognito-idp:AdminUserGlobalSignOut",
            "cognito-idp:CreateUserPoolClient",
            "cognito-idp:DeleteUserPoolClient",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolClient",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:UpdateUserPoolClient",
            "iam:PassRole"
        ]
    },
    "AWSApplicationAutoscalingNeptuneClusterPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "rds:AddTagsToResource",
            "rds:CreateDBInstance",
            "rds:DeleteDBInstance",
            "rds:DescribeDBClusterParameters",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:ListTagsForResource"
        ]
    },
    "AmazonEKSConnectorServiceRolePolicy": {
        "permissions": [
            "events:PutRule",
            "events:PutTargets",
            "iam:PassRole",
            "ssm:CreateActivation",
            "ssm:DeleteActivation",
            "ssm:DeregisterManagedInstance",
            "ssm:DescribeInstanceInformation",
            "ssm:StartSession"
        ]
    },
    "KafkaConnectServiceRolePolicy": {
        "permissions": [
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DetachNetworkInterface"
        ]
    },
    "AWSQuicksightOpenSearchPolicy": {
        "permissions": [
            "es:DescribeDomain",
            "es:ESHttpGet",
            "es:ESHttpPost",
            "es:ListDomainNames"
        ]
    },
    "AmazonOpenSearchServiceFullAccess": {
        "permissions": [
            "es:*"
        ]
    },
    "AmazonOpenSearchServiceReadOnlyAccess": {
        "permissions": [
            "es:Describe*",
            "es:Get*",
            "es:List*"
        ]
    },
    "AWSMediaTailorServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AmazonMSKConnectReadOnlyAccess": {
        "permissions": [
            "kafkaconnect:DescribeConnector",
            "kafkaconnect:DescribeCustomPlugin",
            "kafkaconnect:DescribeWorkerConfiguration",
            "kafkaconnect:ListConnectors",
            "kafkaconnect:ListCustomPlugins",
            "kafkaconnect:ListWorkerConfigurations"
        ]
    },
    "AmazonConnectCampaignsServiceLinkedRolePolicy": {
        "permissions": [
            "connect-campaigns:ListCampaigns",
            "connect:BatchPutContact",
            "connect:DescribeContactFlow",
            "connect:SendOutboundEmail",
            "connect:StopContact",
            "events:DeleteRule",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "wisdom:GetMessageTemplate",
            "wisdom:RenderMessageTemplate"
        ]
    },
    "AmazonRedshiftQueryEditorV2FullAccess": {
        "permissions": [
            "kms:DescribeKey",
            "kms:ListAliases",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:TagResource",
            "sqlworkbench:*",
            "tag:GetResources"
        ]
    },
    "AmazonRedshiftQueryEditorV2NoSharing": {
        "permissions": [
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:TagResource",
            "sqlworkbench:AssociateConnectionWithChart",
            "sqlworkbench:AssociateConnectionWithTab",
            "sqlworkbench:AssociateNotebookWithTab",
            "sqlworkbench:AssociateQueryWithTab",
            "sqlworkbench:BatchDeleteFolder",
            "sqlworkbench:BatchGetNotebookCell",
            "sqlworkbench:CreateChart",
            "sqlworkbench:CreateConnection",
            "sqlworkbench:CreateFolder",
            "sqlworkbench:CreateNotebook",
            "sqlworkbench:CreateNotebookCell",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:CreateNotebookVersion",
            "sqlworkbench:CreateSavedQuery",
            "sqlworkbench:DeleteChart",
            "sqlworkbench:DeleteConnection",
            "sqlworkbench:DeleteNotebook",
            "sqlworkbench:DeleteNotebookCell",
            "sqlworkbench:DeleteNotebookVersion",
            "sqlworkbench:DeleteSavedQuery",
            "sqlworkbench:DeleteTab",
            "sqlworkbench:DriverExecute",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:ExportNotebook",
            "sqlworkbench:GenerateSession",
            "sqlworkbench:GetAccountInfo",
            "sqlworkbench:GetAccountSettings",
            "sqlworkbench:GetAutocompletionMetadata",
            "sqlworkbench:GetAutocompletionResource",
            "sqlworkbench:GetChart",
            "sqlworkbench:GetConnection",
            "sqlworkbench:GetNotebook",
            "sqlworkbench:GetNotebookVersion",
            "sqlworkbench:GetQueryExecutionHistory",
            "sqlworkbench:GetSavedQuery",
            "sqlworkbench:GetSchemaInference",
            "sqlworkbench:GetUserInfo",
            "sqlworkbench:GetUserWorkspaceSettings",
            "sqlworkbench:ImportNotebook",
            "sqlworkbench:ListConnections",
            "sqlworkbench:ListFiles",
            "sqlworkbench:ListNotebookVersions",
            "sqlworkbench:ListNotebooks",
            "sqlworkbench:ListQueryExecutionHistory",
            "sqlworkbench:ListRedshiftClusters",
            "sqlworkbench:ListSavedQueryVersions",
            "sqlworkbench:ListTabs",
            "sqlworkbench:ListTaggedResources",
            "sqlworkbench:ListTagsForResource",
            "sqlworkbench:PutTab",
            "sqlworkbench:PutUserWorkspaceSettings",
            "sqlworkbench:RestoreNotebookVersion",
            "sqlworkbench:TagResource",
            "sqlworkbench:UpdateChart",
            "sqlworkbench:UpdateConnection",
            "sqlworkbench:UpdateFileFolder",
            "sqlworkbench:UpdateFolder",
            "sqlworkbench:UpdateNotebook",
            "sqlworkbench:UpdateNotebookCellContent",
            "sqlworkbench:UpdateNotebookCellLayout",
            "sqlworkbench:UpdateSavedQuery",
            "tag:GetResources"
        ]
    },
    "AmazonRedshiftQueryEditorV2ReadSharing": {
        "permissions": [
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:TagResource",
            "sqlworkbench:AssociateConnectionWithChart",
            "sqlworkbench:AssociateConnectionWithTab",
            "sqlworkbench:AssociateNotebookWithTab",
            "sqlworkbench:AssociateQueryWithTab",
            "sqlworkbench:BatchDeleteFolder",
            "sqlworkbench:BatchGetNotebookCell",
            "sqlworkbench:CreateChart",
            "sqlworkbench:CreateConnection",
            "sqlworkbench:CreateFolder",
            "sqlworkbench:CreateNotebook",
            "sqlworkbench:CreateNotebookCell",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:CreateNotebookVersion",
            "sqlworkbench:CreateSavedQuery",
            "sqlworkbench:DeleteChart",
            "sqlworkbench:DeleteConnection",
            "sqlworkbench:DeleteNotebook",
            "sqlworkbench:DeleteNotebookCell",
            "sqlworkbench:DeleteNotebookVersion",
            "sqlworkbench:DeleteSavedQuery",
            "sqlworkbench:DeleteTab",
            "sqlworkbench:DriverExecute",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:ExportNotebook",
            "sqlworkbench:GenerateSession",
            "sqlworkbench:GetAccountInfo",
            "sqlworkbench:GetAccountSettings",
            "sqlworkbench:GetAutocompletionMetadata",
            "sqlworkbench:GetAutocompletionResource",
            "sqlworkbench:GetChart",
            "sqlworkbench:GetConnection",
            "sqlworkbench:GetNotebook",
            "sqlworkbench:GetNotebookVersion",
            "sqlworkbench:GetQueryExecutionHistory",
            "sqlworkbench:GetSavedQuery",
            "sqlworkbench:GetSchemaInference",
            "sqlworkbench:GetUserInfo",
            "sqlworkbench:GetUserWorkspaceSettings",
            "sqlworkbench:ImportNotebook",
            "sqlworkbench:ListConnections",
            "sqlworkbench:ListFiles",
            "sqlworkbench:ListNotebookVersions",
            "sqlworkbench:ListNotebooks",
            "sqlworkbench:ListQueryExecutionHistory",
            "sqlworkbench:ListRedshiftClusters",
            "sqlworkbench:ListSavedQueryVersions",
            "sqlworkbench:ListTabs",
            "sqlworkbench:ListTaggedResources",
            "sqlworkbench:ListTagsForResource",
            "sqlworkbench:PutTab",
            "sqlworkbench:PutUserWorkspaceSettings",
            "sqlworkbench:RestoreNotebookVersion",
            "sqlworkbench:TagResource",
            "sqlworkbench:UntagResource",
            "sqlworkbench:UpdateChart",
            "sqlworkbench:UpdateConnection",
            "sqlworkbench:UpdateFileFolder",
            "sqlworkbench:UpdateFolder",
            "sqlworkbench:UpdateNotebook",
            "sqlworkbench:UpdateNotebookCellContent",
            "sqlworkbench:UpdateNotebookCellLayout",
            "sqlworkbench:UpdateSavedQuery",
            "tag:GetResources"
        ]
    },
    "AmazonRedshiftQueryEditorV2ReadWriteSharing": {
        "permissions": [
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:TagResource",
            "sqlworkbench:AssociateConnectionWithChart",
            "sqlworkbench:AssociateConnectionWithTab",
            "sqlworkbench:AssociateNotebookWithTab",
            "sqlworkbench:AssociateQueryWithTab",
            "sqlworkbench:BatchDeleteFolder",
            "sqlworkbench:BatchGetNotebookCell",
            "sqlworkbench:CreateChart",
            "sqlworkbench:CreateConnection",
            "sqlworkbench:CreateFolder",
            "sqlworkbench:CreateNotebook",
            "sqlworkbench:CreateNotebookCell",
            "sqlworkbench:CreateNotebookFromVersion",
            "sqlworkbench:CreateNotebookVersion",
            "sqlworkbench:CreateSavedQuery",
            "sqlworkbench:DeleteChart",
            "sqlworkbench:DeleteConnection",
            "sqlworkbench:DeleteNotebook",
            "sqlworkbench:DeleteNotebookCell",
            "sqlworkbench:DeleteNotebookVersion",
            "sqlworkbench:DeleteSavedQuery",
            "sqlworkbench:DeleteTab",
            "sqlworkbench:DriverExecute",
            "sqlworkbench:DuplicateNotebook",
            "sqlworkbench:ExportNotebook",
            "sqlworkbench:GenerateSession",
            "sqlworkbench:GetAccountInfo",
            "sqlworkbench:GetAccountSettings",
            "sqlworkbench:GetAutocompletionMetadata",
            "sqlworkbench:GetAutocompletionResource",
            "sqlworkbench:GetChart",
            "sqlworkbench:GetConnection",
            "sqlworkbench:GetNotebook",
            "sqlworkbench:GetNotebookVersion",
            "sqlworkbench:GetQueryExecutionHistory",
            "sqlworkbench:GetSavedQuery",
            "sqlworkbench:GetSchemaInference",
            "sqlworkbench:GetUserInfo",
            "sqlworkbench:GetUserWorkspaceSettings",
            "sqlworkbench:ImportNotebook",
            "sqlworkbench:ListConnections",
            "sqlworkbench:ListFiles",
            "sqlworkbench:ListNotebookVersions",
            "sqlworkbench:ListNotebooks",
            "sqlworkbench:ListQueryExecutionHistory",
            "sqlworkbench:ListRedshiftClusters",
            "sqlworkbench:ListSavedQueryVersions",
            "sqlworkbench:ListTabs",
            "sqlworkbench:ListTaggedResources",
            "sqlworkbench:ListTagsForResource",
            "sqlworkbench:PutTab",
            "sqlworkbench:PutUserWorkspaceSettings",
            "sqlworkbench:RestoreNotebookVersion",
            "sqlworkbench:TagResource",
            "sqlworkbench:UntagResource",
            "sqlworkbench:UpdateChart",
            "sqlworkbench:UpdateConnection",
            "sqlworkbench:UpdateFileFolder",
            "sqlworkbench:UpdateFolder",
            "sqlworkbench:UpdateNotebook",
            "sqlworkbench:UpdateNotebookCellContent",
            "sqlworkbench:UpdateNotebookCellLayout",
            "sqlworkbench:UpdateSavedQuery",
            "tag:GetResources"
        ]
    },
    "AmazonConnectVoiceIDFullAccess": {
        "permissions": [
            "voiceid:*"
        ]
    },
    "AWSEC2CapacityReservationFleetRolePolicy": {
        "permissions": [
            "ec2:CancelCapacityReservation",
            "ec2:CreateCapacityReservation",
            "ec2:CreateTags",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeInstances",
            "ec2:ModifyCapacityReservation"
        ]
    },
    "AWSAccountManagementFullAccess": {
        "permissions": [
            "account:*"
        ]
    },
    "AWSAccountManagementReadOnlyAccess": {
        "permissions": [
            "account:Get*",
            "account:List*"
        ]
    },
    "AmazonMemoryDBFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "memorydb:*"
        ]
    },
    "AmazonMemoryDBReadOnlyAccess": {
        "permissions": [
            "memorydb:Describe*",
            "memorydb:List*"
        ]
    },
    "AmazonRDSCustomServiceRolePolicy": {
        "permissions": [
            "cloudtrail:GetTrailStatus",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:EnableAlarmpermissions",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:TagResource",
            "ec2:AllocateAddress",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateIamInstanceProfile",
            "ec2:AttachVolume",
            "ec2:CopyImage",
            "ec2:CopySnapshot",
            "ec2:CreateKeyPair",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSnapshot",
            "ec2:CreateSnapshots",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteKeyPair",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSnapshot",
            "ec2:DeleteVolume",
            "ec2:DeregisterImage",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DetachVolume",
            "ec2:DisassociateAddress",
            "ec2:DisassociateIamInstanceProfile",
            "ec2:GetTransitGatewayMulticastDomainAssociations",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyVolume",
            "ec2:ModifyVolumeAttribute",
            "ec2:RebootInstances",
            "ec2:RegisterImage",
            "ec2:ReleaseAddress",
            "ec2:ReplaceIamInstanceProfileAssociation",
            "ec2:RunInstances",
            "ec2:SearchTransitGatewayMulticastGroups",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "events:TagResource",
            "iam:GetInstanceProfile",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "rds:CrossRegionCommunication",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:PutSecretValue",
            "secretsmanager:TagResource",
            "servicequotas:GetServiceQuota",
            "sqs:CreateQueue",
            "sqs:DeleteMessage",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "sqs:TagQueue",
            "ssm:AddTagsToResource",
            "ssm:DeleteParameter",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:GetConnectionStatus",
            "ssm:PutParameter",
            "ssm:SendCommand"
        ]
    },
    "AmazonRDSCustomPreviewServiceRolePolicy": {
        "permissions": [
            "cloudtrail:GetTrailStatus",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:EnableAlarmpermissions",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:TagResource",
            "ec2:AllocateAddress",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateIamInstanceProfile",
            "ec2:AttachVolume",
            "ec2:CopySnapshot",
            "ec2:CreateKeyPair",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSnapshots",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteKeyPair",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSnapshot",
            "ec2:DeleteVolume",
            "ec2:DeregisterImage",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DetachVolume",
            "ec2:DisassociateAddress",
            "ec2:DisassociateIamInstanceProfile",
            "ec2:GetTransitGatewayMulticastDomainAssociations",
            "ec2:ModifyVolume",
            "ec2:ModifyVolumeAttribute",
            "ec2:RebootInstances",
            "ec2:RegisterImage",
            "ec2:ReleaseAddress",
            "ec2:ReplaceIamInstanceProfileAssociation",
            "ec2:RunInstances",
            "ec2:SearchTransitGatewayMulticastGroups",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "events:TagResource",
            "iam:GetInstanceProfile",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListInstanceProfiles",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:PutSecretValue",
            "secretsmanager:TagResource",
            "servicequotas:GetServiceQuota",
            "ssm:AddTagsToResource",
            "ssm:DeleteParameter",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:GetConnectionStatus",
            "ssm:PutParameter",
            "ssm:SendCommand"
        ]
    },
    "AWSMigrationHubStrategyServiceRolePolicy": {
        "permissions": [
            "discovery:DescribeConfigurations",
            "discovery:ListConfigurations",
            "mgh:GetHomeRegion",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectAcl"
        ]
    },
    "AWSMigrationHubStrategyConsoleFullAccess": {
        "permissions": [
            "discovery:DescribeConfigurations",
            "discovery:DescribeTags",
            "discovery:GetDiscoverySummary",
            "discovery:ListConfigurations",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "migrationhub-strategy:*",
            "s3:CreateBucket",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "secretsmanager:ListSecrets"
        ]
    },
    "AWSMigrationHubStrategyCollector": {
        "permissions": [
            "application-transformation:GetPortingCompatibilityAssessment",
            "application-transformation:GetPortingRecommendationAssessment",
            "application-transformation:PutLogData",
            "application-transformation:PutMetricData",
            "application-transformation:StartPortingCompatibilityAssessment",
            "application-transformation:StartPortingRecommendationAssessment",
            "execute-api:Invoke",
            "execute-api:ManageConnections",
            "migrationhub-strategy:GetAntiPattern",
            "migrationhub-strategy:GetMessage",
            "migrationhub-strategy:ListAntiPatterns",
            "migrationhub-strategy:ListJarArtifacts",
            "migrationhub-strategy:PutLogData",
            "migrationhub-strategy:PutMetricData",
            "migrationhub-strategy:RegisterCollector",
            "migrationhub-strategy:SendMessage",
            "migrationhub-strategy:UpdateCollectorConfiguration",
            "s3:CreateBucket",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AWSPanoramaServiceLinkedRolePolicy": {
        "permissions": [
            "iot:AttachPolicy",
            "iot:AttachPrincipalPolicy",
            "iot:AttachThingPrincipal",
            "iot:CreateJob",
            "iot:CreateKeysAndCertificate",
            "iot:CreatePolicy",
            "iot:CreatePolicyVersion",
            "iot:CreateThing",
            "iot:DeleteCertificate",
            "iot:DeleteJob",
            "iot:DeleteThing",
            "iot:DeleteThingShadow",
            "iot:DescribeEndpoint",
            "iot:DescribeJobExecution",
            "iot:DescribeThing",
            "iot:DetachPrincipalPolicy",
            "iot:DetachThingPrincipal",
            "iot:GetThingShadow",
            "iot:UpdateCertificate",
            "iot:UpdateThing",
            "iot:UpdateThingShadow",
            "panorama:Describe*",
            "panorama:List*",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecretVersionIds"
        ]
    },
    "AWSPanoramaApplianceServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket"
        ]
    },
    "AWSMarketplacePurchaseOrdersServiceRolePolicy": {
        "permissions": [
            "purchase-orders:ModifyPurchaseOrders",
            "purchase-orders:ViewPurchaseOrders"
        ]
    },
    "AWSDeepRacerAccountAdminAccess": {
        "permissions": [
            "deepracer:*"
        ]
    },
    "AWSDeepRacerDefaultMultiUserAccess": {
        "permissions": [
            "deepracer:Add*",
            "deepracer:Admin*",
            "deepracer:Clone*",
            "deepracer:Create*",
            "deepracer:Delete*",
            "deepracer:Edit*",
            "deepracer:Get*",
            "deepracer:GetAccountConfig",
            "deepracer:GetTrack",
            "deepracer:Import*",
            "deepracer:List*",
            "deepracer:ListTracks",
            "deepracer:Perform*",
            "deepracer:Remove*",
            "deepracer:Set*",
            "deepracer:Start*",
            "deepracer:Stop*",
            "deepracer:Tag*",
            "deepracer:TestRewardFunction",
            "deepracer:Untag*",
            "deepracer:Update*"
        ]
    },
    "AWSCostAndUsageReportAutomationPolicy": {
        "permissions": [
            "cur:DeleteReportDefinition",
            "cur:DescribeReportDefinitions",
            "cur:PutReportDefinition",
            "organizations:DescribeOrganization",
            "s3:CreateBucket",
            "s3:GetBucketPolicy",
            "s3:GetBucketTagging",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketTagging"
        ]
    },
    "AmazonRedshiftAllCommandsFullAccess": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "dynamodb:DescribeTable",
            "dynamodb:Getitem",
            "dynamodb:Scan",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "elasticmapreduce:ListInstances",
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchGetPartition",
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:DeleteDatabase",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:UpdateDatabase",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "iam:PassRole",
            "lambda:InvokeFunction",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetEncryptionConfiguration",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutBucketAcl",
            "s3:PutBucketCors",
            "s3:PutObject",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateModel",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateTrainingJob",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:InvokeEndpoint",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:ListSecrets"
        ]
    },
    "AWSApplicationMigrationVCenterClientPolicy": {
        "permissions": [
            "mgn:CreateVcenterClientForMgn",
            "mgn:DeleteVcenterClient",
            "mgn:DescribeVcenterClients",
            "mgn:GetVcenterClientCommandsForMgn",
            "mgn:NotifyVcenterClientStartedForMgn",
            "mgn:SendVcenterClientCommandResultForMgn",
            "mgn:SendVcenterClientLogsForMgn",
            "mgn:SendVcenterClientMetricsForMgn",
            "mgn:TagResource"
        ]
    },
    "AmazonDevOpsGuruOrganizationsAccess": {
        "permissions": [
            "devops-guru:DescribeOrganizationHealth",
            "devops-guru:DescribeOrganizationOverview",
            "devops-guru:DescribeOrganizationResourceCollectionHealth",
            "devops-guru:ListOrganizationInsights",
            "devops-guru:SearchOrganizationInsights",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DisableAWSServiceAccess",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots",
            "organizations:RegisterDelegatedAdministrator"
        ]
    },
    "AmazonInspector2ServiceRolePolicy": {
        "permissions": [
            "cloudtrail:CreateServiceLinkedChannel",
            "cloudtrail:DeleteServiceLinkedChannel",
            "cloudtrail:ListServiceLinkedChannels",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricData",
            "codeguru-security:BatchGetFindings",
            "codeguru-security:CreateScan",
            "codeguru-security:DeleteScansByCategory",
            "codeguru-security:GetAccountConfiguration",
            "codeguru-security:GetFindings",
            "codeguru-security:GetScan",
            "codeguru-security:ListFindings",
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "ecr:BatchGetImage",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:DescribeImages",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetRegistryScanningConfiguration",
            "ecr:ListImages",
            "ecr:PutRegistryScanningConfiguration",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListPolicies",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "lambda:GetFunction",
            "lambda:GetLayerVersion",
            "lambda:ListFunctions",
            "lambda:ListTags",
            "lambda:ListVersionsByFunction",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "ssm:CreateAssociation",
            "ssm:CreateResourceDataSync",
            "ssm:DeleteAssociation",
            "ssm:DeleteParameter",
            "ssm:DeleteResourceDataSync",
            "ssm:DescribeAssociation",
            "ssm:DescribeAssociationExecutions",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:GetParameters",
            "ssm:ListAssociations",
            "ssm:ListResourceDataSync",
            "ssm:PutParameter",
            "ssm:SendCommand",
            "ssm:StartAssociationsOnce",
            "ssm:UpdateAssociation",
            "tiros:CreateQuery",
            "tiros:GetQueryAnswer"
        ]
    },
    "AWSElasticDisasterRecoveryRecoveryInstancePolicy": {
        "permissions": [
            "drs:CreateSourceServerForDrs",
            "drs:DescribeRecoveryInstances",
            "drs:GetAgentCommandForDrs",
            "drs:GetAgentConfirmedResumeInfoForDrs",
            "drs:GetAgentInstallationAssetsForDrs",
            "drs:GetAgentReplicationInfoForDrs",
            "drs:GetAgentRuntimeConfigurationForDrs",
            "drs:NotifyReplicationServerAuthenticationForDrs",
            "drs:SendAgentLogsForDrs",
            "drs:SendAgentMetricsForDrs",
            "drs:SendClientLogsForDrs",
            "drs:TagResource",
            "drs:UpdateAgentBacklogForDrs",
            "drs:UpdateAgentConversionInfoForDrs",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateAgentSourcePropertiesForDrs",
            "drs:UpdateReplicationCertificateForDrs",
            "ec2:DescribeInstanceTypes",
            "sts:AssumeRole",
            "sts:TagSession"
        ]
    },
    "AWSElasticDisasterRecoveryAgentPolicy": {
        "permissions": [
            "drs:GetAgentCommandForDrs",
            "drs:GetAgentConfirmedResumeInfoForDrs",
            "drs:GetAgentInstallationAssetsForDrs",
            "drs:GetAgentReplicationInfoForDrs",
            "drs:GetAgentRuntimeConfigurationForDrs",
            "drs:IssueAgentCertificateForDrs",
            "drs:SendAgentLogsForDrs",
            "drs:SendAgentMetricsForDrs",
            "drs:UpdateAgentBacklogForDrs",
            "drs:UpdateAgentConversionInfoForDrs",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateAgentSourcePropertiesForDrs"
        ]
    },
    "AWSElasticDisasterRecoveryAgentInstallationPolicy": {
        "permissions": [
            "drs:CreateRecoveryInstanceForDrs",
            "drs:CreateSourceNetwork",
            "drs:CreateSourceServerForDrs",
            "drs:DescribeRecoveryInstances",
            "drs:GetAgentInstallationAssetsForDrs",
            "drs:IssueAgentCertificateForDrs",
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs",
            "drs:TagResource"
        ]
    },
    "AWSElasticDisasterRecoveryFailbackPolicy": {
        "permissions": [
            "drs:DescribeRecoveryInstances",
            "drs:DescribeReplicationServerAssociationsForDrs",
            "drs:GetChannelCommandsForDrs",
            "drs:GetFailbackCommandForDrs",
            "drs:GetFailbackLaunchRequestedForDrs",
            "drs:IssueAgentCertificateForDrs",
            "drs:NotifyAgentAuthenticationForDrs",
            "drs:NotifyAgentConnectedForDrs",
            "drs:NotifyAgentDisconnectedForDrs",
            "drs:NotifyAgentReplicationProgressForDrs",
            "drs:NotifyConsistencyAttainedForDrs",
            "drs:SendChannelCommandResultForDrs",
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs",
            "drs:UpdateAgentReplicationProcessStateForDrs",
            "drs:UpdateFailbackClientLastSeenForDrs"
        ]
    },
    "AWSElasticDisasterRecoveryConsoleFullAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "drs:*",
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeHosts",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyLaunchTemplate",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "license-manager:ListLicenseConfigurations",
            "resource-groups:ListGroups",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
        ]
    },
    "AWSElasticDisasterRecoveryReadOnlyAccess": {
        "permissions": [
            "drs:DescribeJobLogItems",
            "drs:DescribeJobs",
            "drs:DescribeRecoveryInstances",
            "drs:DescribeRecoverySnapshots",
            "drs:DescribeReplicationConfigurationTemplates",
            "drs:DescribeSourceServers",
            "drs:GetFailbackReplicationConfiguration",
            "drs:GetLaunchConfiguration",
            "drs:GetReplicationConfiguration",
            "drs:ListExtensibleSourceServers",
            "drs:ListLaunchpermissions",
            "drs:ListStagingAccounts",
            "drs:ListTagsForResource",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:GetInstanceTypesFromInstanceRequirements",
            "iam:ListRoles",
            "ssm:DescribeDocument",
            "ssm:GetAutomationExecution",
            "ssm:GetDocument",
            "ssm:GetParameter",
            "ssm:ListCommandInvocations"
        ]
    },
    "AWSElasticDisasterRecoveryServiceRolePolicy": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "drs:CreateRecoveryInstanceForDrs",
            "drs:ListTagsForResource",
            "drs:TagResource",
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSnapshot",
            "ec2:DeleteVolume",
            "ec2:DeregisterImage",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumeAttribute",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:DetachVolume",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetManagedPrefixListAssociations",
            "ec2:GetManagedPrefixListEntries",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyLaunchTemplate",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifyVolume",
            "ec2:RegisterImage",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:GetInstanceProfile",
            "iam:PassRole",
            "kms:ListRetirableGrants"
        ]
    },
    "AWSElasticDisasterRecoveryFailbackInstallationPolicy": {
        "permissions": [
            "drs:AssociateFailbackClientToRecoveryInstanceForDrs",
            "drs:DescribeRecoveryInstances",
            "drs:DescribeSourceServers",
            "drs:GetSuggestedFailbackClientDeviceMappingForDrs",
            "drs:IssueAgentCertificateForDrs",
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs",
            "drs:TagResource",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateFailbackClientDeviceMappingForDrs"
        ]
    },
    "AWSElasticDisasterRecoveryReplicationServerPolicy": {
        "permissions": [
            "drs:BatchCreateVolumeSnapshotGroupForDrs",
            "drs:BatchDeleteSnapshotRequestForDrs",
            "drs:DescribeReplicationServerAssociationsForDrs",
            "drs:DescribeSnapshotRequestsForDrs",
            "drs:GetAgentSnapshotCreditsForDrs",
            "drs:GetChannelCommandsForDrs",
            "drs:NotifyAgentAuthenticationForDrs",
            "drs:NotifyAgentConnectedForDrs",
            "drs:NotifyAgentDisconnectedForDrs",
            "drs:NotifyAgentReplicationProgressForDrs",
            "drs:NotifyVolumeEventForDrs",
            "drs:SendChannelCommandResultForDrs",
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs",
            "drs:SendVolumeStatsForDrs",
            "drs:UpdateAgentReplicationProcessStateForDrs",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots"
        ]
    },
    "AWSElasticDisasterRecoveryConversionServerPolicy": {
        "permissions": [
            "drs:GetChannelCommandsForDrs",
            "drs:SendChannelCommandResultForDrs",
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs"
        ]
    },
    "AWSShieldServiceRolePolicy": {
        "permissions": [
            "cloudfront:GetDistribution",
            "cloudfront:ListDistributions",
            "wafv2:GetWebACL",
            "wafv2:GetWebACLForResource",
            "wafv2:ListResourcesForWebACL",
            "wafv2:UpdateWebACL"
        ]
    },
    "AmazonCloudWatchRUMServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "xray:PutTraceSegments"
        ]
    },
    "AmazonDetectiveServiceLinkedRolePolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:ListAccounts"
        ]
    },
    "AmazonGrafanaAthenaAccess": {
        "permissions": [
            "athena:GetDataCatalog",
            "athena:GetDatabase",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetTableMetadata",
            "athena:GetWorkGroup",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListTableMetadata",
            "athena:ListWorkGroups",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution",
            "glue:BatchGetPartition",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutObject"
        ]
    },
    "AWSElementalMediaTailorFullAccess": {
        "permissions": [
            "mediatailor:*"
        ]
    },
    "AWSElementalMediaTailorReadOnly": {
        "permissions": [
            "mediatailor:Describe*",
            "mediatailor:Get*",
            "mediatailor:List*"
        ]
    },
    "AWSProtonSyncServiceRolePolicy": {
        "permissions": [
            "codeconnections:UseConnection",
            "codestar-connections:UseConnection",
            "proton:CreateEnvironmentTemplate",
            "proton:CreateEnvironmentTemplateMajorVersion",
            "proton:CreateEnvironmentTemplateVersion",
            "proton:CreateServiceTemplate",
            "proton:CreateServiceTemplateMajorVersion",
            "proton:CreateServiceTemplateVersion",
            "proton:DeleteEnvironmentTemplateVersion",
            "proton:DeleteServiceTemplateVersion",
            "proton:GetEnvironmentTemplate",
            "proton:GetEnvironmentTemplateVersion",
            "proton:GetServiceTemplate",
            "proton:GetServiceTemplateVersion",
            "proton:ListEnvironmentTemplateVersions",
            "proton:ListServiceTemplateVersions",
            "proton:UpdateEnvironmentTemplate",
            "proton:UpdateEnvironmentTemplateVersion",
            "proton:UpdateServiceTemplate",
            "proton:UpdateServiceTemplateVersion"
        ]
    },
    "AmazonBraketJobsExecutionPolicy": {
        "permissions": [
            "braket:CancelJob",
            "braket:CancelQuantumTask",
            "braket:CreateJob",
            "braket:CreateQuantumTask",
            "braket:GetDevice",
            "braket:GetJob",
            "braket:GetQuantumTask",
            "braket:ListTagsForResource",
            "braket:SearchDevices",
            "braket:SearchJobs",
            "braket:SearchQuantumTasks",
            "braket:TagResource",
            "braket:UntagResource",
            "cloudwatch:PutMetricData",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:GetQueryResults",
            "logs:PutLogEvents",
            "logs:StartQuery",
            "logs:StopQuery",
            "s3:CreateBucket",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutObject"
        ]
    },
    "AWSECRPullThroughCache_ServiceRolePolicy": {
        "permissions": [
            "ecr:BatchCheckLayerAvailability",
            "ecr:CompleteLayerUpload",
            "ecr:GetAuthorizationToken",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:UploadLayerPart",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AmazonGrafanaRedshiftAccess": {
        "permissions": [
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift:DescribeClusters",
            "redshift:GetClusterCredentials",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets"
        ]
    },
    "AWSMigrationHubRefactorSpacesServiceRolePolicy": {
        "permissions": [
            "apigateway:DELETE",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateRoute",
            "ec2:DeleteRoute",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:DeleteTransitGatewayVpcAttachment",
            "ec2:DeleteVpcEndpointServiceConfigurations",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:RevokeSecurityGroupIngress",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:RegisterTargets",
            "ram:AssociateResourceShare",
            "ram:DeleteResourceShare",
            "ram:DisassociateResourceShare",
            "ram:GetResourceShareAssociations"
        ]
    },
    "AWSMigrationHubRefactorSpacesFullAccess": {
        "permissions": [
            "apigateway:DELETE",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "apigateway:UpdateRestApiPolicy",
            "cloudformation:CreateStack",
            "cloudformation:TagResource",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateRoute",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTransitGateway",
            "ec2:CreateTransitGatewayVpcAttachment",
            "ec2:CreateVpcEndpointServiceConfiguration",
            "ec2:DeleteRoute",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteTags",
            "ec2:DeleteTransitGateway",
            "ec2:DeleteTransitGatewayVpcAttachment",
            "ec2:DeleteVpcEndpointServiceConfigurations",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupIngress",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:RegisterTargets",
            "iam:CreateServiceLinkedRole",
            "organizations:DescribeOrganization",
            "refactor-spaces:*"
        ]
    },
    "AmazonCloudWatchEvidentlyReadOnlyAccess": {
        "permissions": [
            "evidently:GetExperiment",
            "evidently:GetFeature",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:ListExperiments",
            "evidently:ListFeatures",
            "evidently:ListLaunches",
            "evidently:ListProjects"
        ]
    },
    "AmazonCloudWatchEvidentlyFullAccess": {
        "permissions": [
            "cloudtrail:LookupEvents",
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListTagsForResource",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:TagResource",
            "cloudwatch:UnTagResource",
            "evidently:*",
            "iam:GetRole",
            "iam:ListRoles",
            "logs:DescribeLogGroups",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "sns:CreateTopic",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe"
        ]
    },
    "AmazonCloudWatchRUMReadOnlyAccess": {
        "permissions": [
            "rum:BatchGetRumMetricDefinitions",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "rum:ListRumMetricsDestinations"
        ]
    },
    "AmazonCloudWatchRUMFullAccess": {
        "permissions": [
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cognito-identity:CreateIdentityPool",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:SetIdentityPoolRoles",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:PassRole",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:DeleteLogGroup",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:PutRetentionPolicy",
            "logs:UpdateLogDelivery",
            "rum:*",
            "synthetics:describeCanaries",
            "synthetics:describeCanariesLastRun"
        ]
    },
    "AmazonInspector2FullAccess": {
        "permissions": [
            "codeguru-security:BatchGetFindings",
            "codeguru-security:GetAccountConfiguration",
            "iam:CreateServiceLinkedRole",
            "inspector2:*",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators",
            "organizations:RegisterDelegatedAdministrator"
        ]
    },
    "AmazonWorkSpacesWebServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AssociateAddress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "kinesis:DescribeStreamSummary",
            "kinesis:PutRecord",
            "kinesis:PutRecords"
        ]
    },
    "AmazonWorkSpacesWebReadOnly": {
        "permissions": [
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kinesis:ListStreams",
            "workspaces-web:GetBrowserSettings",
            "workspaces-web:GetIdentityProvider",
            "workspaces-web:GetNetworkSettings",
            "workspaces-web:GetPortal",
            "workspaces-web:GetPortalServiceProviderMetadata",
            "workspaces-web:GetTrustStore",
            "workspaces-web:GetTrustStoreCertificate",
            "workspaces-web:GetUserAccessLoggingSettings",
            "workspaces-web:GetUserSettings",
            "workspaces-web:ListBrowserSettings",
            "workspaces-web:ListIdentityProviders",
            "workspaces-web:ListNetworkSettings",
            "workspaces-web:ListPortals",
            "workspaces-web:ListTagsForResource",
            "workspaces-web:ListTrustStoreCertificates",
            "workspaces-web:ListTrustStores",
            "workspaces-web:ListUserAccessLoggingSettings",
            "workspaces-web:ListUserSettings"
        ]
    },
    "AWSIPAMServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeByoipCidrs",
            "ec2:DescribeIpv6Pools",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePublicIpv4Pools",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:GetIpamDiscoveredAccounts",
            "ec2:GetIpamDiscoveredPublicAddresses",
            "ec2:GetIpamDiscoveredResourceCidrs",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListByoipCidrs",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListParents"
        ]
    },
    "AWSPrivateNetworksServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AmazonDevOpsGuruConsoleFullAccess": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "cloudwatch:GetMetricData",
            "devops-guru:*",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "logs:FilterLogEvents",
            "pi:DescribeDimensionKeys",
            "pi:GetResourceMetrics",
            "rds:DescribeDBInstances",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "sns:Publish",
            "sns:SetTopicAttributes"
        ]
    },
    "EC2FastLaunchServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:RunInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "iam:PassRole"
        ]
    },
    "AWSAppRunnerFullAccess": {
        "permissions": [
            "apprunner:*",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole"
        ]
    },
    "AppRunnerNetworkingServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
        ]
    },
    "AmazonInspector2ReadOnlyAccess": {
        "permissions": [
            "codeguru-security:BatchGetFindings",
            "codeguru-security:GetAccountConfiguration",
            "inspector2:BatchGet*",
            "inspector2:Describe*",
            "inspector2:Get*",
            "inspector2:List*",
            "inspector2:Search*",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AWSBackupServiceRolePolicyForS3Restore": {
        "permissions": [
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetBucketOwnershipControls",
            "s3:GetBucketVersioning",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectTagging",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:ListMultipartUploadParts",
            "s3:PutBucketOwnershipControls",
            "s3:PutBucketVersioning",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutObjectTagging",
            "s3:PutObjectVersionAcl"
        ]
    },
    "AWSBackupServiceRolePolicyForS3Backup": {
        "permissions": [
            "backup:TagResource",
            "cloudwatch:GetMetricData",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "kms:Decrypt",
            "kms:DescribeKey",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetBucketNotification",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetInventoryConfiguration",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectTagging",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:GetObjectVersionTagging",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutBucketNotification",
            "s3:PutInventoryConfiguration"
        ]
    },
    "AmazonSageMakerServiceCatalogProductsGlueServiceRolePolicy": {
        "permissions": [
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetPartition",
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable",
            "glue:DeletePartition",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:GetDatabase",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTableVersion",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:GetUserDefinedFunctions",
            "glue:SearchTables",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:Describe*",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutBucketCors",
            "s3:PutObject"
        ]
    },
    "AmazonSageMakerServiceCatalogProductsCodePipelineServiceRolePolicy": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:SetStackPolicy",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack",
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild",
            "codecommit:CancelUploadArchive",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:UploadArchive",
            "codeconnections:UseConnection",
            "codestar-connections:UseConnection",
            "iam:PassRole",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:PutObject"
        ]
    },
    "AmazonSageMakerServiceCatalogProductsEventsServiceRolePolicy": {
        "permissions": [
            "codepipeline:StartPipelineExecution"
        ]
    },
    "AmazonSageMakerServiceCatalogProductsFirehoseServiceRolePolicy": {
        "permissions": [
            "firehose:PutRecord",
            "firehose:PutRecordBatch"
        ]
    },
    "AWSAppRunnerReadOnlyAccess": {
        "permissions": [
            "apprunner:Describe*",
            "apprunner:List*"
        ]
    },
    "AWSIdentitySyncFullAccess": {
        "permissions": [
            "ds:AuthorizeApplication",
            "ds:UnauthorizeApplication",
            "identity-sync:CreateSyncFilter",
            "identity-sync:CreateSyncProfile",
            "identity-sync:CreateSyncTarget",
            "identity-sync:DeleteSyncFilter",
            "identity-sync:DeleteSyncProfile",
            "identity-sync:DeleteSyncTarget",
            "identity-sync:GetSyncProfile",
            "identity-sync:GetSyncTarget",
            "identity-sync:ListSyncFilters",
            "identity-sync:StartSync",
            "identity-sync:StopSync",
            "identity-sync:UpdateSyncTarget"
        ]
    },
    "AWSIdentitySyncReadOnlyAccess": {
        "permissions": [
            "identity-sync:GetSyncProfile",
            "identity-sync:GetSyncTarget",
            "identity-sync:ListSyncFilters"
        ]
    },
    "AmazonSageMakerServiceCatalogProductsApiGatewayServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:DescribeDestinations",
            "logs:DescribeExportTasks",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:DescribeResourcePolicies",
            "logs:DescribeSubscriptionFilters",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery"
        ]
    },
    "AmazonSageMakerServiceCatalogProductsCloudformationServiceRolePolicy": {
        "permissions": [
            "iam:PassRole",
            "sagemaker:AddAssociation",
            "sagemaker:AddTags",
            "sagemaker:AssociateTrialComponent",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchGetRecord",
            "sagemaker:BatchPutMetrics",
            "sagemaker:CreateAction",
            "sagemaker:CreateAlgorithm",
            "sagemaker:CreateApp",
            "sagemaker:CreateAppImageConfig",
            "sagemaker:CreateArtifact",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateCodeRepository",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateContext",
            "sagemaker:CreateDataQualityJobDefinition",
            "sagemaker:CreateDeviceFleet",
            "sagemaker:CreateDomain",
            "sagemaker:CreateEdgePackagingJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateExperiment",
            "sagemaker:CreateFeatureGroup",
            "sagemaker:CreateFlowDefinition",
            "sagemaker:CreateHumanTaskUi",
            "sagemaker:CreateHyperParameterTuningJob",
            "sagemaker:CreateImage",
            "sagemaker:CreateImageVersion",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateLabelingJob",
            "sagemaker:CreateLineageGroupPolicy",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelBiasJobDefinition",
            "sagemaker:CreateModelExplainabilityJobDefinition",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateModelQualityJobDefinition",
            "sagemaker:CreateMonitoringSchedule",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:CreatePipeline",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateProject",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:CreateTrial",
            "sagemaker:CreateTrialComponent",
            "sagemaker:CreateUserProfile",
            "sagemaker:CreateWorkforce",
            "sagemaker:CreateWorkteam",
            "sagemaker:DeleteAction",
            "sagemaker:DeleteAlgorithm",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteAppImageConfig",
            "sagemaker:DeleteArtifact",
            "sagemaker:DeleteAssociation",
            "sagemaker:DeleteCodeRepository",
            "sagemaker:DeleteContext",
            "sagemaker:DeleteDataQualityJobDefinition",
            "sagemaker:DeleteDeviceFleet",
            "sagemaker:DeleteDomain",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteExperiment",
            "sagemaker:DeleteFeatureGroup",
            "sagemaker:DeleteFlowDefinition",
            "sagemaker:DeleteHumanLoop",
            "sagemaker:DeleteHumanTaskUi",
            "sagemaker:DeleteImage",
            "sagemaker:DeleteImageVersion",
            "sagemaker:DeleteLineageGroupPolicy",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteModelBiasJobDefinition",
            "sagemaker:DeleteModelExplainabilityJobDefinition",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeleteModelPackageGroupPolicy",
            "sagemaker:DeleteModelQualityJobDefinition",
            "sagemaker:DeleteMonitoringSchedule",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:DeletePipeline",
            "sagemaker:DeleteProject",
            "sagemaker:DeleteRecord",
            "sagemaker:DeleteTags",
            "sagemaker:DeleteTrial",
            "sagemaker:DeleteTrialComponent",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DeleteWorkforce",
            "sagemaker:DeleteWorkteam",
            "sagemaker:DeregisterDevices",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeAlgorithm",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeArtifact",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeContext",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDevice",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEdgePackagingJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeExperiment",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeFlowDefinition",
            "sagemaker:DescribeHumanLoop",
            "sagemaker:DescribeHumanTaskUi",
            "sagemaker:DescribeHyperParameterTuningJob",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeLabelingJob",
            "sagemaker:DescribeLineageGroup",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineDefinitionForExecution",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeSubscribedWorkteam",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeTrial",
            "sagemaker:DescribeTrialComponent",
            "sagemaker:DescribeUserProfile",
            "sagemaker:DescribeWorkforce",
            "sagemaker:DescribeWorkteam",
            "sagemaker:DisableSagemakerServicecatalogPortfolio",
            "sagemaker:DisassociateTrialComponent",
            "sagemaker:EnableSagemakerServicecatalogPortfolio",
            "sagemaker:GetDeviceFleetReport",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:GetLineageGroupPolicy",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:GetRecord",
            "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:Listpermissions",
            "sagemaker:ListAlgorithms",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListApps",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListAutoMLJobs",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListCompilationJobs",
            "sagemaker:ListContexts",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDevices",
            "sagemaker:ListDomains",
            "sagemaker:ListEdgePackagingJobs",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListExperiments",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListFlowDefinitions",
            "sagemaker:ListHumanLoops",
            "sagemaker:ListHumanTaskUis",
            "sagemaker:ListHyperParameterTuningJobs",
            "sagemaker:ListImageVersions",
            "sagemaker:ListImages",
            "sagemaker:ListInferenceRecommendationsJobs",
            "sagemaker:ListLabelingJobs",
            "sagemaker:ListLabelingJobsForWorkteam",
            "sagemaker:ListLineageGroups",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringExecutions",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListPipelineExecutions",
            "sagemaker:ListPipelineParametersForExecution",
            "sagemaker:ListPipelines",
            "sagemaker:ListProcessingJobs",
            "sagemaker:ListProjects",
            "sagemaker:ListSubscribedWorkteams",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
            "sagemaker:ListTransformJobs",
            "sagemaker:ListTrialComponents",
            "sagemaker:ListTrials",
            "sagemaker:ListUserProfiles",
            "sagemaker:ListWorkforces",
            "sagemaker:ListWorkteams",
            "sagemaker:PutLineageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:PutRecord",
            "sagemaker:QueryLineage",
            "sagemaker:RegisterDevices",
            "sagemaker:RenderUiTemplate",
            "sagemaker:Search",
            "sagemaker:SendHeartbeat",
            "sagemaker:SendPipelineExecutionStepFailure",
            "sagemaker:SendPipelineExecutionStepSuccess",
            "sagemaker:StartHumanLoop",
            "sagemaker:StartMonitoringSchedule",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StartPipelineExecution",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopEdgePackagingJob",
            "sagemaker:StopHumanLoop",
            "sagemaker:StopHyperParameterTuningJob",
            "sagemaker:StopInferenceRecommendationsJob",
            "sagemaker:StopLabelingJob",
            "sagemaker:StopMonitoringSchedule",
            "sagemaker:StopNotebookInstance",
            "sagemaker:StopPipelineExecution",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateAction",
            "sagemaker:UpdateAppImageConfig",
            "sagemaker:UpdateArtifact",
            "sagemaker:UpdateCodeRepository",
            "sagemaker:UpdateContext",
            "sagemaker:UpdateDeviceFleet",
            "sagemaker:UpdateDevices",
            "sagemaker:UpdateDomain",
            "sagemaker:UpdateEndpoint",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateExperiment",
            "sagemaker:UpdateImage",
            "sagemaker:UpdateModelPackage",
            "sagemaker:UpdateMonitoringSchedule",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:UpdateNotebookInstanceLifecycleConfig",
            "sagemaker:UpdatePipeline",
            "sagemaker:UpdatePipelineExecution",
            "sagemaker:UpdateProject",
            "sagemaker:UpdateTrainingJob",
            "sagemaker:UpdateTrial",
            "sagemaker:UpdateTrialComponent",
            "sagemaker:UpdateUserProfile",
            "sagemaker:UpdateWorkforce",
            "sagemaker:UpdateWorkteam"
        ]
    },
    "AmazonSageMakerServiceCatalogProductsCodeBuildServiceRolePolicy": {
        "permissions": [
            "codecommit:CancelUploadArchive",
            "codecommit:GetBranch",
            "codecommit:GetCommit",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:UploadArchive",
            "codeconnections:UseConnection",
            "codestar-connections:UseConnection",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:CompleteLayerUpload",
            "ecr:CreateRepository",
            "ecr:DescribeImageReplicationStatus",
            "ecr:DescribeImageScanFindings",
            "ecr:DescribeRegistry",
            "ecr:DescribeRepositories",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:UploadLayerPart",
            "iam:PassRole",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:DescribeDestinations",
            "logs:DescribeExportTasks",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:DescribeResourcePolicies",
            "logs:DescribeSubscriptionFilters",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutBucketCors",
            "s3:PutObject",
            "sagemaker:AddAssociation",
            "sagemaker:AddTags",
            "sagemaker:AssociateTrialComponent",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchGetRecord",
            "sagemaker:BatchPutMetrics",
            "sagemaker:CreateAction",
            "sagemaker:CreateAlgorithm",
            "sagemaker:CreateApp",
            "sagemaker:CreateAppImageConfig",
            "sagemaker:CreateArtifact",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateCodeRepository",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateContext",
            "sagemaker:CreateDataQualityJobDefinition",
            "sagemaker:CreateDeviceFleet",
            "sagemaker:CreateDomain",
            "sagemaker:CreateEdgePackagingJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateExperiment",
            "sagemaker:CreateFeatureGroup",
            "sagemaker:CreateFlowDefinition",
            "sagemaker:CreateHumanTaskUi",
            "sagemaker:CreateHyperParameterTuningJob",
            "sagemaker:CreateImage",
            "sagemaker:CreateImageVersion",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateLabelingJob",
            "sagemaker:CreateLineageGroupPolicy",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelBiasJobDefinition",
            "sagemaker:CreateModelExplainabilityJobDefinition",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateModelQualityJobDefinition",
            "sagemaker:CreateMonitoringSchedule",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:CreatePipeline",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateProject",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:CreateTrial",
            "sagemaker:CreateTrialComponent",
            "sagemaker:CreateUserProfile",
            "sagemaker:CreateWorkforce",
            "sagemaker:CreateWorkteam",
            "sagemaker:DeleteAction",
            "sagemaker:DeleteAlgorithm",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteAppImageConfig",
            "sagemaker:DeleteArtifact",
            "sagemaker:DeleteAssociation",
            "sagemaker:DeleteCodeRepository",
            "sagemaker:DeleteContext",
            "sagemaker:DeleteDataQualityJobDefinition",
            "sagemaker:DeleteDeviceFleet",
            "sagemaker:DeleteDomain",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteExperiment",
            "sagemaker:DeleteFeatureGroup",
            "sagemaker:DeleteFlowDefinition",
            "sagemaker:DeleteHumanLoop",
            "sagemaker:DeleteHumanTaskUi",
            "sagemaker:DeleteImage",
            "sagemaker:DeleteImageVersion",
            "sagemaker:DeleteLineageGroupPolicy",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteModelBiasJobDefinition",
            "sagemaker:DeleteModelExplainabilityJobDefinition",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeleteModelPackageGroupPolicy",
            "sagemaker:DeleteModelQualityJobDefinition",
            "sagemaker:DeleteMonitoringSchedule",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:DeletePipeline",
            "sagemaker:DeleteProject",
            "sagemaker:DeleteRecord",
            "sagemaker:DeleteTags",
            "sagemaker:DeleteTrial",
            "sagemaker:DeleteTrialComponent",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DeleteWorkforce",
            "sagemaker:DeleteWorkteam",
            "sagemaker:DeregisterDevices",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeAlgorithm",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeArtifact",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeContext",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDevice",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEdgePackagingJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeExperiment",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeFlowDefinition",
            "sagemaker:DescribeHumanLoop",
            "sagemaker:DescribeHumanTaskUi",
            "sagemaker:DescribeHyperParameterTuningJob",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeLabelingJob",
            "sagemaker:DescribeLineageGroup",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineDefinitionForExecution",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeSubscribedWorkteam",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeTrial",
            "sagemaker:DescribeTrialComponent",
            "sagemaker:DescribeUserProfile",
            "sagemaker:DescribeWorkforce",
            "sagemaker:DescribeWorkteam",
            "sagemaker:DisableSagemakerServicecatalogPortfolio",
            "sagemaker:DisassociateTrialComponent",
            "sagemaker:EnableSagemakerServicecatalogPortfolio",
            "sagemaker:GetDeviceFleetReport",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:GetLineageGroupPolicy",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:GetRecord",
            "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:Listpermissions",
            "sagemaker:ListAlgorithms",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListApps",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListAutoMLJobs",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListCompilationJobs",
            "sagemaker:ListContexts",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDevices",
            "sagemaker:ListDomains",
            "sagemaker:ListEdgePackagingJobs",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListExperiments",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListFlowDefinitions",
            "sagemaker:ListHumanLoops",
            "sagemaker:ListHumanTaskUis",
            "sagemaker:ListHyperParameterTuningJobs",
            "sagemaker:ListImageVersions",
            "sagemaker:ListImages",
            "sagemaker:ListInferenceRecommendationsJobs",
            "sagemaker:ListLabelingJobs",
            "sagemaker:ListLabelingJobsForWorkteam",
            "sagemaker:ListLineageGroups",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringExecutions",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListPipelineExecutions",
            "sagemaker:ListPipelineParametersForExecution",
            "sagemaker:ListPipelines",
            "sagemaker:ListProcessingJobs",
            "sagemaker:ListProjects",
            "sagemaker:ListSubscribedWorkteams",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
            "sagemaker:ListTransformJobs",
            "sagemaker:ListTrialComponents",
            "sagemaker:ListTrials",
            "sagemaker:ListUserProfiles",
            "sagemaker:ListWorkforces",
            "sagemaker:ListWorkteams",
            "sagemaker:PutLineageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:PutRecord",
            "sagemaker:QueryLineage",
            "sagemaker:RegisterDevices",
            "sagemaker:RenderUiTemplate",
            "sagemaker:Search",
            "sagemaker:SendHeartbeat",
            "sagemaker:SendPipelineExecutionStepFailure",
            "sagemaker:SendPipelineExecutionStepSuccess",
            "sagemaker:StartHumanLoop",
            "sagemaker:StartMonitoringSchedule",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StartPipelineExecution",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopEdgePackagingJob",
            "sagemaker:StopHumanLoop",
            "sagemaker:StopHyperParameterTuningJob",
            "sagemaker:StopInferenceRecommendationsJob",
            "sagemaker:StopLabelingJob",
            "sagemaker:StopMonitoringSchedule",
            "sagemaker:StopNotebookInstance",
            "sagemaker:StopPipelineExecution",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateAction",
            "sagemaker:UpdateAppImageConfig",
            "sagemaker:UpdateArtifact",
            "sagemaker:UpdateCodeRepository",
            "sagemaker:UpdateContext",
            "sagemaker:UpdateDeviceFleet",
            "sagemaker:UpdateDevices",
            "sagemaker:UpdateDomain",
            "sagemaker:UpdateEndpoint",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateExperiment",
            "sagemaker:UpdateImage",
            "sagemaker:UpdateModelPackage",
            "sagemaker:UpdateMonitoringSchedule",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:UpdateNotebookInstanceLifecycleConfig",
            "sagemaker:UpdatePipeline",
            "sagemaker:UpdatePipelineExecution",
            "sagemaker:UpdateProject",
            "sagemaker:UpdateTrainingJob",
            "sagemaker:UpdateTrial",
            "sagemaker:UpdateTrialComponent",
            "sagemaker:UpdateUserProfile",
            "sagemaker:UpdateWorkforce",
            "sagemaker:UpdateWorkteam"
        ]
    },
    "AmazonSageMakerServiceCatalogProductsLambdaServiceRolePolicy": {
        "permissions": [
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild",
            "ecr:BatchDeleteImage",
            "ecr:CompleteLayerUpload",
            "ecr:CreateRepository",
            "ecr:DeleteRepository",
            "ecr:DescribeImages",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:UploadLayerPart",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:PassRole",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:DescribeDestinations",
            "logs:DescribeExportTasks",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:DescribeResourcePolicies",
            "logs:DescribeSubscriptionFilters",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:PutResourcePolicy",
            "logs:UpdateLogDelivery",
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:PutBucketCors",
            "s3:PutObject",
            "sagemaker:AddAssociation",
            "sagemaker:AddTags",
            "sagemaker:AssociateTrialComponent",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchGetRecord",
            "sagemaker:BatchPutMetrics",
            "sagemaker:CreateAction",
            "sagemaker:CreateAlgorithm",
            "sagemaker:CreateApp",
            "sagemaker:CreateAppImageConfig",
            "sagemaker:CreateArtifact",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateCodeRepository",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateContext",
            "sagemaker:CreateDataQualityJobDefinition",
            "sagemaker:CreateDeviceFleet",
            "sagemaker:CreateDomain",
            "sagemaker:CreateEdgePackagingJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateExperiment",
            "sagemaker:CreateFeatureGroup",
            "sagemaker:CreateFlowDefinition",
            "sagemaker:CreateHumanTaskUi",
            "sagemaker:CreateHyperParameterTuningJob",
            "sagemaker:CreateImage",
            "sagemaker:CreateImageVersion",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateLabelingJob",
            "sagemaker:CreateLineageGroupPolicy",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelBiasJobDefinition",
            "sagemaker:CreateModelExplainabilityJobDefinition",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateModelQualityJobDefinition",
            "sagemaker:CreateMonitoringSchedule",
            "sagemaker:CreateNotebookInstance",
            "sagemaker:CreateNotebookInstanceLifecycleConfig",
            "sagemaker:CreatePipeline",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreatePresignedNotebookInstanceUrl",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateProject",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:CreateTrial",
            "sagemaker:CreateTrialComponent",
            "sagemaker:CreateUserProfile",
            "sagemaker:CreateWorkforce",
            "sagemaker:CreateWorkteam",
            "sagemaker:DeleteAction",
            "sagemaker:DeleteAlgorithm",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteAppImageConfig",
            "sagemaker:DeleteArtifact",
            "sagemaker:DeleteAssociation",
            "sagemaker:DeleteCodeRepository",
            "sagemaker:DeleteContext",
            "sagemaker:DeleteDataQualityJobDefinition",
            "sagemaker:DeleteDeviceFleet",
            "sagemaker:DeleteDomain",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteExperiment",
            "sagemaker:DeleteFeatureGroup",
            "sagemaker:DeleteFlowDefinition",
            "sagemaker:DeleteHumanLoop",
            "sagemaker:DeleteHumanTaskUi",
            "sagemaker:DeleteImage",
            "sagemaker:DeleteImageVersion",
            "sagemaker:DeleteLineageGroupPolicy",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteModelBiasJobDefinition",
            "sagemaker:DeleteModelExplainabilityJobDefinition",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeleteModelPackageGroupPolicy",
            "sagemaker:DeleteModelQualityJobDefinition",
            "sagemaker:DeleteMonitoringSchedule",
            "sagemaker:DeleteNotebookInstance",
            "sagemaker:DeleteNotebookInstanceLifecycleConfig",
            "sagemaker:DeletePipeline",
            "sagemaker:DeleteProject",
            "sagemaker:DeleteRecord",
            "sagemaker:DeleteTags",
            "sagemaker:DeleteTrial",
            "sagemaker:DeleteTrialComponent",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DeleteWorkforce",
            "sagemaker:DeleteWorkteam",
            "sagemaker:DeregisterDevices",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeAlgorithm",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeAppImageConfig",
            "sagemaker:DescribeArtifact",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeCodeRepository",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeContext",
            "sagemaker:DescribeDataQualityJobDefinition",
            "sagemaker:DescribeDevice",
            "sagemaker:DescribeDeviceFleet",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEdgePackagingJob",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeExperiment",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeFlowDefinition",
            "sagemaker:DescribeHumanLoop",
            "sagemaker:DescribeHumanTaskUi",
            "sagemaker:DescribeHyperParameterTuningJob",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeLabelingJob",
            "sagemaker:DescribeLineageGroup",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelBiasJobDefinition",
            "sagemaker:DescribeModelExplainabilityJobDefinition",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeModelQualityJobDefinition",
            "sagemaker:DescribeMonitoringSchedule",
            "sagemaker:DescribeNotebookInstance",
            "sagemaker:DescribeNotebookInstanceLifecycleConfig",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineDefinitionForExecution",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeProject",
            "sagemaker:DescribeSubscribedWorkteam",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeTrial",
            "sagemaker:DescribeTrialComponent",
            "sagemaker:DescribeUserProfile",
            "sagemaker:DescribeWorkforce",
            "sagemaker:DescribeWorkteam",
            "sagemaker:DisableSagemakerServicecatalogPortfolio",
            "sagemaker:DisassociateTrialComponent",
            "sagemaker:EnableSagemakerServicecatalogPortfolio",
            "sagemaker:GetDeviceFleetReport",
            "sagemaker:GetDeviceRegistration",
            "sagemaker:GetLineageGroupPolicy",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:GetRecord",
            "sagemaker:GetSagemakerServicecatalogPortfolioStatus",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:Listpermissions",
            "sagemaker:ListAlgorithms",
            "sagemaker:ListAppImageConfigs",
            "sagemaker:ListApps",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListAutoMLJobs",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListCodeRepositories",
            "sagemaker:ListCompilationJobs",
            "sagemaker:ListContexts",
            "sagemaker:ListDataQualityJobDefinitions",
            "sagemaker:ListDeviceFleets",
            "sagemaker:ListDevices",
            "sagemaker:ListDomains",
            "sagemaker:ListEdgePackagingJobs",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListExperiments",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListFlowDefinitions",
            "sagemaker:ListHumanLoops",
            "sagemaker:ListHumanTaskUis",
            "sagemaker:ListHyperParameterTuningJobs",
            "sagemaker:ListImageVersions",
            "sagemaker:ListImages",
            "sagemaker:ListInferenceRecommendationsJobs",
            "sagemaker:ListLabelingJobs",
            "sagemaker:ListLabelingJobsForWorkteam",
            "sagemaker:ListLineageGroups",
            "sagemaker:ListModelBiasJobDefinitions",
            "sagemaker:ListModelExplainabilityJobDefinitions",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModelQualityJobDefinitions",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringExecutions",
            "sagemaker:ListMonitoringSchedules",
            "sagemaker:ListNotebookInstanceLifecycleConfigs",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListPipelineExecutions",
            "sagemaker:ListPipelineParametersForExecution",
            "sagemaker:ListPipelines",
            "sagemaker:ListProcessingJobs",
            "sagemaker:ListProjects",
            "sagemaker:ListSubscribedWorkteams",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
            "sagemaker:ListTransformJobs",
            "sagemaker:ListTrialComponents",
            "sagemaker:ListTrials",
            "sagemaker:ListUserProfiles",
            "sagemaker:ListWorkforces",
            "sagemaker:ListWorkteams",
            "sagemaker:PutLineageGroupPolicy",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:PutRecord",
            "sagemaker:QueryLineage",
            "sagemaker:RegisterDevices",
            "sagemaker:RenderUiTemplate",
            "sagemaker:Search",
            "sagemaker:SendHeartbeat",
            "sagemaker:SendPipelineExecutionStepFailure",
            "sagemaker:SendPipelineExecutionStepSuccess",
            "sagemaker:StartHumanLoop",
            "sagemaker:StartMonitoringSchedule",
            "sagemaker:StartNotebookInstance",
            "sagemaker:StartPipelineExecution",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopCompilationJob",
            "sagemaker:StopEdgePackagingJob",
            "sagemaker:StopHumanLoop",
            "sagemaker:StopHyperParameterTuningJob",
            "sagemaker:StopInferenceRecommendationsJob",
            "sagemaker:StopLabelingJob",
            "sagemaker:StopMonitoringSchedule",
            "sagemaker:StopNotebookInstance",
            "sagemaker:StopPipelineExecution",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateAction",
            "sagemaker:UpdateAppImageConfig",
            "sagemaker:UpdateArtifact",
            "sagemaker:UpdateCodeRepository",
            "sagemaker:UpdateContext",
            "sagemaker:UpdateDeviceFleet",
            "sagemaker:UpdateDevices",
            "sagemaker:UpdateDomain",
            "sagemaker:UpdateEndpoint",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateExperiment",
            "sagemaker:UpdateImage",
            "sagemaker:UpdateModelPackage",
            "sagemaker:UpdateMonitoringSchedule",
            "sagemaker:UpdateNotebookInstance",
            "sagemaker:UpdateNotebookInstanceLifecycleConfig",
            "sagemaker:UpdatePipeline",
            "sagemaker:UpdatePipelineExecution",
            "sagemaker:UpdateProject",
            "sagemaker:UpdateTrainingJob",
            "sagemaker:UpdateTrial",
            "sagemaker:UpdateTrialComponent",
            "sagemaker:UpdateUserProfile",
            "sagemaker:UpdateWorkforce",
            "sagemaker:UpdateWorkteam"
        ]
    },
    "AmazonEBSCSIDriverPolicy": {
        "permissions": [
            "ec2:AttachVolume",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DetachVolume",
            "ec2:EnableFastSnapshotRestores",
            "ec2:ModifyVolume"
        ]
    },
    "AmazonChimeSDKMediaPipelinesServiceLinkedRolePolicy": {
        "permissions": [
            "chime:CreateAttendee",
            "chime:DeleteAttendee",
            "chime:GetMeeting",
            "cloudwatch:PutMetricData",
            "kinesisvideo:CreateStream",
            "kinesisvideo:DescribeStream",
            "kinesisvideo:GetDataEndpoint",
            "kinesisvideo:ListStreams",
            "kinesisvideo:PutMedia",
            "kinesisvideo:UpdateDataRetention"
        ]
    },
    "AmazonRDSPerformanceInsightsReadOnly": {
        "permissions": [
            "pi:DescribeDimensionKeys",
            "pi:GetDimensionKeyDetails",
            "pi:GetPerformanceAnalysisReport",
            "pi:GetResourceMetadata",
            "pi:GetResourceMetrics",
            "pi:ListAvailableResourceDimensions",
            "pi:ListAvailableResourceMetrics",
            "pi:ListPerformanceAnalysisReports",
            "pi:ListTagsForResource",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances"
        ]
    },
    "ROSAManageSubscription": {
        "permissions": [
            "aws-marketplace:Subscribe",
            "aws-marketplace:Unsubscribe",
            "aws-marketplace:ViewSubscriptions"
        ]
    },
    "AWSBillingConductorFullAccess": {
        "permissions": [
            "billingconductor:*",
            "organizations:ListAccounts",
            "pricing:DescribeServices"
        ]
    },
    "AWSBillingConductorReadOnlyAccess": {
        "permissions": [
            "billingconductor:List*",
            "organizations:ListAccounts",
            "pricing:DescribeServices"
        ]
    },
    "AwsGlueSessionUserRestrictedServiceRole": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "glue:*",
            "glue:CancelStatement",
            "glue:CreateSession",
            "glue:DeleteSession",
            "glue:GetCompletion",
            "glue:GetSession",
            "glue:GetStatement",
            "glue:ListSessions",
            "glue:ListStatements",
            "glue:RunStatement",
            "glue:StartCompletion",
            "glue:StopSession",
            "glue:TagResource",
            "glue:UntagResource",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:PutObject",
            "tag:TagResources",
            "tag:UntagResources"
        ]
    },
    "AwsGlueSessionUserRestrictedPolicy": {
        "permissions": [
            "glue:CancelStatement",
            "glue:CreateSession",
            "glue:DeleteSession",
            "glue:GetCompletion",
            "glue:GetSession",
            "glue:GetStatement",
            "glue:ListSessions",
            "glue:ListStatements",
            "glue:RunStatement",
            "glue:StartCompletion",
            "glue:StopSession",
            "glue:TagResource",
            "glue:UntagResource",
            "iam:PassRole",
            "tag:TagResources",
            "tag:UntagResources"
        ]
    },
    "AwsGlueSessionUserRestrictedNotebookPolicy": {
        "permissions": [
            "glue:CancelStatement",
            "glue:CreateSession",
            "glue:DeleteSession",
            "glue:GetCompletion",
            "glue:GetSession",
            "glue:GetStatement",
            "glue:ListSessions",
            "glue:ListStatements",
            "glue:RunStatement",
            "glue:StartCompletion",
            "glue:StopSession",
            "glue:TagResource",
            "glue:UntagResource",
            "iam:PassRole",
            "tag:TagResources",
            "tag:UntagResources"
        ]
    },
    "AwsGlueSessionUserRestrictedNotebookServiceRole": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "glue:*",
            "glue:CancelStatement",
            "glue:CreateSession",
            "glue:DeleteSession",
            "glue:GetSession",
            "glue:GetStatement",
            "glue:ListSessions",
            "glue:ListStatements",
            "glue:RunStatement",
            "glue:StopSession",
            "glue:TagResource",
            "glue:UntagResource",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:PutObject",
            "tag:TagResources",
            "tag:UntagResources"
        ]
    },
    "AWSMigrationHubOrchestratorServiceRolePolicy": {
        "permissions": [
            "discovery:DescribeConfigurations",
            "discovery:ListConfigurations",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:DescribeImportImageTasks",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplates",
            "ec2:ModifyLaunchTemplate",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "launchwizard:DescribeProvisionedApp",
            "launchwizard:GetDeployment",
            "launchwizard:ListDeployments",
            "launchwizard:ListProvisionedApps",
            "mgh:GetHomeRegion",
            "mgn:ChangeServerLifeCycleState",
            "mgn:DescribeSourceServers",
            "mgn:FinalizeCutover",
            "mgn:GetLaunchConfiguration",
            "mgn:GetReplicationConfiguration",
            "mgn:MarkAsArchived",
            "mgn:StartCutover",
            "mgn:StartTest",
            "mgn:UpdateReplicationConfiguration",
            "s3:GetObject",
            "s3:ListBucket",
            "ssm:CancelCommand",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:SendCommand"
        ]
    },
    "AWSMigrationHubOrchestratorPlugin": {
        "permissions": [
            "execute-api:Invoke",
            "execute-api:ManageConnections",
            "migrationhub-orchestrator:GetMessage",
            "migrationhub-orchestrator:RegisterPlugin",
            "migrationhub-orchestrator:SendMessage",
            "s3:CreateBucket",
            "s3:GetBucketAcl",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:PutObject",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AWSMigrationHubOrchestratorConsoleFullAccess": {
        "permissions": [
            "account:ListRegions",
            "discovery:DescribeConfigurations",
            "discovery:GetDiscoverySummary",
            "discovery:ListConfigurations",
            "ec2:DescribeInstances",
            "ec2:DescribeVpcs",
            "ecs:ListClusters",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "kms:ListAliases",
            "kms:ListKeys",
            "mgh:GetHomeRegion",
            "migrationhub-orchestrator:*",
            "s3:GetBucketAcl",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject",
            "secretsmanager:ListSecrets"
        ]
    },
    "AWSMigrationHubOrchestratorInstanceRolePolicy": {
        "permissions": [
            "s3:GetObject",
            "secretsmanager:GetSecretValue"
        ]
    },
    "MonitronServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AmazonEMRServerlessServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
        ]
    },
    "AWSBudgetspermissions_RolePolicyForResourceAdministrationWithSSM": {
        "permissions": [
            "ec2:DescribeInstanceStatus",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "rds:DescribeDBInstances",
            "rds:StartDBInstance",
            "rds:StopDBInstance",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWSElasticDisasterRecoveryStagingAccountPolicy": {
        "permissions": [
            "drs:CreateConvertedSnapshotForDrs",
            "drs:DescribeJobLogItems",
            "drs:DescribeJobs",
            "drs:DescribeRecoverySnapshots",
            "drs:DescribeSourceServers",
            "drs:GetReplicationConfiguration",
            "ec2:ModifySnapshotAttribute"
        ]
    },
    "AWSElasticDisasterRecoveryEc2InstancePolicy": {
        "permissions": [
            "drs:CreateSourceNetwork",
            "drs:CreateSourceServerForDrs",
            "drs:GetAgentCommandForDrs",
            "drs:GetAgentConfirmedResumeInfoForDrs",
            "drs:GetAgentInstallationAssetsForDrs",
            "drs:GetAgentReplicationInfoForDrs",
            "drs:GetAgentRuntimeConfigurationForDrs",
            "drs:SendAgentLogsForDrs",
            "drs:SendAgentMetricsForDrs",
            "drs:SendClientLogsForDrs",
            "drs:SendClientMetricsForDrs",
            "drs:TagResource",
            "drs:UpdateAgentBacklogForDrs",
            "drs:UpdateAgentConversionInfoForDrs",
            "drs:UpdateAgentReplicationInfoForDrs",
            "drs:UpdateAgentSourcePropertiesForDrs",
            "sts:AssumeRole",
            "sts:TagSession"
        ]
    },
    "AWSApplicationMigrationAgentPolicy_v2": {
        "permissions": [
            "mgn:GetAgentCommandForMgn",
            "mgn:GetAgentConfirmedResumeInfoForMgn",
            "mgn:GetAgentReplicationInfoForMgn",
            "mgn:GetAgentRuntimeConfigurationForMgn",
            "mgn:IssueClientCertificateForMgn",
            "mgn:SendAgentLogsForMgn",
            "mgn:SendAgentMetricsForMgn",
            "mgn:UpdateAgentBacklogForMgn",
            "mgn:UpdateAgentConversionInfoForMgn",
            "mgn:UpdateAgentReplicationInfoForMgn",
            "mgn:UpdateAgentSourcePropertiesForMgn"
        ]
    },
    "AWSM2ServicePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:ModifyNetworkInterfaceAttribute",
            "elasticfilesystem:DescribeMountTargets",
            "elasticloadbalancing:DeregisterTargets",
            "elasticloadbalancing:RegisterTargets",
            "fsx:DescribeFileSystems"
        ]
    },
    "AWSManagedServicesDeploymentToolkitPolicy": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplate",
            "cloudformation:GetTemplateSummary",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateTerminationProtection",
            "ecr:BatchGetRepositoryScanningConfiguration",
            "ecr:CreateRepository",
            "ecr:DeleteLifecyclePolicy",
            "ecr:DeleteRepository",
            "ecr:DeleteRepositoryPolicy",
            "ecr:DescribeRepositories",
            "ecr:GetLifecyclePolicy",
            "ecr:ListTagsForResource",
            "ecr:PutImageScanningConfiguration",
            "ecr:PutImageTagMutability",
            "ecr:PutLifecyclePolicy",
            "ecr:SetRepositoryPolicy",
            "ecr:TagResource",
            "ecr:UntagResource",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObject",
            "s3:DeleteObjectTagging",
            "s3:DeleteObjectVersion",
            "s3:DeleteObjectVersionTagging",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketPolicy",
            "s3:GetBucketVersioning",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectAttributes",
            "s3:GetObjectLegalHold",
            "s3:GetObjectRetention",
            "s3:GetObjectTagging",
            "s3:GetObjectVersion",
            "s3:GetObjectVersionAcl",
            "s3:GetObjectVersionAttributes",
            "s3:GetObjectVersionForReplication",
            "s3:GetObjectVersionTagging",
            "s3:GetObjectVersionTorrent",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutBucketAcl",
            "s3:PutBucketLogging",
            "s3:PutBucketObjectLockConfiguration",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration"
        ]
    },
    "AWSCloudTrail_ReadOnlyAccess": {
        "permissions": [
            "cloudtrail:Describe*",
            "cloudtrail:Get*",
            "cloudtrail:List*",
            "cloudtrail:LookupEvents"
        ]
    },
    "AWSApplicationMigrationAgentInstallationPolicy": {
        "permissions": [
            "mgn:GetAgentInstallationAssetsForMgn",
            "mgn:IssueClientCertificateForMgn",
            "mgn:RegisterAgentForMgn",
            "mgn:SendClientLogsForMgn",
            "mgn:SendClientMetricsForMgn",
            "mgn:TagResource",
            "mgn:VerifyClientRoleForMgn"
        ]
    },
    "AWSWellArchitectedOrganizationsServiceRolePolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListParents",
            "organizations:ListRoots"
        ]
    },
    "AWSRolesAnywhereServicePolicy": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificateAuthorityCertificate",
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSNetworkManagerCloudWANServiceRolePolicy": {
        "permissions": [
            "ec2:CreateTransitGatewayRouteTableAnnouncement",
            "ec2:DeleteTransitGatewayRouteTableAnnouncement",
            "ec2:DisableTransitGatewayRouteTablePropagation",
            "ec2:EnableTransitGatewayRouteTablePropagation"
        ]
    },
    "AmazonGuardDutyMalwareProtectionServiceRolePolicy": {
        "permissions": [
            "ebs:GetSnapshotBlock",
            "ebs:ListSnapshotBlocks",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "ec2:ModifySnapshotAttribute",
            "ecs:DescribeTasks",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListTasks",
            "eks:DescribeCluster",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy"
        ]
    },
    "AWSVendorInsightsVendorFullAccess": {
        "permissions": [
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports",
            "aws-marketplace:AcceptAgreementApprovalRequest",
            "aws-marketplace:CancelAgreement",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetAgreementApprovalRequest",
            "aws-marketplace:ListAgreementApprovalRequests",
            "aws-marketplace:ListEntities",
            "aws-marketplace:RejectAgreementApprovalRequest",
            "aws-marketplace:SearchAgreements",
            "vendor-insights:ActivateSecurityProfile",
            "vendor-insights:AssociateDataSource",
            "vendor-insights:CreateDataSource",
            "vendor-insights:CreateSecurityProfile",
            "vendor-insights:DeactivateSecurityProfile",
            "vendor-insights:DeleteDataSource",
            "vendor-insights:DisassociateDataSource",
            "vendor-insights:GetDataSource",
            "vendor-insights:GetSecurityProfile",
            "vendor-insights:GetSecurityProfileSnapshot",
            "vendor-insights:ListDataSources",
            "vendor-insights:ListSecurityProfileSnapshots",
            "vendor-insights:ListSecurityProfiles",
            "vendor-insights:ListTagsForResource",
            "vendor-insights:TagResource",
            "vendor-insights:UntagResource",
            "vendor-insights:UpdateDataSource",
            "vendor-insights:UpdateSecurityProfile",
            "vendor-insights:UpdateSecurityProfileSnapshotCreationConfiguration",
            "vendor-insights:UpdateSecurityProfileSnapshotReleaseConfiguration"
        ]
    },
    "AWSVendorInsightsVendorReadOnly": {
        "permissions": [
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListEntities",
            "vendor-insights:GetDataSource",
            "vendor-insights:GetSecurityProfile",
            "vendor-insights:GetSecurityProfileSnapshot",
            "vendor-insights:ListDataSources",
            "vendor-insights:ListSecurityProfileSnapshots",
            "vendor-insights:ListSecurityProfiles",
            "vendor-insights:ListTagsForResource"
        ]
    },
    "AWSVendorInsightsAssessorFullAccess": {
        "permissions": [
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports",
            "aws-marketplace:AcceptAgreementRequest",
            "aws-marketplace:CancelAgreement",
            "aws-marketplace:CancelAgreementRequest",
            "aws-marketplace:CreateAgreementRequest",
            "aws-marketplace:GetAgreementRequest",
            "aws-marketplace:ListAgreementRequests",
            "aws-marketplace:SearchAgreements",
            "vendor-insights:GetEntitledSecurityProfileSnapshot",
            "vendor-insights:GetProfileAccessTerms",
            "vendor-insights:ListEntitledSecurityProfileSnapshots",
            "vendor-insights:ListEntitledSecurityProfiles"
        ]
    },
    "AWSVendorInsightsAssessorReadOnly": {
        "permissions": [
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports",
            "vendor-insights:GetEntitledSecurityProfileSnapshot",
            "vendor-insights:ListEntitledSecurityProfileSnapshots",
            "vendor-insights:ListEntitledSecurityProfiles"
        ]
    },
    "AWSLicenseManagerUserSubscriptionsServiceRolePolicy": {
        "permissions": [
            "ds:DescribeDirectories",
            "ds:GetAuthorizedApplicationDetails",
            "ec2:CreateTags",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:TerminateInstances",
            "route53:GetHostedZone",
            "route53:ListResourceRecordSets",
            "secretsmanager:GetSecretValue",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:GetInventory",
            "ssm:ListCommandInvocations",
            "ssm:SendCommand"
        ]
    },
    "AWSTrustedAdvisorPriorityFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DisableAWSServiceAccess",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators",
            "organizations:RegisterDelegatedAdministrator",
            "trustedadvisor:DeleteNotificationConfigurationForDelegatedAdmin",
            "trustedadvisor:DescribeAccount*",
            "trustedadvisor:DescribeNotificationConfigurations",
            "trustedadvisor:DescribeOrganization",
            "trustedadvisor:DescribeRisk*",
            "trustedadvisor:DownloadRisk",
            "trustedadvisor:SetOrganizationAccess",
            "trustedadvisor:UpdateNotificationConfigurations",
            "trustedadvisor:UpdateRiskStatus"
        ]
    },
    "AWSTrustedAdvisorPriorityReadOnlyAccess": {
        "permissions": [
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListDelegatedAdministrators",
            "trustedadvisor:DescribeAccount*",
            "trustedadvisor:DescribeNotificationConfigurations",
            "trustedadvisor:DescribeOrganization",
            "trustedadvisor:DescribeRisk*",
            "trustedadvisor:DownloadRisk"
        ]
    },
    "AWSApplicationDiscoveryAgentlessCollectorAccess": {
        "permissions": [
            "arsenal:RegisterOnPremisesAgent",
            "ecr-public:DescribeImages",
            "ecr-public:GetAuthorizationToken",
            "mgh:GetHomeRegion",
            "sts:GetServiceBearerToken"
        ]
    },
    "AWSSupportAppFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "servicequotas:GetRequestedServiceQuotaChange",
            "servicequotas:GetServiceQuota",
            "servicequotas:RequestServiceQuotaIncrease",
            "support:AddAttachmentsToSet",
            "support:AddCommunicationToCase",
            "support:CreateCase",
            "support:DescribeCases",
            "support:DescribeCommunications",
            "support:DescribeSeverityLevels",
            "support:InitiateChatForCase",
            "support:ResolveCase"
        ]
    },
    "AWSSupportAppReadOnlyAccess": {
        "permissions": [
            "support:DescribeCases",
            "support:DescribeCommunications"
        ]
    },
    "AmazonEKSLocalOutpostServiceRolePolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAddresses",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:GetConsoleOutput",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:DeleteInstanceProfile",
            "iam:GetInstanceProfile",
            "iam:PassRole",
            "iam:RemoveRoleFromInstanceProfile",
            "outposts:GetOutpost",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:TagResource",
            "ssm:ResumeSession",
            "ssm:StartSession",
            "ssm:TerminateSession"
        ]
    },
    "AmazonSageMakerCanvasForecastAccess": {
        "permissions": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AmazonEKSLocalOutpostClusterPolicy": {
        "permissions": [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeTags",
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply",
            "ecr-public:GetAuthorizationToken",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetSecretValue",
            "ssm:DescribeDocumentParameters",
            "ssm:DescribeInstanceProperties",
            "ssm:ListInstanceAssociations",
            "ssm:PutComplianceItems",
            "ssm:PutInventory",
            "ssm:RegisterManagedInstance",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "GroundTruthSyntheticConsoleReadOnlyAccess": {
        "permissions": [
            "s3:ListBucket",
            "sagemaker-groundtruth-synthetic:Get*",
            "sagemaker-groundtruth-synthetic:List*"
        ]
    },
    "GroundTruthSyntheticConsoleFullAccess": {
        "permissions": [
            "s3:ListBucket",
            "sagemaker-groundtruth-synthetic:*"
        ]
    },
    "AmazonSSMManagedEC2InstanceDefaultPolicy": {
        "permissions": [
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply",
            "ssm:DescribeAssociation",
            "ssm:DescribeDocument",
            "ssm:GetDeployablePatchSnapshotForInstance",
            "ssm:GetDocument",
            "ssm:GetManifest",
            "ssm:ListAssociations",
            "ssm:ListInstanceAssociations",
            "ssm:PutComplianceItems",
            "ssm:PutConfigurePackageResult",
            "ssm:PutInventory",
            "ssm:UpdateAssociationStatus",
            "ssm:UpdateInstanceAssociationStatus",
            "ssm:UpdateInstanceInformation",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "AmazonSageMakerCanvasFullAccess": {
        "permissions": [
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListTableMetadata",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "emr-serverless:CancelJobRun",
            "emr-serverless:CreateApplication",
            "emr-serverless:GetApplication",
            "emr-serverless:GetJobRun",
            "emr-serverless:ListApplications",
            "emr-serverless:ListJobRuns",
            "emr-serverless:StartApplication",
            "emr-serverless:StartJobRun",
            "emr-serverless:StopApplication",
            "emr-serverless:TagResource",
            "emr-serverless:UpdateApplication",
            "forecast:CreateAutoPredictor",
            "forecast:CreateDataset",
            "forecast:CreateDatasetGroup",
            "forecast:CreateDatasetImportJob",
            "forecast:CreateExplainability",
            "forecast:CreateExplainabilityExport",
            "forecast:CreateForecast",
            "forecast:CreateForecastEndpoint",
            "forecast:CreateForecastExportJob",
            "forecast:CreatePredictor",
            "forecast:CreatePredictorBacktestExportJob",
            "forecast:DeleteResourceTree",
            "forecast:DescribeAutoPredictor",
            "forecast:DescribeDataset",
            "forecast:DescribeDatasetImportJob",
            "forecast:DescribeExplainability",
            "forecast:DescribeExplainabilityExport",
            "forecast:DescribeForecast",
            "forecast:DescribeForecastEndpoint",
            "forecast:DescribeForecastExportJob",
            "forecast:DescribePredictor",
            "forecast:DescribePredictorBacktestExportJob",
            "forecast:GetAccuracyMetrics",
            "forecast:GetRecentForecastContext",
            "forecast:InvokeForecastEndpoint",
            "forecast:TagResource",
            "glue:GetDatabases",
            "glue:GetPartitions",
            "glue:GetTables",
            "glue:SearchTables",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:PassRole",
            "kms:DescribeKey",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "quicksight:ListNamespaces",
            "rds:DescribeDBInstances",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift:GetClusterCredentials",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "sagemaker:AddTags",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateAutoMLJobV2",
            "sagemaker:CreateCompilationJob",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteModel",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeAutoMLJobV2",
            "sagemaker:DescribeCompilationJob",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeUserProfile",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListEndpoints",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListTags",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "secretsmanager:CreateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutResourcePolicy"
        ]
    },
    "AmazonCloudWatchEvidentlyServiceRolePolicy": {
        "permissions": [
            "appconfig:ListDeployments",
            "appconfig:StartDeployment",
            "appconfig:StopDeployment",
            "appconfig:TagResource"
        ]
    },
    "AWSDeviceFarmServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute"
        ]
    },
    "AWSIoTFleetwiseServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSSupportPlansReadOnlyAccess": {
        "permissions": [
            "supportplans:GetSupportPlan",
            "supportplans:GetSupportPlanUpdateStatus",
            "supportplans:ListSupportPlanModifiers"
        ]
    },
    "AWSSupportPlansFullAccess": {
        "permissions": [
            "supportplans:CreateSupportPlanSchedule",
            "supportplans:GetSupportPlan",
            "supportplans:GetSupportPlanUpdateStatus",
            "supportplans:ListSupportPlanModifiers",
            "supportplans:StartSupportPlanUpdate"
        ]
    },
    "AppIntegrationsServiceLinkedRolePolicy": {
        "permissions": [
            "appflow:DeleteFlow",
            "appflow:DescribeConnectorEntity",
            "appflow:DescribeConnectorProfiles",
            "appflow:DescribeFlow",
            "appflow:DescribeFlowExecutionRecords",
            "appflow:ListConnectorEntities",
            "appflow:StartFlow",
            "appflow:StopFlow",
            "appflow:TagResource",
            "appflow:UpdateFlow",
            "appflow:UseConnectorProfile",
            "cloudwatch:PutMetricData"
        ]
    },
    "AmazonAppStreamPCAAccess": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate"
        ]
    },
    "AWSRefactoringToolkitSidecarPolicy": {
        "permissions": [
            "s3:GetObject",
            "s3:ListBucket",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "AWSRefactoringToolkitFullAccess": {
        "permissions": [
            "a2c:GetContainerizationJobDetails",
            "a2c:GetDeploymentJobDetails",
            "a2c:StartContainerizationJob",
            "a2c:StartDeploymentJob",
            "application-transformation:GetContainerization",
            "application-transformation:GetDeployment",
            "application-transformation:GetPortingCompatibilityAssessment",
            "application-transformation:GetPortingRecommendationAssessment",
            "application-transformation:PutLogData",
            "application-transformation:PutMetricData",
            "application-transformation:StartContainerization",
            "application-transformation:StartDeployment",
            "application-transformation:StartPortingCompatibilityAssessment",
            "application-transformation:StartPortingRecommendationAssessment",
            "clouddirectory:ListDirectories",
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:ListStacks",
            "cloudformation:TagResource",
            "cloudformation:UntagResource",
            "cloudformation:UpdateStack",
            "codebuild:BatchGetBuilds",
            "codebuild:BatchGetProjects",
            "codebuild:CreateProject",
            "codebuild:StartBuild",
            "codebuild:UpdateProject",
            "ds:DescribeDirectories",
            "ec2:AssociateRouteTable",
            "ec2:AttachInternetGateway",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateInternetGateway",
            "ec2:CreateKeyPair",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVpc",
            "ec2:DeleteTags",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeImages",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:RevokeSecurityGroupIngress",
            "ecr:BatchCheckLayerAvailability",
            "ecr:CompleteLayerUpload",
            "ecr:CreateRepository",
            "ecr:DescribeImages",
            "ecr:DescribeRepositories",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:InitiateLayerUpload",
            "ecr:ListImages",
            "ecr:ListTagsForResource",
            "ecr:PutImage",
            "ecr:TagResource",
            "ecr:UntagResource",
            "ecr:UploadLayerPart",
            "ecs:CreateCluster",
            "ecs:CreateService",
            "ecs:DescribeClusters",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:DescribeTasks",
            "ecs:ExecuteCommand",
            "ecs:ListTagsForResource",
            "ecs:ListTasks",
            "ecs:RegisterTaskDefinition",
            "ecs:TagResource",
            "ecs:UntagResource",
            "ecs:UpdateService",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "logs:CreateLogGroup",
            "logs:GetLogEvents",
            "logs:TagResource",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetBucketVersioning",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "secretsmanager:ListSecrets",
            "ssm:AddTagsToResource",
            "ssm:DescribeSessions",
            "ssm:GetParameters",
            "ssm:PutParameter",
            "ssm:RemoveTagsFromResource",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "AWSResourceExplorerServiceRolePolicy": {
        "permissions": [
            "access-analyzer:ListAnalyzers",
            "acm-pca:ListCertificateAuthorities",
            "acm:ListCertificates",
            "airflow:ListEnvironments",
            "amplify:ListApps",
            "amplify:ListBackendEnvironments",
            "amplify:ListBranches",
            "amplify:ListDomainAssociations",
            "amplifyuibuilder:ListComponents",
            "amplifyuibuilder:ListThemes",
            "apigateway:GET",
            "app-integrations:ListEventIntegrations",
            "appconfig:ListApplications",
            "appconfig:ListDeploymentStrategies",
            "appflow:ListFlows",
            "appmesh:ListMeshes",
            "appmesh:ListVirtualNodes",
            "appmesh:ListVirtualServices",
            "apprunner:ListServices",
            "apprunner:ListVpcConnectors",
            "appstream:DescribeAppBlocks",
            "appstream:DescribeApplications",
            "appstream:DescribeFleets",
            "appstream:DescribeImageBuilders",
            "appstream:DescribeStacks",
            "appsync:ListGraphqlApis",
            "aps:ListRuleGroupsNamespaces",
            "aps:ListWorkspaces",
            "athena:ListDataCatalogs",
            "athena:ListWorkGroups",
            "auditmanager:GetAccountStatus",
            "auditmanager:ListAssessments",
            "autoscaling:DescribeAutoScalingGroups",
            "backup:ListBackupPlans",
            "backup:ListBackupVaults",
            "backup:ListReportPlans",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobQueues",
            "batch:ListSchedulingPolicies",
            "ce:GetAnomalyMonitors",
            "ce:GetAnomalySubscriptions",
            "cloudformation:ListStackSets",
            "cloudformation:ListStacks",
            "cloudfront:ListCachePolicies",
            "cloudfront:ListCloudFrontOriginAccessIdentities",
            "cloudfront:ListContinuousDeploymentPolicies",
            "cloudfront:ListDistributions",
            "cloudfront:ListFieldLevelEncryptionConfigs",
            "cloudfront:ListFieldLevelEncryptionProfiles",
            "cloudfront:ListFunctions",
            "cloudfront:ListOriginAccessControls",
            "cloudfront:ListOriginRequestPolicies",
            "cloudfront:ListRealtimeLogConfigs",
            "cloudfront:ListResponseHeadersPolicies",
            "cloudtrail:CreateServiceLinkedChannel",
            "cloudtrail:GetServiceLinkedChannel",
            "cloudtrail:ListChannels",
            "cloudtrail:ListTrails",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeInsightRules",
            "cloudwatch:ListDashboards",
            "cloudwatch:ListMetricStreams",
            "codeartifact:ListDomains",
            "codeartifact:ListRepositories",
            "codebuild:ListProjects",
            "codecommit:ListRepositories",
            "codedeploy:ListApplications",
            "codedeploy:ListDeploymentConfigs",
            "codeguru-profiler:ListProfilingGroups",
            "codeguru-reviewer:ListRepositoryAssociations",
            "codepipeline:ListPipelines",
            "codepipeline:ListWebhooks",
            "codestar-connections:ListConnections",
            "cognito-identity:ListIdentityPools",
            "cognito-idp:ListUserPools",
            "comprehend:ListDocumentClassifiers",
            "comprehend:ListEntityRecognizers",
            "connect:ListInstances",
            "connect:ListQuickConnects",
            "connect:ListUsers",
            "databrew:ListDatasets",
            "databrew:ListJobs",
            "databrew:ListProjects",
            "databrew:ListRecipes",
            "databrew:ListRulesets",
            "databrew:ListSchedules",
            "dataexchange:ListDataSets",
            "datasync:ListLocations",
            "datasync:ListTasks",
            "detective:ListGraphs",
            "dms:DescribeEndpoints",
            "dms:DescribeEventSubscriptions",
            "dms:DescribeReplicationInstances",
            "dms:DescribeReplicationSubnetGroups",
            "dms:DescribeReplicationTasks",
            "ds:DescribeDirectories",
            "dynamodb:ListStreams",
            "dynamodb:ListTables",
            "ec2:DescribeAddresses",
            "ec2:DescribeCapacityReservationFleets",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeCarrierGateways",
            "ec2:DescribeClientVpnEndpoints",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeEgressOnlyInternetGateways",
            "ec2:DescribeElasticGpus",
            "ec2:DescribeExportImageTasks",
            "ec2:DescribeExportTasks",
            "ec2:DescribeFleets",
            "ec2:DescribeFlowLogs",
            "ec2:DescribeFpgaImages",
            "ec2:DescribeHostReservations",
            "ec2:DescribeHosts",
            "ec2:DescribeImages",
            "ec2:DescribeImportImageTasks",
            "ec2:DescribeImportSnapshotTasks",
            "ec2:DescribeInstanceEventWindows",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeIpamPools",
            "ec2:DescribeIpamScopes",
            "ec2:DescribeIpams",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
            "ec2:DescribeNetworkInsightsAccessScopes",
            "ec2:DescribeNetworkInsightsAnalyses",
            "ec2:DescribeNetworkInsightsPaths",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribePublicIpv4Pools",
            "ec2:DescribeReservedInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSpotFleetRequests",
            "ec2:DescribeSpotInstanceRequests",
            "ec2:DescribeSubnets",
            "ec2:DescribeTrafficMirrorFilters",
            "ec2:DescribeTrafficMirrorSessions",
            "ec2:DescribeTrafficMirrorTargets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnectPeers",
            "ec2:DescribeTransitGatewayMulticastDomains",
            "ec2:DescribeTransitGatewayPolicyTables",
            "ec2:DescribeTransitGatewayRouteTableAnnouncements",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVerifiedAccessEndpoints",
            "ec2:DescribeVerifiedAccessGroups",
            "ec2:DescribeVerifiedAccessInstances",
            "ec2:DescribeVerifiedAccessTrustProviders",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetSubnetCidrReservations",
            "ecr-public:DescribeRepositories",
            "ecr:DescribeRepositories",
            "ecs:DescribeCapacityProviders",
            "ecs:DescribeServices",
            "ecs:ListClusters",
            "ecs:ListContainerInstances",
            "ecs:ListServices",
            "ecs:ListTaskDefinitions",
            "ecs:ListTasks",
            "eks:ListClusters",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeCacheParameterGroups",
            "elasticache:DescribeCacheSecurityGroups",
            "elasticache:DescribeCacheSubnetGroups",
            "elasticache:DescribeGlobalReplicationGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeReservedCacheNodes",
            "elasticache:DescribeSnapshots",
            "elasticache:DescribeUserGroups",
            "elasticache:DescribeUsers",
            "elasticbeanstalk:DescribeApplicationVersions",
            "elasticbeanstalk:DescribeApplications",
            "elasticbeanstalk:DescribeEnvironments",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticmapreduce:ListClusters",
            "emr-containers:ListVirtualClusters",
            "emr-serverless:ListApplications",
            "es:ListDomainNames",
            "events:ListArchives",
            "events:ListEndpoints",
            "events:ListEventBuses",
            "events:ListRules",
            "evidently:ListExperiments",
            "evidently:ListFeatures",
            "evidently:ListLaunches",
            "evidently:ListProjects",
            "finspace:ListEnvironments",
            "firehose:ListDeliveryStreams",
            "fis:ListExperimentTemplates",
            "forecast:ListDatasetGroups",
            "forecast:ListDatasets",
            "frauddetector:GetDetectors",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetLabels",
            "frauddetector:GetModels",
            "frauddetector:GetOutcomes",
            "frauddetector:GetVariables",
            "fsx:DescribeFileSystems",
            "gamelift:DescribeGameSessionQueues",
            "gamelift:DescribeMatchmakingConfigurations",
            "gamelift:DescribeMatchmakingRuleSets",
            "gamelift:ListAliases",
            "gamelift:ListBuilds",
            "gamelift:ListLocations",
            "geo:ListPlaceIndexes",
            "geo:ListTrackers",
            "glacier:ListVaults",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "glue:GetCrawlers",
            "glue:GetDatabases",
            "glue:GetJobs",
            "glue:GetTables",
            "glue:GetTriggers",
            "glue:ListMLTransforms",
            "greengrass:ListComponentVersions",
            "greengrass:ListComponents",
            "greengrass:ListConnectorDefinitions",
            "greengrass:ListCoreDefinitions",
            "greengrass:ListDeviceDefinitions",
            "greengrass:ListFunctionDefinitions",
            "greengrass:ListGroups",
            "greengrass:ListLoggerDefinitions",
            "greengrass:ListResourceDefinitions",
            "greengrass:ListSubscriptionDefinitions",
            "groundstation:ListConfigs",
            "groundstation:ListMissionProfiles",
            "guardduty:ListDetectors",
            "guardduty:ListFilters",
            "guardduty:ListIPSets",
            "guardduty:ListThreatIntelSets",
            "healthlake:ListFHIRDatastores",
            "iam:ListGroups",
            "iam:ListInstanceProfiles",
            "iam:ListOpenIDConnectProviders",
            "iam:ListPolicies",
            "iam:ListRoles",
            "iam:ListSAMLProviders",
            "iam:ListServerCertificates",
            "iam:ListUsers",
            "iam:ListVirtualMFADevices",
            "imagebuilder:ListComponentBuildVersions",
            "imagebuilder:ListComponents",
            "imagebuilder:ListContainerRecipes",
            "imagebuilder:ListDistributionConfigurations",
            "imagebuilder:ListImageBuildVersions",
            "imagebuilder:ListImagePipelines",
            "imagebuilder:ListImageRecipes",
            "imagebuilder:ListImages",
            "imagebuilder:ListInfrastructureConfigurations",
            "inspector:ListAssessmentTemplates",
            "iot:ListAuthorizers",
            "iot:ListCACertificates",
            "iot:ListCertificates",
            "iot:ListJobTemplates",
            "iot:ListMitigationpermissions",
            "iot:ListPolicies",
            "iot:ListProvisioningTemplates",
            "iot:ListRoleAliases",
            "iot:ListSecurityProfiles",
            "iot:ListThings",
            "iot:ListTopicRuleDestinations",
            "iot:ListTopicRules",
            "iotanalytics:ListChannels",
            "iotanalytics:ListDatasets",
            "iotanalytics:ListDatastores",
            "iotanalytics:ListPipelines",
            "iotdeviceadvisor:ListSuiteDefinitions",
            "iotevents:ListAlarmModels",
            "iotevents:ListDetectorModels",
            "iotevents:ListInputs",
            "iotfleetwise:ListDecoderManifests",
            "iotfleetwise:ListModelManifests",
            "iotfleetwise:ListSignalCatalogs",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListAssets",
            "iotsitewise:ListDashboards",
            "iotsitewise:ListGateways",
            "iotsitewise:ListPortals",
            "iotsitewise:ListProjects",
            "iottwinmaker:ListComponentTypes",
            "iottwinmaker:ListEntities",
            "iottwinmaker:ListScenes",
            "iottwinmaker:ListWorkspaces",
            "iotwireless:ListServiceProfiles",
            "ivs:ListChannels",
            "ivs:ListRecordingConfigurations",
            "ivs:ListStreamKeys",
            "kafka:ListClusters",
            "kafka:ListConfigurations",
            "kendra:ListIndices",
            "kinesis:ListStreamConsumers",
            "kinesis:ListStreams",
            "kinesisanalytics:ListApplications",
            "kinesisvideo:ListStreams",
            "kms:ListKeys",
            "lambda:ListAliases",
            "lambda:ListCodeSigningConfigs",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctions",
            "lambda:ListLayerVersions",
            "lambda:ListLayers",
            "lex:ListBotAliases",
            "lex:ListBots",
            "lightsail:GetBuckets",
            "lightsail:GetCertificates",
            "logs:DescribeDestinations",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "lookoutmetrics:ListAlerts",
            "lookoutvision:ListProjects",
            "macie2:ListCustomDataIdentifiers",
            "macie2:ListFindingsFilters",
            "managedblockchain:ListAccessors",
            "mediapackage-vod:ListPackagingConfigurations",
            "mediapackage-vod:ListPackagingGroups",
            "mediapackage:ListChannels",
            "mediapackage:ListOriginEndpoints",
            "mediatailor:ListPlaybackConfigurations",
            "memorydb:DescribeACLs",
            "memorydb:DescribeClusters",
            "memorydb:DescribeParameterGroups",
            "memorydb:DescribeSubnetGroups",
            "memorydb:DescribeUsers",
            "mobiletargeting:GetApps",
            "mobiletargeting:GetCampaigns",
            "mobiletargeting:GetSegments",
            "mobiletargeting:ListTemplates",
            "mq:ListBrokers",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "networkmanager:DescribeGlobalNetworks",
            "networkmanager:GetDevices",
            "networkmanager:GetLinks",
            "networkmanager:ListAttachments",
            "networkmanager:ListCoreNetworks",
            "oam:ListSinks",
            "omics:ListReferenceStores",
            "omics:ListRunGroups",
            "omics:ListWorkflows",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "panorama:ListPackages",
            "personalize:ListDatasetGroups",
            "personalize:ListDatasets",
            "personalize:ListSchemas",
            "personalize:ListSolutions",
            "pipes:ListPipes",
            "proton:ListEnvironmentAccountConnections",
            "qldb:ListJournalKinesisStreamsForLedger",
            "qldb:ListLedgers",
            "quicksight:DescribeAccountSubscription",
            "quicksight:ListDataSets",
            "quicksight:ListDataSources",
            "quicksight:ListTemplates",
            "ram:GetResourceShares",
            "rds:DescribeBlueGreenDeployments",
            "rds:DescribeDBClusterEndpoints",
            "rds:DescribeDBClusterParameterGroups",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBEngineVersions",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:DescribeDBParameterGroups",
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyEndpoints",
            "rds:DescribeDBSecurityGroups",
            "rds:DescribeDBSnapshots",
            "rds:DescribeDBSubnetGroups",
            "rds:DescribeEventSubscriptions",
            "rds:DescribeGlobalClusters",
            "rds:DescribeOptionGroups",
            "rds:DescribeReservedDBInstances",
            "redshift:DescribeClusterParameterGroups",
            "redshift:DescribeClusterSnapshots",
            "redshift:DescribeClusterSubnetGroups",
            "redshift:DescribeClusters",
            "redshift:DescribeEventSubscriptions",
            "redshift:DescribeSnapshotCopyGrants",
            "redshift:DescribeSnapshotSchedules",
            "redshift:DescribeUsageLimits",
            "refactor-spaces:ListApplications",
            "refactor-spaces:ListEnvironments",
            "refactor-spaces:ListRoutes",
            "refactor-spaces:ListServices",
            "rekognition:DescribeProjects",
            "resiliencehub:ListApps",
            "resiliencehub:ListResiliencyPolicies",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListViews",
            "resource-groups:ListGroups",
            "robomaker:ListRobotApplications",
            "robomaker:ListSimulationApplications",
            "route53-recovery-readiness:ListRecoveryGroups",
            "route53-recovery-readiness:ListResourceSets",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53domains:ListDomains",
            "route53resolver:ListFirewallDomainLists",
            "route53resolver:ListFirewallRuleGroups",
            "route53resolver:ListResolverEndpoints",
            "route53resolver:ListResolverQueryLogConfigs",
            "route53resolver:ListResolverRules",
            "s3:GetBucketLocation",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListStorageLensConfigurations",
            "sagemaker:ListDomains",
            "sagemaker:ListEndpoints",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListImages",
            "sagemaker:ListModels",
            "sagemaker:ListNotebookInstances",
            "sagemaker:ListPipelines",
            "scheduler:ListScheduleGroups",
            "scheduler:ListSchedules",
            "schemas:ListDiscoverers",
            "secretsmanager:ListSecrets",
            "servicecatalog:ListApplications",
            "servicecatalog:ListAttributeGroups",
            "ses:ListConfigurationSets",
            "ses:ListContactLists",
            "ses:ListEmailIdentities",
            "signer:ListSigningProfiles",
            "sns:ListTopics",
            "sqs:ListQueues",
            "ssm-incidents:ListResponsePlans",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeMaintenanceWindowTargets",
            "ssm:DescribeMaintenanceWindowTasks",
            "ssm:DescribeMaintenanceWindows",
            "ssm:DescribeParameters",
            "ssm:DescribePatchBaselines",
            "ssm:ListAssociations",
            "ssm:ListDocuments",
            "ssm:ListInventoryEntries",
            "ssm:ListResourceDataSync",
            "states:ListActivities",
            "states:ListStateMachines",
            "storagegateway:ListGateways",
            "timestream:ListDatabases",
            "transfer:ListCertificates",
            "transfer:ListConnectors",
            "transfer:ListProfiles",
            "transfer:ListWorkflows",
            "wisdom:ListAssistants",
            "wisdom:listAssistantAssociations",
            "wisdom:listKnowledgeBases",
            "workspaces:DescribeWorkspaces"
        ]
    },
    "AWSFaultInjectionSimulatorSSMAccess": {
        "permissions": [
            "iam:PassRole",
            "ssm:CancelCommand",
            "ssm:GetAutomationExecution",
            "ssm:ListCommands",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution"
        ]
    },
    "AWSFaultInjectionSimulatorRDSAccess": {
        "permissions": [
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:FailoverDBCluster",
            "rds:RebootDBInstance",
            "tag:GetResources"
        ]
    },
    "AWSFaultInjectionSimulatorNetworkAccess": {
        "permissions": [
            "ec2:AssociateRouteTable",
            "ec2:AssociateTransitGatewayRouteTable",
            "ec2:CreateManagedPrefixList",
            "ec2:CreateNetworkAcl",
            "ec2:CreateNetworkAclEntry",
            "ec2:CreateNetworkInterface",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateTags",
            "ec2:DeleteManagedPrefixList",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteRouteTable",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateTransitGatewayRouteTable",
            "ec2:GetManagedPrefixListEntries",
            "ec2:ModifyManagedPrefixList",
            "ec2:ModifyVpcEndpoint",
            "ec2:ReplaceNetworkAclAssociation",
            "ec2:ReplaceRouteTableAssociation"
        ]
    },
    "AWSFaultInjectionSimulatorEKSAccess": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "ec2:TerminateInstances",
            "eks:DescribeCluster",
            "eks:DescribeNodegroup",
            "tag:GetResources"
        ]
    },
    "AWSFaultInjectionSimulatorECSAccess": {
        "permissions": [
            "ecs:DescribeClusters",
            "ecs:DescribeTasks",
            "ecs:ListContainerInstances",
            "ecs:ListTasks",
            "ecs:StopTask",
            "ecs:UpdateContainerInstancesState",
            "ssm:CancelCommand",
            "ssm:ListCommands",
            "ssm:SendCommand",
            "tag:GetResources"
        ]
    },
    "AWSFaultInjectionSimulatorEC2Access": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:RebootInstances",
            "ec2:SendSpotInstanceInterruptions",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "kms:CreateGrant",
            "ssm:CancelCommand",
            "ssm:ListCommands",
            "ssm:SendCommand"
        ]
    },
    "AWSResourceExplorerReadOnlyAccess": {
        "permissions": [
            "ec2:DescribeRegions",
            "organizations:DescribeOrganization",
            "ram:GetResourceShares",
            "ram:ListResources",
            "resource-explorer-2:BatchGetView",
            "resource-explorer-2:Get*",
            "resource-explorer-2:List*",
            "resource-explorer-2:Search"
        ]
    },
    "AWSResourceExplorerFullAccess": {
        "permissions": [
            "ec2:DescribeRegions",
            "iam:CreateServiceLinkedRole",
            "organizations:DescribeOrganization",
            "ram:GetResourceShares",
            "ram:ListResources",
            "resource-explorer-2:*"
        ]
    },
    "AmazonWorkspacesPCAAccess": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate"
        ]
    },
    "AmazonGrafanaServiceLinkedRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs"
        ]
    },
    "AWSProtonCodeBuildProvisioningBasicAccess": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "proton:NotifyResourceDeploymentStatusChange"
        ]
    },
    "AWSProtonCodeBuildProvisioningServiceRolePolicy": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudformation:UpdateStack",
            "codebuild:BatchGetBuilds",
            "codebuild:BatchGetProjects",
            "codebuild:CreateProject",
            "codebuild:DeleteProject",
            "codebuild:RetryBuild",
            "codebuild:StartBuild",
            "codebuild:StopBuild",
            "codebuild:UpdateProject",
            "iam:PassRole",
            "servicequotas:GetServiceQuota"
        ]
    },
    "AmazonEventBridgeSchedulerFullAccess": {
        "permissions": [
            "iam:PassRole",
            "scheduler:*"
        ]
    },
    "AmazonEventBridgeSchedulerReadOnlyAccess": {
        "permissions": [
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:ListScheduleGroups",
            "scheduler:ListSchedules",
            "scheduler:ListTagsForResource"
        ]
    },
    "AWSBackupRestoreAccessForSAPHANA": {
        "permissions": [
            "backup:Describe*",
            "backup:Get*",
            "backup:List*",
            "backup:StartBackupJob",
            "backup:StartRestoreJob",
            "ssm-sap:BackupDatabase",
            "ssm-sap:GetDatabase",
            "ssm-sap:GetOperation",
            "ssm-sap:ListDatabases",
            "ssm-sap:ListTagsForResource",
            "ssm-sap:RestoreDatabase",
            "ssm-sap:UpdateHanaBackupSettings"
        ]
    },
    "AWSBackupDataTransferAccess": {
        "permissions": [
            "backup-storage:GetChunk",
            "backup-storage:GetObjectMetadata",
            "backup-storage:ListChunks",
            "backup-storage:ListObjects",
            "backup-storage:NotifyObjectComplete",
            "backup-storage:PutChunk",
            "backup-storage:StartObject"
        ]
    },
    "AWSServiceCatalogSyncServiceRolePolicy": {
        "permissions": [
            "cloudformation:ValidateTemplate",
            "codeconnections:UseConnection",
            "codestar-connections:UseConnection",
            "servicecatalog:CreateProvisioningArtifact",
            "servicecatalog:DeleteProvisioningArtifact",
            "servicecatalog:DescribeProductAsAdmin",
            "servicecatalog:DescribeProvisioningArtifact",
            "servicecatalog:ListProvisioningArtifacts",
            "servicecatalog:ListServicepermissionsForProvisioningArtifact",
            "servicecatalog:UpdateProvisioningArtifact"
        ]
    },
    "AWSSSMForSAPServiceLinkedRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSnapshots",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:CreateServiceLinkedRole",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:Tag",
            "servicecatalog:AssociateAttributeGroup",
            "servicecatalog:CreateApplication",
            "servicecatalog:CreateAttributeGroup",
            "servicecatalog:DeleteApplication",
            "servicecatalog:DeleteAttributeGroup",
            "servicecatalog:DisassociateAttributeGroup",
            "servicecatalog:GetApplication",
            "servicecatalog:GetAttributeGroup",
            "servicecatalog:ListAssociatedAttributeGroups",
            "servicecatalog:TagResource",
            "servicecatalog:UpdateApplication",
            "ssm:DescribeDocument",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:SendCommand"
        ]
    },
    "AWSSystemsManagerForSAPFullAccess": {
        "permissions": [
            "ec2:StartInstances",
            "ec2:StopInstances",
            "iam:CreateServiceLinkedRole",
            "ssm-sap:*"
        ]
    },
    "AWSSystemsManagerForSAPReadOnlyAccess": {
        "permissions": [
            "ssm-sap:get*",
            "ssm-sap:list*"
        ]
    },
    "AmazonOpenSearchIngestionServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints"
        ]
    },
    "AWSReachabilityAnalyzerServiceRolePolicy": {
        "permissions": [
            "apigateway:GET",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "resource-groups:ListGroupResources",
            "resource-groups:ListGroups",
            "tag:GetResources",
            "tiros:CreateQuery",
            "tiros:ExtendQuery",
            "tiros:GetQueryAnswer",
            "tiros:GetQueryExplanation",
            "tiros:GetQueryExtensionAccounts"
        ]
    },
    "AmazonOpenSearchServerlessServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSApplicationMigrationSSMAccess": {
        "permissions": [
            "ssm:DescribeDocument",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:GetDocument",
            "ssm:ListDocumentVersions",
            "ssm:ListDocuments",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution"
        ]
    },
    "OAMReadOnlyAccess": {
        "permissions": [
            "oam:Get*",
            "oam:List*"
        ]
    },
    "OAMFullAccess": {
        "permissions": [
            "oam:*"
        ]
    },
    "AWSXrayCrossAccountSharingConfiguration": {
        "permissions": [
            "oam:CreateLink",
            "oam:DeleteLink",
            "oam:GetLink",
            "oam:ListLinks",
            "oam:TagResource",
            "oam:UpdateLink",
            "xray:Link"
        ]
    },
    "CloudWatchLogsCrossAccountSharingConfiguration": {
        "permissions": [
            "logs:Link",
            "oam:CreateLink",
            "oam:DeleteLink",
            "oam:GetLink",
            "oam:ListLinks",
            "oam:TagResource",
            "oam:UpdateLink"
        ]
    },
    "CloudWatchCrossAccountSharingConfiguration": {
        "permissions": [
            "cloudwatch:Link",
            "oam:CreateLink",
            "oam:DeleteLink",
            "oam:GetLink",
            "oam:ListLinks",
            "oam:TagResource",
            "oam:UpdateLink"
        ]
    },
    "CloudWatchInternetMonitorServiceRolePolicy": {
        "permissions": [
            "cloudfront:GetDistribution",
            "cloudwatch:PutMetricData",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeLoadBalancers",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "workspaces:DescribeWorkspaceDirectories"
        ]
    },
    "AWSWickrFullAccess": {
        "permissions": [
            "wickr:*"
        ]
    },
    "AWSVPCVerifiedAccessServiceRolePolicy": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:ModifyNetworkInterfaceAttribute"
        ]
    },
    "AmazonOmicsReadOnlyAccess": {
        "permissions": [
            "omics:Get*",
            "omics:List*"
        ]
    },
    "SecurityLakeServiceLinkedRole": {
        "permissions": [
            "cloudtrail:CreateServiceLinkedChannel",
            "cloudtrail:DeleteServiceLinkedChannel",
            "cloudtrail:GetServiceLinkedChannel",
            "cloudtrail:ListServiceLinkedChannels",
            "cloudtrail:UpdateServiceLinkedChannel",
            "ec2:DescribeVpcs",
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "wafv2:DeleteLoggingConfiguration",
            "wafv2:GetLoggingConfiguration",
            "wafv2:ListLoggingConfigurations",
            "wafv2:ListWebACLs",
            "wafv2:PutLoggingConfiguration"
        ]
    },
    "AmazonSecurityLakePermissionsBoundary": {
        "permissions": [
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject",
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListQueues",
            "sqs:ReceiveMessage",
            "sqs:SendMessage"
        ]
    },
    "AmazonSageMakerModelGovernanceUseAccess": {
        "permissions": [
            "kms:ListAliases",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "sagemaker:AddTags",
            "sagemaker:CreateModelCard",
            "sagemaker:CreateModelCardExportJob",
            "sagemaker:DeleteModelCard",
            "sagemaker:DeleteTags",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelCard",
            "sagemaker:DescribeModelCardExportJob",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:ListModelCardExportJobs",
            "sagemaker:ListModelCardVersions",
            "sagemaker:ListModelCards",
            "sagemaker:ListModels",
            "sagemaker:ListMonitoringAlertHistory",
            "sagemaker:ListMonitoringAlerts",
            "sagemaker:ListMonitoringExecutions",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:Search",
            "sagemaker:StartMonitoringSchedule",
            "sagemaker:StopMonitoringSchedule",
            "sagemaker:UpdateModelCard",
            "sagemaker:UpdateMonitoringAlert"
        ]
    },
    "AmazonSageMakerGeospatialFullAccess": {
        "permissions": [
            "iam:PassRole",
            "sagemaker-geospatial:*"
        ]
    },
    "AmazonSageMakerGeospatialExecutionRole": {
        "permissions": [
            "s3:AbortMultipartUpload",
            "s3:GetObject",
            "s3:ListBucketMultipartUploads",
            "s3:PutObject",
            "sagemaker-geospatial:GetEarthObservationJob",
            "sagemaker-geospatial:GetRasterDataCollection"
        ]
    },
    "AmazonDocDB-ElasticServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSVpcLatticeServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses",
            "route53:AssociateVPCWithHostedZone"
        ]
    },
    "AmazonEventBridgePipesFullAccess": {
        "permissions": [
            "iam:PassRole",
            "pipes:*"
        ]
    },
    "AmazonEventBridgePipesReadOnlyAccess": {
        "permissions": [
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource"
        ]
    },
    "AmazonEventBridgePipesOperatorAccess": {
        "permissions": [
            "pipes:DescribePipe",
            "pipes:ListPipes",
            "pipes:ListTagsForResource",
            "pipes:StartPipe",
            "pipes:StopPipe"
        ]
    },
    "AWSServiceRoleForGroundStationDataflowEndpointGroupPolicy": {
        "permissions": [
            "ec2:DescribeAddresses",
            "ec2:DescribeNetworkInterfaces"
        ]
    },
    "AWSBackupGatewayServiceRolePolicyForVirtualMachineMetadataSync": {
        "permissions": [
            "backup-gateway:ListTagsForResource",
            "backup-gateway:TagResource",
            "backup-gateway:UntagResource"
        ]
    },
    "AWSManagedServices_DetectiveControlsConfig_ServiceRolePolicy": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackResources",
            "cloudformation:DescribeStacks",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:GetTemplateSummary",
            "cloudformation:UpdateTermination*",
            "config:DescribeAggregationAuthorizations",
            "config:PutAggregationAuthorization",
            "config:PutConfigRule",
            "config:TagResource",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObject",
            "s3:GetBucketAcl",
            "s3:GetBucketPolicy",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutBucketAcl",
            "s3:PutBucketLogging",
            "s3:PutBucketObjectLockConfiguration",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutObject"
        ]
    },
    "AWSLicenseManagerLinuxSubscriptionsServiceRolePolicy": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "kms:Decrypt",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListParents",
            "organizations:ListRoots",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AWSOutpostsAuthorizeServerPolicy": {
        "permissions": [
            "outposts:GetConnection",
            "outposts:StartConnection"
        ]
    },
    "AWSElasticDisasterRecoveryStagingAccountPolicy_v2": {
        "permissions": [
            "drs:CreateConvertedSnapshotForDrs",
            "drs:DescribeJobLogItems",
            "drs:DescribeJobs",
            "drs:DescribeRecoverySnapshots",
            "drs:DescribeSourceServers",
            "drs:GetReplicationConfiguration",
            "drs:IssueAgentCertificateForDrs",
            "ec2:ModifySnapshotAttribute"
        ]
    },
    "ResourceGroupsServiceRolePolicy": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "tag:GetResources"
        ]
    },
    "AWSCleanRoomsReadOnlyAccess": {
        "permissions": [
            "cleanrooms:BatchGet*",
            "cleanrooms:Get*",
            "cleanrooms:List*",
            "glue:BatchGetPartition",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSchema",
            "glue:GetSchemaVersion",
            "glue:GetTable",
            "glue:GetTables",
            "logs:GetQueryResults",
            "logs:StartQuery"
        ]
    },
    "AWSCleanRoomsFullAccess": {
        "permissions": [
            "cleanrooms:*",
            "glue:BatchGetPartition",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSchema",
            "glue:GetSchemaVersion",
            "glue:GetTable",
            "glue:GetTables",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListPolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:GetLogDelivery",
            "logs:GetQueryResults",
            "logs:ListLogDeliveries",
            "logs:PutResourcePolicy",
            "logs:StartQuery",
            "logs:UpdateLogDelivery",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject"
        ]
    },
    "AWSCleanRoomsFullAccessNoQuerying": {
        "permissions": [
            "cleanrooms:BatchGetCollaborationAnalysisTemplate",
            "cleanrooms:BatchGetSchema",
            "cleanrooms:BatchGetSchemaAnalysisRule",
            "cleanrooms:CreateAnalysisTemplate",
            "cleanrooms:CreateCollaboration",
            "cleanrooms:CreateConfiguredTable",
            "cleanrooms:CreateConfiguredTableAnalysisRule",
            "cleanrooms:CreateConfiguredTableAssociation",
            "cleanrooms:CreateMembership",
            "cleanrooms:DeleteAnalysisTemplate",
            "cleanrooms:DeleteCollaboration",
            "cleanrooms:DeleteConfiguredTable",
            "cleanrooms:DeleteConfiguredTableAnalysisRule",
            "cleanrooms:DeleteConfiguredTableAssociation",
            "cleanrooms:DeleteMember",
            "cleanrooms:DeleteMembership",
            "cleanrooms:GetAnalysisTemplate",
            "cleanrooms:GetCollaboration",
            "cleanrooms:GetCollaborationAnalysisTemplate",
            "cleanrooms:GetConfiguredTable",
            "cleanrooms:GetConfiguredTableAnalysisRule",
            "cleanrooms:GetConfiguredTableAssociation",
            "cleanrooms:GetMembership",
            "cleanrooms:GetProtectedQuery",
            "cleanrooms:GetSchema",
            "cleanrooms:GetSchemaAnalysisRule",
            "cleanrooms:ListAnalysisTemplates",
            "cleanrooms:ListCollaborationAnalysisTemplates",
            "cleanrooms:ListCollaborations",
            "cleanrooms:ListConfiguredTableAssociations",
            "cleanrooms:ListConfiguredTables",
            "cleanrooms:ListMembers",
            "cleanrooms:ListMemberships",
            "cleanrooms:ListProtectedQueries",
            "cleanrooms:ListSchemas",
            "cleanrooms:ListTagsForResource",
            "cleanrooms:StartProtectedQuery",
            "cleanrooms:TagResource",
            "cleanrooms:UntagResource",
            "cleanrooms:UpdateAnalysisTemplate",
            "cleanrooms:UpdateCollaboration",
            "cleanrooms:UpdateConfiguredTable",
            "cleanrooms:UpdateConfiguredTableAnalysisRule",
            "cleanrooms:UpdateConfiguredTableAssociation",
            "cleanrooms:UpdateMembership",
            "cleanrooms:UpdateProtectedQuery",
            "glue:BatchGetPartition",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSchema",
            "glue:GetSchemaVersion",
            "glue:GetTable",
            "glue:GetTables",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListPolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:GetLogDelivery",
            "logs:GetQueryResults",
            "logs:ListLogDeliveries",
            "logs:PutResourcePolicy",
            "logs:StartQuery",
            "logs:UpdateLogDelivery"
        ]
    },
    "AWSHealth_EventProcessorServiceRolePolicy": {
        "permissions": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets"
        ]
    },
    "AmazonDetectiveMemberAccess": {
        "permissions": [
            "detective:AcceptInvitation",
            "detective:BatchGetMembershipDatasources",
            "detective:DisassociateMembership",
            "detective:GetFreeTrialEligibility",
            "detective:GetPricingInformation",
            "detective:GetUsageInformation",
            "detective:ListInvitations",
            "detective:RejectInvitation"
        ]
    },
    "AmazonDetectiveInvestigatorAccess": {
        "permissions": [
            "detective:BatchGetGraphMemberDatasources",
            "detective:BatchGetMembershipDatasources",
            "detective:DescribeOrganizationConfiguration",
            "detective:GetFreeTrialEligibility",
            "detective:GetGraphIngestState",
            "detective:GetInvestigation",
            "detective:GetMembers",
            "detective:GetPricingInformation",
            "detective:GetUsageInformation",
            "detective:InvokeAssistant",
            "detective:ListDatasourcePackages",
            "detective:ListGraphs",
            "detective:ListHighDegreeEntities",
            "detective:ListIndicators",
            "detective:ListInvestigations",
            "detective:ListInvitations",
            "detective:ListMembers",
            "detective:ListOrganizationAdminAccount",
            "detective:ListTagsForResource",
            "detective:SearchGraph",
            "detective:StartInvestigation",
            "detective:UpdateInvestigationState",
            "guardduty:ArchiveFindings",
            "guardduty:GetFindings",
            "guardduty:ListDetectors",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "securityHub:GetFindings"
        ]
    },
    "Ec2InstanceConnectEndpoint": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNetworkInterfaces",
            "ec2:ModifyNetworkInterfaceAttribute"
        ]
    },
    "AmazonCognitoUnauthenticatedIdentities": {
        "permissions": [
            "rum:PutRumEvents"
        ]
    },
    "AWSManagedServices_EventsServiceRolePolicy": {
        "permissions": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets"
        ]
    },
    "AWSPrivateCAUser": {
        "permissions": [
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:RevokeCertificate"
        ]
    },
    "AWSPrivateCAFullAccess": {
        "permissions": [
            "acm-pca:*"
        ]
    },
    "AWSPrivateCAPrivilegedUser": {
        "permissions": [
            "acm-pca:GetCertificate",
            "acm-pca:IssueCertificate",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:RevokeCertificate"
        ]
    },
    "AWSPrivateCAReadOnly": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:GetCertificate",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:GetPolicy",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags"
        ]
    },
    "AWSPrivateCAAuditor": {
        "permissions": [
            "acm-pca:CreateCertificateAuthorityAuditReport",
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:DescribeCertificateAuthorityAuditReport",
            "acm-pca:GetCertificate",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:GetPolicy",
            "acm-pca:ListCertificateAuthorities",
            "acm-pca:ListPermissions",
            "acm-pca:ListTags"
        ]
    },
    "AmazonOmicsFullAccess": {
        "permissions": [
            "iam:PassRole",
            "omics:*",
            "ram:AcceptResourceShareInvitation",
            "ram:GetResourceShareInvitations"
        ]
    },
    "AWSSupplyChainFederationAdminAccess": {
        "permissions": [
            "appflow:CreateConnectorProfile",
            "appflow:CreateFlow",
            "appflow:DeleteConnectorProfile",
            "appflow:DeleteFlow",
            "appflow:DescribeFlow",
            "appflow:DescribeFlowExecutionRecords",
            "appflow:ListFlows",
            "appflow:StartFlow",
            "appflow:StopFlow",
            "appflow:TagResource",
            "appflow:UntagResource",
            "appflow:UpdateConnectorProfile",
            "appflow:UpdateFlow",
            "appflow:UseConnectorProfile",
            "chime:BatchCreateChannelMembership",
            "chime:Connect",
            "chime:CreateAppInstanceUser",
            "chime:CreateChannel",
            "chime:CreateChannelMembership",
            "chime:CreateChannelModerator",
            "chime:DeleteChannelMembership",
            "chime:DeleteChannelModerator",
            "chime:DescribeChannel",
            "chime:DescribeChannelMembershipForAppInstanceUser",
            "chime:GetChannelMembershipPreferences",
            "chime:GetMessagingSessionEndpoint",
            "chime:ListChannelMemberships",
            "chime:ListChannelMembershipsForAppInstanceUser",
            "chime:ListChannelMessages",
            "chime:ListChannelModerators",
            "chime:PutChannelMembershipPreferences",
            "chime:SendChannelMessage",
            "chime:TagResource",
            "chime:UpdateAppInstanceUser",
            "chime:UpdateChannelReadMarker",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:ListAliases",
            "kms:ListGrants",
            "kms:ListKeys",
            "s3:GetBucketLocation",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "scn:*",
            "secretsmanager:CreateSecret",
            "secretsmanager:PutResourcePolicy",
            "sso:AssociateProfile",
            "sso:DescribeApplication",
            "sso:DescribeInstance",
            "sso:DisassociateProfile",
            "sso:GetApplicationAssignmentConfiguration",
            "sso:GetManagedApplicationInstance",
            "sso:GetProfile",
            "sso:ListApplicationAssignments",
            "sso:ListDirectoryAssociations",
            "sso:ListProfileAssociations",
            "sso:ListProfiles"
        ]
    },
    "AmazonDetectiveOrganizationsAccess": {
        "permissions": [
            "detective:DisableOrganizationAdminAccount",
            "detective:EnableOrganizationAdminAccount",
            "detective:ListOrganizationAdminAccount",
            "iam:CreateServiceLinkedRole",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "organizations:RegisterDelegatedAdministrator"
        ]
    },
    "AmazonChimeSDKMessagingServiceRolePolicy": {
        "permissions": [
            "kinesis:DescribeStream",
            "kinesis:PutRecord",
            "kinesis:PutRecords",
            "kms:GenerateDataKey"
        ]
    },
    "AWSDMSFleetAdvisorServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "CustomerProfilesServiceLinkedRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "connect-campaigns:PutProfileOutboundRequestBatch",
            "iam:DeleteRole",
            "profile:BatchGetProfile"
        ]
    },
    "AWSDataSyncDiscoveryServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "secretsmanager:GetSecretValue"
        ]
    },
    "MediaConnectGatewayInstanceRolePolicy": {
        "permissions": [
            "mediaconnect:DiscoverGatewayPollEndpoint",
            "mediaconnect:PollGateway",
            "mediaconnect:SubmitGatewayStateChange"
        ]
    },
    "AWSManagedServices_ContactsServiceRolePolicy": {
        "permissions": [
            "ec2:DescribeTags",
            "iam:ListRoleTags",
            "iam:ListUserTags",
            "s3:GetBucketTagging",
            "tag:GetResources"
        ]
    },
    "AmazonSageMakerCanvasAIServicesAccess": {
        "permissions": [
            "bedrock:CreateModelCustomizationJob",
            "bedrock:CreateProvisionedModelThroughput",
            "bedrock:DeleteProvisionedModelThroughput",
            "bedrock:GetCustomModel",
            "bedrock:GetModelCustomizationJob",
            "bedrock:GetProvisionedModelThroughput",
            "bedrock:InvokeModel",
            "bedrock:InvokeModelWithResponseStream",
            "bedrock:ListFoundationModels",
            "bedrock:StopModelCustomizationJob",
            "bedrock:TagResource",
            "comprehend:BatchDetectDominantLanguage",
            "comprehend:BatchDetectEntities",
            "comprehend:BatchDetectSentiment",
            "comprehend:DetectDominantLanguage",
            "comprehend:DetectEntities",
            "comprehend:DetectPiiEntities",
            "comprehend:DetectSentiment",
            "iam:PassRole",
            "rekognition:DetectLabels",
            "rekognition:DetectText",
            "textract:AnalyzeDocument",
            "textract:AnalyzeExpense",
            "textract:AnalyzeID",
            "textract:GetDocumentAnalysis",
            "textract:GetExpenseAnalysis",
            "textract:StartDocumentAnalysis",
            "textract:StartExpenseAnalysis"
        ]
    },
    "AWSServiceRoleForCodeWhispererPolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "codeguru-security:CreateScan",
            "codeguru-security:CreateUploadUrl",
            "codeguru-security:GetFindings",
            "codeguru-security:GetScan",
            "codeguru-security:ListFindings",
            "sso-directory:ListMembersInGroup",
            "sso:DescribeApplication",
            "sso:DescribeInstance",
            "sso:DescribeRegisteredRegions",
            "sso:GetManagedApplicationInstance",
            "sso:GetProfile",
            "sso:ListApplicationAssignments",
            "sso:ListDirectoryAssociations",
            "sso:ListProfileAssociations",
            "sso:ListProfiles"
        ]
    },
    "AmazonGrafanaCloudWatchAccess": {
        "permissions": [
            "cloudwatch:DescribeAlarmHistory",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:DescribeAlarmsForMetric",
            "cloudwatch:GetInsightRuleReport",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "ec2:DescribeTags",
            "logs:DescribeLogGroups",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetQueryResults",
            "logs:StartQuery",
            "logs:StopQuery",
            "oam:ListAttachedLinks",
            "oam:ListSinks",
            "tag:GetResources"
        ]
    },
    "AWSGroundStationAgentInstancePolicy": {
        "permissions": [
            "groundstation:GetAgentConfiguration",
            "groundstation:RegisterAgent",
            "groundstation:UpdateAgentStatus"
        ]
    },
    "VPCLatticeServicesInvokeAccess": {
        "permissions": [
            "vpc-lattice-svcs:Invoke"
        ]
    },
    "VPCLatticeReadOnlyAccess": {
        "permissions": [
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "cloudwatch:GetMetricData",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeLoadBalancers",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "lambda:ListAliases",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction",
            "logs:DescribeLogGroups",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "s3:ListAllMyBuckets",
            "vpc-lattice:Get*",
            "vpc-lattice:List*"
        ]
    },
    "VPCLatticeFullAccess": {
        "permissions": [
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeInstances",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeLoadBalancers",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteServiceLinkedRole",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "lambda:ListAliases",
            "lambda:ListFunctions",
            "lambda:ListVersionsByFunction",
            "logs:CreateLogDelivery",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeResourcePolicies",
            "logs:GetLogDelivery",
            "logs:ListLogDeliveries",
            "logs:UpdateLogDelivery",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "s3:ListAllMyBuckets",
            "vpc-lattice:*"
        ]
    },
    "AWSMigrationHubRefactorSpaces-EnvironmentsWithoutBridgesFullAccess": {
        "permissions": [
            "apigateway:DELETE",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "apigateway:UpdateRestApiPolicy",
            "cloudformation:CreateStack",
            "cloudformation:TagResource",
            "ec2:CreateVpcEndpointServiceConfiguration",
            "ec2:DeleteTags",
            "ec2:DeleteVpcEndpointServiceConfigurations",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:RegisterTargets",
            "iam:CreateServiceLinkedRole",
            "organizations:DescribeOrganization",
            "refactor-spaces:*"
        ]
    },
    "AWSMediaConnectServicePolicy": {
        "permissions": [
            "ecs:CreateCluster",
            "ecs:CreateService",
            "ecs:DeleteAttributes",
            "ecs:DeleteService",
            "ecs:DeregisterContainerInstance",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeServices",
            "ecs:DescribeTasks",
            "ecs:ListAttributes",
            "ecs:ListContainerInstances",
            "ecs:ListTasks",
            "ecs:PutAttributes",
            "ecs:RegisterTaskDefinition",
            "ecs:RunTask",
            "ecs:StartTask",
            "ecs:StopTask",
            "ecs:UpdateCluster",
            "ecs:UpdateClusterSettings",
            "ecs:UpdateContainerInstancesState",
            "ecs:UpdateService"
        ]
    },
    "AWSProtonServiceGitSyncServiceRolePolicy": {
        "permissions": [
            "proton:CreateComponent",
            "proton:CreateEnvironment",
            "proton:CreateServiceInstance",
            "proton:GetComponent",
            "proton:GetEnvironment",
            "proton:GetService",
            "proton:GetServiceInstance",
            "proton:ListComponents",
            "proton:ListEnvironments",
            "proton:ListServiceInstances",
            "proton:UpdateComponent",
            "proton:UpdateEnvironment",
            "proton:UpdateService",
            "proton:UpdateServiceInstance",
            "proton:UpdateServicePipeline"
        ]
    },
    "AWSServiceCatalogOrgsDataSyncServiceRolePolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListParents"
        ]
    },
    "AmazonSageMakerModelRegistryFullAccess": {
        "permissions": [
            "ecr:BatchGetImage",
            "ecr:DescribeImages",
            "iam:PassRole",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroupQuery",
            "resource-groups:ListGroupResources",
            "resource-groups:Tag",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "sagemaker:AddTags",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeleteTags",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackages",
            "sagemaker:Search",
            "sagemaker:UpdateModelPackage",
            "tag:GetResources"
        ]
    },
    "AWSUserNotificationsServiceLinkedRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "organizations:ListParents"
        ]
    },
    "AmazonCodeCatalystSupportAccess": {
        "permissions": [
            "support:AddAttachmentsToSet",
            "support:AddCommunicationToCase",
            "support:CreateCase",
            "support:DescribeAttachment",
            "support:DescribeCaseAttributes",
            "support:DescribeCases",
            "support:DescribeCommunications",
            "support:DescribeIssueTypes",
            "support:DescribeServices",
            "support:DescribeSeverityLevels",
            "support:DescribeSupportLevel",
            "support:InitiateCallForCase",
            "support:InitiateChatForCase",
            "support:PutCaseAttributes",
            "support:RateCaseCommunication",
            "support:ResolveCase",
            "support:SearchForCases"
        ]
    },
    "AmazonCodeCatalystReadOnlyAccess": {
        "permissions": [
            "codecatalyst:Get*",
            "codecatalyst:List*"
        ]
    },
    "AmazonCodeCatalystFullAccess": {
        "permissions": [
            "codecatalyst:*",
            "iam:ListRoles",
            "iam:PassRole"
        ]
    },
    "ROSACloudNetworkConfigOperatorPolicy": {
        "permissions": [
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses"
        ]
    },
    "ROSAWorkerInstancePolicy": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeRegions"
        ]
    },
    "ROSAAmazonEBSCSIDriverOperatorPolicy": {
        "permissions": [
            "ec2:AttachVolume",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteSnapshot",
            "ec2:DeleteVolume",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DetachVolume",
            "ec2:ModifyVolume"
        ]
    },
    "ROSAIngressOperatorPolicy": {
        "permissions": [
            "elasticloadbalancing:DescribeLoadBalancers",
            "route53:ChangeResourceRecordSets",
            "route53:ListHostedZones",
            "tag:GetResources"
        ]
    },
    "ROSAControlPlaneOperatorPolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyVpcEndpoint",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "route53:ChangeResourceRecordSets",
            "route53:ListHostedZones",
            "route53:ListResourceRecordSets"
        ]
    },
    "AmazonOpenSearchIngestionReadOnlyAccess": {
        "permissions": [
            "osis:GetPipeline",
            "osis:GetPipelineBlueprint",
            "osis:GetPipelineChangeProgress",
            "osis:ListPipelineBlueprints",
            "osis:ListPipelines",
            "osis:ListTagsForResource"
        ]
    },
    "AmazonOpenSearchIngestionFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "osis:CreatePipeline",
            "osis:DeletePipeline",
            "osis:GetPipeline",
            "osis:GetPipelineBlueprint",
            "osis:GetPipelineChangeProgress",
            "osis:ListPipelineBlueprints",
            "osis:ListPipelines",
            "osis:ListTagsForResource",
            "osis:StartPipeline",
            "osis:StopPipeline",
            "osis:TagResource",
            "osis:UntagResource",
            "osis:UpdatePipeline",
            "osis:ValidatePipeline"
        ]
    },
    "AWSWellArchitectedDiscoveryServiceRolePolicy": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "resource-groups:ListGroupResources",
            "servicecatalog:AssociateAttributeGroup",
            "servicecatalog:CreateAttributeGroup",
            "servicecatalog:DeleteAttributeGroup",
            "servicecatalog:DisassociateAttributeGroup",
            "servicecatalog:GetApplication",
            "servicecatalog:ListAssociatedResources",
            "servicecatalog:UpdateAttributeGroup",
            "tag:GetResources",
            "trustedadvisor:DescribeCheckItems",
            "trustedadvisor:DescribeChecks"
        ]
    },
    "ROSAKubeControllerPolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupIngress",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
            "elasticloadbalancing:AttachLoadBalancerToSubnets",
            "elasticloadbalancing:ConfigureHealthCheck",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateLoadBalancerListeners",
            "elasticloadbalancing:CreateLoadBalancerPolicy",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DeleteListener",
            "elasticloadbalancing:DeleteLoadBalancer",
            "elasticloadbalancing:DeleteLoadBalancerListeners",
            "elasticloadbalancing:DeleteTargetGroup",
            "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "elasticloadbalancing:DetachLoadBalancerFromSubnets",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:ModifyLoadBalancerAttributes",
            "elasticloadbalancing:ModifyTargetGroup",
            "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
            "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
            "kms:DescribeKey"
        ]
    },
    "ROSAKMSProviderPolicy": {
        "permissions": [
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt"
        ]
    },
    "ROSAImageRegistryOperatorPolicy": {
        "permissions": [
            "s3:AbortMultipartUpload",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:GetBucketLocation",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:ListBucketMultipartUploads",
            "s3:ListMultipartUploadParts",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject"
        ]
    },
    "AmazonVPCReachabilityAnalyzerPathComponentReadPolicy": {
        "permissions": [
            "network-firewall:Describe*",
            "network-firewall:List*"
        ]
    },
    "KeyspacesReplicationServiceRolePolicy": {
        "permissions": [
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:RegisterScalableTarget",
            "cassandra:Alter",
            "cassandra:AlterMultiRegionResource",
            "cassandra:Modify",
            "cassandra:ModifyMultiRegionResource",
            "cassandra:Select",
            "cassandra:SelectMultiRegionResource",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm"
        ]
    },
    "AmazonCodeGuruSecurityScanAccess": {
        "permissions": [
            "codeguru-security:CreateScan",
            "codeguru-security:CreateUploadUrl",
            "codeguru-security:GetFindings",
            "codeguru-security:GetScan"
        ]
    },
    "AmazonCodeGuruSecurityFullAccess": {
        "permissions": [
            "codeguru-security:*"
        ]
    },
    "AWSFinSpaceServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSElasticDisasterRecoveryCrossAccountReplicationPolicy": {
        "permissions": [
            "drs:CreateSourceServerForDrs",
            "drs:DescribeReplicationConfigurationTemplates",
            "drs:DescribeSourceServers",
            "drs:TagResource",
            "ec2:DescribeInstances",
            "ec2:DescribeVolumeAttribute",
            "ec2:DescribeVolumes"
        ]
    },
    "AWSDMSServerlessServiceRolePolicy": {
        "permissions": [
            "dms:CreateReplicationInstance",
            "dms:CreateReplicationTask",
            "dms:DeleteConnection",
            "dms:DeleteReplicationInstance",
            "dms:DeleteReplicationTask",
            "dms:DescribeReplicationInstances",
            "dms:DescribeReplicationTasks",
            "dms:ModifyReplicationInstance",
            "dms:ModifyReplicationTask",
            "dms:StartReplicationTask",
            "dms:StopReplicationTask",
            "dms:TestConnection"
        ]
    },
    "AmazonSecurityLakeAdministrator": {
        "permissions": [
            "events:CreateApiDestination",
            "events:CreateConnection",
            "events:DeleteApiDestination",
            "events:DeleteConnection",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListApiDestinations",
            "events:ListConnections",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "events:UpdateApiDestination",
            "events:UpdateConnection",
            "glue:CreateCrawler",
            "glue:CreateDatabase",
            "glue:CreateTable",
            "glue:GetDatabase",
            "glue:GetTable",
            "glue:StopCrawlerSchedule",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "iam:PutRolePolicy",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "lakeformation:GetDatalakeSettings",
            "lakeformation:GrantPermissions",
            "lakeformation:ListPermissions",
            "lakeformation:RegisterResource",
            "lakeformation:RevokePermissions",
            "lambda:AddPermission",
            "lambda:CreateEventSourceMapping",
            "lambda:CreateFunction",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedServicesForAccount",
            "ram:AssociateResourceShare",
            "ram:CreateResourceShare",
            "ram:DeleteResourceShare",
            "ram:DisassociateResourceShare",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares",
            "ram:UpdateResourceShare",
            "s3:CreateBucket",
            "s3:Get*",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketNotification",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:List*",
            "s3:ListAccessPoints",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketNotification",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "s3:PutReplicationConfiguration",
            "secretsmanager:CreateSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "securitylake:*",
            "sqs:AddPermission",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueURL",
            "sqs:SetQueueAttributes"
        ]
    },
    "ROSASRESupportPolicy": {
        "permissions": [
            "cloudtrail:DescribeTrails",
            "cloudtrail:LookupEvents",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAddressesAttribute",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRegions",
            "ec2:DescribeReservedInstances",
            "ec2:DescribeRouteTables",
            "ec2:DescribeScheduledInstances",
            "ec2:DescribeSecurityGroupReferences",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSpotFleetInstances",
            "ec2:DescribeStaleSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumeAttribute",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DescribeVolumesModifications",
            "ec2:DescribeVpcEndpointConnections",
            "ec2:DescribeVpcEndpoints",
            "ec2:RebootInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "elasticloadbalancing:DescribeAccountLimits",
            "elasticloadbalancing:DescribeInstanceHealth",
            "elasticloadbalancing:DescribeListenerCertificates",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancerPolicies",
            "elasticloadbalancing:DescribeLoadBalancerPolicyTypes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeSSLPolicies",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:ListRoles",
            "route53:GetHostedZone",
            "route53:GetHostedZoneCount",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListResourceRecordSets",
            "sts:DecodeAuthorizationMessage"
        ]
    },
    "AmazonDocDBElasticFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "docdb-elastic:CopyClusterSnapshot",
            "docdb-elastic:CreateCluster",
            "docdb-elastic:CreateClusterSnapshot",
            "docdb-elastic:DeleteCluster",
            "docdb-elastic:DeleteClusterSnapshot",
            "docdb-elastic:GetCluster",
            "docdb-elastic:GetClusterSnapshot",
            "docdb-elastic:ListClusterSnapshots",
            "docdb-elastic:ListClusters",
            "docdb-elastic:ListTagsForResource",
            "docdb-elastic:RestoreClusterFromSnapshot",
            "docdb-elastic:StartCluster",
            "docdb-elastic:StopCluster",
            "docdb-elastic:TagResource",
            "docdb-elastic:UntagResource",
            "docdb-elastic:UpdateCluster",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteVpcEndpoints",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyVpcEndpoint",
            "iam:CreateServiceLinkedRole",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:ListSecrets"
        ]
    },
    "AWSControlTowerAccountServiceRolePolicy": {
        "permissions": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:DisableRule",
            "events:EnableRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "securityhub:DescribeStandardsControls",
            "securityhub:GetEnabledStandards",
            "sns:publish"
        ]
    },
    "ROSAInstallerPolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeRegions",
            "ec2:DescribeReservedInstancesOfferings",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroupRules",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:GetConsoleOutput",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "elasticloadbalancing:DescribeAccountLimits",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:DeleteInstanceProfile",
            "iam:GetInstanceProfile",
            "iam:GetOpenIDConnectProvider",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:TagInstanceProfile",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:GenerateDataKeyWithoutPlaintext",
            "route53:ChangeResourceRecordSets",
            "route53:ChangeTagsForResource",
            "route53:CreateHostedZone",
            "route53:DeleteHostedZone",
            "route53:GetAccountLimit",
            "route53:GetHostedZone",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListResourceRecordSets",
            "secretsmanager:GetSecretValue",
            "servicequotas:GetServiceQuota"
        ]
    },
    "AmazonDocDBElasticReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "docdb-elastic:GetCluster",
            "docdb-elastic:GetClusterSnapshot",
            "docdb-elastic:ListClusterSnapshots",
            "docdb-elastic:ListClusters",
            "docdb-elastic:ListTagsForResource"
        ]
    },
    "ROSANodePoolManagementPolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateTags",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "kms:GenerateDataKeyWithoutPlaintext"
        ]
    },
    "AWSElasticDisasterRecoveryNetworkReplicationPolicy": {
        "permissions": [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcs",
            "ec2:GetManagedPrefixListAssociations",
            "ec2:GetManagedPrefixListEntries"
        ]
    },
    "AmazonVPCReachabilityAnalyzerFullAccessPolicy": {
        "permissions": [
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:CreateNetworkInsightsPath",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInsightsAnalysis",
            "ec2:DeleteNetworkInsightsPath",
            "ec2:DeleteTags",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInsightsAnalyses",
            "ec2:DescribeNetworkInsightsPaths",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "ec2:StartNetworkInsightsAnalysis",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListCustomRoutingAccelerators",
            "globalaccelerator:ListCustomRoutingEndpointGroups",
            "globalaccelerator:ListCustomRoutingListeners",
            "globalaccelerator:ListCustomRoutingPortMappings",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "tiros:CreateQuery",
            "tiros:ExtendQuery",
            "tiros:GetQueryAnswer",
            "tiros:GetQueryExplanation",
            "tiros:GetQueryExtensionAccounts"
        ]
    },
    "AmazonMacieReadOnlyAccess": {
        "permissions": [
            "macie2:BatchGetCustomDataIdentifiers",
            "macie2:Describe*",
            "macie2:Get*",
            "macie2:List*",
            "macie2:SearchResources"
        ]
    },
    "AmazonVPCNetworkAccessAnalyzerFullAccessPolicy": {
        "permissions": [
            "directconnect:DescribeConnections",
            "directconnect:DescribeDirectConnectGatewayAssociations",
            "directconnect:DescribeDirectConnectGatewayAttachments",
            "directconnect:DescribeDirectConnectGateways",
            "directconnect:DescribeVirtualGateways",
            "directconnect:DescribeVirtualInterfaces",
            "ec2:CreateNetworkInsightsAccessScope",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInsightsAccessScope",
            "ec2:DeleteNetworkInsightsAccessScopeAnalysis",
            "ec2:DeleteTags",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeManagedPrefixLists",
            "ec2:DescribeNatGateways",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInsightsAccessScopeAnalyses",
            "ec2:DescribeNetworkInsightsAccessScopes",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePrefixLists",
            "ec2:DescribeRegions",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpcEndpointServiceConfigurations",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:DescribeVpnConnections",
            "ec2:DescribeVpnGateways",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeAnalysisFindings",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes",
            "ec2:StartNetworkInsightsAccessScopeAnalysis",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancerAttributes",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeRules",
            "elasticloadbalancing:DescribeTags",
            "elasticloadbalancing:DescribeTargetGroupAttributes",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "globalaccelerator:ListAccelerators",
            "globalaccelerator:ListCustomRoutingAccelerators",
            "globalaccelerator:ListCustomRoutingEndpointGroups",
            "globalaccelerator:ListCustomRoutingListeners",
            "globalaccelerator:ListCustomRoutingPortMappings",
            "globalaccelerator:ListEndpointGroups",
            "globalaccelerator:ListListeners",
            "network-firewall:DescribeFirewall",
            "network-firewall:DescribeFirewallPolicy",
            "network-firewall:DescribeResourcePolicy",
            "network-firewall:DescribeRuleGroup",
            "network-firewall:ListFirewallPolicies",
            "network-firewall:ListFirewalls",
            "network-firewall:ListRuleGroups",
            "resource-groups:ListGroupResources",
            "tag:GetResources",
            "tiros:CreateQuery",
            "tiros:GetQueryAnswer"
        ]
    },
    "EMRDescribeClusterPolicyForEMRWAL": {
        "permissions": [
            "elasticmapreduce:DescribeCluster"
        ]
    },
    "AWSAppFabricServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "firehose:PutRecordBatch",
            "s3:PutObject"
        ]
    },
    "AWSResilienceHubAsssessmentExecutionPolicy": {
        "permissions": [
            "apigateway:GET",
            "application-autoscaling:DescribeScalableTargets",
            "autoscaling:DescribeAutoScalingGroups",
            "backup:DescribeBackupVault",
            "backup:GetBackupPlan",
            "backup:GetBackupSelection",
            "backup:ListBackupPlans",
            "backup:ListBackupSelections",
            "cloudformation:DescribeStacks",
            "cloudformation:ListStackResources",
            "cloudformation:ValidateTemplate",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricData",
            "datasync:DescribeTask",
            "datasync:ListLocations",
            "datasync:ListTasks",
            "devops-guru:ListMonitoredResources",
            "dlm:GetLifecyclePolicies",
            "dlm:GetLifecyclePolicy",
            "docdb-elastic:GetCluster",
            "docdb-elastic:GetClusterSnapshot",
            "docdb-elastic:ListClusterSnapshots",
            "docdb-elastic:ListTagsForResource",
            "drs:DescribeJobs",
            "drs:DescribeSourceServers",
            "drs:GetReplicationConfiguration",
            "ds:DescribeDirectories",
            "dynamodb:DescribeContinuousBackups",
            "dynamodb:DescribeGlobalTable",
            "dynamodb:DescribeLimits",
            "dynamodb:DescribeTable",
            "dynamodb:ListGlobalTables",
            "dynamodb:ListTagsOfResource",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeFastSnapshotRestores",
            "ec2:DescribeFleets",
            "ec2:DescribeHosts",
            "ec2:DescribeInstances",
            "ec2:DescribeNatGateways",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRegions",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcEndpoints",
            "ecr:DescribeRegistry",
            "ecs:DescribeCapacityProviders",
            "ecs:DescribeClusters",
            "ecs:DescribeContainerInstances",
            "ecs:DescribeServices",
            "ecs:DescribeTaskDefinition",
            "ecs:ListContainerInstances",
            "ecs:ListServices",
            "eks:DescribeCluster",
            "eks:DescribeFargateProfile",
            "eks:DescribeNodegroup",
            "eks:ListFargateProfiles",
            "eks:ListNodegroups",
            "elasticache:DescribeCacheClusters",
            "elasticache:DescribeGlobalReplicationGroups",
            "elasticache:DescribeReplicationGroups",
            "elasticache:DescribeServerlessCacheSnapshots",
            "elasticache:DescribeServerlessCaches",
            "elasticache:DescribeSnapshots",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeLifecycleConfiguration",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:DescribeReplicationConfigurations",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:DescribeTargetHealth",
            "fis:GetExperiment",
            "fis:GetExperimentTemplate",
            "fis:ListExperimentResolvedTargets",
            "fis:ListExperimentTemplates",
            "fis:ListExperiments",
            "fsx:DescribeFileSystems",
            "lambda:GetFunctionConcurrency",
            "lambda:GetFunctionConfiguration",
            "lambda:ListAliases",
            "lambda:ListEventSourceMappings",
            "lambda:ListFunctionEventInvokeConfigs",
            "lambda:ListVersionsByFunction",
            "rds:DescribeDBClusterSnapshots",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:DescribeDBProxies",
            "rds:DescribeDBProxyTargets",
            "rds:DescribeDBSnapshots",
            "rds:DescribeGlobalClusters",
            "rds:ListTagsForResource",
            "resource-groups:GetGroup",
            "resource-groups:ListGroupResources",
            "route53-recovery-control-config:ListClusters",
            "route53-recovery-control-config:ListControlPanels",
            "route53-recovery-control-config:ListRoutingControls",
            "route53-recovery-readiness:GetReadinessCheckStatus",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:ListReadinessChecks",
            "route53:GetHealthCheck",
            "route53:ListHealthChecks",
            "route53:ListHostedZones",
            "route53:ListResourceRecordSets",
            "route53resolver:ListResolverEndpointIpAddresses",
            "route53resolver:ListResolverEndpoints",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetBucketPolicyStatus",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetMultiRegionAccessPointRoutes",
            "s3:GetObject",
            "s3:GetReplicationConfiguration",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListMultiRegionAccessPoints",
            "s3:PutObject",
            "servicecatalog:GetApplication",
            "servicecatalog:ListAssociatedResources",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:ListSubscriptionsByTopic",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "ssm:DescribeAutomationExecutions",
            "ssm:GetParametersByPath",
            "states:DescribeStateMachine",
            "states:ListStateMachineAliases",
            "states:ListStateMachineVersions",
            "tag:GetResources"
        ]
    },
    "AWSAppFabricFullAccess": {
        "permissions": [
            "appfabric:*",
            "firehose:DescribeDeliveryStream",
            "firehose:ListDeliveryStreams",
            "iam:CreateServiceLinkedRole",
            "kms:ListAliases",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets"
        ]
    },
    "AWSAppFabricReadOnlyAccess": {
        "permissions": [
            "appfabric:GetAppAuthorization",
            "appfabric:GetAppBundle",
            "appfabric:GetIngestion",
            "appfabric:GetIngestionDestination",
            "appfabric:ListAppAuthorizations",
            "appfabric:ListAppBundles",
            "appfabric:ListIngestionDestinations",
            "appfabric:ListIngestions",
            "appfabric:ListTagsForResource"
        ]
    },
    "AmazonCognitoUnAuthedIdentitiesSessionPolicy": {
        "permissions": [
            "comprehend:*",
            "firehose:*",
            "geo:*DevicePosition*",
            "geo:*Geofence",
            "geo:*Geofences",
            "geo:CalculateRoute*",
            "geo:GetMap*",
            "geo:GetPlace",
            "geo:SearchPlaceIndex*",
            "kms:Decrypt",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:GenerateDataKeyPair",
            "kms:GenerateDataKeyPairWithoutPlaintext",
            "kms:GenerateDataKeyWithoutPlaintext",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
            "mobiletargeting:*",
            "personalize:*",
            "polly:*",
            "rekognition:*",
            "rum:PutRumEvents",
            "sagemaker:InvokeEndpoint",
            "transcribe:*",
            "translate:*"
        ]
    },
    "AmazonEFSCSIDriverPolicy": {
        "permissions": [
            "ec2:DescribeAvailabilityZones",
            "elasticfilesystem:CreateAccessPoint",
            "elasticfilesystem:DeleteAccessPoint",
            "elasticfilesystem:DescribeAccessPoints",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:TagResource"
        ]
    },
    "AWSElementalMediaPackageV2FullAccess": {
        "permissions": [
            "mediapackagev2:*"
        ]
    },
    "AWSElementalMediaPackageV2ReadOnly": {
        "permissions": [
            "mediapackagev2:Get*",
            "mediapackagev2:List*"
        ]
    },
    "AWSHealthImagingFullAccess": {
        "permissions": [
            "iam:PassRole",
            "medical-imaging:*"
        ]
    },
    "AWSHealthImagingReadOnlyAccess": {
        "permissions": [
            "medical-imaging:GetDICOMImportJob",
            "medical-imaging:GetDatastore",
            "medical-imaging:GetImageFrame",
            "medical-imaging:GetImageSet",
            "medical-imaging:GetImageSetMetadata",
            "medical-imaging:ListDICOMImportJobs",
            "medical-imaging:ListDatastores",
            "medical-imaging:ListImageSetVersions",
            "medical-imaging:ListTagsForResource",
            "medical-imaging:SearchImageSets"
        ]
    },
    "CloudWatchFullAccessV2": {
        "permissions": [
            "application-autoscaling:DescribeScalingPolicies",
            "application-signals:*",
            "autoscaling:DescribeAutoScalingGroups",
            "autoscaling:DescribePolicies",
            "cloudwatch:*",
            "iam:CreateServiceLinkedRole",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "logs:*",
            "oam:ListAttachedLinks",
            "oam:ListSinks",
            "rum:*",
            "sns:CreateTopic",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "synthetics:*",
            "xray:*"
        ]
    },
    "AmazonSageMakerPartnerServiceCatalogProductsLambdaServiceRolePolicy": {
        "permissions": [
            "secretsmanager:GetSecretValue"
        ]
    },
    "AmazonSageMakerPartnerServiceCatalogProductsApiGatewayServiceRolePolicy": {
        "permissions": [
            "lambda:InvokeFunction",
            "sagemaker:InvokeEndpoint"
        ]
    },
    "AmazonSageMakerPartnerServiceCatalogProductsCloudFormationServiceRolePolicy": {
        "permissions": [
            "apigateway:DELETE",
            "apigateway:GET",
            "apigateway:PATCH",
            "apigateway:POST",
            "apigateway:PUT",
            "iam:PassRole",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:DeleteLayerVersion",
            "lambda:GetFunction",
            "lambda:GetLayerVersion",
            "lambda:InvokeFunction",
            "lambda:ListTags",
            "lambda:PublishLayerVersion",
            "lambda:TagResource",
            "lambda:UpdateFunctionCode",
            "s3:GetObject"
        ]
    },
    "AWSMigrationHubRefactorSpaces-SSMAutomationPolicy": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:ModifyInstanceAttribute",
            "ssm:GetParameters"
        ]
    },
    "AmazonRDSPerformanceInsightsFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "pi:CreatePerformanceAnalysisReport",
            "pi:DeletePerformanceAnalysisReport",
            "pi:DescribeDimensionKeys",
            "pi:GetDimensionKeyDetails",
            "pi:GetPerformanceAnalysisReport",
            "pi:GetResourceMetadata",
            "pi:GetResourceMetrics",
            "pi:ListAvailableResourceDimensions",
            "pi:ListAvailableResourceMetrics",
            "pi:ListPerformanceAnalysisReports",
            "pi:ListTagsForResource",
            "pi:TagResource",
            "pi:UntagResource",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances"
        ]
    },
    "AWSEntityResolutionConsoleFullAccess": {
        "permissions": [
            "dataexchange:GetDataSet",
            "entityresolution:*",
            "events:DeleteRule",
            "events:PutRule",
            "events:PutTargets",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetSchema",
            "glue:GetSchemaByDefinition",
            "glue:GetSchemaVersion",
            "glue:GetSchemaVersionsDiff",
            "glue:GetTable",
            "glue:GetTableVersion",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:SearchTables",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "s3:GetBucketLocation",
            "s3:GetBucketVersioning",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "tag:GetTagKeys",
            "tag:GetTagValues"
        ]
    },
    "AWSEntityResolutionConsoleReadOnlyAccess": {
        "permissions": [
            "entityresolution:Get*",
            "entityresolution:List*"
        ]
    },
    "AWSArtifactServiceRolePolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts"
        ]
    },
    "AWSApplicationMigrationServiceEc2InstancePolicy": {
        "permissions": [
            "mgn:GetAgentCommandForMgn",
            "mgn:GetAgentConfirmedResumeInfoForMgn",
            "mgn:GetAgentInstallationAssetsForMgn",
            "mgn:GetAgentReplicationInfoForMgn",
            "mgn:GetAgentRuntimeConfigurationForMgn",
            "mgn:RegisterAgentForMgn",
            "mgn:SendAgentLogsForMgn",
            "mgn:SendAgentMetricsForMgn",
            "mgn:SendClientLogsForMgn",
            "mgn:TagResource",
            "mgn:UpdateAgentBacklogForMgn",
            "mgn:UpdateAgentConversionInfoForMgn",
            "mgn:UpdateAgentReplicationInfoForMgn",
            "mgn:UpdateAgentSourcePropertiesForMgn"
        ]
    },
    "AmazonLaunchWizardFullAccessV2": {
        "permissions": [
            "applicationinsights:*",
            "autoscaling:AttachInstances",
            "autoscaling:CreateAutoScalingGroup",
            "autoscaling:CreateLaunchConfiguration",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteAutoScalingGroup",
            "autoscaling:DeleteLaunchConfiguration",
            "autoscaling:Describe*",
            "autoscaling:UpdateAutoScalingGroup",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:Describe*",
            "cloudformation:DescribeAccountLimits",
            "cloudformation:DescribeStack*",
            "cloudformation:DescribeStackDriftDetectionStatus",
            "cloudformation:Get*",
            "cloudformation:GetTemplateSummary",
            "cloudformation:List*",
            "cloudformation:ListStacks",
            "cloudformation:SignalResource",
            "cloudformation:TagResource",
            "cloudformation:ValidateTemplate",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:Describe*",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:Get*",
            "cloudwatch:List*",
            "cloudwatch:PutMetricAlarm",
            "ds:AddIpRoutes",
            "ds:CreateComputer",
            "ds:CreateMicrosoftAD",
            "ds:DeleteDirectory",
            "ds:Describe*",
            "ds:ListAuthorizedApplications",
            "dynamodb:CreateTable",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "ec2:AllocateAddress",
            "ec2:AllocateHosts",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AssociateAddress",
            "ec2:AssociateDhcpOptions",
            "ec2:AssociateRouteTable",
            "ec2:AssociateSubnetCidrBlock",
            "ec2:AssociateVpcCidrBlock",
            "ec2:AttachInternetGateway",
            "ec2:AttachNetworkInterface",
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateDhcpOptions",
            "ec2:CreateEgressOnlyInternetGateway",
            "ec2:CreateInternetGateway",
            "ec2:CreateKeyPair",
            "ec2:CreateNatGateway",
            "ec2:CreateNetworkInterface",
            "ec2:CreatePlacementGroup",
            "ec2:CreateRoute",
            "ec2:CreateRouteTable",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSubnet",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:CreateVpc",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteDhcpOptions",
            "ec2:DeleteInternetGateway",
            "ec2:DeleteKeyPair",
            "ec2:DeleteNatGateway",
            "ec2:DeleteNetworkAcl",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteRoute",
            "ec2:DeleteRouteTable",
            "ec2:DeleteSecurityGroup",
            "ec2:DeleteSnapshot",
            "ec2:DeleteSubnet",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DeleteVpc",
            "ec2:Describe*",
            "ec2:DetachInternetGateway",
            "ec2:DetachNetworkInterface",
            "ec2:DetachVolume",
            "ec2:DisassociateAddress",
            "ec2:DisassociateIamInstanceProfile",
            "ec2:DisassociateRouteTable",
            "ec2:DisassociateSubnetCidrBlock",
            "ec2:DisassociateVpcCidrBlock",
            "ec2:Get*",
            "ec2:GetConsoleOutput",
            "ec2:GetLaunchTemplateData",
            "ec2:GetPasswordData",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyInstancePlacement",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ModifySubnetAttribute",
            "ec2:ModifyVolume",
            "ec2:ModifyVolumeAttribute",
            "ec2:ModifyVpcAttribute",
            "ec2:ReleaseAddress",
            "ec2:ReplaceRoute",
            "ec2:ReplaceRouteTableAssociation",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "elasticfilesystem:CreateFileSystem",
            "elasticfilesystem:CreateMountTarget",
            "elasticfilesystem:DeleteFileSystem",
            "elasticfilesystem:DeleteMountTarget",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargetSecurityGroups",
            "elasticfilesystem:DescribeMountTargets",
            "elasticfilesystem:TagResource",
            "elasticfilesystem:UntagResource",
            "fsx:CreateFileSystem",
            "fsx:CreateStorageVirtualMachine",
            "fsx:CreateVolume",
            "fsx:DeleteFileSystem",
            "fsx:DeleteStorageVirtualMachine",
            "fsx:DeleteVolume",
            "fsx:DescribeFileSystems",
            "fsx:DescribeStorageVirtualMachines",
            "fsx:DescribeVolumes",
            "fsx:ListTagsForResource",
            "fsx:TagResource",
            "fsx:UntagResource",
            "iam:AddRoleToInstanceProfile",
            "iam:CreateInstanceProfile",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteInstanceProfile",
            "iam:GetInstanceProfile",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetUser",
            "iam:List*",
            "iam:PassRole",
            "iam:RemoveRoleFromInstanceProfile",
            "kms:ListAliases",
            "kms:ListKeys",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:InvokeFunction",
            "launchwizard:*",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogGroup",
            "logs:DeleteLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetLogRecord",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:TagResource",
            "logs:UntagResource",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:Get*",
            "resource-groups:List*",
            "route53:ChangeResourceRecordSets",
            "route53:GetChange",
            "route53:ListHostedZones",
            "route53:ListHostedZonesByName",
            "route53:ListResourceRecordSets",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketVersioning",
            "s3:PutObject",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteResourcePolicy",
            "secretsmanager:DeleteSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecretVersionIds",
            "secretsmanager:ListSecrets",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:TagResource",
            "secretsmanager:UntagResource",
            "servicecatalog:AssociatePrincipalWithPortfolio",
            "servicecatalog:AssociateProductWithPortfolio",
            "servicecatalog:CreateConstraint",
            "servicecatalog:CreatePortfolio",
            "servicecatalog:CreateProduct",
            "servicecatalog:CreateProvisioningArtifact",
            "servicecatalog:DescribePortfolio",
            "servicecatalog:TagResource",
            "servicecatalog:UntagResource",
            "servicequotas:GetServiceQuota",
            "servicequotas:ListServiceQuotas",
            "sns:CreateTopic",
            "sns:DeleteTopic",
            "sns:ListSubscriptions",
            "sns:ListSubscriptionsByTopic",
            "sns:ListTopics",
            "sns:Publish",
            "sns:Subscribe",
            "sns:Unsubscribe",
            "sqs:AddPermission",
            "sqs:CreateQueue",
            "sqs:DeleteQueue",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListQueueTags",
            "sqs:ListQueues",
            "sqs:SetQueueAttributes",
            "sqs:TagQueue",
            "ssm:AddTagsToResource",
            "ssm:CreateAssociation",
            "ssm:CreateDocument",
            "ssm:CreateOpsMetadata",
            "ssm:DeleteAssociation",
            "ssm:DeleteDocument",
            "ssm:DeleteOpsMetadata",
            "ssm:DeleteParameter*",
            "ssm:DescribeAutomation*",
            "ssm:DescribeDocument",
            "ssm:DescribeDocument*",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetCommandInvocation",
            "ssm:GetConnectionStatus",
            "ssm:GetDocument",
            "ssm:GetParameter*",
            "ssm:ListCommand*",
            "ssm:ListDocument*",
            "ssm:ListInstanceAssociations",
            "ssm:ListTagsForResource",
            "ssm:PutParameter",
            "ssm:RemoveTagsFromResource",
            "ssm:SendAutomationSignal",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution",
            "ssm:StopAutomationExecution",
            "sts:GetCallerIdentity",
            "tag:Get*"
        ]
    },
    "AWSServiceRoleForCloudWatchMetrics_DbPerfInsightsServiceRolePolicy": {
        "permissions": [
            "pi:GetResourceMetrics"
        ]
    },
    "AmazonDataZoneEnvironmentRolePermissionsBoundary": {
        "permissions": [
            "athena:BatchGetNamedQuery",
            "athena:BatchGetPreparedStatement",
            "athena:BatchGetQueryExecution",
            "athena:CreateNamedQuery",
            "athena:CreateNotebook",
            "athena:CreatePreparedStatement",
            "athena:CreatePresignedNotebookUrl",
            "athena:DeleteNamedQuery",
            "athena:DeleteNotebook",
            "athena:DeletePreparedStatement",
            "athena:ExportNotebook",
            "athena:GetDataCatalog",
            "athena:GetDatabase",
            "athena:GetNamedQuery",
            "athena:GetPreparedStatement",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetQueryResultsStream",
            "athena:GetQueryRuntimeStatistics",
            "athena:GetTableMetadata",
            "athena:GetWorkGroup",
            "athena:ImportNotebook",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListEngineVersions",
            "athena:ListNamedQueries",
            "athena:ListPreparedStatements",
            "athena:ListQueryExecutions",
            "athena:ListTableMetadata",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "athena:StartCalculationExecution",
            "athena:StartQueryExecution",
            "athena:StartSession",
            "athena:StopCalculationExecution",
            "athena:StopQueryExecution",
            "athena:TerminateSession",
            "athena:UpdateNamedQuery",
            "athena:UpdateNotebook",
            "athena:UpdateNotebookMetadata",
            "athena:UpdatePreparedStatement",
            "datazone:*",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteTags",
            "ec2:Describe*",
            "glue:*DataQuality*",
            "glue:BatchCreatePartition",
            "glue:BatchDeleteConnection",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetJobs",
            "glue:BatchGetPartition",
            "glue:BatchGetWorkflows",
            "glue:BatchStopJobRun",
            "glue:BatchUpdatePartition",
            "glue:CreateBlueprint",
            "glue:CreateConnection",
            "glue:CreateCrawler",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreatePartition",
            "glue:CreatePartitionIndex",
            "glue:CreateTable",
            "glue:CreateWorkflow",
            "glue:DeleteBlueprint",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeleteConnection",
            "glue:DeleteCrawler",
            "glue:DeleteJob",
            "glue:DeletePartition",
            "glue:DeletePartitionIndex",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:DeleteWorkflow",
            "glue:GetColumnStatisticsForPartition",
            "glue:GetColumnStatisticsForTable",
            "glue:GetConnection",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:ListJobs",
            "glue:ListSchemas",
            "glue:NotifyEvent",
            "glue:PutWorkflowRunProperties",
            "glue:ResetJobBookmark",
            "glue:ResumeWorkflowRun",
            "glue:SearchTables",
            "glue:StartBlueprintRun",
            "glue:StartCrawler",
            "glue:StartCrawlerSchedule",
            "glue:StartJobRun",
            "glue:StartWorkflowRun",
            "glue:StopCrawler",
            "glue:StopCrawlerSchedule",
            "glue:StopWorkflowRun",
            "glue:UpdateBlueprint",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:UpdateConnection",
            "glue:UpdateCrawler",
            "glue:UpdateCrawlerSchedule",
            "glue:UpdateDatabase",
            "glue:UpdateJob",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:UpdateWorkflow",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListGroups",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:PassRole",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:ListKeys",
            "kms:Sign",
            "kms:Verify",
            "lakeformation:GetDataAccess",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:GetResourceLFTags",
            "lakeformation:ListPermissions",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:DescribeMetricFilters",
            "logs:DescribeQueries",
            "logs:DescribeQueryDefinitions",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetLogRecord",
            "logs:GetQueryResults",
            "logs:PutLogEvents",
            "logs:StartQuery",
            "logs:StopQuery",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift-serverless:GetCredentials",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListWorkgroups",
            "redshift:CreateClusterUser",
            "redshift:DescribeClusters",
            "redshift:DescribeDataShares",
            "redshift:GetClusterCredentials",
            "redshift:GetClusterCredentialsWithIAM",
            "redshift:JoinGroup",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "s3:PutObjectRetention",
            "s3:ReplicateObject",
            "s3:RestoreObject",
            "secretsmanager:CreateSecret",
            "secretsmanager:ListSecrets",
            "secretsmanager:TagResource",
            "sqlworkbench:*",
            "tag:GetResources"
        ]
    },
    "AmazonKeyspacesReadOnlyAccess_v2": {
        "permissions": [
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "cassandra:Select",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcEndpoints",
            "kms:DescribeKey",
            "kms:ListAliases"
        ]
    },
    "AWSElasticDisasterRecoveryLaunchpermissionsPolicy": {
        "permissions": [
            "iam:PassRole",
            "ssm:DescribeDocument",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetDocument",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:ListCommandInvocations",
            "ssm:ListDocumentVersions",
            "ssm:ListDocuments",
            "ssm:PutParameter",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution"
        ]
    },
    "AmazonDataZoneFullAccess": {
        "permissions": [
            "aoss:CreateSecurityPolicy",
            "aoss:GetSecurityPolicy",
            "aoss:ListSecurityPolicies",
            "bedrock:CreateInferenceProfile",
            "bedrock:DeleteInferenceProfile",
            "bedrock:GetFoundationModel",
            "bedrock:GetFoundationModelAvailability",
            "bedrock:GetInferenceProfile",
            "bedrock:ListFoundationModels",
            "bedrock:ListInferenceProfiles",
            "bedrock:ListTagsForResource",
            "bedrock:TagResource",
            "codeconnections:GetConnection",
            "codeconnections:ListConnections",
            "codeconnections:ListTagsForResource",
            "codeconnections:TagResource",
            "codeconnections:UntagResource",
            "codewhisperer:ListProfiles",
            "datazone:*",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "glue:GetDatabases",
            "iam:GetPolicy",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:PassRole",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:ListAliases",
            "ram:AssociateResourceShare",
            "ram:CreateResourceShare",
            "ram:DeleteResourceShare",
            "ram:DisassociateResourceShare",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShareInvitations",
            "ram:GetResourceShares",
            "ram:ListResourceSharePermissions",
            "ram:RejectResourceShareInvitation",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketCORS",
            "s3:PutBucketPolicy",
            "s3:PutBucketVersioning",
            "secretsmanager:CreateSecret",
            "secretsmanager:ListSecrets",
            "secretsmanager:TagResource",
            "ssm:DeleteParameter",
            "ssm:GetParameter",
            "ssm:GetParametersByPath",
            "ssm:PutParameter",
            "sso:DescribeRegisteredRegions"
        ]
    },
    "AmazonDataZoneRedshiftManageAccessRolePolicy": {
        "permissions": [
            "redshift-data:BatchExecuteStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift:AssociateDataShareConsumer",
            "redshift:AuthorizeDataShare",
            "redshift:DescribeClusters",
            "redshift:DescribeDataShares",
            "secretsmanager:ListSecrets"
        ]
    },
    "AmazonDataZoneRedshiftGlueProvisioningPolicy": {
        "permissions": [
            "athena:CreateWorkGroup",
            "athena:DeleteWorkGroup",
            "athena:GetWorkGroup",
            "athena:TagResource",
            "cloudformation:CreateStack",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:TagResource",
            "glue:CreateDatabase",
            "glue:DeleteDatabase",
            "glue:GetDatabase",
            "glue:TagResource",
            "iam:AttachRolePolicy",
            "iam:CreatePolicy",
            "iam:CreateRole",
            "iam:DeletePolicy",
            "iam:DeletePolicyVersion",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:GetPolicy",
            "iam:GetRole",
            "iam:ListPolicyVersions",
            "iam:PassRole",
            "iam:PutRolePolicy",
            "iam:TagPolicy",
            "iam:TagRole",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "lakeformation:DeregisterResource",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:GrantPermissions",
            "lakeformation:ListPermissions",
            "lakeformation:ListResources",
            "lakeformation:PutDataLakeSettings",
            "lakeformation:RegisterResource",
            "lakeformation:RevokePermissions",
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:DescribeLogGroups",
            "logs:PutRetentionPolicy",
            "logs:TagLogGroup",
            "redshift-data:DescribeStatement",
            "redshift-data:ExecuteStatement",
            "redshift-data:ListSchemas",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift:DescribeClusters",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets"
        ]
    },
    "AmazonDataZoneGlueManageAccessRolePolicy": {
        "permissions": [
            "glue:CreateTable",
            "glue:DeleteResourcePolicy",
            "glue:DeleteTable",
            "glue:GetCatalog",
            "glue:GetDataQualityResult",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:GetTags",
            "glue:ListCrawls",
            "glue:ListDataQualityResults",
            "glue:PutResourcePolicy",
            "glue:SearchTables",
            "glue:TagResource",
            "glue:UntagResource",
            "iam:GetRole",
            "iam:PassRole",
            "kms:Decrypt",
            "lakeformation:BatchGrantPermissions",
            "lakeformation:BatchRevokePermissions",
            "lakeformation:CreateDataCellsFilter",
            "lakeformation:CreateLakeFormationOptIn",
            "lakeformation:DeleteDataCellsFilter",
            "lakeformation:DeleteLakeFormationOptIn",
            "lakeformation:GetDataAccess",
            "lakeformation:GetDataCellsFilter",
            "lakeformation:GetResourceLFTags",
            "lakeformation:GrantPermissions",
            "lakeformation:ListDataCellsFilter",
            "lakeformation:ListLakeFormationOptIns",
            "lakeformation:ListPermissions",
            "lakeformation:RegisterResource",
            "lakeformation:RevokePermissions",
            "lakeformation:UpdateDataCellsFilter",
            "organizations:DescribeOrganization",
            "ram:AcceptResourceShareInvitation",
            "ram:AssociateResourceShare",
            "ram:AssociateResourceSharePermission",
            "ram:CreateResourceShare",
            "ram:DeleteResourceShare",
            "ram:DisassociateResourceShare",
            "ram:GetResourceShareInvitations",
            "ram:GetResourceShares",
            "ram:ListResourceSharePermissions",
            "ram:ListResources",
            "ram:UpdateResourceShare"
        ]
    },
    "AmazonDataZoneFullUserAccess": {
        "permissions": [
            "datazone:AcceptPredictions",
            "datazone:AcceptSubscriptionRequest",
            "datazone:AddEntityOwner",
            "datazone:AddPolicyGrant",
            "datazone:CancelMetadataGenerationRun",
            "datazone:CancelSubscription",
            "datazone:CreateAsset",
            "datazone:CreateAssetFilter",
            "datazone:CreateAssetRevision",
            "datazone:CreateAssetType",
            "datazone:CreateDataProduct",
            "datazone:CreateDataProductRevision",
            "datazone:CreateDataSource",
            "datazone:CreateDomainUnit",
            "datazone:CreateEnvironment",
            "datazone:CreateEnvironmentBlueprint",
            "datazone:CreateEnvironmentProfile",
            "datazone:CreateFormType",
            "datazone:CreateGlossary",
            "datazone:CreateGlossaryTerm",
            "datazone:CreateListingChangeSet",
            "datazone:CreateProject",
            "datazone:CreateProjectMembership",
            "datazone:CreateRule",
            "datazone:CreateSubscriptionGrant",
            "datazone:CreateSubscriptionRequest",
            "datazone:DeleteAsset",
            "datazone:DeleteAssetFilter",
            "datazone:DeleteAssetType",
            "datazone:DeleteDataProduct",
            "datazone:DeleteDataSource",
            "datazone:DeleteDomainUnit",
            "datazone:DeleteEnvironment",
            "datazone:DeleteEnvironmentBlueprint",
            "datazone:DeleteEnvironmentProfile",
            "datazone:DeleteFormType",
            "datazone:DeleteGlossary",
            "datazone:DeleteGlossaryTerm",
            "datazone:DeleteListing",
            "datazone:DeleteProject",
            "datazone:DeleteProjectMembership",
            "datazone:DeleteRule",
            "datazone:DeleteSubscriptionGrant",
            "datazone:DeleteSubscriptionRequest",
            "datazone:DeleteSubscriptionTarget",
            "datazone:DeleteTimeSeriesDataPoints",
            "datazone:GetAsset",
            "datazone:GetAssetFilter",
            "datazone:GetAssetType",
            "datazone:GetDataProduct",
            "datazone:GetDataSource",
            "datazone:GetDataSourceRun",
            "datazone:GetDomain",
            "datazone:GetDomainUnit",
            "datazone:GetEnvironment",
            "datazone:GetEnvironmentActionLink",
            "datazone:GetEnvironmentBlueprint",
            "datazone:GetEnvironmentCredentials",
            "datazone:GetEnvironmentProfile",
            "datazone:GetFormType",
            "datazone:GetGlossary",
            "datazone:GetGlossaryTerm",
            "datazone:GetGroupProfile",
            "datazone:GetIamPortalLoginUrl",
            "datazone:GetLineageNode",
            "datazone:GetListing",
            "datazone:GetMetadataGenerationRun",
            "datazone:GetProject",
            "datazone:GetRule",
            "datazone:GetSubscription",
            "datazone:GetSubscriptionEligibility",
            "datazone:GetSubscriptionGrant",
            "datazone:GetSubscriptionRequestDetails",
            "datazone:GetSubscriptionTarget",
            "datazone:GetTimeSeriesDataPoint",
            "datazone:GetUserProfile",
            "datazone:ListAccountEnvironments",
            "datazone:ListAssetFilters",
            "datazone:ListAssetRevisions",
            "datazone:ListDataProductRevisions",
            "datazone:ListDataSourceRunActivities",
            "datazone:ListDataSourceRuns",
            "datazone:ListDataSources",
            "datazone:ListDomainUnitsForParent",
            "datazone:ListEntityOwners",
            "datazone:ListEnvironmentBlueprintConfigurations",
            "datazone:ListEnvironmentBlueprints",
            "datazone:ListEnvironmentProfiles",
            "datazone:ListEnvironments",
            "datazone:ListGroupsForUser",
            "datazone:ListLineageNodeHistory",
            "datazone:ListMetadataGenerationRuns",
            "datazone:ListNotifications",
            "datazone:ListPolicyGrants",
            "datazone:ListProjectMemberships",
            "datazone:ListProjects",
            "datazone:ListRules",
            "datazone:ListSubscriptionGrants",
            "datazone:ListSubscriptionRequests",
            "datazone:ListSubscriptionTargets",
            "datazone:ListSubscriptions",
            "datazone:ListTimeSeriesDataPoints",
            "datazone:ListWarehouseMetadata",
            "datazone:PostTimeSeriesDataPoints",
            "datazone:RejectPredictions",
            "datazone:RejectSubscriptionRequest",
            "datazone:RemoveEntityOwner",
            "datazone:RemovePolicyGrant",
            "datazone:RevokeSubscription",
            "datazone:Search",
            "datazone:SearchGroupProfiles",
            "datazone:SearchListings",
            "datazone:SearchRules",
            "datazone:SearchTypes",
            "datazone:SearchUserProfiles",
            "datazone:StartDataSourceRun",
            "datazone:StartMetadataGenerationRun",
            "datazone:UpdateAssetFilter",
            "datazone:UpdateDataSource",
            "datazone:UpdateDomainUnit",
            "datazone:UpdateEnvironment",
            "datazone:UpdateEnvironmentBlueprint",
            "datazone:UpdateEnvironmentDeploymentStatus",
            "datazone:UpdateEnvironmentProfile",
            "datazone:UpdateGlossary",
            "datazone:UpdateGlossaryTerm",
            "datazone:UpdateProject",
            "datazone:UpdateRule",
            "datazone:UpdateSubscriptionGrantStatus",
            "datazone:UpdateSubscriptionRequest",
            "ram:GetResourceShareAssociations"
        ]
    },
    "AmazonDataZoneDomainExecutionRolePolicy": {
        "permissions": [
            "datazone:AcceptPredictions",
            "datazone:AcceptSubscriptionRequest",
            "datazone:AddEntityOwner",
            "datazone:AddPolicyGrant",
            "datazone:CancelMetadataGenerationRun",
            "datazone:CancelSubscription",
            "datazone:CreateAsset",
            "datazone:CreateAssetFilter",
            "datazone:CreateAssetRevision",
            "datazone:CreateAssetType",
            "datazone:CreateDataProduct",
            "datazone:CreateDataProductRevision",
            "datazone:CreateDataSource",
            "datazone:CreateDomainUnit",
            "datazone:CreateEnvironment",
            "datazone:CreateEnvironmentBlueprint",
            "datazone:CreateEnvironmentProfile",
            "datazone:CreateFormType",
            "datazone:CreateGlossary",
            "datazone:CreateGlossaryTerm",
            "datazone:CreateListingChangeSet",
            "datazone:CreateProject",
            "datazone:CreateProjectMembership",
            "datazone:CreateRule",
            "datazone:CreateSubscriptionGrant",
            "datazone:CreateSubscriptionRequest",
            "datazone:DeleteAsset",
            "datazone:DeleteAssetFilter",
            "datazone:DeleteAssetType",
            "datazone:DeleteDataProduct",
            "datazone:DeleteDataSource",
            "datazone:DeleteDomainUnit",
            "datazone:DeleteEnvironment",
            "datazone:DeleteEnvironmentBlueprint",
            "datazone:DeleteEnvironmentProfile",
            "datazone:DeleteFormType",
            "datazone:DeleteGlossary",
            "datazone:DeleteGlossaryTerm",
            "datazone:DeleteListing",
            "datazone:DeleteProject",
            "datazone:DeleteProjectMembership",
            "datazone:DeleteRule",
            "datazone:DeleteSubscriptionGrant",
            "datazone:DeleteSubscriptionRequest",
            "datazone:DeleteSubscriptionTarget",
            "datazone:DeleteTimeSeriesDataPoints",
            "datazone:GetAsset",
            "datazone:GetAssetFilter",
            "datazone:GetAssetType",
            "datazone:GetDataProduct",
            "datazone:GetDataSource",
            "datazone:GetDataSourceRun",
            "datazone:GetDomain",
            "datazone:GetDomainUnit",
            "datazone:GetEnvironment",
            "datazone:GetEnvironmentAction",
            "datazone:GetEnvironmentActionLink",
            "datazone:GetEnvironmentBlueprint",
            "datazone:GetEnvironmentBlueprintConfiguration",
            "datazone:GetEnvironmentCredentials",
            "datazone:GetEnvironmentProfile",
            "datazone:GetFormType",
            "datazone:GetGlossary",
            "datazone:GetGlossaryTerm",
            "datazone:GetGroupProfile",
            "datazone:GetLineageNode",
            "datazone:GetListing",
            "datazone:GetMetadataGenerationRun",
            "datazone:GetProject",
            "datazone:GetRule",
            "datazone:GetSubscription",
            "datazone:GetSubscriptionEligibility",
            "datazone:GetSubscriptionGrant",
            "datazone:GetSubscriptionRequestDetails",
            "datazone:GetSubscriptionTarget",
            "datazone:GetTimeSeriesDataPoint",
            "datazone:GetUserProfile",
            "datazone:ListAccountEnvironments",
            "datazone:ListAssetFilters",
            "datazone:ListAssetRevisions",
            "datazone:ListDataProductRevisions",
            "datazone:ListDataSourceRunActivities",
            "datazone:ListDataSourceRuns",
            "datazone:ListDataSources",
            "datazone:ListDomainUnitsForParent",
            "datazone:ListEntityOwners",
            "datazone:ListEnvironmentpermissions",
            "datazone:ListEnvironmentBlueprintConfigurationSummaries",
            "datazone:ListEnvironmentBlueprintConfigurations",
            "datazone:ListEnvironmentBlueprints",
            "datazone:ListEnvironmentProfiles",
            "datazone:ListEnvironments",
            "datazone:ListGroupsForUser",
            "datazone:ListLineageNodeHistory",
            "datazone:ListMetadataGenerationRuns",
            "datazone:ListNotifications",
            "datazone:ListPolicyGrants",
            "datazone:ListProjectMemberships",
            "datazone:ListProjects",
            "datazone:ListRules",
            "datazone:ListSubscriptionGrants",
            "datazone:ListSubscriptionRequests",
            "datazone:ListSubscriptionTargets",
            "datazone:ListSubscriptions",
            "datazone:ListTimeSeriesDataPoints",
            "datazone:ListWarehouseMetadata",
            "datazone:RejectPredictions",
            "datazone:RejectSubscriptionRequest",
            "datazone:RemoveEntityOwner",
            "datazone:RemovePolicyGrant",
            "datazone:RevokeSubscription",
            "datazone:Search",
            "datazone:SearchGroupProfiles",
            "datazone:SearchListings",
            "datazone:SearchRules",
            "datazone:SearchTypes",
            "datazone:SearchUserProfiles",
            "datazone:StartDataSourceRun",
            "datazone:StartMetadataGenerationRun",
            "datazone:UpdateAssetFilter",
            "datazone:UpdateDataSource",
            "datazone:UpdateDomainUnit",
            "datazone:UpdateEnvironment",
            "datazone:UpdateEnvironmentBlueprint",
            "datazone:UpdateEnvironmentDeploymentStatus",
            "datazone:UpdateEnvironmentProfile",
            "datazone:UpdateGlossary",
            "datazone:UpdateGlossaryTerm",
            "datazone:UpdateProject",
            "datazone:UpdateRule",
            "datazone:UpdateSubscriptionGrantStatus",
            "datazone:UpdateSubscriptionRequest",
            "ram:GetResourceShareAssociations"
        ]
    },
    "AWSS3OnOutpostsServiceRolePolicy": {
        "permissions": [
            "ec2:AllocateAddress",
            "ec2:AssociateAddress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeAddresses",
            "ec2:DescribeCoipPools",
            "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:DisassociateAddress",
            "ec2:GetCoipPoolUsage",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:ReleaseAddress"
        ]
    },
    "AmazonSageMakerCanvasDirectDeployAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:InvokeEndpoint",
            "sagemaker:UpdateEndpoint"
        ]
    },
    "AmplifyBackendDeployFullAccess": {
        "permissions": [
            "amplify:GetBackendEnvironment",
            "amplify:ListApps",
            "appsync:GetIntrospectionSchema",
            "appsync:GetSchemaCreationStatus",
            "appsync:ListFunctions",
            "appsync:StartSchemaCreation",
            "appsync:UpdateApiKey",
            "appsync:UpdateFunction",
            "appsync:UpdateResolver",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListStackResources",
            "cloudformation:ListStacks",
            "ec2:DescribeSubnets",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:ListTags",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "logs:FilterLogEvents",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstances",
            "rds:DescribeDBProxies",
            "rds:DescribeDBSubnetGroups",
            "s3:GetObject",
            "ssm:DeleteParameter",
            "ssm:DeleteParameters",
            "ssm:DescribeParameters",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:GetParametersByPath",
            "ssm:PutParameter",
            "sts:AssumeRole"
        ]
    },
    "AmazonConnectSynchronizationServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "connect:*AnalyticsData*",
            "connect:*AttachedFile*",
            "connect:*Contact",
            "connect:*ContactAttributes*",
            "connect:*ContactEvaluation",
            "connect:*MetricData*",
            "connect:*RealtimeContact*",
            "connect:*UserData*",
            "connect:Associate*",
            "connect:BatchGet*",
            "connect:ClaimPhoneNumber",
            "connect:Create*",
            "connect:CreateInstance",
            "connect:CreateParticipant",
            "connect:CreatePersistentContactAssociation",
            "connect:CreateTrafficDistributionGroup",
            "connect:Delete*",
            "connect:DeleteInstance",
            "connect:DeleteTrafficDistributionGroup",
            "connect:Describe*",
            "connect:Disassociate*",
            "connect:Get*",
            "connect:GetFederationToken",
            "connect:GetTrafficDistribution",
            "connect:ImportPhoneNumber",
            "connect:List*",
            "connect:ListContactReferences",
            "connect:ListInstances",
            "connect:ReleasePhoneNumber",
            "connect:ReplicateInstance",
            "connect:Resume*",
            "connect:Search*",
            "connect:SearchAvailablePhoneNumbers",
            "connect:SearchContacts",
            "connect:Start*",
            "connect:Stop*",
            "connect:Suspend*",
            "connect:TagResource",
            "connect:UntagResource",
            "connect:Update*",
            "connect:UpdateContactRoutingData",
            "connect:UpdateContactSchedule",
            "connect:UpdateTrafficDistribution"
        ]
    },
    "AmazonSageMakerCanvasDataPrepFullAccess": {
        "permissions": [
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListTableMetadata",
            "athena:StartQueryExecution",
            "athena:StopQueryExecution",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceGroups",
            "emr-serverless:CancelJobRun",
            "emr-serverless:CreateApplication",
            "emr-serverless:GetApplication",
            "emr-serverless:GetJobRun",
            "emr-serverless:ListApplications",
            "emr-serverless:ListJobRuns",
            "emr-serverless:StartJobRun",
            "emr-serverless:TagResource",
            "emr-serverless:UpdateApplication",
            "events:DescribeRule",
            "events:ListTagsForResource",
            "events:PutRule",
            "events:PutTargets",
            "events:TagResource",
            "glue:GetDatabases",
            "glue:GetTable",
            "glue:GetTables",
            "glue:SearchTables",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "rds:DescribeDBInstances",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift:GetClusterCredentials",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject",
            "sagemaker:AddTags",
            "sagemaker:CreateFeatureGroup",
            "sagemaker:CreatePipeline",
            "sagemaker:CreateProcessingJob",
            "sagemaker:DeletePipeline",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:ListFeatureGroups",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListProcessingJobs",
            "sagemaker:StartPipelineExecution",
            "sagemaker:UpdatePipeline",
            "secretsmanager:CreateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue"
        ]
    },
    "AWSDataLifecycleManagerSSMFullAccess": {
        "permissions": [
            "ssm:DescribeDocument",
            "ssm:DescribeInstanceInformation",
            "ssm:GetCommandInvocation",
            "ssm:GetDocument",
            "ssm:ListCommands",
            "ssm:SendCommand"
        ]
    },
    "AWSIAMIdentityCenterAllowListForIdentityContext": {
        "permissions": []
    },
    "CloudWatchApplicationSignalsServiceRolePolicy": {
        "permissions": [
            "autoscaling:DescribeAutoScalingGroups",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "logs:GetQueryResults",
            "logs:StartQuery",
            "tag:GetResources",
            "xray:GetServiceGraph"
        ]
    },
    "PartnerCentralAccountManagementUserRoleAssociation": {
        "permissions": [
            "iam:ListRoles",
            "iam:PassRole",
            "partnercentral-account-management:AssociatePartnerUser",
            "partnercentral-account-management:DisassociatePartnerUser"
        ]
    },
    "AWSServiceRolePolicyForBackupRestoreTesting": {
        "permissions": [
            "backup:DescribeProtectedResource",
            "backup:DescribeRecoveryPoint",
            "backup:DescribeRestoreJob",
            "backup:GetRecoveryPointRestoreMetadata",
            "backup:ListBackupVaults",
            "backup:ListProtectedResources",
            "backup:ListProtectedResourcesByBackupVault",
            "backup:ListRecoveryPointsByBackupVault",
            "backup:ListRecoveryPointsByResource",
            "backup:ListTags",
            "backup:StartRestoreJob",
            "dynamodb:DeleteTable",
            "dynamodb:DescribeTable",
            "ec2:DeleteVolume",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshotTierStatus",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:TerminateInstances",
            "elasticfilesystem:DeleteFilesystem",
            "elasticfilesystem:DeleteMountTarget",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "fsx:DeleteFileSystem",
            "fsx:DeleteVolume",
            "fsx:DescribeFileSystems",
            "fsx:DescribeVolumes",
            "fsx:ListTagsForResource",
            "iam:PassRole",
            "rds:DeleteDBCluster",
            "rds:DeleteDBInstance",
            "rds:DescribeDBClusterAutomatedBackups",
            "rds:DescribeDBClusters",
            "rds:DescribeDBInstanceAutomatedBackups",
            "rds:DescribeDBInstances",
            "rds:ListTagsForResource",
            "redshift:DeleteCluster",
            "redshift:DescribeClusters",
            "s3:DeleteBucket",
            "s3:GetLifecycleConfiguration",
            "s3:PutLifecycleConfiguration",
            "timestream:DeleteTable"
        ]
    },
    "AWSIncidentManagerIncidentAccessServiceRolePolicy": {
        "permissions": [
            "autoscaling:DescribeAutoScalingInstances",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResources",
            "codedeploy:BatchGetDeployments",
            "codedeploy:ListDeploymentTargets",
            "codedeploy:ListDeployments"
        ]
    },
    "AWSIoTTwinMakerServiceRolePolicy": {
        "permissions": [
            "iotsitewise:DescribeAsset",
            "iotsitewise:DescribeAssetModel",
            "iotsitewise:ListAssetModels",
            "iotsitewise:ListAssets",
            "iottwinmaker:CreateComponentType",
            "iottwinmaker:CreateEntity",
            "iottwinmaker:DeleteComponentType",
            "iottwinmaker:DeleteEntity",
            "iottwinmaker:GetComponentType",
            "iottwinmaker:GetEntity",
            "iottwinmaker:ListComponentTypes",
            "iottwinmaker:ListEntities",
            "iottwinmaker:UpdateComponentType",
            "iottwinmaker:UpdateEntity"
        ]
    },
    "AWSResourceExplorerOrganizationsAccess": {
        "permissions": [
            "ec2:DescribeRegions",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "organizations:DeregisterDelegatedAdministrator",
            "organizations:DescribeOrganization",
            "organizations:DisableAWSServiceAccess",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots",
            "organizations:RegisterDelegatedAdministrator",
            "ram:GetResourceShares",
            "ram:ListResources",
            "resource-explorer-2:*"
        ]
    },
    "AWSrePostPrivateCloudWatchAccess": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSMarketplaceDeploymentServiceRolePolicy": {
        "permissions": [
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:ListSecrets",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RemoveRegionsFromReplication",
            "secretsmanager:TagResource"
        ]
    },
    "AWSGitSyncServiceRolePolicy": {
        "permissions": [
            "codeconnections:UseConnection",
            "codestar-connections:UseConnection"
        ]
    },
    "EC2ImageBuilderLifecycleExecutionPolicy": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeregisterImage",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DisableImage",
            "ec2:DisableImageDeprecation",
            "ec2:EnableImage",
            "ec2:EnableImageDeprecation",
            "ecr:BatchDeleteImage",
            "ecr:BatchGetImage",
            "imagebuilder:DeleteImage",
            "tag:GetResources"
        ]
    },
    "AmazonInspector2AgentlessServiceRolePolicy": {
        "permissions": [
            "ebs:GetSnapshotBlock",
            "ebs:ListSnapshotBlocks",
            "ec2:CreateSnapshots",
            "ec2:CreateTags",
            "ec2:DeleteSnapshot",
            "ec2:DescribeInstances",
            "ec2:DescribeSnapshots",
            "ec2:DescribeVolumes",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:ListResourceTags"
        ]
    },
    "CostOptimizationHubServiceRolePolicy": {
        "permissions": [
            "ce:GetCostAndUsage",
            "ce:ListCostAllocationTags",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListParents"
        ]
    },
    "AmazonPrometheusScraperServiceRolePolicy": {
        "permissions": [
            "aps:RemoteWrite",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:ModifyNetworkInterfaceAttribute",
            "eks:DeleteAccessEntry",
            "eks:DescribeCluster",
            "iam:DeleteRole"
        ]
    },
    "AWSRepostSpaceSupportOperationsPolicy": {
        "permissions": [
            "support:AddAttachmentsToSet",
            "support:AddCommunicationToCase",
            "support:CreateCase",
            "support:DescribeCases",
            "support:DescribeCommunications",
            "support:ResolveCase"
        ]
    },
    "AWSElasticDisasterRecoveryConsoleFullAccess_v2": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "drs:*",
            "ec2:AssociateIamInstanceProfile",
            "ec2:AttachVolume",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateSecurityGroup",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteSnapshot",
            "ec2:DeleteTags",
            "ec2:DeleteVolume",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeHosts",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume",
            "ec2:GetConsoleOutput",
            "ec2:GetConsoleScreenshot",
            "ec2:GetEbsDefaultKmsKeyId",
            "ec2:GetEbsEncryptionByDefault",
            "ec2:GetInstanceTypesFromInstanceRequirements",
            "ec2:ModifyInstanceAttribute",
            "ec2:ModifyLaunchTemplate",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "ec2:TerminateInstances",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:ListInstanceProfiles",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "kms:ListAliases",
            "license-manager:ListLicenseConfigurations",
            "resource-groups:ListGroups",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "ssm:DescribeDocument",
            "ssm:DescribeInstanceInformation",
            "ssm:DescribeParameters",
            "ssm:GetAutomationExecution",
            "ssm:GetDocument",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:ListCommandInvocations",
            "ssm:ListDocuments",
            "ssm:PutParameter",
            "ssm:SendCommand",
            "ssm:StartAutomationExecution"
        ]
    },
    "AmazonOneEnterpriseFullAccess": {
        "permissions": [
            "one:*"
        ]
    },
    "AmazonOneEnterpriseReadOnlyAccess": {
        "permissions": [
            "one:Get*",
            "one:List*"
        ]
    },
    "AmazonOneEnterpriseInstallerAccess": {
        "permissions": [
            "one:CreateDeviceActivationQrCode",
            "one:GetDeviceInstance",
            "one:GetSite",
            "one:GetSiteAddress",
            "one:ListDeviceInstances",
            "one:ListSites"
        ]
    },
    "AmazonQFullAccess": {
        "permissions": [
            "cloudformation:GetResource",
            "cloudformation:ListResources",
            "iam:PassRole",
            "q:CreateAssignment",
            "q:CreatePlugin",
            "q:DeleteAssignment",
            "q:DeletePlugin",
            "q:GenerateCodeFromCommands",
            "q:GetConversation",
            "q:GetIdentityMetadata",
            "q:GetPlugin",
            "q:GetTroubleshootingResults",
            "q:ListConversations",
            "q:ListPluginProviders",
            "q:ListPlugins",
            "q:ListTagsForResource",
            "q:PassRequest",
            "q:SendMessage",
            "q:StartConversation",
            "q:StartTroubleshootingAnalysis",
            "q:StartTroubleshootingResolutionExplanation",
            "q:TagResource",
            "q:UntagResource",
            "q:UpdateTroubleshootingCommandResult",
            "q:UsePlugin",
            "sts:SetContext"
        ]
    },
    "AWSServiceRoleForNeptuneGraphPolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AmazonSageMakerClusterInstanceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "s3:GetObject",
            "s3:ListBucket",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:CreateDataChannel",
            "ssmmessages:OpenControlChannel",
            "ssmmessages:OpenDataChannel"
        ]
    },
    "AWSZonalAutoshiftPracticeRunSLRPolicy": {
        "permissions": [
            "arc-zonal-shift:CancelZonalShift",
            "arc-zonal-shift:GetManagedResource",
            "arc-zonal-shift:StartZonalShift",
            "arc-zonal-shift:UpdateZonalShift",
            "cloudwatch:DescribeAlarms",
            "health:DescribeEvents"
        ]
    },
    "AWSCleanRoomsMLReadOnlyAccess": {
        "permissions": [
            "cleanrooms-ml:Get*",
            "cleanrooms-ml:List*",
            "cleanrooms:GetCollaboration",
            "cleanrooms:GetConfiguredAudienceModelAssociation",
            "cleanrooms:GetMembership",
            "cleanrooms:ListAnalysisTemplates",
            "cleanrooms:ListCollaborationAnalysisTemplates",
            "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
            "cleanrooms:ListCollaborations",
            "cleanrooms:ListConfiguredTableAssociations",
            "cleanrooms:ListConfiguredTables",
            "cleanrooms:ListMembers",
            "cleanrooms:ListMemberships",
            "cleanrooms:ListProtectedQueries",
            "cleanrooms:ListSchemas",
            "cleanrooms:ListTagsForResource",
            "cleanrooms:PassCollaboration",
            "cleanrooms:PassMembership"
        ]
    },
    "AWSCleanRoomsMLFullAccess": {
        "permissions": [
            "cleanrooms-ml:*",
            "cleanrooms:BatchGetSchema",
            "cleanrooms:CreateConfiguredAudienceModelAssociation",
            "cleanrooms:GetCollaboration",
            "cleanrooms:GetConfiguredAudienceModelAssociation",
            "cleanrooms:GetMembership",
            "cleanrooms:ListAnalysisTemplates",
            "cleanrooms:ListCollaborationAnalysisTemplates",
            "cleanrooms:ListCollaborationConfiguredAudienceModelAssociations",
            "cleanrooms:ListCollaborations",
            "cleanrooms:ListConfiguredTableAssociations",
            "cleanrooms:ListConfiguredTables",
            "cleanrooms:ListMembers",
            "cleanrooms:ListMemberships",
            "cleanrooms:ListProtectedQueries",
            "cleanrooms:ListSchemas",
            "cleanrooms:ListTagsForResource",
            "cleanrooms:PassCollaboration",
            "cleanrooms:PassMembership",
            "cleanrooms:TagResource",
            "ecr:DescribeRepositories",
            "ecr:ListImages",
            "glue:BatchGetPartition",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetSchema",
            "glue:GetSchemaVersion",
            "glue:GetTable",
            "glue:GetTables",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:ListAttachedRolePolicies",
            "iam:ListPolicies",
            "iam:ListRolePolicies",
            "iam:ListRoles",
            "iam:PassRole",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket"
        ]
    },
    "NeptuneGraphReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "kms:ListAliases",
            "kms:ListKeys",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "neptune-graph:Get*",
            "neptune-graph:List*",
            "neptune-graph:Read*"
        ]
    },
    "IVSReadOnlyAccess": {
        "permissions": [
            "ivs:BatchGetChannel",
            "ivs:GetChannel",
            "ivs:GetComposition",
            "ivs:GetEncoderConfiguration",
            "ivs:GetIngestConfiguration",
            "ivs:GetParticipant",
            "ivs:GetPlaybackKeyPair",
            "ivs:GetPlaybackRestrictionPolicy",
            "ivs:GetPublicKey",
            "ivs:GetRecordingConfiguration",
            "ivs:GetStage",
            "ivs:GetStageSession",
            "ivs:GetStorageConfiguration",
            "ivs:GetStream",
            "ivs:GetStreamSession",
            "ivs:ListChannels",
            "ivs:ListCompositions",
            "ivs:ListEncoderConfigurations",
            "ivs:ListIngestConfigurations",
            "ivs:ListParticipantEvents",
            "ivs:ListParticipants",
            "ivs:ListPlaybackKeyPairs",
            "ivs:ListPlaybackRestrictionPolicies",
            "ivs:ListPublicKeys",
            "ivs:ListRecordingConfigurations",
            "ivs:ListStageSessions",
            "ivs:ListStages",
            "ivs:ListStorageConfigurations",
            "ivs:ListStreamKeys",
            "ivs:ListStreamSessions",
            "ivs:ListStreams",
            "ivs:ListTagsForResource"
        ]
    },
    "AWSMSKReplicatorExecutionRole": {
        "permissions": [
            "kafka-cluster:AlterCluster",
            "kafka-cluster:AlterGroup",
            "kafka-cluster:AlterTopic",
            "kafka-cluster:AlterTopicDynamicConfiguration",
            "kafka-cluster:Connect",
            "kafka-cluster:CreateTopic",
            "kafka-cluster:DescribeCluster",
            "kafka-cluster:DescribeGroup",
            "kafka-cluster:DescribeTopic",
            "kafka-cluster:DescribeTopicDynamicConfiguration",
            "kafka-cluster:ReadData",
            "kafka-cluster:WriteData",
            "kafka-cluster:WriteDataIdempotently"
        ]
    },
    "AmazonBedrockFullAccess": {
        "permissions": [
            "bedrock:*",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:DescribeKey",
            "sagemaker:AddTags",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateModel",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteTags",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeHubContent",
            "sagemaker:DescribeModel",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointWithResponseStream",
            "sagemaker:ListHubContents",
            "sagemaker:ListTags",
            "sagemaker:UpdateEndpoint"
        ]
    },
    "AmazonBedrockReadOnly": {
        "permissions": [
            "bedrock:Get*",
            "bedrock:List*",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeHubContent",
            "sagemaker:DescribeInferenceComponent",
            "sagemaker:DescribeModel",
            "sagemaker:ListEndpoints",
            "sagemaker:ListHubContents",
            "sagemaker:ListTags"
        ]
    },
    "CostOptimizationHubReadOnlyAccess": {
        "permissions": [
            "cost-optimization-hub:GetPreferences",
            "cost-optimization-hub:GetRecommendation",
            "cost-optimization-hub:ListEnrollmentStatuses",
            "cost-optimization-hub:ListRecommendationSummaries",
            "cost-optimization-hub:ListRecommendations"
        ]
    },
    "IVSFullAccess": {
        "permissions": [
            "ivs:*",
            "ivschat:*"
        ]
    },
    "CostOptimizationHubAdminAccess": {
        "permissions": [
            "cost-optimization-hub:GetPreferences",
            "cost-optimization-hub:GetRecommendation",
            "cost-optimization-hub:ListEnrollmentStatuses",
            "cost-optimization-hub:ListRecommendationSummaries",
            "cost-optimization-hub:ListRecommendations",
            "cost-optimization-hub:UpdateEnrollmentStatus",
            "cost-optimization-hub:UpdatePreferences",
            "iam:CreateServiceLinkedRole",
            "organizations:EnableAWSServiceAccess"
        ]
    },
    "CloudWatchNetworkMonitorServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeNetworkInterfaceAttribute",
            "ec2:DescribeNetworkInterfacePermissions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:RevokeSecurityGroupEgress"
        ]
    },
    "AmazonOpenSearchDashboardsServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSArtifactReportsReadOnlyAccess": {
        "permissions": [
            "artifact:Get",
            "artifact:GetReport",
            "artifact:GetReportMetadata",
            "artifact:GetTermForReport",
            "artifact:ListReports"
        ]
    },
    "AWSGrafanaWorkspacePermissionManagementV2": {
        "permissions": [
            "grafana:DescribeWorkspace",
            "grafana:DescribeWorkspaceAuthentication",
            "grafana:ListPermissions",
            "grafana:ListWorkspaces",
            "grafana:UpdatePermissions",
            "sso-directory:DescribeGroup",
            "sso-directory:DescribeUser",
            "sso:DescribeRegisteredRegions",
            "sso:GetManagedApplicationInstance",
            "sso:GetProfile",
            "sso:GetSharedSsoConfiguration",
            "sso:ListDirectoryAssociations",
            "sso:ListProfileAssociations",
            "sso:ListProfiles"
        ]
    },
    "AmazonECSInfrastructureRolePolicyForVolumes": {
        "permissions": [
            "ec2:AttachVolume",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DeleteVolume",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeVolumes",
            "ec2:DetachVolume"
        ]
    },
    "AmazonECSInfrastructureRolePolicyForServiceConnectTransportLayerSecurity": {
        "permissions": [
            "acm-pca:DescribeCertificateAuthority",
            "acm-pca:GetCertificate",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:IssueCertificate",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "secretsmanager:RotateSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UpdateSecret",
            "secretsmanager:UpdateSecretVersionStage"
        ]
    },
    "AmazonSecurityLakeMetastoreManager": {
        "permissions": [
            "glue:BatchCreatePartition",
            "glue:CreatePartition",
            "glue:GetTable",
            "glue:UpdateTable",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:ReceiveMessage"
        ]
    },
    "AmazonInspector2ManagedCisPolicy": {
        "permissions": [
            "inspector2:SendCisSessionHealth",
            "inspector2:SendCisSessionTelemetry",
            "inspector2:StartCisSession",
            "inspector2:StopCisSession"
        ]
    },
    "AmazonLexReplicationPolicy": {
        "permissions": [
            "iam:PassRole",
            "lex:BuildBotLocale",
            "lex:CreateBot",
            "lex:CreateBotAlias",
            "lex:CreateBotLocale",
            "lex:CreateBotVersion",
            "lex:CreateCustomVocabulary",
            "lex:CreateExport",
            "lex:CreateIntent",
            "lex:CreateSlot",
            "lex:CreateSlotType",
            "lex:CreateUploadUrl",
            "lex:DeleteBot",
            "lex:DeleteBotAlias",
            "lex:DeleteBotChannel",
            "lex:DeleteBotLocale",
            "lex:DeleteBotVersion",
            "lex:DeleteCustomVocabulary",
            "lex:DeleteIntent",
            "lex:DeleteResourcePolicy",
            "lex:DeleteSlot",
            "lex:DeleteSlotType",
            "lex:DescribeBot",
            "lex:DescribeBotAlias",
            "lex:DescribeBotLocale",
            "lex:DescribeBotVersion",
            "lex:DescribeCustomVocabulary",
            "lex:DescribeExport",
            "lex:DescribeImport",
            "lex:DescribeIntent",
            "lex:DescribeSlot",
            "lex:DescribeSlotType",
            "lex:ListBotLocales",
            "lex:ListBots",
            "lex:ListIntents",
            "lex:ListSlotTypes",
            "lex:ListSlots",
            "lex:StartImport",
            "lex:UpdateBot",
            "lex:UpdateBotAlias",
            "lex:UpdateBotLocale",
            "lex:UpdateCustomVocabulary",
            "lex:UpdateExport",
            "lex:UpdateIntent",
            "lex:UpdateSlot",
            "lex:UpdateSlotType"
        ]
    },
    "AmazonSageMakerCanvasBedrockAccess": {
        "permissions": [
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AWSServiceRoleForPrivateMarketplaceAdminPolicy": {
        "permissions": [
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:StartChangeSet",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganizationalUnit",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AmazonRDSCustomInstanceProfileRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:AssignPrivateIpAddresses",
            "ec2:CreateSnapshot",
            "ec2:CreateSnapshots",
            "ec2:CreateTags",
            "ec2:UnassignPrivateIpAddresses",
            "ec2messages:AcknowledgeMessage",
            "ec2messages:DeleteMessage",
            "ec2messages:FailMessage",
            "ec2messages:GetEndpoint",
            "ec2messages:GetMessages",
            "ec2messages:SendReply",
            "events:PutEvents",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "s3:AbortMultipartUpload",
            "s3:ListBucketMultipartUploads",
            "s3:ListBucketVersions",
            "s3:ListMultipartUploadParts",
            "s3:getObject",
            "s3:getObjectVersion",
            "s3:putObject",
            "secretsmanager:CreateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:TagResource",
            "sqs:DeleteMessage",
            "sqs:GetQueueUrl",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "ssm:DescribeDocument",
            "ssm:GetDocument",
            "ssm:GetManifest",
            "ssm:PutConfigurePackageResult",
            "ssm:UpdateInstanceInformation",
            "ssmmessages:CreateControlChannel",
            "ssmmessages:OpenControlChannel"
        ]
    },
    "AWSMarketplaceResaleAuthorizationServiceRolePolicy": {
        "permissions": [
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetResourcePolicy",
            "aws-marketplace:PutResourcePolicy",
            "ram:AcceptResourceShareInvitation",
            "ram:AssociateResourceShare",
            "ram:CreateResourceShare",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShareInvitations"
        ]
    },
    "AmazonTimestreamInfluxDBServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret"
        ]
    },
    "AmazonTimestreamInfluxDBFullAccess": {
        "permissions": [
            "ec2:CreateNetworkInterface",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "iam:CreateServiceLinkedRole",
            "s3:GetBucketPolicy",
            "s3:ListBucket",
            "timestream-influxdb:CreateDbInstance",
            "timestream-influxdb:CreateDbParameterGroup",
            "timestream-influxdb:DeleteDbInstance",
            "timestream-influxdb:GetDbInstance",
            "timestream-influxdb:GetDbParameterGroup",
            "timestream-influxdb:ListDbInstances",
            "timestream-influxdb:ListDbParameterGroups",
            "timestream-influxdb:ListTagsForResource",
            "timestream-influxdb:TagResource",
            "timestream-influxdb:UntagResource",
            "timestream-influxdb:UpdateDbInstance"
        ]
    },
    "AWSEC2VssSnapshotPolicy": {
        "permissions": [
            "ec2:CreateImage",
            "ec2:CreateSnapshots",
            "ec2:CreateTags",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeSnapshots"
        ]
    },
    "AWSQuickSightAssetBundleExportPolicy": {
        "permissions": [
            "quicksight:DescribeAnalysis",
            "quicksight:DescribeAnalysisPermissions",
            "quicksight:DescribeAssetBundleExportJob",
            "quicksight:DescribeDashboard",
            "quicksight:DescribeDashboardPermissions",
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:DescribeDataSetRefreshProperties",
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:DescribeRefreshSchedule",
            "quicksight:DescribeTheme",
            "quicksight:DescribeThemePermissions",
            "quicksight:DescribeVPCConnection",
            "quicksight:ListAssetBundleExportJobs",
            "quicksight:ListRefreshSchedules",
            "quicksight:ListTagsForResource",
            "quicksight:ListVPCConnections",
            "quicksight:StartAssetBundleExportJob"
        ]
    },
    "AWSQuickSightAssetBundleImportPolicy": {
        "permissions": [
            "quicksight:CreateAnalysis",
            "quicksight:CreateDashboard",
            "quicksight:CreateDataSet",
            "quicksight:CreateDataSource",
            "quicksight:CreateRefreshSchedule",
            "quicksight:CreateTheme",
            "quicksight:CreateVPCConnection",
            "quicksight:DeleteAnalysis",
            "quicksight:DeleteDashboard",
            "quicksight:DeleteDataSet",
            "quicksight:DeleteDataSetRefreshProperties",
            "quicksight:DeleteDataSource",
            "quicksight:DeleteRefreshSchedule",
            "quicksight:DeleteTheme",
            "quicksight:DeleteVPCConnection",
            "quicksight:DescribeAnalysis",
            "quicksight:DescribeAnalysisPermissions",
            "quicksight:DescribeAssetBundleImportJob",
            "quicksight:DescribeDashboard",
            "quicksight:DescribeDashboardPermissions",
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:DescribeDataSetRefreshProperties",
            "quicksight:DescribeDataSource",
            "quicksight:DescribeDataSourcePermissions",
            "quicksight:DescribeRefreshSchedule",
            "quicksight:DescribeTheme",
            "quicksight:DescribeThemePermissions",
            "quicksight:DescribeVPCConnection",
            "quicksight:ListAssetBundleImportJobs",
            "quicksight:ListRefreshSchedules",
            "quicksight:ListTagsForResource",
            "quicksight:ListVPCConnections",
            "quicksight:PassDataSet",
            "quicksight:PassDataSource",
            "quicksight:PutDataSetRefreshProperties",
            "quicksight:StartAssetBundleImportJob",
            "quicksight:TagResource",
            "quicksight:UntagResource",
            "quicksight:UpdateAnalysis",
            "quicksight:UpdateAnalysisPermissions",
            "quicksight:UpdateDashboard",
            "quicksight:UpdateDashboardLinks",
            "quicksight:UpdateDashboardPermissions",
            "quicksight:UpdateDashboardPublishedVersion",
            "quicksight:UpdateDataSet",
            "quicksight:UpdateDataSetPermissions",
            "quicksight:UpdateDataSource",
            "quicksight:UpdateDataSourcePermissions",
            "quicksight:UpdateRefreshSchedule",
            "quicksight:UpdateTheme",
            "quicksight:UpdateThemePermissions",
            "quicksight:UpdateVPCConnection"
        ]
    },
    "AWSDeadlineCloud-UserAccessFarms": {
        "permissions": [
            "deadline:AssociateMemberToFarm",
            "deadline:AssociateMemberToFleet",
            "deadline:AssociateMemberToJob",
            "deadline:AssociateMemberToQueue",
            "deadline:AssumeFleetRoleForRead",
            "deadline:AssumeQueueRoleForRead",
            "deadline:AssumeQueueRoleForUser",
            "deadline:CreateBudget",
            "deadline:CreateJob",
            "deadline:DeleteBudget",
            "deadline:DisassociateMemberFromFarm",
            "deadline:DisassociateMemberFromFleet",
            "deadline:DisassociateMemberFromJob",
            "deadline:DisassociateMemberFromQueue",
            "deadline:GetApplicationVersion",
            "deadline:GetBudget",
            "deadline:GetFarm",
            "deadline:GetFleet",
            "deadline:GetJob",
            "deadline:GetJobTemplate",
            "deadline:GetQueue",
            "deadline:GetQueueEnvironment",
            "deadline:GetQueueFleetAssociation",
            "deadline:GetSession",
            "deadline:GetSessionAction",
            "deadline:GetSessionsStatisticsAggregation",
            "deadline:GetStep",
            "deadline:GetStorageProfile",
            "deadline:GetStorageProfileForQueue",
            "deadline:GetTask",
            "deadline:GetWorker",
            "deadline:ListBudgets",
            "deadline:ListFarmMembers",
            "deadline:ListFarms",
            "deadline:ListFleetMembers",
            "deadline:ListFleets",
            "deadline:ListJobMembers",
            "deadline:ListJobParameterDefinitions",
            "deadline:ListJobs",
            "deadline:ListQueueEnvironments",
            "deadline:ListQueueFleetAssociations",
            "deadline:ListQueueMembers",
            "deadline:ListQueues",
            "deadline:ListSessionpermissions",
            "deadline:ListSessions",
            "deadline:ListSessionsForWorker",
            "deadline:ListStepConsumers",
            "deadline:ListStepDependencies",
            "deadline:ListSteps",
            "deadline:ListStorageProfiles",
            "deadline:ListStorageProfilesForQueue",
            "deadline:ListTasks",
            "deadline:ListWorkers",
            "deadline:SearchJobs",
            "deadline:SearchSteps",
            "deadline:SearchTasks",
            "deadline:SearchWorkers",
            "deadline:StartSessionsStatisticsAggregation",
            "deadline:UpdateBudget",
            "deadline:UpdateJob",
            "deadline:UpdateSession",
            "deadline:UpdateStep",
            "deadline:UpdateTask",
            "ec2:DescribeInstanceTypes",
            "identitystore:DescribeGroup",
            "identitystore:DescribeUser",
            "identitystore:ListGroupMembershipsForMember",
            "identitystore:ListUsers"
        ]
    },
    "AWSDeadlineCloud-UserAccessFleets": {
        "permissions": [
            "deadline:AssociateMemberToFleet",
            "deadline:AssumeFleetRoleForRead",
            "deadline:DisassociateMemberFromFleet",
            "deadline:GetApplicationVersion",
            "deadline:GetFleet",
            "deadline:GetQueueFleetAssociation",
            "deadline:GetWorker",
            "deadline:ListFleetMembers",
            "deadline:ListFleets",
            "deadline:ListQueueFleetAssociations",
            "deadline:ListSessionsForWorker",
            "deadline:ListWorkers",
            "deadline:SearchWorkers",
            "ec2:DescribeInstanceTypes",
            "identitystore:DescribeGroup",
            "identitystore:DescribeUser",
            "identitystore:ListGroupMembershipsForMember",
            "identitystore:ListUsers"
        ]
    },
    "AWSDeadlineCloud-UserAccessJobs": {
        "permissions": [
            "deadline:AssociateMemberToJob",
            "deadline:DisassociateMemberFromJob",
            "deadline:GetApplicationVersion",
            "deadline:GetJob",
            "deadline:GetJobTemplate",
            "deadline:GetSession",
            "deadline:GetSessionAction",
            "deadline:GetStep",
            "deadline:GetTask",
            "deadline:ListJobMembers",
            "deadline:ListJobParameterDefinitions",
            "deadline:ListJobs",
            "deadline:ListSessionpermissions",
            "deadline:ListSessions",
            "deadline:ListStepConsumers",
            "deadline:ListStepDependencies",
            "deadline:ListSteps",
            "deadline:ListTasks",
            "deadline:SearchSteps",
            "deadline:SearchTasks",
            "deadline:UpdateJob",
            "deadline:UpdateSession",
            "deadline:UpdateStep",
            "deadline:UpdateTask",
            "ec2:DescribeInstanceTypes",
            "identitystore:DescribeGroup",
            "identitystore:DescribeUser",
            "identitystore:ListGroupMembershipsForMember",
            "identitystore:ListUsers"
        ]
    },
    "AWSDeadlineCloud-UserAccessQueues": {
        "permissions": [
            "deadline:AssociateMemberToJob",
            "deadline:AssociateMemberToQueue",
            "deadline:AssumeQueueRoleForRead",
            "deadline:AssumeQueueRoleForUser",
            "deadline:CreateJob",
            "deadline:DisassociateMemberFromJob",
            "deadline:DisassociateMemberFromQueue",
            "deadline:GetApplicationVersion",
            "deadline:GetJob",
            "deadline:GetJobTemplate",
            "deadline:GetQueue",
            "deadline:GetQueueEnvironment",
            "deadline:GetQueueFleetAssociation",
            "deadline:GetSession",
            "deadline:GetSessionAction",
            "deadline:GetStep",
            "deadline:GetStorageProfileForQueue",
            "deadline:GetTask",
            "deadline:ListJobMembers",
            "deadline:ListJobParameterDefinitions",
            "deadline:ListJobs",
            "deadline:ListQueueEnvironments",
            "deadline:ListQueueFleetAssociations",
            "deadline:ListQueueMembers",
            "deadline:ListQueues",
            "deadline:ListSessionpermissions",
            "deadline:ListSessions",
            "deadline:ListStepConsumers",
            "deadline:ListStepDependencies",
            "deadline:ListSteps",
            "deadline:ListStorageProfilesForQueue",
            "deadline:ListTasks",
            "deadline:SearchJobs",
            "deadline:SearchSteps",
            "deadline:SearchTasks",
            "deadline:UpdateJob",
            "deadline:UpdateSession",
            "deadline:UpdateStep",
            "deadline:UpdateTask",
            "ec2:DescribeInstanceTypes",
            "identitystore:DescribeGroup",
            "identitystore:DescribeUser",
            "identitystore:ListGroupMembershipsForMember",
            "identitystore:ListUsers"
        ]
    },
    "AWSDeadlineCloud-FleetWorker": {
        "permissions": [
            "deadline:AssumeFleetRoleForWorker",
            "deadline:AssumeQueueRoleForWorker",
            "deadline:BatchGetJobEntity",
            "deadline:UpdateWorker",
            "deadline:UpdateWorkerSchedule"
        ]
    },
    "AWSDeadlineCloud-WorkerHost": {
        "permissions": [
            "deadline:AssumeFleetRoleForWorker",
            "deadline:CreateWorker"
        ]
    },
    "SplitCostAllocationDataServiceRolePolicy": {
        "permissions": [
            "aps:ListWorkspaces",
            "aps:QueryMetrics",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListParents"
        ]
    },
    "AmazonDataZoneSageMakerEnvironmentRolePermissionsBoundary": {
        "permissions": [
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "athena:BatchGetNamedQuery",
            "athena:BatchGetPreparedStatement",
            "athena:BatchGetQueryExecution",
            "athena:CreateNamedQuery",
            "athena:CreateNotebook",
            "athena:CreatePreparedStatement",
            "athena:CreatePresignedNotebookUrl",
            "athena:DeleteNamedQuery",
            "athena:DeleteNotebook",
            "athena:DeletePreparedStatement",
            "athena:ExportNotebook",
            "athena:GetDataCatalog",
            "athena:GetDatabase",
            "athena:GetNamedQuery",
            "athena:GetPreparedStatement",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetQueryResultsStream",
            "athena:GetQueryRuntimeStatistics",
            "athena:GetTableMetadata",
            "athena:GetWorkGroup",
            "athena:ImportNotebook",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListEngineVersions",
            "athena:ListNamedQueries",
            "athena:ListPreparedStatements",
            "athena:ListQueryExecutions",
            "athena:ListTableMetadata",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "athena:StartCalculationExecution",
            "athena:StartQueryExecution",
            "athena:StartSession",
            "athena:StopCalculationExecution",
            "athena:StopQueryExecution",
            "athena:TerminateSession",
            "athena:UpdateNamedQuery",
            "athena:UpdateNotebook",
            "athena:UpdateNotebookMetadata",
            "athena:UpdatePreparedStatement",
            "aws-marketplace:ViewSubscriptions",
            "cloudformation:GetTemplateSummary",
            "cloudformation:ListStackResources",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:PutMetricData",
            "codebuild:BatchGetBuilds",
            "codebuild:StartBuild",
            "codecommit:BatchGetRepositories",
            "codecommit:CreateRepository",
            "codecommit:GetRepository",
            "codecommit:GitPull",
            "codecommit:GitPush",
            "codecommit:List*",
            "datazone:*",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpointServices",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchDeleteImage",
            "ecr:BatchGetImage",
            "ecr:CompleteLayerUpload",
            "ecr:CreateRepository",
            "ecr:DeleteRepository",
            "ecr:DeleteRepositoryPolicy",
            "ecr:Describe*",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
            "ecr:SetRepositoryPolicy",
            "ecr:StartImageScan",
            "ecr:TagResource",
            "ecr:UntagResource",
            "ecr:UploadLayerPart",
            "elastic-inference:Connect",
            "elasticfilesystem:DescribeFileSystems",
            "elasticfilesystem:DescribeMountTargets",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceGroups",
            "events:DescribeRule",
            "events:ListTagsForResource",
            "events:PutRule",
            "events:PutTargets",
            "events:TagResource",
            "forecast:CreateAutoPredictor",
            "forecast:CreateDataset",
            "forecast:CreateDatasetGroup",
            "forecast:CreateDatasetImportJob",
            "forecast:CreateExplainability",
            "forecast:CreateExplainabilityExport",
            "forecast:CreateForecast",
            "forecast:CreateForecastEndpoint",
            "forecast:CreateForecastExportJob",
            "forecast:CreatePredictor",
            "forecast:CreatePredictorBacktestExportJob",
            "forecast:DeleteResourceTree",
            "forecast:DescribeAutoPredictor",
            "forecast:DescribeDataset",
            "forecast:DescribeDatasetImportJob",
            "forecast:DescribeExplainability",
            "forecast:DescribeExplainabilityExport",
            "forecast:DescribeForecast",
            "forecast:DescribeForecastEndpoint",
            "forecast:DescribeForecastExportJob",
            "forecast:DescribePredictor",
            "forecast:DescribePredictorBacktestExportJob",
            "forecast:GetAccuracyMetrics",
            "forecast:GetRecentForecastContext",
            "forecast:InvokeForecastEndpoint",
            "forecast:TagResource",
            "fsx:DescribeFileSystems",
            "glue:*DataQuality*",
            "glue:BatchCreatePartition",
            "glue:BatchDeleteConnection",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGet*",
            "glue:BatchGetJobs",
            "glue:BatchGetWorkflows",
            "glue:BatchStopJobRun",
            "glue:BatchUpdatePartition",
            "glue:CreateBlueprint",
            "glue:CreateConnection",
            "glue:CreateCrawler",
            "glue:CreateDataQualityRuleset",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreatePartition",
            "glue:CreatePartitionIndex",
            "glue:CreateSession",
            "glue:CreateTable",
            "glue:CreateWorkflow",
            "glue:DeleteBlueprint",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeleteConnection",
            "glue:DeleteCrawler",
            "glue:DeleteJob",
            "glue:DeletePartition",
            "glue:DeletePartitionIndex",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:DeleteWorkflow",
            "glue:Get*",
            "glue:GetColumnStatisticsForPartition",
            "glue:GetColumnStatisticsForTable",
            "glue:GetConnection",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetPartition",
            "glue:GetPartitions",
            "glue:GetTable",
            "glue:GetTables",
            "glue:List*",
            "glue:ListJobs",
            "glue:ListSchemas",
            "glue:NotifyEvent",
            "glue:PutWorkflowRunProperties",
            "glue:ResetJobBookmark",
            "glue:ResumeWorkflowRun",
            "glue:RunStatement",
            "glue:SearchTables",
            "glue:StartBlueprintRun",
            "glue:StartCrawler",
            "glue:StartCrawlerSchedule",
            "glue:StartJobRun",
            "glue:StartWorkflowRun",
            "glue:StopCrawler",
            "glue:StopCrawlerSchedule",
            "glue:StopWorkflowRun",
            "glue:UpdateBlueprint",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:UpdateConnection",
            "glue:UpdateCrawler",
            "glue:UpdateCrawlerSchedule",
            "glue:UpdateJob",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:UpdateWorkflow",
            "groundtruthlabeling:*",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:ListAliases",
            "kms:ListKeys",
            "kms:RetireGrant",
            "lakeformation:GetDataAccess",
            "lambda:InvokeFunction",
            "lambda:ListFunctions",
            "logs:CreateLogDelivery",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DeleteLogDelivery",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:GetLogDelivery",
            "logs:GetLogEvents",
            "logs:ListLogDeliveries",
            "logs:PutLogEvents",
            "logs:UpdateLogDelivery",
            "ram:AcceptResourceShareInvitation",
            "rds:DescribeDBInstances",
            "redshift-data:BatchExecuteStatement",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-data:ListSchemas",
            "redshift-data:ListTables",
            "redshift-serverless:GetCredentials",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListWorkgroups",
            "redshift:CreateClusterUser",
            "redshift:DescribeClusters",
            "redshift:GetClusterCredentials",
            "redshift:GetClusterCredentialsWithIAM",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetBucketAcl",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketCors",
            "s3:PutObject",
            "s3:PutObjectAcl",
            "s3:PutObjectRetention",
            "s3:ReplicateObject",
            "s3:RestoreObject",
            "sagemaker-geospatial:*",
            "sagemaker:*",
            "sagemaker:AddTags",
            "sagemaker:CreateApp",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreateSpace",
            "sagemaker:CreateUserProfile",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteSpace",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeSpace",
            "sagemaker:DescribeUserProfile",
            "sagemaker:ListApps",
            "sagemaker:ListDomains",
            "sagemaker:ListSpaces",
            "sagemaker:ListTags",
            "sagemaker:ListUserProfiles",
            "sagemaker:UpdateSpace",
            "sagemaker:UpdateUserProfile",
            "secretsmanager:CreateSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:TagResource",
            "servicecatalog:Describe*",
            "servicecatalog:List*",
            "servicecatalog:ProvisionProduct",
            "servicecatalog:ScanProvisionedProducts",
            "servicecatalog:SearchProducts",
            "servicecatalog:SearchProvisionedProducts",
            "servicecatalog:TerminateProvisionedProduct",
            "servicecatalog:UpdateProvisionedProduct",
            "sns:CreateTopic",
            "sns:ListTopics",
            "sns:Publish",
            "sns:Subscribe",
            "sqlworkbench:*",
            "sso:AssociateProfile",
            "sso:CreateApplicationAssignment",
            "states:DescribeExecution",
            "states:GetExecutionHistory",
            "states:StartExecution",
            "states:StopExecution",
            "states:UpdateStateMachine",
            "tag:GetResources"
        ]
    },
    "AmazonDataZoneSageMakerProvisioningRolePolicy": {
        "permissions": [
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "glue:CreateConnection",
            "glue:DeleteConnection",
            "glue:GetConnection",
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:PassRole",
            "iam:PutRolePolicy",
            "kms:DescribeKey",
            "sagemaker:CreateDomain",
            "sagemaker:DeleteDomain",
            "sagemaker:DescribeDomain",
            "sagemaker:ListDomains"
        ]
    },
    "AmazonDataZoneSageMakerManageAccessRolePolicy": {
        "permissions": [
            "ecr:DeleteRepositoryPolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:SetRepositoryPolicy",
            "kms:CreateGrant",
            "kms:DescribeKey",
            "ram:CreateResourceShare",
            "ram:DeleteResourceShare",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShareInvitations",
            "ram:GetResourceShares",
            "ram:TagResource",
            "s3:DeleteBucketPolicy",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "sagemaker:AddTags",
            "sagemaker:DeleteModelPackageGroupPolicy",
            "sagemaker:DeleteResourcePolicy",
            "sagemaker:DeleteTags",
            "sagemaker:DescribeAlgorithm",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeFeatureGroup",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:GetModelPackageGroupPolicy",
            "sagemaker:GetResourcePolicy",
            "sagemaker:ListModelPackages",
            "sagemaker:ListTags",
            "sagemaker:PutModelPackageGroupPolicy",
            "sagemaker:PutResourcePolicy",
            "sagemaker:Search"
        ]
    },
    "AWSServiceRoleForAmazonQDeveloper": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSServiceRoleForUserSubscriptions": {
        "permissions": [
            "identitystore:DescribeGroup",
            "identitystore:DescribeUser",
            "identitystore:IsMemberInGroups",
            "identitystore:ListGroupMemberships",
            "organizations:DescribeOrganization",
            "sso:DescribeApplication",
            "sso:DescribeInstance",
            "sso:ListInstances"
        ]
    },
    "QBusinessServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents"
        ]
    },
    "AmazonRoute53ProfilesReadOnlyAccess": {
        "permissions": [
            "route53profiles:GetProfile",
            "route53profiles:GetProfileAssociation",
            "route53profiles:GetProfilePolicy",
            "route53profiles:GetProfileResourceAssociation",
            "route53profiles:ListProfileAssociations",
            "route53profiles:ListProfileResourceAssociations",
            "route53profiles:ListProfiles",
            "route53profiles:ListTagsForResource",
            "route53resolver:GetFirewallConfig",
            "route53resolver:GetResolverConfig",
            "route53resolver:GetResolverDnssecConfig",
            "route53resolver:GetResolverQueryLogConfig"
        ]
    },
    "AmazonRoute53ProfilesFullAccess": {
        "permissions": [
            "ec2:DescribeVpcs",
            "route53:GetHostedZone",
            "route53profiles:AssociateProfile",
            "route53profiles:AssociateResourceToProfile",
            "route53profiles:CreateProfile",
            "route53profiles:DeleteProfile",
            "route53profiles:DisassociateProfile",
            "route53profiles:DisassociateResourceFromProfile",
            "route53profiles:GetProfile",
            "route53profiles:GetProfileAssociation",
            "route53profiles:GetProfilePolicy",
            "route53profiles:GetProfileResourceAssociation",
            "route53profiles:ListProfileAssociations",
            "route53profiles:ListProfileResourceAssociations",
            "route53profiles:ListProfiles",
            "route53profiles:ListTagsForResource",
            "route53profiles:PutProfilePolicy",
            "route53profiles:TagResource",
            "route53profiles:UntagResource",
            "route53profiles:UpdateProfileResourceAssociation",
            "route53resolver:GetFirewallConfig",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetResolverConfig",
            "route53resolver:GetResolverDnssecConfig",
            "route53resolver:GetResolverQueryLogConfig",
            "route53resolver:GetResolverRule"
        ]
    },
    "AmazonOpenSearchDirectQueryGlueCreateAccess": {
        "permissions": [
            "glue:BatchCreatePartition",
            "glue:CreateDatabase",
            "glue:CreatePartition",
            "glue:CreateTable"
        ]
    },
    "EC2FastLaunchFullAccess": {
        "permissions": [
            "ec2:CreateTags",
            "ec2:DescribeFastLaunchImages",
            "ec2:DescribeImages",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeRegions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSnapshots",
            "ec2:DescribeSubnets",
            "ec2:DescribeTags",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcs",
            "ec2:DisableFastLaunch",
            "ec2:EnableFastLaunch",
            "ec2:RunInstances",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole"
        ]
    },
    "AmazonSESServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "CloudWatchApplicationSignalsReadOnlyAccess": {
        "permissions": [
            "application-signals:BatchGetServiceLevelObjectiveBudgetReport",
            "application-signals:GetService",
            "application-signals:GetServiceLevelObjective",
            "application-signals:ListServiceDependencies",
            "application-signals:ListServiceDependents",
            "application-signals:ListServiceLevelObjectives",
            "application-signals:ListServiceOperations",
            "application-signals:ListServices",
            "application-signals:ListTagsForResource",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "iam:GetRole",
            "logs:GetQueryResults",
            "logs:StartQuery",
            "logs:StopQuery",
            "rum:BatchGetRumMetricDefinitions",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "synthetics:DescribeCanaries",
            "synthetics:DescribeCanariesLastRun",
            "synthetics:GetCanaryRuns",
            "xray:GetTraceSummaries"
        ]
    },
    "CloudWatchApplicationSignalsFullAccess": {
        "permissions": [
            "application-signals:*",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricAlarm",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "logs:GetQueryResults",
            "logs:StartQuery",
            "logs:StopQuery",
            "rum:BatchCreateRumMetricDefinitions",
            "rum:BatchDeleteRumMetricDefinitions",
            "rum:BatchGetRumMetricDefinitions",
            "rum:GetAppMonitor",
            "rum:GetAppMonitorData",
            "rum:ListAppMonitors",
            "rum:PutRumMetricsDestination",
            "rum:UpdateRumMetricDefinition",
            "sns:CreateTopic",
            "sns:ListTopics",
            "sns:Subscribe",
            "synthetics:DescribeCanaries",
            "synthetics:DescribeCanariesLastRun",
            "synthetics:GetCanaryRuns",
            "xray:GetTraceSummaries"
        ]
    },
    "AWSBCMDataExportsServiceRolePolicy": {
        "permissions": [
            "cost-optimization-hub:ListEnrollmentStatuses",
            "cost-optimization-hub:ListRecommendations"
        ]
    },
    "OpensearchIngestionSelfManagedVpcePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints"
        ]
    },
    "AWSApplicationAutoscalingWorkSpacesPoolPolicy": {
        "permissions": [
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "workspaces:DescribeWorkspacesPools",
            "workspaces:UpdateWorkspacesPool"
        ]
    },
    "ECRTemplateServiceRolePolicy": {
        "permissions": [
            "ecr:CreateRepository"
        ]
    },
    "AmazonWorkSpacesSecureBrowserReadOnly": {
        "permissions": [
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "kinesis:ListStreams",
            "workspaces-web:GetBrowserSettings",
            "workspaces-web:GetIdentityProvider",
            "workspaces-web:GetIpAccessSettings",
            "workspaces-web:GetNetworkSettings",
            "workspaces-web:GetPortal",
            "workspaces-web:GetPortalServiceProviderMetadata",
            "workspaces-web:GetTrustStore",
            "workspaces-web:GetTrustStoreCertificate",
            "workspaces-web:GetUserAccessLoggingSettings",
            "workspaces-web:GetUserSettings",
            "workspaces-web:ListBrowserSettings",
            "workspaces-web:ListIdentityProviders",
            "workspaces-web:ListIpAccessSettings",
            "workspaces-web:ListNetworkSettings",
            "workspaces-web:ListPortals",
            "workspaces-web:ListTagsForResource",
            "workspaces-web:ListTrustStoreCertificates",
            "workspaces-web:ListTrustStores",
            "workspaces-web:ListUserAccessLoggingSettings",
            "workspaces-web:ListUserSettings"
        ]
    },
    "SSMQuickSetupRolePolicy": {
        "permissions": [
            "cloudformation:DeleteStackInstances",
            "cloudformation:DeleteStackSet",
            "cloudformation:DescribeStackInstance",
            "cloudformation:DescribeStackSet",
            "cloudformation:DescribeStackSetOperation",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudformation:ListStackInstances",
            "cloudformation:ListStackSetOperationResults",
            "cloudformation:ListStackSetOperations",
            "cloudformation:ListStacks",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListDelegatedServicesForAccount",
            "organizations:ListOrganizationalUnitsForParent",
            "organizations:ListRoots",
            "ssm:DeleteResourceDataSync",
            "ssm:DescribeAssociationExecutions",
            "ssm:DescribeDocument",
            "ssm:GetDocument",
            "ssm:GetOpsSummary",
            "ssm:ListAssociations",
            "ssm:ListResourceDataSync"
        ]
    },
    "AWSQuickSetupPatchPolicyBaselineAccess": {
        "permissions": [
            "s3:GetObject"
        ]
    },
    "AWSSystemsManagerEnableConfigRecordingExecutionPolicy": {
        "permissions": [
            "config:DescribeConfigurationRecorders",
            "config:DescribeDeliveryChannels",
            "config:PutConfigurationRecorder",
            "config:PutDeliveryChannel",
            "config:StartConfigurationRecorder",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:PassRole",
            "s3:CreateBucket",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutEncryptionConfiguration",
            "sns:CreateTopic",
            "sns:ListTopics"
        ]
    },
    "AWSSystemsManagerEnableExplorerExecutionPolicy": {
        "permissions": [
            "compute-optimizer:GetEnrollmentStatus",
            "config:DescribeConfigurationRecorders",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "ssm:GetServiceSetting",
            "ssm:UpdateServiceSetting",
            "support:DescribeTrustedAdvisorChecks"
        ]
    },
    "AWSQuickSetupDevOpsGuruPermissionsBoundary": {
        "permissions": [
            "cloudformation:DescribeStacks",
            "cloudformation:ListStacks",
            "compute-optimizer:GetEnrollmentStatus",
            "config:DescribeConfigurationRecorders",
            "devops-guru:AddNotificationChannel",
            "devops-guru:UpdateResourceCollection",
            "devops-guru:UpdateServiceIntegration",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "sns:AddPermission",
            "sns:CreateTopic",
            "sns:GetTopicAttributes",
            "sns:ListTopics",
            "sns:Publish",
            "sns:RemovePermission",
            "sns:SetTopicAttributes",
            "ssm:GetServiceSetting",
            "ssm:UpdateServiceSetting",
            "support:DescribeTrustedAdvisorChecks"
        ]
    },
    "AWSQuickSetupPatchPolicyPermissionsBoundary": {
        "permissions": [
            "compute-optimizer:GetEnrollmentStatus",
            "config:DescribeConfigurationRecorders",
            "ec2:AssociateIamInstanceProfile",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeInstances",
            "ec2:DisassociateIamInstanceProfile",
            "iam:AddRoleToInstanceProfile",
            "iam:AttachRolePolicy",
            "iam:CreateInstanceProfile",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfilesForRole",
            "iam:ListRoles",
            "iam:PassRole",
            "iam:TagRole",
            "iam:UntagRole",
            "iam:UpdateRole",
            "lambda:InvokeFunction",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:Get*",
            "s3:List*",
            "s3:Put*",
            "ssm:AddTagsToResource",
            "ssm:DescribeAssociation",
            "ssm:DescribeAssociationExecutions",
            "ssm:DescribeInstanceInformation",
            "ssm:GetAutomationExecution",
            "ssm:GetInventory",
            "ssm:GetPatchBaseline",
            "ssm:GetServiceSetting",
            "ssm:ListTagsForResource",
            "ssm:RemoveTagsFromResource",
            "ssm:StartAutomationExecution",
            "ssm:UpdateAssociation",
            "ssm:UpdateManagedInstanceRole",
            "ssm:UpdateServiceSetting",
            "support:DescribeTrustedAdvisorChecks"
        ]
    },
    "AWSQuickSetupSSMHostMgmtPermissionsBoundary": {
        "permissions": [
            "compute-optimizer:GetEnrollmentStatus",
            "config:DescribeConfigurationRecorders",
            "ec2:AssociateIamInstanceProfile",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeInstances",
            "ec2:DisassociateIamInstanceProfile",
            "iam:AddRoleToInstanceProfile",
            "iam:AttachRolePolicy",
            "iam:CreateInstanceProfile",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfilesForRole",
            "iam:ListRoles",
            "iam:PassRole",
            "iam:UpdateRole",
            "ssm:GetAutomationExecution",
            "ssm:GetServiceSetting",
            "ssm:ListTagsForResource",
            "ssm:StartAutomationExecution",
            "ssm:UpdateServiceSetting",
            "support:DescribeTrustedAdvisorChecks"
        ]
    },
    "AWSQuickSetupDistributorPermissionsBoundary": {
        "permissions": [
            "compute-optimizer:GetEnrollmentStatus",
            "config:DescribeConfigurationRecorders",
            "ec2:AssociateIamInstanceProfile",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeInstances",
            "ec2:DisassociateIamInstanceProfile",
            "iam:AddRoleToInstanceProfile",
            "iam:AttachRolePolicy",
            "iam:CreateInstanceProfile",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListInstanceProfilesForRole",
            "iam:ListRoles",
            "iam:PassRole",
            "iam:UpdateRole",
            "ssm:GetAutomationExecution",
            "ssm:GetServiceSetting",
            "ssm:ListTagsForResource",
            "ssm:StartAutomationExecution",
            "ssm:UpdateServiceSetting",
            "support:DescribeTrustedAdvisorChecks"
        ]
    },
    "AWSQuickSetupCFGCPacksPermissionsBoundary": {
        "permissions": [
            "compute-optimizer:GetEnrollmentStatus",
            "config:DescribeConfigurationRecorders",
            "config:DescribeConformancePackStatus",
            "config:PutConformancePack",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "ssm:GetServiceSetting",
            "ssm:UpdateServiceSetting",
            "support:DescribeTrustedAdvisorChecks"
        ]
    },
    "AWSQuickSetupSchedulerPermissionsBoundary": {
        "permissions": [
            "compute-optimizer:GetEnrollmentStatus",
            "config:DescribeConfigurationRecorders",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstances",
            "ec2:DescribeRegions",
            "ec2:DescribeTags",
            "ec2:StartInstances",
            "ec2:StopInstances",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "ssm:GetCalendarState",
            "ssm:GetServiceSetting",
            "ssm:StartAssociationsOnce",
            "ssm:StartAutomationExecution",
            "ssm:UpdateServiceSetting",
            "support:DescribeTrustedAdvisorChecks",
            "tag:GetResources"
        ]
    },
    "AWSQuickSetupDeploymentRolePolicy": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackDriftDetectionStatus",
            "cloudformation:DescribeStackResourceDrifts",
            "cloudformation:DescribeStacks",
            "cloudformation:DetectStackDrift",
            "cloudformation:DetectStackResourceDrift",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:ListStacks",
            "cloudformation:UpdateStack",
            "config:DeleteConformancePack",
            "config:DescribeConformancePackStatus",
            "config:DescribeConformancePacks",
            "config:PutConformancePack",
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoleTags",
            "iam:PassRole",
            "iam:PutRolePermissionsBoundary",
            "iam:PutRolePolicy",
            "iam:TagRole",
            "iam:UntagRole",
            "iam:UpdateRole",
            "resource-groups:GetGroupQuery",
            "ssm:AddTagsToResource",
            "ssm:CreateAssociation",
            "ssm:CreateDocument",
            "ssm:DeleteAssociation",
            "ssm:DeleteDocument",
            "ssm:DescribeAssociation",
            "ssm:DescribeDocument",
            "ssm:GetDocument",
            "ssm:ListTagsForResource",
            "ssm:RemoveTagsFromResource",
            "ssm:UpdateAssociation",
            "ssm:UpdateDocument",
            "ssm:UpdateDocumentDefaultVersion"
        ]
    },
    "AWSQuickSetupPatchPolicyDeploymentRolePolicy": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackDriftDetectionStatus",
            "cloudformation:DescribeStackResourceDrifts",
            "cloudformation:DescribeStacks",
            "cloudformation:DetectStackDrift",
            "cloudformation:DetectStackResourceDrift",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:ListStacks",
            "cloudformation:UpdateStack",
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoleTags",
            "iam:PassRole",
            "iam:PutRolePermissionsBoundary",
            "iam:PutRolePolicy",
            "iam:TagRole",
            "iam:UntagRole",
            "iam:UpdateRole",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:ListTags",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateFunction*",
            "logs:CreateLogGroup",
            "logs:DeleteLogGroup",
            "logs:DescribeLogGroups",
            "logs:ListTagsForResource",
            "logs:PutRetentionPolicy",
            "logs:TagResource",
            "logs:UntagResource",
            "resource-groups:GetGroupQuery",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:Get*",
            "s3:List*",
            "s3:ListAllMyBuckets",
            "s3:Put*",
            "ssm:AddTagsToResource",
            "ssm:CreateAssociation",
            "ssm:CreateDocument",
            "ssm:DeleteAssociation",
            "ssm:DeleteDocument",
            "ssm:DescribeAssociation",
            "ssm:DescribeDocument",
            "ssm:GetDocument",
            "ssm:ListTagsForResource",
            "ssm:RemoveTagsFromResource",
            "ssm:UpdateAssociation",
            "ssm:UpdateDocument",
            "ssm:UpdateDocumentDefaultVersion"
        ]
    },
    "AmazonWorkSpacesPoolServiceAccess": {
        "permissions": [
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "s3:CreateBucket",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetBucketPolicy",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutEncryptionConfiguration",
            "s3:PutObject"
        ]
    },
    "AmazonQDeveloperAccess": {
        "permissions": [
            "cloudformation:GetResource",
            "cloudformation:ListResources",
            "q:GenerateCodeFromCommands",
            "q:GetConversation",
            "q:GetIdentityMetaData",
            "q:GetTroubleshootingResults",
            "q:ListConversations",
            "q:PassRequest",
            "q:SendMessage",
            "q:StartConversation",
            "q:StartTroubleshootingAnalysis",
            "q:StartTroubleshootingResolutionExplanation",
            "q:UpdateTroubleshootingCommandResult",
            "q:UsePlugin",
            "sts:SetContext"
        ]
    },
    "AppStudioServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "secretsmanager:TagResource",
            "secretsmanager:UpdateSecret",
            "sso-directory:DescribeUsers",
            "sso-directory:ListMembersInGroup",
            "sso:GetManagedApplicationInstance"
        ]
    },
    "AmazonWorkSpacesThinClientReadOnlyAccess": {
        "permissions": [
            "appstream:DescribeStacks",
            "thinclient:GetDevice",
            "thinclient:GetDeviceDetails",
            "thinclient:GetEnvironment",
            "thinclient:GetSoftwareSet",
            "thinclient:ListDeviceSessions",
            "thinclient:ListDevices",
            "thinclient:ListEnvironments",
            "thinclient:ListSoftwareSets",
            "thinclient:ListTagsForResource",
            "workspaces-web:GetPortal",
            "workspaces-web:GetUserSettings",
            "workspaces-web:ListPortals",
            "workspaces:DescribeConnectionAliases",
            "workspaces:DescribeWorkspaceDirectories"
        ]
    },
    "AmazonSageMakerCanvasEMRServerlessExecutionRolePolicy": {
        "permissions": [
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:GetBucketCors",
            "s3:GetBucketLocation",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AmazonBedrockStudioPermissionsBoundary": {
        "permissions": [
            "aoss:APIAccessAll",
            "bedrock:ApplyGuardrail",
            "bedrock:CreatePrompt",
            "bedrock:CreatePromptVersion",
            "bedrock:DeletePrompt",
            "bedrock:GetIngestionJob",
            "bedrock:GetPrompt",
            "bedrock:InvokeAgent",
            "bedrock:InvokeFlow",
            "bedrock:InvokeModel",
            "bedrock:InvokeModelWithResponseStream",
            "bedrock:ListIngestionJobs",
            "bedrock:ListPrompts",
            "bedrock:ListTagsForResource",
            "bedrock:Retrieve",
            "bedrock:RetrieveAndGenerate",
            "bedrock:StartIngestionJob",
            "bedrock:TagResource",
            "bedrock:UntagResource",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "lambda:InvokeFunction",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:PutObject",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue"
        ]
    },
    "AmazonWorkSpacesThinClientFullAccess": {
        "permissions": [
            "appstream:DescribeStacks",
            "thinclient:*",
            "workspaces-web:GetPortal",
            "workspaces-web:GetUserSettings",
            "workspaces-web:ListPortals",
            "workspaces:DescribeConnectionAliases",
            "workspaces:DescribeWorkspaceDirectories"
        ]
    },
    "AWSCompromisedKeyQuarantineV3": {
        "permissions": [
            "amplify:CreateBackendEnvironment",
            "amplify:CreateDeployment",
            "bedrock:CreateFoundationModelAgreement",
            "bedrock:CreateModelInvocationJob",
            "bedrock:InvokeModel",
            "bedrock:InvokeModelWithResponseStream",
            "bedrock:PutFoundationModelEntitlement",
            "cloudtrail:LookupEvents",
            "codebuild:CreateProject",
            "ec2:AcceptReservedInstancesExchangeQuote",
            "ec2:CreateReservedInstancesListing",
            "ec2:PurchaseReservedInstancesOffering",
            "ec2:RequestSpotInstances",
            "ec2:RunInstances",
            "ec2:StartInstances",
            "ecr:GetAuthorizationToken",
            "ecs:CreateCluster",
            "ecs:CreateService",
            "ecs:RegisterTaskDefinition",
            "glue:CreateJob",
            "iam:AddUserToGroup",
            "iam:AttachGroupPolicy",
            "iam:AttachRolePolicy",
            "iam:AttachUserPolicy",
            "iam:ChangePassword",
            "iam:CreateAccessKey",
            "iam:CreateInstanceProfile",
            "iam:CreateLoginProfile",
            "iam:CreatePolicyVersion",
            "iam:CreateRole",
            "iam:CreateUser",
            "iam:DeleteAccessKey",
            "iam:DeleteRole",
            "iam:DetachUserPolicy",
            "iam:ListUsers",
            "iam:PassRole",
            "iam:PutGroupPolicy",
            "iam:PutRolePolicy",
            "iam:PutUserPermissionsBoundary",
            "iam:PutUserPolicy",
            "iam:SetDefaultPolicyVersion",
            "iam:UpdateAccessKey",
            "iam:UpdateAccountPasswordPolicy",
            "iam:UpdateAssumeRolePolicy",
            "iam:UpdateLoginProfile",
            "iam:UpdateUser",
            "lambda:AddLayerVersionPermission",
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:GetEventSourceMapping",
            "lambda:GetPolicy",
            "lambda:ListTags",
            "lambda:PutProvisionedConcurrencyConfig",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lambda:UpdateFunctionCode",
            "lightsail:Create*",
            "lightsail:Delete*",
            "lightsail:DownloadDefaultKeyPair",
            "lightsail:GetInstanceAccessDetails",
            "lightsail:Start*",
            "lightsail:Update*",
            "mediapackagev2:CreateChannel",
            "organizations:CreateAccount",
            "organizations:CreateOrganization",
            "organizations:InviteAccountToOrganization",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetObject",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:ObjectOwnerOverrideToBucketOwner",
            "s3:PutAccountPublicAccessBlock",
            "s3:PutBucketAcl",
            "s3:PutBucketCors",
            "s3:PutBucketOwnershipControls",
            "s3:PutBucketPolicy",
            "s3:PutLifecycleConfiguration",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateProcessingJob",
            "savingsplans:CreateSavingsPlan",
            "ses:GetSendQuota",
            "ses:ListIdentities",
            "sns:GetSMSAttributes",
            "sts:GetFederationToken",
            "sts:GetSessionToken"
        ]
    },
    "AWSPCSServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateTags",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteLaunchTemplateVersions",
            "ec2:DeleteNetworkInterface",
            "ec2:DescribeImageAttribute",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceAttribute",
            "ec2:DescribeInstanceStatus",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeKeyPairs",
            "ec2:DescribeLaunchTemplateVersions",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "iam:PassRole",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:PutSecretValue",
            "secretsmanager:UpdateSecretVersionStage"
        ]
    },
    "AmazonSageMakerHyperPodServiceRolePolicy": {
        "permissions": [
            "eks:DescribeCluster",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSDirectoryServiceDataFullAccess": {
        "permissions": [
            "ds-data:AddGroupMember",
            "ds-data:CreateGroup",
            "ds-data:CreateUser",
            "ds-data:DeleteGroup",
            "ds-data:DeleteUser",
            "ds-data:DescribeGroup",
            "ds-data:DescribeUser",
            "ds-data:DisableUser",
            "ds-data:ListGroupMembers",
            "ds-data:ListGroups",
            "ds-data:ListGroupsForMember",
            "ds-data:ListUsers",
            "ds-data:RemoveGroupMember",
            "ds-data:SearchGroups",
            "ds-data:SearchUsers",
            "ds-data:UpdateGroup",
            "ds-data:UpdateUser",
            "ds:AccessDSData"
        ]
    },
    "AWSDirectoryServiceDataReadOnlyAccess": {
        "permissions": [
            "ds-data:DescribeGroup",
            "ds-data:DescribeUser",
            "ds-data:ListGroupMembers",
            "ds-data:ListGroups",
            "ds-data:ListGroupsForMember",
            "ds-data:ListUsers",
            "ds-data:SearchGroups",
            "ds-data:SearchUsers",
            "ds:AccessDSData"
        ]
    },
    "QAppsServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AmazonEKSWorkerNodeMinimalPolicy": {
        "permissions": [
            "eks-auth:AssumeRoleForPodIdentity"
        ]
    },
    "AWSServiceRoleForProcurementInsightsPolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
        ]
    },
    "AmazonEC2ContainerRegistryPullOnly": {
        "permissions": [
            "ecr:BatchGetImage",
            "ecr:BatchImportUpstreamImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer"
        ]
    },
    "AWSDataSyncServiceRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents"
        ]
    },
    "AWSDataExchangeServiceRolePolicyForOrganizationDiscovery": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAccounts"
        ]
    },
    "AWSDataExchangeServiceRolePolicyForLicenseManagement": {
        "permissions": [
            "license-manager:CreateGrantVersion",
            "license-manager:DeleteGrant",
            "license-manager:GetGrant",
            "license-manager:ListDistributedGrants",
            "organizations:DescribeOrganization"
        ]
    },
    "AWSSocialMessagingServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "ResourceGroupsTaggingAPITagUntagSupportedResources": {
        "permissions": [
            "a4b:TagResource",
            "a4b:UntagResource",
            "access-analyzer:TagResource",
            "access-analyzer:UntagResource",
            "acm-pca:TagCertificateAuthority",
            "acm-pca:UntagCertificateAuthority",
            "acm:AddTagsToCertificate",
            "acm:RemoveTagsFromCertificate",
            "amplify:TagResource",
            "amplify:UntagResource",
            "appconfig:TagResource",
            "appconfig:UntagResource",
            "appflow:TagResource",
            "appflow:UntagResource",
            "appmesh:TagResource",
            "appmesh:UntagResource",
            "appstream:TagResource",
            "appstream:UntagResource",
            "appsync:TagResource",
            "appsync:UntagResource",
            "athena:TagResource",
            "athena:UntagResource",
            "auditmanager:TagResource",
            "auditmanager:UntagResource",
            "autoscaling:CreateOrUpdateTags",
            "autoscaling:DeleteTags",
            "backup:TagResource",
            "backup:UntagResource",
            "batch:TagResource",
            "batch:UntagResource",
            "braket:TagResource",
            "braket:UntagResource",
            "cassandra:TagResource",
            "cassandra:UntagResource",
            "chime:TagResource",
            "chime:UntagResource",
            "cloud9:TagResource",
            "cloud9:UntagResource",
            "clouddirectory:TagResource",
            "clouddirectory:UntagResource",
            "cloudfront:TagResource",
            "cloudfront:UntagResource",
            "cloudhsm:TagResource",
            "cloudhsm:UntagResource",
            "cloudtrail:AddTags",
            "cloudtrail:RemoveTags",
            "cloudwatch:TagResource",
            "cloudwatch:UntagResource",
            "codeartifact:TagResource",
            "codeartifact:UntagResource",
            "codecommit:TagResource",
            "codecommit:UntagResource",
            "codedeploy:AddTagsToOnPremisesInstances",
            "codedeploy:RemoveTagsFromOnPremisesInstances",
            "codedeploy:TagResource",
            "codedeploy:UntagResource",
            "codeguru-profiler:TagResource",
            "codeguru-profiler:UntagResource",
            "codepipeline:TagResource",
            "codepipeline:UntagResource",
            "codestar-connections:TagResource",
            "codestar-connections:UntagResource",
            "codestar:TagProject",
            "codestar:UntagProject",
            "cognito-identity:TagResource",
            "cognito-identity:UntagResource",
            "cognito-idp:TagResource",
            "cognito-idp:UntagResource",
            "comprehend:TagResource",
            "comprehend:UntagResource",
            "config:TagResource",
            "config:UntagResource",
            "connect:TagResource",
            "connect:UntagResource",
            "dataexchange:TagResource",
            "dataexchange:UntagResource",
            "datapipeline:AddTags",
            "datapipeline:RemoveTags",
            "datasync:TagResource",
            "datasync:UntagResource",
            "deepcomposer:TagResource",
            "deepcomposer:UntagResource",
            "detective:TagResource",
            "detective:UntagResource",
            "devicefarm:TagResource",
            "devicefarm:UntagResource",
            "directconnect:TagResource",
            "directconnect:UntagResource",
            "dlm:TagResource",
            "dlm:UntagResource",
            "dms:AddTagsToResource",
            "dms:RemoveTagsFromResource",
            "dynamodb:TagResource",
            "dynamodb:UntagResource",
            "ec2:CreateTags",
            "ec2:DeleteTags",
            "ecr:TagResource",
            "ecr:UntagResource",
            "ecs:TagResource",
            "ecs:UntagResource",
            "eks:TagResource",
            "eks:UntagResource",
            "elastic-inference:TagResource",
            "elastic-inference:UntagResource",
            "elasticache:AddTagsToResource",
            "elasticache:RemoveTagsFromResource",
            "elasticbeanstalk:UpdateTagsForResource",
            "elasticfilesystem:CreateTags",
            "elasticfilesystem:DeleteTags",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:RemoveTags",
            "elasticmapreduce:AddTags",
            "elasticmapreduce:RemoveTags",
            "emr-containers:TagResource",
            "emr-containers:UntagResource",
            "es:AddTags",
            "es:RemoveTags",
            "events:TagResource",
            "events:UntagResource",
            "firehose:TagDeliveryStream",
            "firehose:UntagDeliveryStream",
            "fms:TagResource",
            "fms:UntagResource",
            "forecast:TagResource",
            "forecast:UntagResource",
            "frauddetector:TagResource",
            "frauddetector:UntagResource",
            "fsx:TagResource",
            "fsx:UntagResource",
            "gamelift:TagResource",
            "gamelift:UntagResource",
            "glacier:AddTagsToVault",
            "glacier:RemoveTagsFromVault",
            "globalaccelerator:TagResource",
            "globalaccelerator:UntagResource",
            "glue:TagResource",
            "glue:UntagResource",
            "greengrass:TagResource",
            "greengrass:UntagResource",
            "groundstation:TagResource",
            "groundstation:UntagResource",
            "guardduty:TagResource",
            "guardduty:UntagResource",
            "iam:TagInstanceProfile",
            "iam:TagMFADevice",
            "iam:TagOpenIDConnectProvider",
            "iam:TagPolicy",
            "iam:TagRole",
            "iam:TagSAMLProvider",
            "iam:TagServerCertificate",
            "iam:TagUser",
            "iam:UntagInstanceProfile",
            "iam:UntagMFADevice",
            "iam:UntagOpenIDConnectProvider",
            "iam:UntagPolicy",
            "iam:UntagRole",
            "iam:UntagSAMLProvider",
            "iam:UntagServerCertificate",
            "iam:UntagUser",
            "imagebuilder:TagResource",
            "imagebuilder:UntagResource",
            "inspector:ListTagsForResource",
            "inspector:SetTagsForResource",
            "iot1click:TagResource",
            "iot1click:UntagResource",
            "iot:TagResource",
            "iot:UntagResource",
            "iotanalytics:TagResource",
            "iotanalytics:UntagResource",
            "iotdeviceadvisor:TagResource",
            "iotdeviceadvisor:UntagResource",
            "iotevents:TagResource",
            "iotevents:UntagResource",
            "iotfleethub:TagResource",
            "iotfleethub:UntagResource",
            "iotsitewise:TagResource",
            "iotsitewise:UntagResource",
            "iottwinmaker:TagResource",
            "iottwinmaker:UntagResource",
            "iotwireless:TagResource",
            "iotwireless:UntagResource",
            "ivs:TagResource",
            "ivs:UntagResource",
            "kafka:TagResource",
            "kafka:UntagResource",
            "kendra:TagResource",
            "kendra:UntagResource",
            "kinesis:AddTagsToStream",
            "kinesis:RemoveTagsFromStream",
            "kinesisanalytics:TagResource",
            "kinesisanalytics:UntagResource",
            "kinesisvideo:TagResource",
            "kinesisvideo:UntagResource",
            "kms:TagResource",
            "kms:UntagResource",
            "lambda:TagResource",
            "lambda:UntagResource",
            "lex:TagResource",
            "lex:UntagResource",
            "license-manager:TagResource",
            "license-manager:UntagResource",
            "lightsail:TagResource",
            "lightsail:UntagResource",
            "logs:TagLogGroup",
            "logs:TagResource",
            "logs:UntagLogGroup",
            "logs:UntagResource",
            "lookoutequipment:TagResource",
            "lookoutequipment:UntagResource",
            "machinelearning:AddTags",
            "machinelearning:DeleteTags",
            "macie2:TagResource",
            "macie2:UntagResource",
            "managedblockchain:TagResource",
            "managedblockchain:UntagResource",
            "mediaconnect:TagResource",
            "mediaconnect:UntagResource",
            "mediaconvert:TagResource",
            "mediaconvert:UntagResource",
            "medialive:CreateTags",
            "medialive:DeleteTags",
            "mediapackage-vod:TagResource",
            "mediapackage-vod:UntagResource",
            "mediapackage:TagResource",
            "mediapackage:UntagResource",
            "mediatailor:TagResource",
            "mediatailor:UntagResource",
            "mobiletargeting:TagResource",
            "mobiletargeting:UntagResource",
            "mq:CreateTags",
            "mq:DeleteTags",
            "neptune-graph:TagResource",
            "neptune-graph:UntagResource",
            "network-firewall:TagResource",
            "network-firewall:UntagResource",
            "networkmanager:TagResource",
            "networkmanager:UntagResource",
            "opsworks-cm:TagResource",
            "opsworks-cm:UntagResource",
            "opsworks:TagResource",
            "opsworks:UntagResource",
            "organizations:TagResource",
            "organizations:UntagResource",
            "outposts:TagResource",
            "outposts:UntagResource",
            "qldb:TagResource",
            "qldb:UntagResource",
            "quicksight:TagResource",
            "quicksight:UntagResource",
            "ram:TagResource",
            "ram:UntagResource",
            "rds:AddTagsToResource",
            "rds:RemoveTagsFromResource",
            "redshift-serverless:TagResource",
            "redshift-serverless:UntagResource",
            "redshift:CreateTags",
            "redshift:DeleteTags",
            "resource-explorer-2:TagResource",
            "resource-explorer-2:UntagResource",
            "resource-groups:Tag",
            "resource-groups:Untag",
            "robomaker:TagResource",
            "robomaker:UntagResource",
            "route53-recovery-control-config:TagResource",
            "route53-recovery-control-config:UntagResource",
            "route53-recovery-readiness:TagResource",
            "route53-recovery-readiness:UntagResource",
            "route53:ChangeTagsForResource",
            "route53domains:DeleteTagsForDomain",
            "route53domains:UpdateTagsForDomain",
            "route53resolver:TagResource",
            "route53resolver:UntagResource",
            "s3:DeleteJobTagging",
            "s3:DeleteObjectTagging",
            "s3:DeleteObjectVersionTagging",
            "s3:DeleteStorageLensConfigurationTagging",
            "s3:GetBucketTagging",
            "s3:GetJobTagging",
            "s3:GetObjectTagging",
            "s3:GetObjectVersionTagging",
            "s3:GetStorageLensConfigurationTagging",
            "s3:PutBucketTagging",
            "s3:PutJobTagging",
            "s3:PutObjectTagging",
            "s3:PutObjectVersionTagging",
            "s3:PutStorageLensConfigurationTagging",
            "s3:TagResource",
            "s3:UntagResource",
            "sagemaker:AddTags",
            "sagemaker:DeleteTags",
            "savingsplans:TagResource",
            "savingsplans:UntagResource",
            "schemas:TagResource",
            "schemas:UntagResource",
            "secretsmanager:TagResource",
            "secretsmanager:UntagResource",
            "securityhub:TagResource",
            "securityhub:UntagResource",
            "servicediscovery:TagResource",
            "servicediscovery:UntagResource",
            "servicequotas:TagResource",
            "servicequotas:UntagResource",
            "ses:TagResource",
            "ses:UntagResource",
            "sns:TagResource",
            "sns:UntagResource",
            "sqs:TagQueue",
            "sqs:UntagQueue",
            "ssm-contacts:TagResource",
            "ssm-contacts:UntagResource",
            "ssm-incidents:TagResource",
            "ssm-incidents:UntagResource",
            "ssm:AddTagsToResource",
            "ssm:RemoveTagsFromResource",
            "states:TagResource",
            "states:UntagResource",
            "storagegateway:AddTagsToResource",
            "storagegateway:RemoveTagsFromResource",
            "swf:TagResource",
            "swf:UntagResource",
            "synthetics:TagResource",
            "synthetics:UntagResource",
            "tag:GetResources",
            "tag:TagResources",
            "tag:UntagResources",
            "transfer:TagResource",
            "transfer:UntagResource",
            "vpc-lattice:TagResource",
            "vpc-lattice:UntagResource",
            "waf-regional:TagResource",
            "waf-regional:UntagResource",
            "waf:TagResource",
            "waf:UntagResource",
            "wafv2:TagResource",
            "wafv2:UntagResource",
            "worklink:TagResource",
            "worklink:UntagResource",
            "workmail:TagResource",
            "workmail:UntagResource",
            "workspaces-web:TagResource",
            "workspaces-web:UntagResource",
            "workspaces:CreateTags",
            "workspaces:DeleteTags",
            "xray:TagResource",
            "xray:UntagResource"
        ]
    },
    "AmazonVerifiedPermissionsFullAccess": {
        "permissions": [
            "verifiedpermissions:*",
            "verifiedpermissions:CreatePolicyStore",
            "verifiedpermissions:ListPolicyStores"
        ]
    },
    "AmazonVerifiedPermissionsReadOnlyAccess": {
        "permissions": [
            "verifiedpermissions:GetIdentitySource",
            "verifiedpermissions:GetPolicy",
            "verifiedpermissions:GetPolicyStore",
            "verifiedpermissions:GetPolicyTemplate",
            "verifiedpermissions:GetSchema",
            "verifiedpermissions:IsAuthorized",
            "verifiedpermissions:IsAuthorizedWithToken",
            "verifiedpermissions:ListIdentitySources",
            "verifiedpermissions:ListPolicies",
            "verifiedpermissions:ListPolicyStores",
            "verifiedpermissions:ListPolicyTemplates"
        ]
    },
    "CloudWatchLambdaApplicationSignalsExecutionRolePolicy": {
        "permissions": [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "xray:PutTraceSegments"
        ]
    },
    "CloudWatchInternetMonitorFullAccess": {
        "permissions": [
            "cloudfront:GetDistribution",
            "cloudfront:ListDistributions",
            "cloudwatch:GetMetricData",
            "ec2:DescribeVpcs",
            "elasticloadbalancing:DescribeLoadBalancers",
            "iam:AttachRolePolicy",
            "iam:CreateServiceLinkedRole",
            "internetmonitor:CreateMonitor",
            "internetmonitor:DeleteMonitor",
            "internetmonitor:GetHealthEvent",
            "internetmonitor:GetInternetEvent",
            "internetmonitor:GetMonitor",
            "internetmonitor:GetQueryResults",
            "internetmonitor:GetQueryStatus",
            "internetmonitor:Link",
            "internetmonitor:ListHealthEvents",
            "internetmonitor:ListInternetEvents",
            "internetmonitor:ListMonitors",
            "internetmonitor:ListTagsForResource",
            "internetmonitor:StartQuery",
            "internetmonitor:StopQuery",
            "internetmonitor:TagResource",
            "internetmonitor:UntagResource",
            "internetmonitor:UpdateMonitor",
            "logs:DescribeLogGroups",
            "logs:GetQueryResults",
            "logs:StartQuery",
            "logs:StopQuery",
            "workspaces:DescribeWorkspaceDirectories"
        ]
    },
    "AWSDataExchangeDataGrantOwnerFullAccess": {
        "permissions": [
            "dataexchange:CancelJob",
            "dataexchange:CreateAsset",
            "dataexchange:CreateDataGrant",
            "dataexchange:CreateDataSet",
            "dataexchange:CreateJob",
            "dataexchange:CreateRevision",
            "dataexchange:DeleteAsset",
            "dataexchange:DeleteDataGrant",
            "dataexchange:DeleteDataSet",
            "dataexchange:DeleteRevision",
            "dataexchange:GetAsset",
            "dataexchange:GetDataGrant",
            "dataexchange:GetDataSet",
            "dataexchange:GetRevision",
            "dataexchange:ListDataGrants",
            "dataexchange:ListDataSetRevisions",
            "dataexchange:ListDataSets",
            "dataexchange:ListRevisionAssets",
            "dataexchange:PublishToDataGrant",
            "dataexchange:RevokeRevision",
            "dataexchange:SendApiAsset",
            "dataexchange:SendDataSetNotification",
            "dataexchange:StartJob",
            "dataexchange:TagResource",
            "dataexchange:UntagResource",
            "dataexchange:UpdateAsset",
            "dataexchange:UpdateDataSet",
            "dataexchange:UpdateRevision"
        ]
    },
    "AWSDataExchangeDataGrantReceiverFullAccess": {
        "permissions": [
            "dataexchange:AcceptDataGrant",
            "dataexchange:CancelJob",
            "dataexchange:CreateEventAction",
            "dataexchange:CreateJob",
            "dataexchange:DeleteEventAction",
            "dataexchange:GetAsset",
            "dataexchange:GetDataSet",
            "dataexchange:GetEventAction",
            "dataexchange:GetReceivedDataGrant",
            "dataexchange:GetRevision",
            "dataexchange:ListDataSetRevisions",
            "dataexchange:ListDataSets",
            "dataexchange:ListEventpermissions",
            "dataexchange:ListReceivedDataGrants",
            "dataexchange:ListRevisionAssets",
            "dataexchange:SendApiAsset",
            "dataexchange:StartJob",
            "dataexchange:UpdateEventAction"
        ]
    },
    "AWSCloudFrontVPCOriginServiceRolePolicy": {
        "permissions": [
            "ec2:AssignIpv6Addresses",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAddresses",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRegions",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:ModifyNetworkInterfaceAttribute",
            "ec2:UnassignIpv6Addresses",
            "elasticloadbalancing:DescribeListeners",
            "elasticloadbalancing:DescribeLoadBalancers",
            "elasticloadbalancing:DescribeTargetGroups"
        ]
    },
    "AmazonEKSNetworkingPolicy": {
        "permissions": [
            "ec2:AssignIpv6Addresses",
            "ec2:AssignPrivateIpAddresses",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DetachNetworkInterface",
            "ec2:UnassignIpv6Addresses",
            "ec2:UnassignPrivateIpAddresses"
        ]
    },
    "AmazonEKSLoadBalancingPolicy": {
        "permissions": [
            "acm:DescribeCertificate",
            "acm:ListCertificates",
            "cognito-idp:DescribeUserPoolClient",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAddresses",
            "ec2:DescribeClassicLinkInstances",
            "ec2:DescribeCoipPools",
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcClassicLink",
            "ec2:DescribeVpcPeeringConnections",
            "ec2:DescribeVpcs",
            "ec2:GetCoipPoolUsage",
            "ec2:GetSecurityGroupsForVpc",
            "ec2:RevokeSecurityGroupIngress",
            "elasticloadbalancing:AddListenerCertificates",
            "elasticloadbalancing:AddTags",
            "elasticloadbalancing:CreateListener",
            "elasticloadbalancing:CreateLoadBalancer",
            "elasticloadbalancing:CreateRule",
            "elasticloadbalancing:CreateTargetGroup",
            "elasticloadbalancing:DescribeTargetGroups",
            "elasticloadbalancing:ModifyListener",
            "elasticloadbalancing:ModifyListenerAttributes",
            "elasticloadbalancing:ModifyLoadBalancerAttributes",
            "elasticloadbalancing:ModifyRule",
            "elasticloadbalancing:ModifyTargetGroup",
            "elasticloadbalancing:ModifyTargetGroupAttributes",
            "elasticloadbalancing:RegisterTargets",
            "elasticloadbalancing:RemoveListenerCertificates",
            "elasticloadbalancing:SetIpAddressType",
            "elasticloadbalancing:SetSecurityGroups",
            "elasticloadbalancing:SetSubnets",
            "elasticloadbalancing:SetWebAcl",
            "iam:CreateServiceLinkedRole",
            "shield:CreateProtection",
            "shield:DeleteProtection",
            "shield:TagResource",
            "wafv2:AssociateWebACL",
            "wafv2:DisassociateWebACL",
            "wafv2:GetWebACL",
            "wafv2:GetWebACLForResource"
        ]
    },
    "AmazonEKSBlockStoragePolicy": {
        "permissions": [
            "ec2:AttachVolume",
            "ec2:CreateSnapshot",
            "ec2:CreateTags",
            "ec2:CreateVolume",
            "ec2:DetachVolume",
            "ec2:EnableFastSnapshotRestores",
            "ec2:ModifyVolume"
        ]
    },
    "AmazonEKSComputePolicy": {
        "permissions": [
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateTags",
            "ec2:RunInstances",
            "iam:AddRoleToInstanceProfile",
            "iam:PassRole"
        ]
    },
    "GameLiftContainerFleetPolicy": {
        "permissions": [
            "gamelift:GetComputeAuthToken",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "logs:PutRetentionPolicy",
            "s3:PutObject"
        ]
    },
    "AmazonDataZoneBedrockModelManagementPolicy": {
        "permissions": [
            "bedrock:CreateInferenceProfile",
            "bedrock:DeleteInferenceProfile",
            "bedrock:TagResource"
        ]
    },
    "AmazonDataZoneBedrockModelConsumptionPolicy": {
        "permissions": [
            "bedrock:InvokeModel",
            "bedrock:InvokeModelWithResponseStream"
        ]
    },
    "CloudWatchInternetMonitorReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "internetmonitor:GetHealthEvent",
            "internetmonitor:GetInternetEvent",
            "internetmonitor:GetMonitor",
            "internetmonitor:GetQueryResults",
            "internetmonitor:GetQueryStatus",
            "internetmonitor:ListHealthEvents",
            "internetmonitor:ListInternetEvents",
            "internetmonitor:ListMonitors",
            "internetmonitor:ListTagsForResource",
            "internetmonitor:StartQuery",
            "internetmonitor:StopQuery",
            "logs:DescribeLogGroups",
            "logs:GetQueryResults",
            "logs:StartQuery",
            "logs:StopQuery"
        ]
    },
    "AmazonODBServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "ec2:DescribeAvailabilityZones"
        ]
    },
    "SMSVoiceServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AWSPartnerCentralOpportunityManagement": {
        "permissions": [
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:ListEntities",
            "partnercentral:AcceptEngagementInvitation",
            "partnercentral:AssignOpportunity",
            "partnercentral:AssociateOpportunity",
            "partnercentral:CreateEngagement",
            "partnercentral:CreateEngagementInvitation",
            "partnercentral:CreateOpportunity",
            "partnercentral:CreateResourceSnapshot",
            "partnercentral:CreateResourceSnapshotJob",
            "partnercentral:DeleteResourceSnapshotJob",
            "partnercentral:DisassociateOpportunity",
            "partnercentral:GetAwsOpportunitySummary",
            "partnercentral:GetEngagement",
            "partnercentral:GetEngagementInvitation",
            "partnercentral:GetOpportunity",
            "partnercentral:GetResourceSnapshot",
            "partnercentral:GetResourceSnapshotJob",
            "partnercentral:ListEngagementByAcceptingInvitationTasks",
            "partnercentral:ListEngagementFromOpportunityTasks",
            "partnercentral:ListEngagementInvitations",
            "partnercentral:ListEngagementMembers",
            "partnercentral:ListEngagementResourceAssociations",
            "partnercentral:ListEngagements",
            "partnercentral:ListOpportunities",
            "partnercentral:ListResourceSnapshotJobs",
            "partnercentral:ListResourceSnapshots",
            "partnercentral:ListSolutions",
            "partnercentral:RejectEngagementInvitation",
            "partnercentral:StartEngagementByAcceptingInvitationTask",
            "partnercentral:StartEngagementFromOpportunityTask",
            "partnercentral:StartResourceSnapshotJob",
            "partnercentral:StopResourceSnapshotJob",
            "partnercentral:SubmitOpportunity",
            "partnercentral:UpdateOpportunity"
        ]
    },
    "AWSPartnerCentralSandboxFullAccess": {
        "permissions": [
            "iam:PassRole",
            "partnercentral:*"
        ]
    },
    "SecurityLakeResourceManagementServiceRolePolicy": {
        "permissions": [
            "events:ListRules",
            "events:PutRule",
            "glue:BatchCreatePartition",
            "glue:CreatePartition",
            "glue:GetDatabase",
            "glue:GetTable",
            "glue:GetTables",
            "glue:UpdateTable",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:ListPermissions",
            "lambda:DeleteEventSourceMapping",
            "lambda:DeleteFunctionConcurrency",
            "lambda:GetAlias",
            "lambda:GetEventSourceMapping",
            "lambda:GetFunction",
            "lambda:GetFunctionConcurrency",
            "lambda:GetFunctionConfiguration",
            "lambda:GetPolicy",
            "lambda:GetProvisionedConcurrencyConfig",
            "lambda:GetRuntimeManagementConfig",
            "lambda:ListEventSourceMappings",
            "lambda:PublishVersion",
            "lambda:PutFunctionConcurrency",
            "lambda:PutProvisionedConcurrencyConfig",
            "lambda:UpdateEventSourceMapping",
            "lambda:UpdateFunctionConfiguration",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:GetLogRecord",
            "logs:GetQueryResults",
            "logs:StartQuery",
            "s3:DeleteObject",
            "s3:GetBucketNotification",
            "s3:GetEncryptionConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetObject",
            "s3:GetObjectAttributes",
            "s3:GetReplicationConfiguration",
            "s3:ListBucket",
            "s3:PutBucketNotification",
            "s3:PutLifecycleConfiguration",
            "s3:PutObject",
            "s3:RestoreObject",
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListDeadLetterSourceQueues",
            "sqs:ListMessageMoveTasks",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "sqs:SetQueueAttributes",
            "sqs:StartMessageMoveTask"
        ]
    },
    "SQSUnlockQueuePolicy": {
        "permissions": [
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ListQueues",
            "sqs:SetQueueAttributes"
        ]
    },
    "S3UnlockBucketPolicy": {
        "permissions": [
            "s3:DeleteBucketPolicy",
            "s3:GetBucketPolicy",
            "s3:ListAllMyBuckets",
            "s3:PutBucketPolicy"
        ]
    },
    "IAMAuditRootUserCredentials": {
        "permissions": [
            "iam:GetAccessKeyLastUsed",
            "iam:GetLoginProfile",
            "iam:GetUser",
            "iam:ListAccessKeys",
            "iam:ListMFADevices",
            "iam:ListSigningCertificates"
        ]
    },
    "IAMCreateRootUserPassword": {
        "permissions": [
            "iam:CreateLoginProfile",
            "iam:GetLoginProfile"
        ]
    },
    "IAMDeleteRootUserCredentials": {
        "permissions": [
            "iam:DeactivateMFADevice",
            "iam:DeleteAccessKey",
            "iam:DeleteLoginProfile",
            "iam:DeleteSigningCertificate",
            "iam:DeleteVirtualMFADevice",
            "iam:GetAccessKeyLastUsed",
            "iam:GetLoginProfile",
            "iam:GetUser",
            "iam:ListAccessKeys",
            "iam:ListMFADevices",
            "iam:ListSigningCertificates"
        ]
    },
    "AmazonECSInfrastructureRolePolicyForVpcLattice": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "vpc-lattice:DeregisterTargets",
            "vpc-lattice:GetTargetGroup",
            "vpc-lattice:ListTargets",
            "vpc-lattice:RegisterTargets"
        ]
    },
    "AWSQuickSetupEnableDHMCExecutionPolicy": {
        "permissions": [
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:GetRole",
            "iam:PassRole",
            "ssm:GetServiceSetting",
            "ssm:UpdateServiceSetting"
        ]
    },
    "AWSQuickSetupManagedInstanceProfileExecutionPolicy": {
        "permissions": [
            "ec2:AssociateIamInstanceProfile",
            "ec2:DescribeIamInstanceProfileAssociations",
            "ec2:DescribeInstances",
            "iam:AddRoleToInstanceProfile",
            "iam:AttachRolePolicy",
            "iam:CreateInstanceProfile",
            "iam:CreateRole",
            "iam:GetInstanceProfile",
            "iam:GetRole",
            "iam:ListInstanceProfilesForRole",
            "iam:PassRole",
            "ssm:AddTagsToResource",
            "ssm:GetAutomationExecution",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWSQuickSetupSSMLifecycleManagementExecutionPolicy": {
        "permissions": [
            "iam:PassRole",
            "ssm:AddTagsToResource",
            "ssm:GetAutomationExecution",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWSQuickSetupSSMDeploymentS3BucketRolePolicy": {
        "permissions": [
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:DeleteBucketPolicy",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketPublicAccessBlock",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration"
        ]
    },
    "AWSQuickSetupEnableAREXExecutionPolicy": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "resource-explorer-2:AssociateDefaultView",
            "resource-explorer-2:CreateIndex",
            "resource-explorer-2:CreateView",
            "resource-explorer-2:GetDefaultView",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:ListIndexes",
            "resource-explorer-2:ListViews",
            "resource-explorer-2:TagResource",
            "resource-explorer-2:UpdateIndexType"
        ]
    },
    "AWSQuickSetupSSMManageResourcesExecutionPolicy": {
        "permissions": [
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:TagRole",
            "iam:UpdateRole",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucketVersions"
        ]
    },
    "AWSQuickSetupSSMDeploymentRolePolicy": {
        "permissions": [
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeChangeSet",
            "cloudformation:DescribeStackDriftDetectionStatus",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStackResourceDrifts",
            "cloudformation:DescribeStacks",
            "cloudformation:DetectStackDrift",
            "cloudformation:DetectStackResourceDrift",
            "cloudformation:ExecuteChangeSet",
            "cloudformation:ListStacks",
            "cloudformation:UpdateStack",
            "iam:AttachRolePolicy",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteRole",
            "iam:DetachRolePolicy",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListRolePolicies",
            "iam:ListRoleTags",
            "iam:PassRole",
            "iam:TagRole",
            "iam:UpdateRole",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:InvokeFunction",
            "lambda:TagResource",
            "lambda:UpdateFunction*",
            "ssm:CreateAssociation",
            "ssm:DeleteAssociation",
            "ssm:DescribeAssociation",
            "ssm:DescribeDocument",
            "ssm:GetDocument",
            "ssm:UpdateAssociation"
        ]
    },
    "AWS-SSM-Automation-DiagnosisBucketPolicy": {
        "permissions": [
            "s3:DeleteObject",
            "s3:GetEncryptionConfiguration",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject"
        ]
    },
    "AWS-SSM-DiagnosisAutomation-AdministrationRolePolicy": {
        "permissions": [
            "iam:PassRole",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeAutomationStepExecutions",
            "ssm:GetAutomationExecution",
            "ssm:StartAutomationExecution",
            "sts:AssumeRole"
        ]
    },
    "AWS-SSM-DiagnosisAutomation-ExecutionRolePolicy": {
        "permissions": [
            "ec2:DescribeInstances",
            "ec2:DescribeInternetGateways",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "iam:PassRole",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeAutomationStepExecutions",
            "ssm:DescribeInstanceInformation",
            "ssm:GetAutomationExecution",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWS-SSM-DiagnosisAutomation-OperationalAccountAdministrationRolePolicy": {
        "permissions": [
            "organizations:ListChildren",
            "organizations:ListRoots",
            "sts:AssumeRole"
        ]
    },
    "AWS-SSM-RemediationAutomation-AdministrationRolePolicy": {
        "permissions": [
            "iam:PassRole",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "s3:DeleteObject",
            "s3:GetObject",
            "s3:ListBucket",
            "s3:PutObject",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeAutomationStepExecutions",
            "ssm:GetAutomationExecution",
            "ssm:StartAutomationExecution",
            "sts:AssumeRole"
        ]
    },
    "AWS-SSM-RemediationAutomation-ExecutionRolePolicy": {
        "permissions": [
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:ModifyVpcAttribute",
            "ec2:RevokeSecurityGroupEgress",
            "iam:PassRole",
            "kms:Decrypt",
            "kms:GenerateDataKey",
            "ssm:DescribeAutomationExecutions",
            "ssm:DescribeAutomationStepExecutions",
            "ssm:GetAutomationExecution",
            "ssm:StartAutomationExecution"
        ]
    },
    "AWS-SSM-RemediationAutomation-OperationalAccountAdministrationRolePolicy": {
        "permissions": [
            "organizations:ListChildren",
            "organizations:ListRoots",
            "sts:AssumeRole"
        ]
    },
    "AWSPartnerCentralFullAccess": {
        "permissions": [
            "Partnercentral-account-management:AssociatePartnerUser",
            "Partnercentral-account-management:DisassociatePartnerUser",
            "iam:ListRoles",
            "iam:PassRole",
            "partnercentral:*"
        ]
    },
    "AWSMarketplaceSellerOfferManagement": {
        "permissions": [
            "aws-marketplace:DescribeAgreement",
            "aws-marketplace:DescribeChangeSet",
            "aws-marketplace:DescribeEntity",
            "aws-marketplace:GetAgreementTerms",
            "aws-marketplace:ListChangeSets",
            "aws-marketplace:ListEntities",
            "aws-marketplace:SearchAgreements",
            "aws-marketplace:StartChangeSet"
        ]
    },
    "SageMakerStudioProjectRoleMachineLearningPolicy": {
        "permissions": [
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:PutMetricData",
            "ec2:AttachNetworkInterface",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ecr:BatchGetImage",
            "ecr:DescribeImages",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "elasticfilesystem:DescribeMountTargets",
            "glue:ListSessions",
            "iam:CreateServiceLinkedRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:GetLogEvents",
            "logs:PutLogEvents",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroupQuery",
            "resource-groups:ListGroupResources",
            "resource-groups:Tag",
            "s3:GetObject",
            "sagemaker-mlflow:AccessUI",
            "sagemaker-mlflow:CreateExperiment",
            "sagemaker-mlflow:CreateModelVersion",
            "sagemaker-mlflow:CreateRegisteredModel",
            "sagemaker-mlflow:CreateRun",
            "sagemaker-mlflow:DeleteExperiment",
            "sagemaker-mlflow:DeleteModelVersion",
            "sagemaker-mlflow:DeleteModelVersionTag",
            "sagemaker-mlflow:DeleteRegisteredModel",
            "sagemaker-mlflow:DeleteRegisteredModelAlias",
            "sagemaker-mlflow:DeleteRegisteredModelTag",
            "sagemaker-mlflow:DeleteRun",
            "sagemaker-mlflow:DeleteTag",
            "sagemaker-mlflow:GetDownloadURIForModelVersionArtifacts",
            "sagemaker-mlflow:GetExperiment",
            "sagemaker-mlflow:GetExperimentByName",
            "sagemaker-mlflow:GetLatestModelVersions",
            "sagemaker-mlflow:GetMetricHistory",
            "sagemaker-mlflow:GetModelVersion",
            "sagemaker-mlflow:GetModelVersionByAlias",
            "sagemaker-mlflow:GetRegisteredModel",
            "sagemaker-mlflow:GetRun",
            "sagemaker-mlflow:ListArtifacts",
            "sagemaker-mlflow:LogBatch",
            "sagemaker-mlflow:LogInputs",
            "sagemaker-mlflow:LogMetric",
            "sagemaker-mlflow:LogModel",
            "sagemaker-mlflow:LogParam",
            "sagemaker-mlflow:RenameRegisteredModel",
            "sagemaker-mlflow:RestoreExperiment",
            "sagemaker-mlflow:RestoreRun",
            "sagemaker-mlflow:SearchExperiments",
            "sagemaker-mlflow:SearchModelVersions",
            "sagemaker-mlflow:SearchRegisteredModels",
            "sagemaker-mlflow:SearchRuns",
            "sagemaker-mlflow:SetExperimentTag",
            "sagemaker-mlflow:SetRegisteredModelAlias",
            "sagemaker-mlflow:SetRegisteredModelTag",
            "sagemaker-mlflow:SetTag",
            "sagemaker-mlflow:TransitionModelVersionStage",
            "sagemaker-mlflow:UpdateExperiment",
            "sagemaker-mlflow:UpdateModelVersion",
            "sagemaker-mlflow:UpdateRegisteredModel",
            "sagemaker-mlflow:UpdateRun",
            "sagemaker:AddAssociation",
            "sagemaker:AddTags",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchPutMetrics",
            "sagemaker:CreateAction",
            "sagemaker:CreateApp",
            "sagemaker:CreateArtifact",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateAutoMLJobV2",
            "sagemaker:CreateContext",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateHyperParameterTuningJob",
            "sagemaker:CreateInferenceComponent",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreatePipeline",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreatePresignedMlflowTrackingServerUrl",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateSpace",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:CreateUserProfile",
            "sagemaker:DeleteAction",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteArtifact",
            "sagemaker:DeleteAssociation",
            "sagemaker:DeleteContext",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteInferenceComponent",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeletePipeline",
            "sagemaker:DeleteSpace",
            "sagemaker:DeleteTags",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeArtifact",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeContext",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeHyperParameterTuningJob",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceComponent",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeMlflowTrackingServer",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeOptimizationJob",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineDefinitionForExecution",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeSpace",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeTrialComponent",
            "sagemaker:DescribeUserProfile",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:InvokeEndpointWithResponseStream",
            "sagemaker:ListApps",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListAutoMLJobs",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListContexts",
            "sagemaker:ListDomains",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListHubContents",
            "sagemaker:ListHubs",
            "sagemaker:ListHyperParameterTuningJobs",
            "sagemaker:ListImageVersions",
            "sagemaker:ListInferenceComponents",
            "sagemaker:ListMlflowTrackingServers",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModels",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListPipelineExecutions",
            "sagemaker:ListPipelineParametersForExecution",
            "sagemaker:ListPipelines",
            "sagemaker:ListProcessingJobs",
            "sagemaker:ListSpaces",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
            "sagemaker:ListTransformJobs",
            "sagemaker:ListUserProfiles",
            "sagemaker:QueryLineage",
            "sagemaker:RetryPipelineExecution",
            "sagemaker:Search",
            "sagemaker:SendPipelineExecutionStepFailure",
            "sagemaker:SendPipelineExecutionStepSuccess",
            "sagemaker:StartMlflowTrackingServer",
            "sagemaker:StartPipelineExecution",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopHyperParameterTuningJob",
            "sagemaker:StopMlflowTrackingServer",
            "sagemaker:StopPipelineExecution",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateEndpoint",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateInferenceComponentRuntimeConfig",
            "sagemaker:UpdateMlflowTrackingServer",
            "sagemaker:UpdateModelPackage",
            "sagemaker:UpdatePipeline",
            "sagemaker:UpdatePipelineExecution",
            "sagemaker:UpdateSpace",
            "sagemaker:UpdateTrainingJob",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:GetParametersByPath",
            "sts:GetCallerIdentity"
        ]
    },
    "SageMakerStudioDomainServiceRolePolicy": {
        "permissions": [
            "kms:Decrypt",
            "ssm:GetParameter"
        ]
    },
    "SageMakerStudioDomainExecutionRolePolicy": {
        "permissions": [
            "codeconnections:GetConnection",
            "codeconnections:GetHost",
            "codeconnections:ListConnections",
            "codeconnections:ListTagsForResource",
            "codeconnections:UseConnection",
            "codestar-connections:GetConnection",
            "codestar-connections:GetHost",
            "codestar-connections:ListConnections",
            "codestar-connections:ListTagsForResource",
            "codestar-connections:UseConnection",
            "datazone:AcceptPredictions",
            "datazone:AcceptSubscriptionRequest",
            "datazone:AddEntityOwner",
            "datazone:AddPolicyGrant",
            "datazone:CancelMetadataGenerationRun",
            "datazone:CancelSubscription",
            "datazone:CreateAsset",
            "datazone:CreateAssetFilter",
            "datazone:CreateAssetRevision",
            "datazone:CreateAssetType",
            "datazone:CreateConnection",
            "datazone:CreateDataProduct",
            "datazone:CreateDataProductRevision",
            "datazone:CreateDataSource",
            "datazone:CreateDomainUnit",
            "datazone:CreateEnvironment",
            "datazone:CreateEnvironmentProfile",
            "datazone:CreateFormType",
            "datazone:CreateGlossary",
            "datazone:CreateGlossaryTerm",
            "datazone:CreateListingChangeSet",
            "datazone:CreateProject",
            "datazone:CreateProjectMembership",
            "datazone:CreateSubscriptionGrant",
            "datazone:CreateSubscriptionRequest",
            "datazone:DeleteAsset",
            "datazone:DeleteAssetFilter",
            "datazone:DeleteAssetType",
            "datazone:DeleteConnection",
            "datazone:DeleteDataProduct",
            "datazone:DeleteDataSource",
            "datazone:DeleteDomainUnit",
            "datazone:DeleteEnvironment",
            "datazone:DeleteEnvironmentProfile",
            "datazone:DeleteFormType",
            "datazone:DeleteGlossary",
            "datazone:DeleteGlossaryTerm",
            "datazone:DeleteListing",
            "datazone:DeleteProject",
            "datazone:DeleteProjectMembership",
            "datazone:DeleteSubscriptionGrant",
            "datazone:DeleteSubscriptionRequest",
            "datazone:DeleteSubscriptionTarget",
            "datazone:DeleteTimeSeriesDataPoints",
            "datazone:GetAsset",
            "datazone:GetAssetFilter",
            "datazone:GetAssetType",
            "datazone:GetConnection",
            "datazone:GetDataProduct",
            "datazone:GetDataSource",
            "datazone:GetDataSourceRun",
            "datazone:GetDomain",
            "datazone:GetDomainUnit",
            "datazone:GetEnvironment",
            "datazone:GetEnvironmentAction",
            "datazone:GetEnvironmentActionLink",
            "datazone:GetEnvironmentBlueprint",
            "datazone:GetEnvironmentBlueprintConfiguration",
            "datazone:GetEnvironmentCredentials",
            "datazone:GetEnvironmentProfile",
            "datazone:GetFormType",
            "datazone:GetGlossary",
            "datazone:GetGlossaryTerm",
            "datazone:GetGroupProfile",
            "datazone:GetLineageNode",
            "datazone:GetListing",
            "datazone:GetMetadataGenerationRun",
            "datazone:GetProject",
            "datazone:GetProjectProfile",
            "datazone:GetSubscription",
            "datazone:GetSubscriptionEligibility",
            "datazone:GetSubscriptionGrant",
            "datazone:GetSubscriptionRequestDetails",
            "datazone:GetSubscriptionTarget",
            "datazone:GetTimeSeriesDataPoint",
            "datazone:GetUserProfile",
            "datazone:ListAccountEnvironments",
            "datazone:ListAssetFilters",
            "datazone:ListAssetRevisions",
            "datazone:ListConnections",
            "datazone:ListDataProductRevisions",
            "datazone:ListDataSourceRunActivities",
            "datazone:ListDataSourceRuns",
            "datazone:ListDataSources",
            "datazone:ListDomainUnitsForParent",
            "datazone:ListEntityOwners",
            "datazone:ListEnvironmentpermissions",
            "datazone:ListEnvironmentBlueprintConfigurationSummaries",
            "datazone:ListEnvironmentBlueprintConfigurations",
            "datazone:ListEnvironmentBlueprints",
            "datazone:ListEnvironmentProfiles",
            "datazone:ListEnvironments",
            "datazone:ListGroupsForUser",
            "datazone:ListLineageNodeHistory",
            "datazone:ListMetadataGenerationRuns",
            "datazone:ListNotifications",
            "datazone:ListPolicyGrants",
            "datazone:ListProjectMemberships",
            "datazone:ListProjectProfiles",
            "datazone:ListProjects",
            "datazone:ListSubscriptionGrants",
            "datazone:ListSubscriptionRequests",
            "datazone:ListSubscriptionTargets",
            "datazone:ListSubscriptions",
            "datazone:ListTimeSeriesDataPoints",
            "datazone:ListWarehouseMetadata",
            "datazone:RejectPredictions",
            "datazone:RejectSubscriptionRequest",
            "datazone:RemoveEntityOwner",
            "datazone:RemovePolicyGrant",
            "datazone:RevokeSubscription",
            "datazone:Search",
            "datazone:SearchGroupProfiles",
            "datazone:SearchListings",
            "datazone:SearchTypes",
            "datazone:SearchUserProfiles",
            "datazone:StartDataSourceRun",
            "datazone:StartMetadataGenerationRun",
            "datazone:UpdateAssetFilter",
            "datazone:UpdateConnection",
            "datazone:UpdateDataSource",
            "datazone:UpdateDomainUnit",
            "datazone:UpdateEnvironment",
            "datazone:UpdateEnvironmentDeploymentStatus",
            "datazone:UpdateEnvironmentProfile",
            "datazone:UpdateGlossary",
            "datazone:UpdateGlossaryTerm",
            "datazone:UpdateProject",
            "datazone:UpdateSubscriptionGrantStatus",
            "datazone:UpdateSubscriptionRequest",
            "glue:GetCompletion",
            "glue:StartCompletion",
            "q:GetConversation",
            "q:ListConversations",
            "q:PassRequest",
            "q:SendMessage",
            "q:StartConversation",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShares",
            "ssm:GetParameter",
            "sts:SetContext"
        ]
    },
    "SageMakerStudioProjectUserRolePermissionsBoundary": {
        "permissions": [
            "*",
            "airflow:CreateWebLoginToken",
            "airflow:GetEnvironment",
            "airflow:InvokeRestApi",
            "airflow:ListEnvironments",
            "airflow:UpdateEnvironment",
            "aoss:APIAccessAll",
            "application-autoscaling:DeleteScalingPolicy",
            "application-autoscaling:DeleteScheduledAction",
            "application-autoscaling:DeregisterScalableTarget",
            "application-autoscaling:DescribeScalableTargets",
            "application-autoscaling:DescribeScalingActivities",
            "application-autoscaling:DescribeScalingPolicies",
            "application-autoscaling:DescribeScheduledpermissions",
            "application-autoscaling:PutScalingPolicy",
            "application-autoscaling:PutScheduledAction",
            "application-autoscaling:RegisterScalableTarget",
            "athena:BatchGetNamedQuery",
            "athena:BatchGetPreparedStatement",
            "athena:BatchGetQueryExecution",
            "athena:CreateNamedQuery",
            "athena:CreateNotebook",
            "athena:CreatePreparedStatement",
            "athena:CreatePresignedNotebookUrl",
            "athena:DeleteNamedQuery",
            "athena:DeleteNotebook",
            "athena:DeletePreparedStatement",
            "athena:ExportNotebook",
            "athena:GetCalculationExecution",
            "athena:GetCalculationExecutionCode",
            "athena:GetCalculationExecutionStatus",
            "athena:GetDataCatalog",
            "athena:GetDatabase",
            "athena:GetNamedQuery",
            "athena:GetNotebookMetadata",
            "athena:GetPreparedStatement",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetQueryResultsStream",
            "athena:GetQueryRuntimeStatistics",
            "athena:GetSession",
            "athena:GetSessionStatus",
            "athena:GetTableMetadata",
            "athena:GetWorkGroup",
            "athena:ImportNotebook",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListEngineVersions",
            "athena:ListNamedQueries",
            "athena:ListPreparedStatements",
            "athena:ListQueryExecutions",
            "athena:ListTableMetadata",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "athena:StartCalculationExecution",
            "athena:StartQueryExecution",
            "athena:StartSession",
            "athena:StopCalculationExecution",
            "athena:StopQueryExecution",
            "athena:TerminateSession",
            "athena:UpdateNamedQuery",
            "athena:UpdateNotebook",
            "athena:UpdateNotebookMetadata",
            "athena:UpdatePreparedStatement",
            "bedrock:ApplyGuardrail",
            "bedrock:BatchDeleteEvaluationJob",
            "bedrock:CreateAgentAlias",
            "bedrock:CreateEvaluationJob",
            "bedrock:CreatePrompt",
            "bedrock:CreatePromptVersion",
            "bedrock:DeleteAgentAlias",
            "bedrock:DeleteAgentVersion",
            "bedrock:DeletePrompt",
            "bedrock:GetAgent",
            "bedrock:GetAgentActionGroup",
            "bedrock:GetAgentAlias",
            "bedrock:GetAgentKnowledgeBase",
            "bedrock:GetAgentVersion",
            "bedrock:GetEvaluationJob",
            "bedrock:GetInferenceProfile",
            "bedrock:GetIngestionJob",
            "bedrock:GetPrompt",
            "bedrock:InvokeAgent",
            "bedrock:InvokeFlow",
            "bedrock:InvokeInlineAgent",
            "bedrock:InvokeModel",
            "bedrock:InvokeModelWithResponseStream",
            "bedrock:ListAgentActionGroups",
            "bedrock:ListAgentAliases",
            "bedrock:ListAgentKnowledgeBases",
            "bedrock:ListAgentVersions",
            "bedrock:ListEvaluationJobs",
            "bedrock:ListFoundationModels",
            "bedrock:ListIngestionJobs",
            "bedrock:ListPrompts",
            "bedrock:ListTagsForResource",
            "bedrock:Retrieve",
            "bedrock:RetrieveAndGenerate",
            "bedrock:StartIngestionJob",
            "bedrock:StopEvaluationJob",
            "bedrock:TagResource",
            "bedrock:UpdateAgentAlias",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudwatch:DeleteAlarms",
            "cloudwatch:DescribeAlarms",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:PutMetricData",
            "codecommit:BatchDescribeMergeConflicts",
            "codecommit:BatchGetCommits",
            "codecommit:BatchGetPullRequests",
            "codecommit:BatchGetRepositories",
            "codecommit:CreateBranch",
            "codecommit:CreateCommit",
            "codecommit:CreatePullRequest",
            "codecommit:DeleteBranch",
            "codecommit:DeleteFile",
            "codecommit:DescribeMergeConflicts",
            "codecommit:DescribePullRequestEvents",
            "codecommit:GetBlob",
            "codecommit:GetBranch",
            "codecommit:GetComment",
            "codecommit:GetCommentRepermissions",
            "codecommit:GetCommentsForComparedCommit",
            "codecommit:GetCommentsForPullRequest",
            "codecommit:GetCommit",
            "codecommit:GetCommitHistory",
            "codecommit:GetCommitsFromMergeBase",
            "codecommit:GetDifferences",
            "codecommit:GetFile",
            "codecommit:GetFolder",
            "codecommit:GetMergeCommit",
            "codecommit:GetMergeConflicts",
            "codecommit:GetMergeOptions",
            "codecommit:GetObjectIdentifier",
            "codecommit:GetPullRequest",
            "codecommit:GetPullRequestApprovalStates",
            "codecommit:GetPullRequestOverrideState",
            "codecommit:GetReferences",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codecommit:GetTree",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:GitPull",
            "codecommit:GitPush",
            "codecommit:ListAssociatedApprovalRuleTemplatesForRepository",
            "codecommit:ListBranches",
            "codecommit:ListFileCommitHistory",
            "codecommit:ListPullRequests",
            "codecommit:ListTagsForResource",
            "codecommit:MergeBranchesByFastForward",
            "codecommit:MergeBranchesBySquash",
            "codecommit:MergeBranchesByThreeWay",
            "codecommit:MergePullRequestByFastForward",
            "codecommit:MergePullRequestBySquash",
            "codecommit:MergePullRequestByThreeWay",
            "codecommit:PostCommentForComparedCommit",
            "codecommit:PostCommentForPullRequest",
            "codecommit:PostCommentReply",
            "codecommit:PutCommentReaction",
            "codecommit:PutFile",
            "codecommit:UpdateComment",
            "codecommit:UpdateDefaultBranch",
            "codecommit:UpdatePullRequestApprovalRuleContent",
            "codecommit:UpdatePullRequestApprovalState",
            "codecommit:UpdatePullRequestDescription",
            "codecommit:UpdatePullRequestStatus",
            "codecommit:UpdatePullRequestTitle",
            "codecommit:UpdateRepositoryDescription",
            "codewhisperer:GenerateRecommendations",
            "datazone:CreateConnection",
            "datazone:DeleteConnection",
            "datazone:GetConnection",
            "datazone:GetDomain",
            "datazone:GetDomainExecutionRoleCredentials",
            "datazone:GetEnvironment",
            "datazone:GetEnvironmentBlueprintConfiguration",
            "datazone:GetProject",
            "datazone:GetUserProfile",
            "datazone:ListConnections",
            "datazone:ListEnvironmentBlueprints",
            "datazone:ListEnvironments",
            "datazone:ListProjects",
            "datazone:UpdateConnection",
            "dynamodb:ListTables",
            "ec2:AttachNetworkInterface",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateFleet",
            "ec2:CreateLaunchTemplate",
            "ec2:CreateLaunchTemplateVersion",
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:CreatePlacementGroup",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteLaunchTemplate",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DeletePlacementGroup",
            "ec2:DeleteTags",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeCapacityReservations",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeImages",
            "ec2:DescribeInstanceTypeOfferings",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeInstances",
            "ec2:DescribeLaunchTemplates",
            "ec2:DescribeNetworkAcls",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribePlacementGroups",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVolumeStatus",
            "ec2:DescribeVolumes",
            "ec2:DescribeVpcAttribute",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:DetachNetworkInterface",
            "ec2:ModifyInstanceAttribute",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ec2:RunInstances",
            "ec2:TerminateInstances",
            "ecr:BatchGetImage",
            "ecr:DescribeImages",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "elasticfilesystem:DescribeMountTargets",
            "elasticmapreduce:CreatePersistentAppUI",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribePersistentAppUI",
            "elasticmapreduce:GetClusterSessionCredentials",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:GetOnClusterAppUIPresignedURL",
            "elasticmapreduce:GetPersistentAppUIPresignedURL",
            "elasticmapreduce:ListBootstrappermissions",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListReleaseLabels",
            "elasticmapreduce:ListSupportedInstanceTypes",
            "elasticmapreduce:TerminateJobFlows",
            "emr-serverless:AccessInteractiveEndpoints",
            "emr-serverless:AccessLivyEndpoints",
            "emr-serverless:GetApplication",
            "emr-serverless:GetDashboardForJobRun",
            "emr-serverless:GetJobRun",
            "emr-serverless:ListApplications",
            "emr-serverless:ListJobRunAttempts",
            "emr-serverless:ListJobRuns",
            "emr-serverless:StartApplication",
            "emr-serverless:StartJobRun",
            "emr-serverless:StopApplication",
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetPartition",
            "glue:BatchGetTableOptimizer",
            "glue:BatchStopJobRun",
            "glue:BatchUpdatePartition",
            "glue:CancelDataQualityRuleRecommendationRun",
            "glue:CancelDataQualityRulesetEvaluationRun",
            "glue:CancelStatement",
            "glue:CreateBlueprint",
            "glue:CreateDataQualityRuleset",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreatePartition",
            "glue:CreatePartitionIndex",
            "glue:CreateSession",
            "glue:CreateTable",
            "glue:CreateWorkflow",
            "glue:DeleteBlueprint",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeleteDataQualityRuleset",
            "glue:DeleteDatabase",
            "glue:DeleteJob",
            "glue:DeletePartition",
            "glue:DeletePartitionIndex",
            "glue:DeleteSession",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:DeleteWorkflow",
            "glue:DescribeConnectionType",
            "glue:DescribeEntity",
            "glue:GetCatalog",
            "glue:GetCatalogImportStatus",
            "glue:GetCatalogs",
            "glue:GetClassifier",
            "glue:GetClassifiers",
            "glue:GetColumnStatisticsForPartition",
            "glue:GetColumnStatisticsForTable",
            "glue:GetColumnStatisticsTaskRun",
            "glue:GetColumnStatisticsTaskRuns",
            "glue:GetCompletion",
            "glue:GetConnection",
            "glue:GetConnections",
            "glue:GetDashboardUrl",
            "glue:GetDataQualityModel",
            "glue:GetDataQualityModelResult",
            "glue:GetDataQualityResult",
            "glue:GetDataQualityRuleRecommendationRun",
            "glue:GetDataQualityRuleset",
            "glue:GetDataQualityRulesetEvaluationRun",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetEntityRecords",
            "glue:GetGeneratedCode",
            "glue:GetPartition",
            "glue:GetPartitionIndexes",
            "glue:GetPartitions",
            "glue:GetSession",
            "glue:GetStatement",
            "glue:GetTable",
            "glue:GetTableOptimizer",
            "glue:GetTableVersion",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:GetTags",
            "glue:GetUserDefinedFunction",
            "glue:GetUserDefinedFunctions",
            "glue:ListConnectionTypes",
            "glue:ListCrawls",
            "glue:ListDataQualityResults",
            "glue:ListDataQualityRuleRecommendationRuns",
            "glue:ListDataQualityRulesetEvaluationRuns",
            "glue:ListDataQualityRulesets",
            "glue:ListEntities",
            "glue:ListSessions",
            "glue:ListStatements",
            "glue:ListTableOptimizerRuns",
            "glue:NotifyEvent",
            "glue:PassConnection",
            "glue:PublishDataQuality",
            "glue:PutDataQualityProfileAnnotation",
            "glue:PutDataQualityStatisticAnnotation",
            "glue:PutWorkflowRunProperties",
            "glue:ResumeWorkflowRun",
            "glue:RunStatement",
            "glue:SearchTables",
            "glue:StartBlueprintRun",
            "glue:StartCompletion",
            "glue:StartDataQualityRuleRecommendationRun",
            "glue:StartDataQualityRulesetEvaluationRun",
            "glue:StartJobRun",
            "glue:StartWorkflowRun",
            "glue:StopSession",
            "glue:StopWorkflowRun",
            "glue:TagResource",
            "glue:UntagResource",
            "glue:UpdateBlueprint",
            "glue:UpdateCatalog",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:UpdateDataQualityRuleset",
            "glue:UpdateJob",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:UpdateWorkflow",
            "glue:UseGlueStudio",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:GenerateDataKeyWithoutPlaintext",
            "kms:GetPublicKey",
            "kms:ListAliases",
            "kms:ListGrants",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
            "kms:RevokeGrant",
            "lakeformation:GetDataAccess",
            "lambda:InvokeFunction",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetLogRecord",
            "logs:GetQueryResults",
            "logs:PutLogEvents",
            "logs:StartQuery",
            "logs:StopQuery",
            "pricing:GetProducts",
            "q:SendMessage",
            "q:StartConversation",
            "redshift-data:BatchExecuteStatement",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStagingBucketLocation",
            "redshift-data:GetStatementResult",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListStatements",
            "redshift-data:ListTables",
            "redshift-serverless:GetCredentials",
            "redshift-serverless:GetManagedWorkgroup",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListTagsForResource",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "redshift:DescribeTags",
            "redshift:GetClusterCredentialsWithIAM",
            "resource-groups:CreateGroup",
            "resource-groups:DeleteGroup",
            "resource-groups:GetGroupQuery",
            "resource-groups:ListGroupResources",
            "resource-groups:Tag",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketLocation",
            "s3:GetEncryptionConfiguration",
            "s3:GetObject",
            "s3:GetObject*",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:ListMultipartUploadParts",
            "s3:PutObject",
            "s3:PutObjectRetention",
            "s3:PutObjectTagging",
            "s3:ReplicateObject",
            "s3:RestoreObject",
            "sagemaker-mlflow:AccessUI",
            "sagemaker-mlflow:CreateExperiment",
            "sagemaker-mlflow:CreateModelVersion",
            "sagemaker-mlflow:CreateRegisteredModel",
            "sagemaker-mlflow:CreateRun",
            "sagemaker-mlflow:DeleteExperiment",
            "sagemaker-mlflow:DeleteModelVersion",
            "sagemaker-mlflow:DeleteModelVersionTag",
            "sagemaker-mlflow:DeleteRegisteredModel",
            "sagemaker-mlflow:DeleteRegisteredModelAlias",
            "sagemaker-mlflow:DeleteRegisteredModelTag",
            "sagemaker-mlflow:DeleteRun",
            "sagemaker-mlflow:DeleteTag",
            "sagemaker-mlflow:GetDownloadURIForModelVersionArtifacts",
            "sagemaker-mlflow:GetExperiment",
            "sagemaker-mlflow:GetExperimentByName",
            "sagemaker-mlflow:GetLatestModelVersions",
            "sagemaker-mlflow:GetMetricHistory",
            "sagemaker-mlflow:GetModelVersion",
            "sagemaker-mlflow:GetModelVersionByAlias",
            "sagemaker-mlflow:GetRegisteredModel",
            "sagemaker-mlflow:GetRun",
            "sagemaker-mlflow:ListArtifacts",
            "sagemaker-mlflow:LogBatch",
            "sagemaker-mlflow:LogInputs",
            "sagemaker-mlflow:LogMetric",
            "sagemaker-mlflow:LogModel",
            "sagemaker-mlflow:LogParam",
            "sagemaker-mlflow:RenameRegisteredModel",
            "sagemaker-mlflow:RestoreExperiment",
            "sagemaker-mlflow:RestoreRun",
            "sagemaker-mlflow:SearchExperiments",
            "sagemaker-mlflow:SearchModelVersions",
            "sagemaker-mlflow:SearchRegisteredModels",
            "sagemaker-mlflow:SearchRuns",
            "sagemaker-mlflow:SetExperimentTag",
            "sagemaker-mlflow:SetRegisteredModelAlias",
            "sagemaker-mlflow:SetRegisteredModelTag",
            "sagemaker-mlflow:SetTag",
            "sagemaker-mlflow:TransitionModelVersionStage",
            "sagemaker-mlflow:UpdateExperiment",
            "sagemaker-mlflow:UpdateModelVersion",
            "sagemaker-mlflow:UpdateRegisteredModel",
            "sagemaker-mlflow:UpdateRun",
            "sagemaker:AddAssociation",
            "sagemaker:AddTags",
            "sagemaker:BatchDescribeModelPackage",
            "sagemaker:BatchGetMetrics",
            "sagemaker:BatchPutMetrics",
            "sagemaker:CallPartnerAppApi",
            "sagemaker:CreateAction",
            "sagemaker:CreateApp",
            "sagemaker:CreateArtifact",
            "sagemaker:CreateAutoMLJob",
            "sagemaker:CreateAutoMLJobV2",
            "sagemaker:CreateContext",
            "sagemaker:CreateEndpoint",
            "sagemaker:CreateEndpointConfig",
            "sagemaker:CreateHyperParameterTuningJob",
            "sagemaker:CreateInferenceComponent",
            "sagemaker:CreateInferenceRecommendationsJob",
            "sagemaker:CreateModel",
            "sagemaker:CreateModelPackage",
            "sagemaker:CreateModelPackageGroup",
            "sagemaker:CreatePartnerAppPresignedUrl",
            "sagemaker:CreatePipeline",
            "sagemaker:CreatePresignedDomainUrl",
            "sagemaker:CreatePresignedMlflowTrackingServerUrl",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateSpace",
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateTransformJob",
            "sagemaker:CreateUserProfile",
            "sagemaker:DeleteAction",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteArtifact",
            "sagemaker:DeleteAssociation",
            "sagemaker:DeleteContext",
            "sagemaker:DeleteEndpoint",
            "sagemaker:DeleteEndpointConfig",
            "sagemaker:DeleteInferenceComponent",
            "sagemaker:DeleteModel",
            "sagemaker:DeleteModelPackage",
            "sagemaker:DeleteModelPackageGroup",
            "sagemaker:DeletePipeline",
            "sagemaker:DeleteSpace",
            "sagemaker:DeleteTags",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DescribeAction",
            "sagemaker:DescribeApp",
            "sagemaker:DescribeArtifact",
            "sagemaker:DescribeAutoMLJob",
            "sagemaker:DescribeAutoMLJobV2",
            "sagemaker:DescribeContext",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeEndpoint",
            "sagemaker:DescribeEndpointConfig",
            "sagemaker:DescribeHyperParameterTuningJob",
            "sagemaker:DescribeImage",
            "sagemaker:DescribeImageVersion",
            "sagemaker:DescribeInferenceComponent",
            "sagemaker:DescribeInferenceRecommendationsJob",
            "sagemaker:DescribeMlflowTrackingServer",
            "sagemaker:DescribeModel",
            "sagemaker:DescribeModelPackage",
            "sagemaker:DescribeModelPackageGroup",
            "sagemaker:DescribeOptimizationJob",
            "sagemaker:DescribePartnerApp",
            "sagemaker:DescribePipeline",
            "sagemaker:DescribePipelineDefinitionForExecution",
            "sagemaker:DescribePipelineExecution",
            "sagemaker:DescribeProcessingJob",
            "sagemaker:DescribeSpace",
            "sagemaker:DescribeTrainingJob",
            "sagemaker:DescribeTransformJob",
            "sagemaker:DescribeTrialComponent",
            "sagemaker:DescribeUserProfile",
            "sagemaker:GetSearchSuggestions",
            "sagemaker:InvokeEndpoint",
            "sagemaker:InvokeEndpointAsync",
            "sagemaker:InvokeEndpointWithResponseStream",
            "sagemaker:ListApps",
            "sagemaker:ListArtifacts",
            "sagemaker:ListAssociations",
            "sagemaker:ListAutoMLJobs",
            "sagemaker:ListCandidatesForAutoMLJob",
            "sagemaker:ListContexts",
            "sagemaker:ListDomains",
            "sagemaker:ListEndpointConfigs",
            "sagemaker:ListEndpoints",
            "sagemaker:ListHubContents",
            "sagemaker:ListHubs",
            "sagemaker:ListHyperParameterTuningJobs",
            "sagemaker:ListImageVersions",
            "sagemaker:ListInferenceComponents",
            "sagemaker:ListMlflowTrackingServers",
            "sagemaker:ListModelMetadata",
            "sagemaker:ListModelPackageGroups",
            "sagemaker:ListModelPackages",
            "sagemaker:ListModels",
            "sagemaker:ListPartnerApps",
            "sagemaker:ListPipelineExecutionSteps",
            "sagemaker:ListPipelineExecutions",
            "sagemaker:ListPipelineParametersForExecution",
            "sagemaker:ListPipelines",
            "sagemaker:ListProcessingJobs",
            "sagemaker:ListSpaces",
            "sagemaker:ListTags",
            "sagemaker:ListTrainingJobs",
            "sagemaker:ListTrainingJobsForHyperParameterTuningJob",
            "sagemaker:ListTransformJobs",
            "sagemaker:ListUserProfiles",
            "sagemaker:QueryLineage",
            "sagemaker:RetryPipelineExecution",
            "sagemaker:Search",
            "sagemaker:SendPipelineExecutionStepFailure",
            "sagemaker:SendPipelineExecutionStepSuccess",
            "sagemaker:StartMlflowTrackingServer",
            "sagemaker:StartPipelineExecution",
            "sagemaker:StopAutoMLJob",
            "sagemaker:StopHyperParameterTuningJob",
            "sagemaker:StopMlflowTrackingServer",
            "sagemaker:StopPipelineExecution",
            "sagemaker:StopProcessingJob",
            "sagemaker:StopTrainingJob",
            "sagemaker:StopTransformJob",
            "sagemaker:UpdateEndpoint",
            "sagemaker:UpdateEndpointWeightsAndCapacities",
            "sagemaker:UpdateInferenceComponentRuntimeConfig",
            "sagemaker:UpdateMlflowTrackingServer",
            "sagemaker:UpdateModelPackage",
            "sagemaker:UpdatePipeline",
            "sagemaker:UpdatePipelineExecution",
            "sagemaker:UpdateSpace",
            "sagemaker:UpdateTrainingJob",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets",
            "secretsmanager:PutSecretValue",
            "sqlworkbench:CreateConnection",
            "sqlworkbench:DeleteQCustomContext",
            "sqlworkbench:DeleteTab",
            "sqlworkbench:DriverExecute",
            "sqlworkbench:GetAutocompletionMetadata",
            "sqlworkbench:GetAutocompletionResource",
            "sqlworkbench:GetQCustomContext",
            "sqlworkbench:GetQSqlPromptQuotas",
            "sqlworkbench:GetQSqlRecommendations",
            "sqlworkbench:GetQueryExecutionHistory",
            "sqlworkbench:GetUserInfo",
            "sqlworkbench:ListQueryExecutionHistory",
            "sqlworkbench:ListTabs",
            "sqlworkbench:PassAccountSettings",
            "sqlworkbench:PutQCustomContext",
            "sqlworkbench:PutTab",
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "ssm:GetParameter",
            "ssm:GetParameters",
            "ssm:GetParametersByPath",
            "sts:AssumeRole",
            "sts:GetCallerIdentity",
            "sts:SetSourceIdentity",
            "sts:TagSession",
            "tag:GetResources"
        ]
    },
    "SageMakerStudioProjectProvisioningRolePolicy": {
        "permissions": [
            "airflow:CreateEnvironment",
            "airflow:DeleteEnvironment",
            "airflow:GetEnvironment",
            "airflow:TagResource",
            "aoss:BatchGetCollection",
            "aoss:CreateAccessPolicy",
            "aoss:CreateCollection",
            "aoss:CreateSecurityPolicy",
            "aoss:DeleteAccessPolicy",
            "aoss:DeleteCollection",
            "aoss:DeleteSecurityPolicy",
            "aoss:GetAccessPolicy",
            "aoss:GetSecurityPolicy",
            "aoss:TagResource",
            "aoss:UpdateAccessPolicy",
            "aoss:UpdateCollection",
            "aoss:UpdateSecurityPolicy",
            "athena:CreateDataCatalog",
            "athena:CreateWorkGroup",
            "athena:DeleteDataCatalog",
            "athena:DeleteWorkGroup",
            "athena:GetDataCatalog",
            "athena:GetWorkGroup",
            "athena:TagResource",
            "athena:UpdateDataCatalog",
            "bedrock:AssociateAgentKnowledgeBase",
            "bedrock:BatchDeleteEvaluationJob",
            "bedrock:CreateAgent",
            "bedrock:CreateAgentActionGroup",
            "bedrock:CreateAgentAlias",
            "bedrock:CreateDataSource",
            "bedrock:CreateFlow",
            "bedrock:CreateFlowAlias",
            "bedrock:CreateFlowVersion",
            "bedrock:CreateGuardrail",
            "bedrock:CreateGuardrailVersion",
            "bedrock:CreateKnowledgeBase",
            "bedrock:CreatePrompt",
            "bedrock:CreatePromptVersion",
            "bedrock:DeleteAgent",
            "bedrock:DeleteAgentActionGroup",
            "bedrock:DeleteAgentAlias",
            "bedrock:DeleteDataSource",
            "bedrock:DeleteFlow",
            "bedrock:DeleteFlowAlias",
            "bedrock:DeleteFlowVersion",
            "bedrock:DeleteGuardrail",
            "bedrock:DeleteKnowledgeBase",
            "bedrock:DeletePrompt",
            "bedrock:DisassociateAgentKnowledgeBase",
            "bedrock:GetAgent",
            "bedrock:GetAgentActionGroup",
            "bedrock:GetAgentAlias",
            "bedrock:GetAgentKnowledgeBase",
            "bedrock:GetDataSource",
            "bedrock:GetFlow",
            "bedrock:GetFlowAlias",
            "bedrock:GetFlowVersion",
            "bedrock:GetGuardrail",
            "bedrock:GetKnowledgeBase",
            "bedrock:GetPrompt",
            "bedrock:ListAgentActionGroups",
            "bedrock:ListAgentAliases",
            "bedrock:ListAgentKnowledgeBases",
            "bedrock:ListDataSources",
            "bedrock:ListEvaluationJobs",
            "bedrock:ListFlowAliases",
            "bedrock:ListFlowVersions",
            "bedrock:ListTagsForResource",
            "bedrock:PrepareAgent",
            "bedrock:PrepareFlow",
            "bedrock:TagResource",
            "bedrock:UpdateAgent",
            "bedrock:UpdateAgentActionGroup",
            "bedrock:UpdateAgentAlias",
            "bedrock:UpdateAgentKnowledgeBase",
            "bedrock:UpdateDataSource",
            "bedrock:UpdateFlow",
            "bedrock:UpdateFlowAlias",
            "bedrock:UpdateGuardrail",
            "bedrock:UpdateKnowledgeBase",
            "bedrock:UpdatePrompt",
            "cloudformation:CreateChangeSet",
            "cloudformation:CreateStack",
            "cloudformation:DeleteChangeSet",
            "cloudformation:DeleteStack",
            "cloudformation:DescribeStackEvents",
            "cloudformation:DescribeStacks",
            "cloudformation:TagResource",
            "cloudformation:UpdateStack",
            "codecommit:CreateCommit",
            "codecommit:CreateRepository",
            "codecommit:DeleteRepository",
            "codecommit:GetBranch",
            "codecommit:GetFile",
            "codecommit:GetRepository",
            "codecommit:ListRepositories",
            "codecommit:PutRepositoryTriggers",
            "codecommit:TagResource",
            "codecommit:UpdateRepositoryEncryptionKey",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateSecurityGroup",
            "ec2:CreateTags",
            "ec2:CreateVpcEndpoint",
            "ec2:DeleteSecurityGroup",
            "ec2:DescribeAccountAttributes",
            "ec2:DescribeAvailabilityZones",
            "ec2:DescribeNatGateways",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "ecr:BatchCheckLayerAvailability",
            "ecr:BatchGetImage",
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "elasticmapreduce:AddJobFlowSteps",
            "elasticmapreduce:AddTags",
            "elasticmapreduce:CreateSecurityConfiguration",
            "elasticmapreduce:DeleteSecurityConfiguration",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:DescribeJobFlows",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:RunJobFlow",
            "elasticmapreduce:SetTerminationProtection",
            "elasticmapreduce:TerminateJobFlows",
            "emr-serverless:CreateApplication",
            "emr-serverless:DeleteApplication",
            "emr-serverless:GetApplication",
            "emr-serverless:TagResource",
            "glue:CreateCatalog",
            "glue:CreateConnection",
            "glue:CreateDatabase",
            "glue:DeleteCatalog",
            "glue:DeleteConnection",
            "glue:DeleteDatabase",
            "glue:DescribeConnectionType",
            "glue:GetCatalog",
            "glue:GetCatalogs",
            "glue:GetConnection",
            "glue:GetConnections",
            "glue:GetDatabase",
            "glue:GetTags",
            "glue:ListConnectionTypes",
            "glue:PassConnection",
            "glue:TagResource",
            "glue:UpdateCatalog",
            "glue:UpdateConnection",
            "iam:AddRoleToInstanceProfile",
            "iam:AttachRolePolicy",
            "iam:CreateInstanceProfile",
            "iam:CreatePolicy",
            "iam:CreatePolicyVersion",
            "iam:CreateRole",
            "iam:CreateServiceLinkedRole",
            "iam:DeleteInstanceProfile",
            "iam:DeletePolicy",
            "iam:DeletePolicyVersion",
            "iam:DeleteRole",
            "iam:DeleteRolePolicy",
            "iam:DetachRolePolicy",
            "iam:GetInstanceProfile",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:ListAttachedRolePolicies",
            "iam:ListPolicies",
            "iam:ListPolicyVersions",
            "iam:ListRolePolicies",
            "iam:PassRole",
            "iam:PutRolePolicy",
            "iam:RemoveRoleFromInstanceProfile",
            "iam:TagRole",
            "iam:UpdateAssumeRolePolicy",
            "imagebuilder:GetComponent",
            "imagebuilder:GetContainerRecipe",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
            "lakeformation:DeregisterResource",
            "lakeformation:GetDataLakeSettings",
            "lakeformation:GrantPermissions",
            "lakeformation:ListPermissions",
            "lakeformation:ListResources",
            "lakeformation:PutDataLakeSettings",
            "lakeformation:RegisterResource",
            "lakeformation:RevokePermissions",
            "lambda:AddPermission",
            "lambda:CreateFunction",
            "lambda:DeleteFunction",
            "lambda:GetFunction",
            "lambda:GetFunctionConfiguration",
            "lambda:GetPolicy",
            "lambda:InvokeFunction",
            "lambda:ListTags",
            "lambda:ListVersionsByFunction",
            "lambda:PublishVersion",
            "lambda:RemovePermission",
            "lambda:TagResource",
            "lambda:UpdateFunctionCode",
            "lambda:UpdateFunctionConfiguration",
            "logs:AssociateKmsKey",
            "logs:CreateLogGroup",
            "logs:DeleteDataProtectionPolicy",
            "logs:DeleteLogGroup",
            "logs:DeleteRetentionPolicy",
            "logs:DescribeLogGroups",
            "logs:DisassociateKmsKey",
            "logs:GetDataProtectionPolicy",
            "logs:ListTagsForResource",
            "logs:PutDataProtectionPolicy",
            "logs:PutRetentionPolicy",
            "logs:TagResource",
            "redshift-data:DescribeStatement",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStatementResult",
            "redshift-serverless:CreateNamespace",
            "redshift-serverless:CreateWorkgroup",
            "redshift-serverless:DeleteNamespace",
            "redshift-serverless:DeleteWorkgroup",
            "redshift-serverless:GetCredentials",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListTagsForResource",
            "redshift-serverless:ListWorkgroups",
            "redshift-serverless:TagResource",
            "redshift-serverless:UntagResource",
            "redshift-serverless:UpdateNamespace",
            "redshift-serverless:UpdateWorkgroup",
            "redshift:AssociateDataShareConsumer",
            "redshift:AuthorizeDataShare",
            "redshift:DescribeDataShares",
            "redshift:DescribeDataSharesForConsumer",
            "redshift:GetResourcePolicy",
            "s3:CreateBucket",
            "s3:DeleteBucket",
            "s3:GetEncryptionConfiguration",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:ListBucket",
            "s3:PutBucketPolicy",
            "s3:PutBucketTagging",
            "s3:PutBucketVersioning",
            "s3:PutEncryptionConfiguration",
            "s3:PutLifecycleConfiguration",
            "sagemaker:AddTags",
            "sagemaker:CreateDomain",
            "sagemaker:CreateMlflowTrackingServer",
            "sagemaker:DeleteApp",
            "sagemaker:DeleteDomain",
            "sagemaker:DeleteMlflowTrackingServer",
            "sagemaker:DeleteSpace",
            "sagemaker:DeleteUserProfile",
            "sagemaker:DescribeDomain",
            "sagemaker:DescribeMlflowTrackingServer",
            "sagemaker:ListDomains",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteResourcePolicy",
            "secretsmanager:DeleteSecret",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetRandomPassword",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:RotateSecret",
            "secretsmanager:TagResource",
            "secretsmanager:UpdateSecret",
            "serverlessrepo:CreateCloudFormationTemplate",
            "serverlessrepo:GetCloudFormationTemplate"
        ]
    },
    "SageMakerStudioProjectUserRolePolicy": {
        "permissions": [
            "airflow:CreateWebLoginToken",
            "airflow:GetEnvironment",
            "airflow:InvokeRestApi",
            "airflow:ListEnvironments",
            "airflow:UpdateEnvironment",
            "athena:BatchGetNamedQuery",
            "athena:BatchGetPreparedStatement",
            "athena:BatchGetQueryExecution",
            "athena:CreateNamedQuery",
            "athena:CreateNotebook",
            "athena:CreatePreparedStatement",
            "athena:CreatePresignedNotebookUrl",
            "athena:DeleteNamedQuery",
            "athena:DeleteNotebook",
            "athena:DeletePreparedStatement",
            "athena:ExportNotebook",
            "athena:GetCalculationExecution",
            "athena:GetCalculationExecutionCode",
            "athena:GetCalculationExecutionStatus",
            "athena:GetDataCatalog",
            "athena:GetDatabase",
            "athena:GetNamedQuery",
            "athena:GetNotebookMetadata",
            "athena:GetPreparedStatement",
            "athena:GetQueryExecution",
            "athena:GetQueryResults",
            "athena:GetQueryResultsStream",
            "athena:GetQueryRuntimeStatistics",
            "athena:GetSession",
            "athena:GetSessionStatus",
            "athena:GetTableMetadata",
            "athena:GetWorkGroup",
            "athena:ImportNotebook",
            "athena:ListDataCatalogs",
            "athena:ListDatabases",
            "athena:ListEngineVersions",
            "athena:ListNamedQueries",
            "athena:ListPreparedStatements",
            "athena:ListQueryExecutions",
            "athena:ListTableMetadata",
            "athena:ListTagsForResource",
            "athena:ListWorkGroups",
            "athena:StartCalculationExecution",
            "athena:StartQueryExecution",
            "athena:StartSession",
            "athena:StopCalculationExecution",
            "athena:StopQueryExecution",
            "athena:TerminateSession",
            "athena:UpdateNamedQuery",
            "athena:UpdateNotebook",
            "athena:UpdateNotebookMetadata",
            "athena:UpdatePreparedStatement",
            "bedrock:ApplyGuardrail",
            "bedrock:BatchDeleteEvaluationJob",
            "bedrock:CreateAgentAlias",
            "bedrock:CreateEvaluationJob",
            "bedrock:CreatePrompt",
            "bedrock:CreatePromptVersion",
            "bedrock:DeleteAgentAlias",
            "bedrock:DeleteAgentVersion",
            "bedrock:DeletePrompt",
            "bedrock:GetAgentAlias",
            "bedrock:GetAgentVersion",
            "bedrock:GetEvaluationJob",
            "bedrock:GetInferenceProfile",
            "bedrock:GetIngestionJob",
            "bedrock:GetPrompt",
            "bedrock:InvokeAgent",
            "bedrock:InvokeFlow",
            "bedrock:InvokeInlineAgent",
            "bedrock:InvokeModel",
            "bedrock:InvokeModelWithResponseStream",
            "bedrock:ListAgentAliases",
            "bedrock:ListAgentVersions",
            "bedrock:ListEvaluationJobs",
            "bedrock:ListIngestionJobs",
            "bedrock:ListPrompts",
            "bedrock:ListTagsForResource",
            "bedrock:Retrieve",
            "bedrock:RetrieveAndGenerate",
            "bedrock:StartIngestionJob",
            "bedrock:StopEvaluationJob",
            "bedrock:TagResource",
            "bedrock:UpdateAgentAlias",
            "cloudformation:DescribeStacks",
            "cloudformation:GetTemplate",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:PutMetricData",
            "codecommit:BatchDescribeMergeConflicts",
            "codecommit:BatchGetCommits",
            "codecommit:BatchGetPullRequests",
            "codecommit:BatchGetRepositories",
            "codecommit:CreateBranch",
            "codecommit:CreateCommit",
            "codecommit:CreatePullRequest",
            "codecommit:DeleteBranch",
            "codecommit:DeleteFile",
            "codecommit:DescribeMergeConflicts",
            "codecommit:DescribePullRequestEvents",
            "codecommit:GetBlob",
            "codecommit:GetBranch",
            "codecommit:GetComment",
            "codecommit:GetCommentRepermissions",
            "codecommit:GetCommentsForComparedCommit",
            "codecommit:GetCommentsForPullRequest",
            "codecommit:GetCommit",
            "codecommit:GetCommitHistory",
            "codecommit:GetCommitsFromMergeBase",
            "codecommit:GetDifferences",
            "codecommit:GetFile",
            "codecommit:GetFolder",
            "codecommit:GetMergeCommit",
            "codecommit:GetMergeConflicts",
            "codecommit:GetMergeOptions",
            "codecommit:GetObjectIdentifier",
            "codecommit:GetPullRequest",
            "codecommit:GetPullRequestApprovalStates",
            "codecommit:GetPullRequestOverrideState",
            "codecommit:GetReferences",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codecommit:GetTree",
            "codecommit:GetUploadArchiveStatus",
            "codecommit:GitPull",
            "codecommit:GitPush",
            "codecommit:ListAssociatedApprovalRuleTemplatesForRepository",
            "codecommit:ListBranches",
            "codecommit:ListFileCommitHistory",
            "codecommit:ListPullRequests",
            "codecommit:ListTagsForResource",
            "codecommit:MergeBranchesByFastForward",
            "codecommit:MergeBranchesBySquash",
            "codecommit:MergeBranchesByThreeWay",
            "codecommit:MergePullRequestByFastForward",
            "codecommit:MergePullRequestBySquash",
            "codecommit:MergePullRequestByThreeWay",
            "codecommit:PostCommentForComparedCommit",
            "codecommit:PostCommentForPullRequest",
            "codecommit:PostCommentReply",
            "codecommit:PutCommentReaction",
            "codecommit:PutFile",
            "codecommit:UpdateComment",
            "codecommit:UpdateDefaultBranch",
            "codecommit:UpdatePullRequestApprovalRuleContent",
            "codecommit:UpdatePullRequestApprovalState",
            "codecommit:UpdatePullRequestDescription",
            "codecommit:UpdatePullRequestStatus",
            "codecommit:UpdatePullRequestTitle",
            "codecommit:UpdateRepositoryDescription",
            "codewhisperer:GenerateRecommendations",
            "datazone:CreateConnection",
            "datazone:DeleteConnection",
            "datazone:GetConnection",
            "datazone:GetDomain",
            "datazone:GetDomainExecutionRoleCredentials",
            "datazone:GetEnvironment",
            "datazone:GetEnvironmentBlueprintConfiguration",
            "datazone:GetProject",
            "datazone:GetUserProfile",
            "datazone:ListConnections",
            "datazone:ListEnvironmentBlueprints",
            "datazone:ListEnvironments",
            "datazone:ListProjects",
            "datazone:UpdateConnection",
            "ec2:AttachNetworkInterface",
            "ec2:AuthorizeSecurityGroupEgress",
            "ec2:AuthorizeSecurityGroupIngress",
            "ec2:CreateNetworkInterface",
            "ec2:CreateTags",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteTags",
            "ec2:DescribeInstanceTypes",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeRouteTables",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcEndpoints",
            "ec2:DescribeVpcs",
            "ec2:RevokeSecurityGroupEgress",
            "ec2:RevokeSecurityGroupIngress",
            "elasticmapreduce:DescribeCluster",
            "elasticmapreduce:GetClusterSessionCredentials",
            "elasticmapreduce:GetManagedScalingPolicy",
            "elasticmapreduce:GetOnClusterAppUIPresignedURL",
            "elasticmapreduce:ListBootstrappermissions",
            "elasticmapreduce:ListClusters",
            "elasticmapreduce:ListInstanceFleets",
            "elasticmapreduce:ListInstanceGroups",
            "elasticmapreduce:ListInstances",
            "elasticmapreduce:ListReleaseLabels",
            "elasticmapreduce:ListSupportedInstanceTypes",
            "elasticmapreduce:TerminateJobFlows",
            "glue:BatchCreatePartition",
            "glue:BatchDeletePartition",
            "glue:BatchDeleteTable",
            "glue:BatchDeleteTableVersion",
            "glue:BatchGetPartition",
            "glue:BatchGetTableOptimizer",
            "glue:BatchStopJobRun",
            "glue:BatchUpdatePartition",
            "glue:CancelDataQualityRuleRecommendationRun",
            "glue:CancelDataQualityRulesetEvaluationRun",
            "glue:CancelStatement",
            "glue:CreateBlueprint",
            "glue:CreateDataQualityRuleset",
            "glue:CreateDatabase",
            "glue:CreateJob",
            "glue:CreatePartition",
            "glue:CreatePartitionIndex",
            "glue:CreateSession",
            "glue:CreateTable",
            "glue:CreateWorkflow",
            "glue:DeleteBlueprint",
            "glue:DeleteColumnStatisticsForPartition",
            "glue:DeleteColumnStatisticsForTable",
            "glue:DeleteDataQualityRuleset",
            "glue:DeleteDatabase",
            "glue:DeleteJob",
            "glue:DeletePartition",
            "glue:DeletePartitionIndex",
            "glue:DeleteSession",
            "glue:DeleteTable",
            "glue:DeleteTableVersion",
            "glue:DeleteWorkflow",
            "glue:DescribeConnectionType",
            "glue:DescribeEntity",
            "glue:GetCatalog",
            "glue:GetCatalogImportStatus",
            "glue:GetCatalogs",
            "glue:GetClassifier",
            "glue:GetClassifiers",
            "glue:GetColumnStatisticsForPartition",
            "glue:GetColumnStatisticsForTable",
            "glue:GetColumnStatisticsTaskRun",
            "glue:GetColumnStatisticsTaskRuns",
            "glue:GetCompletion",
            "glue:GetConnection",
            "glue:GetConnections",
            "glue:GetDashboardUrl",
            "glue:GetDataQualityModel",
            "glue:GetDataQualityModelResult",
            "glue:GetDataQualityResult",
            "glue:GetDataQualityRuleRecommendationRun",
            "glue:GetDataQualityRuleset",
            "glue:GetDataQualityRulesetEvaluationRun",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetEntityRecords",
            "glue:GetGeneratedCode",
            "glue:GetPartition",
            "glue:GetPartitionIndexes",
            "glue:GetPartitions",
            "glue:GetSession",
            "glue:GetStatement",
            "glue:GetTable",
            "glue:GetTableOptimizer",
            "glue:GetTableVersion",
            "glue:GetTableVersions",
            "glue:GetTables",
            "glue:GetTags",
            "glue:GetUserDefinedFunction",
            "glue:GetUserDefinedFunctions",
            "glue:ListConnectionTypes",
            "glue:ListCrawls",
            "glue:ListDataQualityResults",
            "glue:ListDataQualityRuleRecommendationRuns",
            "glue:ListDataQualityRulesetEvaluationRuns",
            "glue:ListDataQualityRulesets",
            "glue:ListEntities",
            "glue:ListSessions",
            "glue:ListStatements",
            "glue:ListTableOptimizerRuns",
            "glue:NotifyEvent",
            "glue:PassConnection",
            "glue:PublishDataQuality",
            "glue:PutDataQualityProfileAnnotation",
            "glue:PutDataQualityStatisticAnnotation",
            "glue:PutWorkflowRunProperties",
            "glue:ResumeWorkflowRun",
            "glue:RunStatement",
            "glue:SearchTables",
            "glue:StartBlueprintRun",
            "glue:StartCompletion",
            "glue:StartDataQualityRuleRecommendationRun",
            "glue:StartDataQualityRulesetEvaluationRun",
            "glue:StartJobRun",
            "glue:StartWorkflowRun",
            "glue:StopSession",
            "glue:StopWorkflowRun",
            "glue:TagResource",
            "glue:UntagResource",
            "glue:UpdateBlueprint",
            "glue:UpdateCatalog",
            "glue:UpdateColumnStatisticsForPartition",
            "glue:UpdateColumnStatisticsForTable",
            "glue:UpdateDataQualityRuleset",
            "glue:UpdateJob",
            "glue:UpdatePartition",
            "glue:UpdateTable",
            "glue:UpdateWorkflow",
            "glue:UseGlueStudio",
            "iam:GetRole",
            "iam:ListRoles",
            "iam:PassRole",
            "kms:CreateGrant",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:GenerateDataKeyWithoutPlaintext",
            "kms:GetPublicKey",
            "kms:ListAliases",
            "kms:ListGrants",
            "kms:ReEncryptFrom",
            "kms:ReEncryptTo",
            "kms:RevokeGrant",
            "lakeformation:GetDataAccess",
            "lambda:InvokeFunction",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:FilterLogEvents",
            "logs:GetLogEvents",
            "logs:GetLogGroupFields",
            "logs:GetLogRecord",
            "logs:GetQueryResults",
            "logs:PutLogEvents",
            "logs:StartQuery",
            "logs:StopQuery",
            "pricing:GetProducts",
            "q:SendMessage",
            "q:StartConversation",
            "redshift-data:BatchExecuteStatement",
            "redshift-data:CancelStatement",
            "redshift-data:DescribeStatement",
            "redshift-data:DescribeTable",
            "redshift-data:ExecuteStatement",
            "redshift-data:GetStagingBucketLocation",
            "redshift-data:GetStatementResult",
            "redshift-data:ListDatabases",
            "redshift-data:ListSchemas",
            "redshift-data:ListStatements",
            "redshift-data:ListTables",
            "redshift-serverless:GetCredentials",
            "redshift-serverless:GetManagedWorkgroup",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:ListNamespaces",
            "redshift-serverless:ListTagsForResource",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "redshift:DescribeTags",
            "redshift:GetClusterCredentialsWithIAM",
            "s3:AbortMultipartUpload",
            "s3:DeleteObject",
            "s3:DeleteObjectVersion",
            "s3:GetAccountPublicAccessBlock",
            "s3:GetBucketLocation",
            "s3:GetEncryptionConfiguration",
            "s3:GetObject*",
            "s3:ListBucket",
            "s3:ListBucketVersions",
            "s3:ListMultipartUploadParts",
            "s3:PutObject",
            "s3:PutObjectRetention",
            "s3:PutObjectTagging",
            "s3:ReplicateObject",
            "s3:RestoreObject",
            "secretsmanager:DescribeSecret",
            "secretsmanager:GetSecretValue",
            "secretsmanager:ListSecrets",
            "secretsmanager:PutSecretValue",
            "sqlworkbench:CreateConnection",
            "sqlworkbench:DeleteQCustomContext",
            "sqlworkbench:DeleteTab",
            "sqlworkbench:DriverExecute",
            "sqlworkbench:GetAutocompletionMetadata",
            "sqlworkbench:GetAutocompletionResource",
            "sqlworkbench:GetQCustomContext",
            "sqlworkbench:GetQSqlPromptQuotas",
            "sqlworkbench:GetQSqlRecommendations",
            "sqlworkbench:GetQueryExecutionHistory",
            "sqlworkbench:GetUserInfo",
            "sqlworkbench:ListQueryExecutionHistory",
            "sqlworkbench:ListTabs",
            "sqlworkbench:PassAccountSettings",
            "sqlworkbench:PutQCustomContext",
            "sqlworkbench:PutTab",
            "sqs:ChangeMessageVisibility",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:ReceiveMessage",
            "sqs:SendMessage",
            "sts:AssumeRole",
            "sts:SetSourceIdentity",
            "tag:GetResources"
        ]
    },
    "AWSArtifactAgreementsFullAccess": {
        "permissions": [
            "artifact:AcceptAgreement",
            "artifact:AcceptNdaForAgreement",
            "artifact:GetAgreement",
            "artifact:GetCustomerAgreement",
            "artifact:GetNdaForAgreement",
            "artifact:ListAgreements",
            "artifact:ListCustomerAgreements",
            "artifact:TerminateAgreement",
            "iam:CreateServiceLinkedRole",
            "iam:GetRole",
            "organizations:DescribeOrganization",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAWSServiceAccessForOrganization"
        ]
    },
    "AWSArtifactAgreementsReadOnlyAccess": {
        "permissions": [
            "artifact:GetCustomerAgreement",
            "artifact:ListAgreements",
            "artifact:ListCustomerAgreements",
            "iam:GetRole",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization"
        ]
    },
    "AWSPartnerLedSupportReadOnlyAccess": {
        "permissions": [
            "acm-pca:describeCertificateAuthority",
            "acm-pca:describeCertificateAuthorityAuditReport",
            "acm-pca:getCertificate",
            "acm-pca:getCertificateAuthorityCertificate",
            "acm-pca:getCertificateAuthorityCsr",
            "acm-pca:listCertificateAuthorities",
            "acm-pca:listTags",
            "acm:describeCertificate",
            "acm:getAccountConfiguration",
            "acm:getCertificate",
            "acm:listCertificates",
            "acm:listTagsForCertificate",
            "apigateway:GET",
            "athena:batchGetNamedQuery",
            "athena:batchGetQueryExecution",
            "athena:getCalculationExecution",
            "athena:getCalculationExecutionStatus",
            "athena:getDataCatalog",
            "athena:getNamedQuery",
            "athena:getNotebookMetadata",
            "athena:getQueryExecution",
            "athena:getQueryRuntimeStatistics",
            "athena:getSession",
            "athena:getSessionStatus",
            "athena:getWorkGroup",
            "athena:listApplicationDPUSizes",
            "athena:listCalculationExecutions",
            "athena:listDataCatalogs",
            "athena:listEngineVersions",
            "athena:listExecutors",
            "athena:listNamedQueries",
            "athena:listNotebookMetadata",
            "athena:listNotebookSessions",
            "athena:listQueryExecutions",
            "athena:listSessions",
            "athena:listTagsForResource",
            "athena:listWorkGroups",
            "backup-gateway:getGateway",
            "backup-gateway:getHypervisor",
            "backup-gateway:getHypervisorPropertyMappings",
            "backup-gateway:getVirtualMachine",
            "backup-gateway:listGateways",
            "backup-gateway:listHypervisors",
            "backup-gateway:listVirtualMachines",
            "backup:describeBackupJob",
            "backup:describeBackupVault",
            "backup:describeCopyJob",
            "backup:describeFramework",
            "backup:describeGlobalSettings",
            "backup:describeProtectedResource",
            "backup:describeRecoveryPoint",
            "backup:describeRegionSettings",
            "backup:describeReportJob",
            "backup:describeReportPlan",
            "backup:describeRestoreJob",
            "backup:getBackupPlan",
            "backup:getBackupPlanFromJSON",
            "backup:getBackupPlanFromTemplate",
            "backup:getBackupSelection",
            "backup:getBackupVaultAccessPolicy",
            "backup:getBackupVaultNotifications",
            "backup:getLegalHold",
            "backup:getRecoveryPointRestoreMetadata",
            "backup:getRestoreJobMetadata",
            "backup:getRestoreTestingInferredMetadata",
            "backup:getRestoreTestingPlan",
            "backup:getRestoreTestingSelection",
            "backup:getSupportedResourceTypes",
            "backup:listBackupJobs",
            "backup:listBackupPlanTemplates",
            "backup:listBackupPlanVersions",
            "backup:listBackupPlans",
            "backup:listBackupSelections",
            "backup:listBackupVaults",
            "backup:listCopyJobs",
            "backup:listFrameworks",
            "backup:listLegalHolds",
            "backup:listProtectedResources",
            "backup:listRecoveryPointsByBackupVault",
            "backup:listRecoveryPointsByLegalHold",
            "backup:listRecoveryPointsByResource",
            "backup:listReportJobs",
            "backup:listReportPlans",
            "backup:listRestoreJobs",
            "backup:listRestoreJobsByProtectedResource",
            "backup:listRestoreTestingPlans",
            "backup:listRestoreTestingSelections",
            "backup:listTags",
            "cloudformation:batchDescribeTypeConfigurations",
            "cloudformation:describeAccountLimits",
            "cloudformation:describeChangeSet",
            "cloudformation:describeChangeSetHooks",
            "cloudformation:describePublisher",
            "cloudformation:describeStackEvents",
            "cloudformation:describeStackInstance",
            "cloudformation:describeStackResource",
            "cloudformation:describeStackResources",
            "cloudformation:describeStackSet",
            "cloudformation:describeStackSetOperation",
            "cloudformation:describeStacks",
            "cloudformation:describeType",
            "cloudformation:describeTypeRegistration",
            "cloudformation:estimateTemplateCost",
            "cloudformation:getStackPolicy",
            "cloudformation:getTemplate",
            "cloudformation:getTemplateSummary",
            "cloudformation:listChangeSets",
            "cloudformation:listExports",
            "cloudformation:listImports",
            "cloudformation:listStackInstances",
            "cloudformation:listStackResources",
            "cloudformation:listStackSetOperationResults",
            "cloudformation:listStackSetOperations",
            "cloudformation:listStackSets",
            "cloudformation:listStacks",
            "cloudformation:listTypeRegistrations",
            "cloudformation:listTypeVersions",
            "cloudformation:listTypes",
            "cloudfront:describeFunction",
            "cloudfront:getCachePolicy",
            "cloudfront:getCachePolicyConfig",
            "cloudfront:getCloudFrontOriginAccessIdentity",
            "cloudfront:getCloudFrontOriginAccessIdentityConfig",
            "cloudfront:getContinuousDeploymentPolicy",
            "cloudfront:getContinuousDeploymentPolicyConfig",
            "cloudfront:getDistribution",
            "cloudfront:getDistributionConfig",
            "cloudfront:getInvalidation",
            "cloudfront:getKeyGroup",
            "cloudfront:getKeyGroupConfig",
            "cloudfront:getMonitoringSubscription",
            "cloudfront:getOriginAccessControl",
            "cloudfront:getOriginAccessControlConfig",
            "cloudfront:getOriginRequestPolicy",
            "cloudfront:getOriginRequestPolicyConfig",
            "cloudfront:getPublicKey",
            "cloudfront:getPublicKeyConfig",
            "cloudfront:getRealtimeLogConfig",
            "cloudfront:getResponseHeadersPolicy",
            "cloudfront:getResponseHeadersPolicyConfig",
            "cloudfront:getStreamingDistribution",
            "cloudfront:getStreamingDistributionConfig",
            "cloudfront:listCachePolicies",
            "cloudfront:listCloudFrontOriginAccessIdentities",
            "cloudfront:listContinuousDeploymentPolicies",
            "cloudfront:listDistributions",
            "cloudfront:listDistributionsByCachePolicyId",
            "cloudfront:listDistributionsByKeyGroup",
            "cloudfront:listDistributionsByOriginRequestPolicyId",
            "cloudfront:listDistributionsByRealtimeLogConfig",
            "cloudfront:listDistributionsByResponseHeadersPolicyId",
            "cloudfront:listDistributionsByWebACLId",
            "cloudfront:listFunctions",
            "cloudfront:listInvalidations",
            "cloudfront:listKeyGroups",
            "cloudfront:listOriginAccessControls",
            "cloudfront:listOriginRequestPolicies",
            "cloudfront:listPublicKeys",
            "cloudfront:listRealtimeLogConfigs",
            "cloudfront:listResponseHeadersPolicies",
            "cloudfront:listStreamingDistributions",
            "cloudtrail:describeTrails",
            "cloudtrail:getEventSelectors",
            "cloudtrail:lookupEvents",
            "cloudwatch:describeAlarmHistory",
            "cloudwatch:describeAlarms",
            "cloudwatch:describeAlarmsForMetric",
            "cloudwatch:describeAnomalyDetectors",
            "cloudwatch:describeInsightRules",
            "cloudwatch:getDashboard",
            "cloudwatch:getInsightRuleReport",
            "cloudwatch:getMetricData",
            "cloudwatch:getMetricStatistics",
            "cloudwatch:getMetricStream",
            "cloudwatch:listDashboards",
            "cloudwatch:listManagedInsightRules",
            "cloudwatch:listMetricStreams",
            "cloudwatch:listMetrics",
            "codepipeline:getPipeline",
            "codepipeline:getPipelineState",
            "codepipeline:listActionTypes",
            "codepipeline:listPipelineExecutions",
            "codepipeline:listPipelines",
            "cognito-identity:describeIdentityPool",
            "cognito-identity:getIdentityPoolRoles",
            "cognito-identity:listIdentities",
            "cognito-identity:listIdentityPools",
            "cognito-idp:describeIdentityProvider",
            "cognito-idp:describeResourceServer",
            "cognito-idp:describeRiskConfiguration",
            "cognito-idp:describeUserImportJob",
            "cognito-idp:describeUserPool",
            "cognito-idp:describeUserPoolClient",
            "cognito-idp:describeUserPoolDomain",
            "cognito-idp:getGroup",
            "cognito-idp:getUICustomization",
            "cognito-idp:getUserPoolMfaConfig",
            "cognito-idp:listGroups",
            "cognito-idp:listIdentityProviders",
            "cognito-idp:listResourceServers",
            "cognito-idp:listUserImportJobs",
            "cognito-idp:listUserPoolClients",
            "cognito-idp:listUserPools",
            "cognito-sync:describeDataset",
            "cognito-sync:describeIdentityPoolUsage",
            "cognito-sync:describeIdentityUsage",
            "cognito-sync:getCognitoEvents",
            "cognito-sync:getIdentityPoolConfiguration",
            "cognito-sync:listDatasets",
            "cognito-sync:listIdentityPoolUsage",
            "connect:describeContact",
            "connect:describePhoneNumber",
            "connect:describeQuickConnect",
            "connect:describeUser",
            "connect:getCurrentMetricData",
            "connect:getMetricData",
            "connect:listContactEvaluations",
            "connect:listEvaluationFormVersions",
            "connect:listEvaluationForms",
            "connect:listPhoneNumbersV2",
            "connect:listQuickConnects",
            "connect:listRoutingProfiles",
            "connect:listSecurityProfiles",
            "connect:listUsers",
            "connect:listViewVersions",
            "connect:listViews",
            "directconnect:describeConnectionLoa",
            "directconnect:describeConnections",
            "directconnect:describeConnectionsOnInterconnect",
            "directconnect:describeCustomerMetadata",
            "directconnect:describeDirectConnectGatewayAssociationProposals",
            "directconnect:describeDirectConnectGatewayAssociations",
            "directconnect:describeDirectConnectGatewayAttachments",
            "directconnect:describeDirectConnectGateways",
            "directconnect:describeHostedConnections",
            "directconnect:describeInterconnectLoa",
            "directconnect:describeInterconnects",
            "directconnect:describeLags",
            "directconnect:describeLoa",
            "directconnect:describeLocations",
            "directconnect:describeRouterConfiguration",
            "directconnect:describeVirtualGateways",
            "directconnect:describeVirtualInterfaces",
            "dms:describeAccountAttributes",
            "dms:describeApplicableIndividualAssessments",
            "dms:describeConnections",
            "dms:describeEndpointSettings",
            "dms:describeEndpointTypes",
            "dms:describeEndpoints",
            "dms:describeEventCategories",
            "dms:describeEventSubscriptions",
            "dms:describeEvents",
            "dms:describeFleetAdvisorCollectors",
            "dms:describeFleetAdvisorDatabases",
            "dms:describeFleetAdvisorLsaAnalysis",
            "dms:describeFleetAdvisorSchemaObjectSummary",
            "dms:describeFleetAdvisorSchemas",
            "dms:describeOrderableReplicationInstances",
            "dms:describePendingMaintenancepermissions",
            "dms:describeRefreshSchemasStatus",
            "dms:describeReplicationInstanceTaskLogs",
            "dms:describeReplicationInstances",
            "dms:describeReplicationSubnetGroups",
            "dms:describeReplicationTaskAssessmentResults",
            "dms:describeReplicationTaskAssessmentRuns",
            "dms:describeReplicationTaskIndividualAssessments",
            "dms:describeReplicationTasks",
            "dms:describeSchemas",
            "dms:describeTableStatistics",
            "ds:describeClientAuthenticationSettings",
            "ds:describeConditionalForwarders",
            "ds:describeDirectories",
            "ds:describeDomainControllers",
            "ds:describeEventTopics",
            "ds:describeLDAPSSettings",
            "ds:describeSharedDirectories",
            "ds:describeSnapshots",
            "ds:describeTrusts",
            "ds:getDirectoryLimits",
            "ds:getSnapshotLimits",
            "ds:listIpRoutes",
            "ds:listSchemaExtensions",
            "ds:listTagsForResource",
            "ec2:describeAccountAttributes",
            "ec2:describeAddressTransfers",
            "ec2:describeAddresses",
            "ec2:describeAddressesAttribute",
            "ec2:describeAggregateIdFormat",
            "ec2:describeAvailabilityZones",
            "ec2:describeBundleTasks",
            "ec2:describeByoipCidrs",
            "ec2:describeCapacityReservationFleets",
            "ec2:describeCapacityReservations",
            "ec2:describeCarrierGateways",
            "ec2:describeClassicLinkInstances",
            "ec2:describeClientVpnAuthorizationRules",
            "ec2:describeClientVpnConnections",
            "ec2:describeClientVpnEndpoints",
            "ec2:describeClientVpnRoutes",
            "ec2:describeClientVpnTargetNetworks",
            "ec2:describeCoipPools",
            "ec2:describeConversionTasks",
            "ec2:describeCustomerGateways",
            "ec2:describeDhcpOptions",
            "ec2:describeEgressOnlyInternetGateways",
            "ec2:describeExportImageTasks",
            "ec2:describeExportTasks",
            "ec2:describeFastLaunchImages",
            "ec2:describeFastSnapshotRestores",
            "ec2:describeFleetHistory",
            "ec2:describeFleetInstances",
            "ec2:describeFleets",
            "ec2:describeFlowLogs",
            "ec2:describeFpgaImageAttribute",
            "ec2:describeFpgaImages",
            "ec2:describeHostReservationOfferings",
            "ec2:describeHostReservations",
            "ec2:describeHosts",
            "ec2:describeIamInstanceProfileAssociations",
            "ec2:describeIdFormat",
            "ec2:describeIdentityIdFormat",
            "ec2:describeImageAttribute",
            "ec2:describeImages",
            "ec2:describeImportImageTasks",
            "ec2:describeImportSnapshotTasks",
            "ec2:describeInstanceAttribute",
            "ec2:describeInstanceCreditSpecifications",
            "ec2:describeInstanceEventNotificationAttributes",
            "ec2:describeInstanceEventWindows",
            "ec2:describeInstanceStatus",
            "ec2:describeInstanceTypeOfferings",
            "ec2:describeInstanceTypes",
            "ec2:describeInstances",
            "ec2:describeInternetGateways",
            "ec2:describeIpamPools",
            "ec2:describeIpamScopes",
            "ec2:describeIpams",
            "ec2:describeIpv6Pools",
            "ec2:describeKeyPairs",
            "ec2:describeLaunchTemplateVersions",
            "ec2:describeLaunchTemplates",
            "ec2:describeLocalGatewayRouteTableVirtualInterfaceGroupAssociations",
            "ec2:describeLocalGatewayRouteTableVpcAssociations",
            "ec2:describeLocalGatewayRouteTables",
            "ec2:describeLocalGatewayVirtualInterfaceGroups",
            "ec2:describeLocalGatewayVirtualInterfaces",
            "ec2:describeLocalGateways",
            "ec2:describeManagedPrefixLists",
            "ec2:describeMovingAddresses",
            "ec2:describeNatGateways",
            "ec2:describeNetworkAcls",
            "ec2:describeNetworkInterfaceAttribute",
            "ec2:describeNetworkInterfaces",
            "ec2:describePlacementGroups",
            "ec2:describePrefixLists",
            "ec2:describePrincipalIdFormat",
            "ec2:describePublicIpv4Pools",
            "ec2:describeRegions",
            "ec2:describeReservedInstances",
            "ec2:describeReservedInstancesListings",
            "ec2:describeReservedInstancesModifications",
            "ec2:describeReservedInstancesOfferings",
            "ec2:describeRouteTables",
            "ec2:describeScheduledInstanceAvailability",
            "ec2:describeScheduledInstances",
            "ec2:describeSecurityGroupReferences",
            "ec2:describeSecurityGroupRules",
            "ec2:describeSecurityGroups",
            "ec2:describeSnapshotAttribute",
            "ec2:describeSnapshotTierStatus",
            "ec2:describeSnapshots",
            "ec2:describeSpotDatafeedSubscription",
            "ec2:describeSpotFleetInstances",
            "ec2:describeSpotFleetRequestHistory",
            "ec2:describeSpotFleetRequests",
            "ec2:describeSpotInstanceRequests",
            "ec2:describeSpotPriceHistory",
            "ec2:describeStaleSecurityGroups",
            "ec2:describeStoreImageTasks",
            "ec2:describeSubnets",
            "ec2:describeTags",
            "ec2:describeTrafficMirrorFilters",
            "ec2:describeTrafficMirrorSessions",
            "ec2:describeTrafficMirrorTargets",
            "ec2:describeTransitGatewayAttachments",
            "ec2:describeTransitGatewayConnectPeers",
            "ec2:describeTransitGatewayMulticastDomains",
            "ec2:describeTransitGatewayPeeringAttachments",
            "ec2:describeTransitGatewayPolicyTables",
            "ec2:describeTransitGatewayRouteTableAnnouncements",
            "ec2:describeTransitGatewayRouteTables",
            "ec2:describeTransitGatewayVpcAttachments",
            "ec2:describeTransitGateways",
            "ec2:describeVerifiedAccessEndpoints",
            "ec2:describeVerifiedAccessGroups",
            "ec2:describeVerifiedAccessInstances",
            "ec2:describeVerifiedAccessTrustProviders",
            "ec2:describeVolumeAttribute",
            "ec2:describeVolumeStatus",
            "ec2:describeVolumes",
            "ec2:describeVolumesModifications",
            "ec2:describeVpcAttribute",
            "ec2:describeVpcClassicLink",
            "ec2:describeVpcClassicLinkDnsSupport",
            "ec2:describeVpcEndpointConnectionNotifications",
            "ec2:describeVpcEndpointConnections",
            "ec2:describeVpcEndpointServiceConfigurations",
            "ec2:describeVpcEndpointServicePermissions",
            "ec2:describeVpcEndpointServices",
            "ec2:describeVpcEndpoints",
            "ec2:describeVpcPeeringConnections",
            "ec2:describeVpcs",
            "ec2:describeVpnConnections",
            "ec2:describeVpnGateways",
            "ec2:getAssociatedIpv6PoolCidrs",
            "ec2:getCapacityReservationUsage",
            "ec2:getCoipPoolUsage",
            "ec2:getConsoleOutput",
            "ec2:getConsoleScreenshot",
            "ec2:getDefaultCreditSpecification",
            "ec2:getEbsDefaultKmsKeyId",
            "ec2:getEbsEncryptionByDefault",
            "ec2:getGroupsForCapacityReservation",
            "ec2:getHostReservationPurchasePreview",
            "ec2:getInstanceTypesFromInstanceRequirements",
            "ec2:getIpamAddressHistory",
            "ec2:getIpamPoolAllocations",
            "ec2:getIpamPoolCidrs",
            "ec2:getIpamResourceCidrs",
            "ec2:getLaunchTemplateData",
            "ec2:getManagedPrefixListAssociations",
            "ec2:getManagedPrefixListEntries",
            "ec2:getReservedInstancesExchangeQuote",
            "ec2:getSerialConsoleAccessStatus",
            "ec2:getSpotPlacementScores",
            "ec2:getSubnetCidrReservations",
            "ec2:getTransitGatewayMulticastDomainAssociations",
            "ec2:getTransitGatewayPrefixListReferences",
            "ec2:getVerifiedAccessEndpointPolicy",
            "ec2:getVerifiedAccessGroupPolicy",
            "ec2:listImagesInRecycleBin",
            "ec2:listSnapshotsInRecycleBin",
            "ec2:searchLocalGatewayRoutes",
            "ec2:searchTransitGatewayMulticastGroups",
            "ec2:searchTransitGatewayRoutes",
            "ecs:describeCapacityProviders",
            "ecs:describeClusters",
            "ecs:describeContainerInstances",
            "ecs:describeServices",
            "ecs:describeTaskDefinition",
            "ecs:describeTaskSets",
            "ecs:describeTasks",
            "ecs:getTaskProtection",
            "ecs:listAccountSettings",
            "ecs:listAttributes",
            "ecs:listClusters",
            "ecs:listContainerInstances",
            "ecs:listServices",
            "ecs:listServicesByNamespace",
            "ecs:listTagsForResource",
            "ecs:listTaskDefinitionFamilies",
            "ecs:listTaskDefinitions",
            "ecs:listTasks",
            "eks:describeAccessEntry",
            "eks:describeAddon",
            "eks:describeAddonConfiguration",
            "eks:describeAddonVersions",
            "eks:describeCluster",
            "eks:describeEksAnywhereSubscription",
            "eks:describeFargateProfile",
            "eks:describeIdentityProviderConfig",
            "eks:describeNodegroup",
            "eks:describePodIdentityAssociation",
            "eks:describeUpdate",
            "eks:listAccessEntries",
            "eks:listAccessPolicies",
            "eks:listAddons",
            "eks:listAssociatedAccessPolicies",
            "eks:listClusters",
            "eks:listEksAnywhereSubscriptions",
            "eks:listFargateProfiles",
            "eks:listIdentityProviderConfigs",
            "eks:listNodegroups",
            "eks:listPodIdentityAssociations",
            "eks:listUpdates",
            "elasticache:describeCacheClusters",
            "elasticache:describeCacheEngineVersions",
            "elasticache:describeCacheParameterGroups",
            "elasticache:describeCacheParameters",
            "elasticache:describeCacheSecurityGroups",
            "elasticache:describeCacheSubnetGroups",
            "elasticache:describeEngineDefaultParameters",
            "elasticache:describeEvents",
            "elasticache:describeGlobalReplicationGroups",
            "elasticache:describeReplicationGroups",
            "elasticache:describeReservedCacheNodes",
            "elasticache:describeReservedCacheNodesOfferings",
            "elasticache:describeServerlessCacheSnapshots",
            "elasticache:describeServerlessCaches",
            "elasticache:describeServiceUpdates",
            "elasticache:describeSnapshots",
            "elasticache:describeUpdatepermissions",
            "elasticache:describeUserGroups",
            "elasticache:describeUsers",
            "elasticache:listAllowedNodeTypeModifications",
            "elasticache:listTagsForResource",
            "elasticbeanstalk:checkDNSAvailability",
            "elasticbeanstalk:describeAccountAttributes",
            "elasticbeanstalk:describeApplicationVersions",
            "elasticbeanstalk:describeApplications",
            "elasticbeanstalk:describeConfigurationOptions",
            "elasticbeanstalk:describeEnvironmentHealth",
            "elasticbeanstalk:describeEnvironmentManagedActionHistory",
            "elasticbeanstalk:describeEnvironmentManagedpermissions",
            "elasticbeanstalk:describeEnvironmentResources",
            "elasticbeanstalk:describeEnvironments",
            "elasticbeanstalk:describeEvents",
            "elasticbeanstalk:describeInstancesHealth",
            "elasticbeanstalk:describePlatformVersion",
            "elasticbeanstalk:listAvailableSolutionStacks",
            "elasticbeanstalk:listPlatformBranches",
            "elasticbeanstalk:listPlatformVersions",
            "elasticbeanstalk:validateConfigurationSettings",
            "elasticfilesystem:describeAccessPoints",
            "elasticfilesystem:describeFileSystemPolicy",
            "elasticfilesystem:describeFileSystems",
            "elasticfilesystem:describeLifecycleConfiguration",
            "elasticfilesystem:describeMountTargetSecurityGroups",
            "elasticfilesystem:describeMountTargets",
            "elasticfilesystem:describeTags",
            "elasticfilesystem:listTagsForResource",
            "elasticloadbalancing:describeAccountLimits",
            "elasticloadbalancing:describeInstanceHealth",
            "elasticloadbalancing:describeListenerCertificates",
            "elasticloadbalancing:describeListeners",
            "elasticloadbalancing:describeLoadBalancerAttributes",
            "elasticloadbalancing:describeLoadBalancerPolicies",
            "elasticloadbalancing:describeLoadBalancerPolicyTypes",
            "elasticloadbalancing:describeLoadBalancers",
            "elasticloadbalancing:describeRules",
            "elasticloadbalancing:describeSSLPolicies",
            "elasticloadbalancing:describeTags",
            "elasticloadbalancing:describeTargetGroupAttributes",
            "elasticloadbalancing:describeTargetGroups",
            "elasticloadbalancing:describeTargetHealth",
            "elasticloadbalancing:describeTrustStoreAssociations",
            "elasticloadbalancing:describeTrustStoreRevocations",
            "elasticloadbalancing:describeTrustStores",
            "emr-containers:describeJobRun",
            "emr-containers:describeJobTemplate",
            "emr-containers:describeManagedEndpoint",
            "emr-containers:describeVirtualCluster",
            "emr-containers:listJobRuns",
            "emr-containers:listJobTemplates",
            "emr-containers:listManagedEndpoints",
            "emr-containers:listVirtualClusters",
            "emr-serverless:getApplication",
            "emr-serverless:getJobRun",
            "emr-serverless:listApplications",
            "es:describeDomain",
            "es:describeDomainAutoTunes",
            "es:describeDomainChangeProgress",
            "es:describeDomainConfig",
            "es:describeDomains",
            "es:describeDryRunProgress",
            "es:describeElasticsearchDomain",
            "es:describeElasticsearchDomainConfig",
            "es:describeElasticsearchDomains",
            "es:describeInboundConnections",
            "es:describeInstanceTypeLimits",
            "es:describeOutboundConnections",
            "es:describePackages",
            "es:describeReservedInstanceOfferings",
            "es:describeReservedInstances",
            "es:describeVpcEndpoints",
            "es:getCompatibleVersions",
            "es:getPackageVersionHistory",
            "es:getUpgradeHistory",
            "es:getUpgradeStatus",
            "es:listDomainNames",
            "es:listDomainsForPackage",
            "es:listInstanceTypeDetails",
            "es:listPackagesForDomain",
            "es:listScheduledpermissions",
            "es:listTags",
            "es:listVersions",
            "es:listVpcEndpointAccess",
            "es:listVpcEndpoints",
            "es:listVpcEndpointsForDomain",
            "events:describeApiDestination",
            "events:describeArchive",
            "events:describeConnection",
            "events:describeEndpoint",
            "events:describeEventBus",
            "events:describeEventSource",
            "events:describePartnerEventSource",
            "events:describeReplay",
            "events:describeRule",
            "events:listApiDestinations",
            "events:listArchives",
            "events:listConnections",
            "events:listEndpoints",
            "events:listEventBuses",
            "events:listEventSources",
            "events:listPartnerEventSourceAccounts",
            "events:listPartnerEventSources",
            "events:listReplays",
            "events:listRuleNamesByTarget",
            "events:listRules",
            "events:listTargetsByRule",
            "events:testEventPattern",
            "fsx:describeBackups",
            "fsx:describeDataRepositoryAssociations",
            "fsx:describeDataRepositoryTasks",
            "fsx:describeFileCaches",
            "fsx:describeFileSystems",
            "fsx:describeSnapshots",
            "fsx:describeStorageVirtualMachines",
            "fsx:describeVolumes",
            "fsx:listTagsForResource",
            "glue:batchGetBlueprints",
            "glue:batchGetCrawlers",
            "glue:batchGetDevEndpoints",
            "glue:batchGetJobs",
            "glue:batchGetPartition",
            "glue:batchGetTriggers",
            "glue:batchGetWorkflows",
            "glue:checkSchemaVersionValidity",
            "glue:getBlueprint",
            "glue:getBlueprintRun",
            "glue:getBlueprintRuns",
            "glue:getCatalogImportStatus",
            "glue:getClassifier",
            "glue:getClassifiers",
            "glue:getColumnStatisticsForPartition",
            "glue:getColumnStatisticsForTable",
            "glue:getCrawler",
            "glue:getCrawlerMetrics",
            "glue:getCrawlers",
            "glue:getCustomEntityType",
            "glue:getDataQualityResult",
            "glue:getDataQualityRuleRecommendationRun",
            "glue:getDataQualityRuleset",
            "glue:getDataQualityRulesetEvaluationRun",
            "glue:getDatabase",
            "glue:getDatabases",
            "glue:getDataflowGraph",
            "glue:getDevEndpoint",
            "glue:getDevEndpoints",
            "glue:getJob",
            "glue:getJobRun",
            "glue:getJobRuns",
            "glue:getJobs",
            "glue:getMLTaskRun",
            "glue:getMLTaskRuns",
            "glue:getMLTransform",
            "glue:getMLTransforms",
            "glue:getMapping",
            "glue:getPartition",
            "glue:getPartitionIndexes",
            "glue:getPartitions",
            "glue:getRegistry",
            "glue:getResourcePolicies",
            "glue:getResourcePolicy",
            "glue:getSchema",
            "glue:getSchemaByDefinition",
            "glue:getSchemaVersion",
            "glue:getSchemaVersionsDiff",
            "glue:getSession",
            "glue:getStatement",
            "glue:getTable",
            "glue:getTableVersions",
            "glue:getTables",
            "glue:getTrigger",
            "glue:getTriggers",
            "glue:getUserDefinedFunction",
            "glue:getUserDefinedFunctions",
            "glue:getWorkflow",
            "glue:getWorkflowRun",
            "glue:getWorkflowRuns",
            "glue:listCrawlers",
            "glue:listCrawls",
            "glue:listDataQualityResults",
            "glue:listDataQualityRuleRecommendationRuns",
            "glue:listDataQualityRulesetEvaluationRuns",
            "glue:listDataQualityRulesets",
            "glue:listDevEndpoints",
            "glue:listMLTransforms",
            "glue:listRegistries",
            "glue:listSchemaVersions",
            "glue:listSchemas",
            "glue:listSessions",
            "glue:listStatements",
            "glue:querySchemaVersionMetadata",
            "guardduty:getFindings",
            "guardduty:listDetectors",
            "guardduty:listFindings",
            "guardduty:listIPSets",
            "guardduty:listThreatIntelSets",
            "iam:getAccessKeyLastUsed",
            "iam:getAccountAuthorizationDetails",
            "iam:getAccountPasswordPolicy",
            "iam:getAccountSummary",
            "iam:getContextKeysForCustomPolicy",
            "iam:getContextKeysForPrincipalPolicy",
            "iam:getCredentialReport",
            "iam:getGroup",
            "iam:getGroupPolicy",
            "iam:getInstanceProfile",
            "iam:getLoginProfile",
            "iam:getOpenIDConnectProvider",
            "iam:getPolicy",
            "iam:getPolicyVersion",
            "iam:getRole",
            "iam:getRolePolicy",
            "iam:getSAMLProvider",
            "iam:getSSHPublicKey",
            "iam:getServerCertificate",
            "iam:getServiceLinkedRoleDeletionStatus",
            "iam:getUser",
            "iam:getUserPolicy",
            "iam:listAccessKeys",
            "iam:listAccountAliases",
            "iam:listAttachedGroupPolicies",
            "iam:listAttachedRolePolicies",
            "iam:listAttachedUserPolicies",
            "iam:listEntitiesForPolicy",
            "iam:listGroupPolicies",
            "iam:listGroups",
            "iam:listGroupsForUser",
            "iam:listInstanceProfiles",
            "iam:listInstanceProfilesForRole",
            "iam:listMFADevices",
            "iam:listOpenIDConnectProviders",
            "iam:listPolicies",
            "iam:listPolicyVersions",
            "iam:listRolePolicies",
            "iam:listRoles",
            "iam:listSAMLProviders",
            "iam:listSSHPublicKeys",
            "iam:listServerCertificates",
            "iam:listSigningCertificates",
            "iam:listUserPolicies",
            "iam:listUsers",
            "iam:listVirtualMFADevices",
            "kafka:describeCluster",
            "kafka:describeClusterOperation",
            "kafka:describeClusterOperationV2",
            "kafka:describeClusterV2",
            "kafka:describeConfiguration",
            "kafka:describeConfigurationRevision",
            "kafka:describeReplicator",
            "kafka:describeVpcConnection",
            "kafka:getBootstrapBrokers",
            "kafka:getClusterPolicy",
            "kafka:listClientVpcConnections",
            "kafka:listClusterOperations",
            "kafka:listClusterOperationsV2",
            "kafka:listClusters",
            "kafka:listClustersV2",
            "kafka:listConfigurationRevisions",
            "kafka:listConfigurations",
            "kafka:listNodes",
            "kafka:listReplicators",
            "kafka:listScramSecrets",
            "kafka:listVpcConnections",
            "kafkaconnect:describeConnector",
            "kafkaconnect:describeCustomPlugin",
            "kafkaconnect:describeWorkerConfiguration",
            "kafkaconnect:listConnectors",
            "kafkaconnect:listCustomPlugins",
            "kafkaconnect:listWorkerConfigurations",
            "lambda:getAccountSettings",
            "lambda:getAlias",
            "lambda:getCodeSigningConfig",
            "lambda:getEventSourceMapping",
            "lambda:getFunction",
            "lambda:getFunctionCodeSigningConfig",
            "lambda:getFunctionConcurrency",
            "lambda:getFunctionConfiguration",
            "lambda:getFunctionEventInvokeConfig",
            "lambda:getFunctionUrlConfig",
            "lambda:getLayerVersion",
            "lambda:getLayerVersionPolicy",
            "lambda:getPolicy",
            "lambda:getProvisionedConcurrencyConfig",
            "lambda:getRuntimeManagementConfig",
            "lambda:listAliases",
            "lambda:listCodeSigningConfigs",
            "lambda:listEventSourceMappings",
            "lambda:listFunctionEventInvokeConfigs",
            "lambda:listFunctionUrlConfigs",
            "lambda:listFunctions",
            "lambda:listFunctionsByCodeSigningConfig",
            "lambda:listLayerVersions",
            "lambda:listLayers",
            "lambda:listProvisionedConcurrencyConfigs",
            "lambda:listVersionsByFunction",
            "logs:describeExportTasks",
            "logs:describeLogGroups",
            "logs:describeLogStreams",
            "logs:describeMetricFilters",
            "logs:describeSubscriptionFilters",
            "medialive:listChannels",
            "medialive:listInputSecurityGroups",
            "medialive:listInputs",
            "mobiletargeting:getAdmChannel",
            "mobiletargeting:getApnsChannel",
            "mobiletargeting:getApnsSandboxChannel",
            "mobiletargeting:getApnsVoipChannel",
            "mobiletargeting:getApnsVoipSandboxChannel",
            "mobiletargeting:getApplicationSettings",
            "mobiletargeting:getApps",
            "mobiletargeting:getBaiduChannel",
            "mobiletargeting:getCampaign",
            "mobiletargeting:getCampaignActivities",
            "mobiletargeting:getCampaignVersions",
            "mobiletargeting:getCampaigns",
            "mobiletargeting:getEmailChannel",
            "mobiletargeting:getEventStream",
            "mobiletargeting:getExportJobs",
            "mobiletargeting:getGcmChannel",
            "mobiletargeting:getImportJobs",
            "mobiletargeting:getJourney",
            "mobiletargeting:getJourneyExecutionActivityMetrics",
            "mobiletargeting:getJourneyExecutionMetrics",
            "mobiletargeting:getJourneyRunExecutionActivityMetrics",
            "mobiletargeting:getJourneyRunExecutionMetrics",
            "mobiletargeting:getJourneyRuns",
            "mobiletargeting:getSegment",
            "mobiletargeting:getSegmentImportJobs",
            "mobiletargeting:getSegmentVersions",
            "mobiletargeting:getSegments",
            "mobiletargeting:getSmsChannel",
            "mobiletargeting:listJourneys",
            "pipes:listPipes",
            "polly:describeVoices",
            "polly:listLexicons",
            "quicksight:describeAccountCustomization",
            "quicksight:describeAccountSettings",
            "quicksight:describeAccountSubscription",
            "quicksight:describeAnalysis",
            "quicksight:describeAnalysisPermissions",
            "quicksight:describeDashboard",
            "quicksight:describeDashboardPermissions",
            "quicksight:describeDataSet",
            "quicksight:describeDataSetRefreshProperties",
            "quicksight:describeDataSource",
            "quicksight:describeFolder",
            "quicksight:describeFolderPermissions",
            "quicksight:describeFolderResolvedPermissions",
            "quicksight:describeGroup",
            "quicksight:describeGroupMembership",
            "quicksight:describeIAMPolicyAssignment",
            "quicksight:describeIngestion",
            "quicksight:describeIpRestriction",
            "quicksight:describeNamespace",
            "quicksight:describeRefreshSchedule",
            "quicksight:describeTemplate",
            "quicksight:describeTemplateAlias",
            "quicksight:describeTemplatePermissions",
            "quicksight:describeTheme",
            "quicksight:describeThemeAlias",
            "quicksight:describeThemePermissions",
            "quicksight:describeTopic",
            "quicksight:describeTopicRefresh",
            "quicksight:describeTopicRefreshSchedule",
            "quicksight:describeUser",
            "quicksight:describeVPCConnection",
            "quicksight:listAnalyses",
            "quicksight:listDashboardVersions",
            "quicksight:listDashboards",
            "quicksight:listDataSets",
            "quicksight:listDataSources",
            "quicksight:listFolderMembers",
            "quicksight:listFolders",
            "quicksight:listGroupMemberships",
            "quicksight:listGroups",
            "quicksight:listIAMPolicyAssignments",
            "quicksight:listIAMPolicyAssignmentsForUser",
            "quicksight:listIngestions",
            "quicksight:listNamespaces",
            "quicksight:listRefreshSchedules",
            "quicksight:listTemplateAliases",
            "quicksight:listTemplateVersions",
            "quicksight:listTemplates",
            "quicksight:listThemeAliases",
            "quicksight:listThemeVersions",
            "quicksight:listThemes",
            "quicksight:listTopicRefreshSchedules",
            "quicksight:listTopics",
            "quicksight:listUserGroups",
            "quicksight:listUsers",
            "quicksight:listVPCConnections",
            "quicksight:searchAnalyses",
            "quicksight:searchDashboards",
            "quicksight:searchDataSets",
            "quicksight:searchDataSources",
            "quicksight:searchFolders",
            "quicksight:searchGroups",
            "rds:describeAccountAttributes",
            "rds:describeBlueGreenDeployments",
            "rds:describeCertificates",
            "rds:describeDBClusterEndpoints",
            "rds:describeDBClusterParameterGroups",
            "rds:describeDBClusterParameters",
            "rds:describeDBClusterSnapshots",
            "rds:describeDBClusters",
            "rds:describeDBEngineVersions",
            "rds:describeDBInstanceAutomatedBackups",
            "rds:describeDBInstances",
            "rds:describeDBLogFiles",
            "rds:describeDBParameterGroups",
            "rds:describeDBParameters",
            "rds:describeDBSecurityGroups",
            "rds:describeDBSnapshotAttributes",
            "rds:describeDBSnapshots",
            "rds:describeDBSubnetGroups",
            "rds:describeEngineDefaultClusterParameters",
            "rds:describeEngineDefaultParameters",
            "rds:describeEventCategories",
            "rds:describeEventSubscriptions",
            "rds:describeEvents",
            "rds:describeExportTasks",
            "rds:describeGlobalClusters",
            "rds:describeIntegrations",
            "rds:describeOptionGroupOptions",
            "rds:describeOptionGroups",
            "rds:describeOrderableDBInstanceOptions",
            "rds:describePendingMaintenancepermissions",
            "rds:describeReservedDBInstances",
            "rds:describeReservedDBInstancesOfferings",
            "rds:describeSourceRegions",
            "rds:describeValidDBInstanceModifications",
            "rds:listTagsForResource",
            "redshift-data:describeStatement",
            "redshift-data:listStatements",
            "redshift-serverless:getEndpointAccess",
            "redshift-serverless:getNamespace",
            "redshift-serverless:getRecoveryPoint",
            "redshift-serverless:getSnapshot",
            "redshift-serverless:getTableRestoreStatus",
            "redshift-serverless:getUsageLimit",
            "redshift-serverless:getWorkgroup",
            "redshift-serverless:listEndpointAccess",
            "redshift-serverless:listNamespaces",
            "redshift-serverless:listRecoveryPoints",
            "redshift-serverless:listSnapshots",
            "redshift-serverless:listTableRestoreStatus",
            "redshift-serverless:listUsageLimits",
            "redshift-serverless:listWorkgroups",
            "redshift:describeClusterParameterGroups",
            "redshift:describeClusterParameters",
            "redshift:describeClusterSecurityGroups",
            "redshift:describeClusterSnapshots",
            "redshift:describeClusterSubnetGroups",
            "redshift:describeClusterVersions",
            "redshift:describeClusters",
            "redshift:describeDataShares",
            "redshift:describeDataSharesForConsumer",
            "redshift:describeDataSharesForProducer",
            "redshift:describeDefaultClusterParameters",
            "redshift:describeEventCategories",
            "redshift:describeEventSubscriptions",
            "redshift:describeEvents",
            "redshift:describeHsmClientCertificates",
            "redshift:describeHsmConfigurations",
            "redshift:describeLoggingStatus",
            "redshift:describeOrderableClusterOptions",
            "redshift:describeReservedNodeOfferings",
            "redshift:describeReservedNodes",
            "redshift:describeResize",
            "redshift:describeSnapshotCopyGrants",
            "redshift:describeStorage",
            "redshift:describeTableRestoreStatus",
            "redshift:describeTags",
            "route53-recovery-cluster:getRoutingControlState",
            "route53-recovery-cluster:listRoutingControls",
            "route53-recovery-control-config:describeControlPanel",
            "route53-recovery-control-config:describeRoutingControl",
            "route53-recovery-control-config:describeSafetyRule",
            "route53-recovery-control-config:listControlPanels",
            "route53-recovery-control-config:listRoutingControls",
            "route53-recovery-control-config:listSafetyRules",
            "route53-recovery-readiness:getCell",
            "route53-recovery-readiness:getCellReadinessSummary",
            "route53-recovery-readiness:getReadinessCheck",
            "route53-recovery-readiness:getReadinessCheckResourceStatus",
            "route53-recovery-readiness:getReadinessCheckStatus",
            "route53-recovery-readiness:getRecoveryGroup",
            "route53-recovery-readiness:getRecoveryGroupReadinessSummary",
            "route53-recovery-readiness:listCells",
            "route53-recovery-readiness:listReadinessChecks",
            "route53-recovery-readiness:listRecoveryGroups",
            "route53-recovery-readiness:listResourceSets",
            "route53:getAccountLimit",
            "route53:getChange",
            "route53:getCheckerIpRanges",
            "route53:getDNSSEC",
            "route53:getGeoLocation",
            "route53:getHealthCheck",
            "route53:getHealthCheckCount",
            "route53:getHealthCheckLastFailureReason",
            "route53:getHealthCheckStatus",
            "route53:getHostedZone",
            "route53:getHostedZoneCount",
            "route53:getHostedZoneLimit",
            "route53:getQueryLoggingConfig",
            "route53:getReusableDelegationSet",
            "route53:getTrafficPolicy",
            "route53:getTrafficPolicyInstance",
            "route53:getTrafficPolicyInstanceCount",
            "route53:listCidrBlocks",
            "route53:listCidrCollections",
            "route53:listCidrLocations",
            "route53:listGeoLocations",
            "route53:listHealthChecks",
            "route53:listHostedZones",
            "route53:listHostedZonesByName",
            "route53:listHostedZonesByVpc",
            "route53:listQueryLoggingConfigs",
            "route53:listResourceRecordSets",
            "route53:listReusableDelegationSets",
            "route53:listTrafficPolicies",
            "route53:listTrafficPolicyInstances",
            "route53:listTrafficPolicyInstancesByHostedZone",
            "route53:listTrafficPolicyInstancesByPolicy",
            "route53:listTrafficPolicyVersions",
            "route53:listVPCAssociationAuthorizations",
            "route53domains:checkDomainAvailability",
            "route53domains:getContactReachabilityStatus",
            "route53domains:getDomainDetail",
            "route53domains:getOperationDetail",
            "route53domains:listDomains",
            "route53domains:listOperations",
            "route53domains:listPrices",
            "route53domains:listTagsForDomain",
            "route53domains:viewBilling",
            "route53resolver:getFirewallConfig",
            "route53resolver:getFirewallDomainList",
            "route53resolver:getFirewallRuleGroup",
            "route53resolver:getFirewallRuleGroupAssociation",
            "route53resolver:getFirewallRuleGroupPolicy",
            "route53resolver:getOutpostResolver",
            "route53resolver:getResolverDnssecConfig",
            "route53resolver:getResolverQueryLogConfig",
            "route53resolver:getResolverQueryLogConfigAssociation",
            "route53resolver:getResolverQueryLogConfigPolicy",
            "route53resolver:getResolverRule",
            "route53resolver:getResolverRuleAssociation",
            "route53resolver:getResolverRulePolicy",
            "route53resolver:listFirewallConfigs",
            "route53resolver:listFirewallDomainLists",
            "route53resolver:listFirewallDomains",
            "route53resolver:listFirewallRuleGroupAssociations",
            "route53resolver:listFirewallRuleGroups",
            "route53resolver:listFirewallRules",
            "route53resolver:listOutpostResolvers",
            "route53resolver:listResolverConfigs",
            "route53resolver:listResolverDnssecConfigs",
            "route53resolver:listResolverEndpointIpAddresses",
            "route53resolver:listResolverEndpoints",
            "route53resolver:listResolverQueryLogConfigAssociations",
            "route53resolver:listResolverQueryLogConfigs",
            "route53resolver:listResolverRuleAssociations",
            "route53resolver:listResolverRules",
            "route53resolver:listTagsForResource",
            "s3:describeJob",
            "s3:describeMultiRegionAccessPointOperation",
            "s3:getAccelerateConfiguration",
            "s3:getAccessPoint",
            "s3:getAccessPointConfigurationForObjectLambda",
            "s3:getAccessPointForObjectLambda",
            "s3:getAccessPointPolicy",
            "s3:getAccessPointPolicyForObjectLambda",
            "s3:getAccessPointPolicyStatus",
            "s3:getAccessPointPolicyStatusForObjectLambda",
            "s3:getAccountPublicAccessBlock",
            "s3:getAnalyticsConfiguration",
            "s3:getBucketAcl",
            "s3:getBucketCORS",
            "s3:getBucketLocation",
            "s3:getBucketLogging",
            "s3:getBucketNotification",
            "s3:getBucketObjectLockConfiguration",
            "s3:getBucketOwnershipControls",
            "s3:getBucketPolicy",
            "s3:getBucketPolicyStatus",
            "s3:getBucketPublicAccessBlock",
            "s3:getBucketRequestPayment",
            "s3:getBucketVersioning",
            "s3:getBucketWebsite",
            "s3:getEncryptionConfiguration",
            "s3:getIntelligentTieringConfiguration",
            "s3:getInventoryConfiguration",
            "s3:getLifecycleConfiguration",
            "s3:getMetricsConfiguration",
            "s3:getMultiRegionAccessPoint",
            "s3:getMultiRegionAccessPointPolicy",
            "s3:getMultiRegionAccessPointPolicyStatus",
            "s3:getMultiRegionAccessPointRoutes",
            "s3:getObjectLegalHold",
            "s3:getObjectRetention",
            "s3:getReplicationConfiguration",
            "s3:getStorageLensConfiguration",
            "s3:listAccessPoints",
            "s3:listAccessPointsForObjectLambda",
            "s3:listAllMyBuckets",
            "s3:listBucket",
            "s3:listBucketMultipartUploads",
            "s3:listBucketVersions",
            "s3:listJobs",
            "s3:listMultiRegionAccessPoints",
            "s3:listMultipartUploadParts",
            "s3:listStorageLensConfigurations",
            "s3express:getBucketPolicy",
            "s3express:listAllMyDirectoryBuckets",
            "sagemaker:describeAction",
            "sagemaker:describeAlgorithm",
            "sagemaker:describeApp",
            "sagemaker:describeAppImageConfig",
            "sagemaker:describeArtifact",
            "sagemaker:describeAutoMLJob",
            "sagemaker:describeCluster",
            "sagemaker:describeClusterNode",
            "sagemaker:describeCodeRepository",
            "sagemaker:describeCompilationJob",
            "sagemaker:describeContext",
            "sagemaker:describeDataQualityJobDefinition",
            "sagemaker:describeDevice",
            "sagemaker:describeDeviceFleet",
            "sagemaker:describeDomain",
            "sagemaker:describeEdgeDeploymentPlan",
            "sagemaker:describeEdgePackagingJob",
            "sagemaker:describeEndpoint",
            "sagemaker:describeEndpointConfig",
            "sagemaker:describeExperiment",
            "sagemaker:describeFeatureGroup",
            "sagemaker:describeFeatureMetadata",
            "sagemaker:describeFlowDefinition",
            "sagemaker:describeHub",
            "sagemaker:describeHubContent",
            "sagemaker:describeHumanTaskUi",
            "sagemaker:describeHyperParameterTuningJob",
            "sagemaker:describeImage",
            "sagemaker:describeImageVersion",
            "sagemaker:describeInferenceComponent",
            "sagemaker:describeInferenceExperiment",
            "sagemaker:describeInferenceRecommendationsJob",
            "sagemaker:describeLabelingJob",
            "sagemaker:describeModel",
            "sagemaker:describeModelBiasJobDefinition",
            "sagemaker:describeModelCard",
            "sagemaker:describeModelCardExportJob",
            "sagemaker:describeModelExplainabilityJobDefinition",
            "sagemaker:describeModelPackage",
            "sagemaker:describeModelPackageGroup",
            "sagemaker:describeModelQualityJobDefinition",
            "sagemaker:describeMonitoringSchedule",
            "sagemaker:describeNotebookInstance",
            "sagemaker:describeNotebookInstanceLifecycleConfig",
            "sagemaker:describePipeline",
            "sagemaker:describePipelineDefinitionForExecution",
            "sagemaker:describePipelineExecution",
            "sagemaker:describeProcessingJob",
            "sagemaker:describeProject",
            "sagemaker:describeSpace",
            "sagemaker:describeStudioLifecycleConfig",
            "sagemaker:describeSubscribedWorkteam",
            "sagemaker:describeTrainingJob",
            "sagemaker:describeTransformJob",
            "sagemaker:describeTrial",
            "sagemaker:describeTrialComponent",
            "sagemaker:describeUserProfile",
            "sagemaker:describeWorkforce",
            "sagemaker:describeWorkteam",
            "sagemaker:getDeviceFleetReport",
            "sagemaker:getModelPackageGroupPolicy",
            "sagemaker:getSagemakerServicecatalogPortfolioStatus",
            "sagemaker:listpermissions",
            "sagemaker:listAlgorithms",
            "sagemaker:listAliases",
            "sagemaker:listAppImageConfigs",
            "sagemaker:listApps",
            "sagemaker:listArtifacts",
            "sagemaker:listAssociations",
            "sagemaker:listAutoMLJobs",
            "sagemaker:listCandidatesForAutoMLJob",
            "sagemaker:listClusterNodes",
            "sagemaker:listClusters",
            "sagemaker:listCodeRepositories",
            "sagemaker:listCompilationJobs",
            "sagemaker:listContexts",
            "sagemaker:listDataQualityJobDefinitions",
            "sagemaker:listDeviceFleets",
            "sagemaker:listDevices",
            "sagemaker:listDomains",
            "sagemaker:listEdgeDeploymentPlans",
            "sagemaker:listEdgePackagingJobs",
            "sagemaker:listEndpointConfigs",
            "sagemaker:listEndpoints",
            "sagemaker:listExperiments",
            "sagemaker:listFeatureGroups",
            "sagemaker:listFlowDefinitions",
            "sagemaker:listHubContentVersions",
            "sagemaker:listHubContents",
            "sagemaker:listHubs",
            "sagemaker:listHumanTaskUis",
            "sagemaker:listHyperParameterTuningJobs",
            "sagemaker:listImageVersions",
            "sagemaker:listImages",
            "sagemaker:listInferenceComponents",
            "sagemaker:listInferenceExperiments",
            "sagemaker:listInferenceRecommendationsJobSteps",
            "sagemaker:listInferenceRecommendationsJobs",
            "sagemaker:listLabelingJobs",
            "sagemaker:listLabelingJobsForWorkteam",
            "sagemaker:listLineageGroups",
            "sagemaker:listModelBiasJobDefinitions",
            "sagemaker:listModelCardExportJobs",
            "sagemaker:listModelCardVersions",
            "sagemaker:listModelCards",
            "sagemaker:listModelExplainabilityJobDefinitions",
            "sagemaker:listModelMetadata",
            "sagemaker:listModelPackageGroups",
            "sagemaker:listModelPackages",
            "sagemaker:listModelQualityJobDefinitions",
            "sagemaker:listModels",
            "sagemaker:listMonitoringAlertHistory",
            "sagemaker:listMonitoringAlerts",
            "sagemaker:listMonitoringExecutions",
            "sagemaker:listMonitoringSchedules",
            "sagemaker:listNotebookInstanceLifecycleConfigs",
            "sagemaker:listNotebookInstances",
            "sagemaker:listPipelineExecutionSteps",
            "sagemaker:listPipelineExecutions",
            "sagemaker:listPipelineParametersForExecution",
            "sagemaker:listPipelines",
            "sagemaker:listProcessingJobs",
            "sagemaker:listProjects",
            "sagemaker:listSpaces",
            "sagemaker:listStageDevices",
            "sagemaker:listStudioLifecycleConfigs",
            "sagemaker:listSubscribedWorkteams",
            "sagemaker:listTags",
            "sagemaker:listTrainingJobs",
            "sagemaker:listTrainingJobsForHyperParameterTuningJob",
            "sagemaker:listTransformJobs",
            "sagemaker:listTrialComponents",
            "sagemaker:listTrials",
            "sagemaker:listUserProfiles",
            "sagemaker:listWorkforces",
            "sagemaker:listWorkteams",
            "scheduler:listScheduleGroups",
            "scheduler:listSchedules",
            "servicequotas:listAWSDefaultServiceQuotas",
            "servicequotas:listServiceQuotas",
            "ses:describeActiveReceiptRuleSet",
            "ses:describeConfigurationSet",
            "ses:describeReceiptRule",
            "ses:describeReceiptRuleSet",
            "ses:getAccount",
            "ses:getAccountSendingEnabled",
            "ses:getBlacklistReports",
            "ses:getConfigurationSet",
            "ses:getConfigurationSetEventDestinations",
            "ses:getContactList",
            "ses:getDedicatedIp",
            "ses:getDedicatedIpPool",
            "ses:getDedicatedIps",
            "ses:getDeliverabilityDashboardOptions",
            "ses:getDeliverabilityTestReport",
            "ses:getDomainDeliverabilityCampaign",
            "ses:getDomainStatisticsReport",
            "ses:getEmailIdentity",
            "ses:getIdentityDkimAttributes",
            "ses:getIdentityMailFromDomainAttributes",
            "ses:getIdentityNotificationAttributes",
            "ses:getIdentityPolicies",
            "ses:getIdentityVerificationAttributes",
            "ses:getImportJob",
            "ses:getSendQuota",
            "ses:getSendStatistics",
            "ses:listConfigurationSets",
            "ses:listContactLists",
            "ses:listContacts",
            "ses:listCustomVerificationEmailTemplates",
            "ses:listDedicatedIpPools",
            "ses:listDeliverabilityTestReports",
            "ses:listDomainDeliverabilityCampaigns",
            "ses:listEmailIdentities",
            "ses:listEmailTemplates",
            "ses:listIdentities",
            "ses:listIdentityPolicies",
            "ses:listImportJobs",
            "ses:listReceiptFilters",
            "ses:listReceiptRuleSets",
            "ses:listRecommendations",
            "ses:listTagsForResource",
            "ses:listTemplates",
            "ses:listVerifiedEmailAddresses",
            "sns:checkIfPhoneNumberIsOptedOut",
            "sns:getDataProtectionPolicy",
            "sns:getEndpointAttributes",
            "sns:getPlatformApplicationAttributes",
            "sns:getSMSAttributes",
            "sns:getSMSSandboxAccountStatus",
            "sns:getSubscriptionAttributes",
            "sns:getTopicAttributes",
            "sns:listEndpointsByPlatformApplication",
            "sns:listOriginationNumbers",
            "sns:listPhoneNumbersOptedOut",
            "sns:listPlatformApplications",
            "sns:listSMSSandboxPhoneNumbers",
            "sns:listSubscriptions",
            "sns:listSubscriptionsByTopic",
            "sns:listTopics",
            "ssm-contacts:describeEngagement",
            "ssm-contacts:describePage",
            "ssm-contacts:getContact",
            "ssm-contacts:getContactChannel",
            "ssm-contacts:getContactPolicy",
            "ssm-contacts:getRotation",
            "ssm-contacts:getRotationOverride",
            "ssm-contacts:listContactChannels",
            "ssm-contacts:listContacts",
            "ssm-contacts:listEngagements",
            "ssm-contacts:listPageReceipts",
            "ssm-contacts:listPageResolutions",
            "ssm-contacts:listPagesByContact",
            "ssm-contacts:listPagesByEngagement",
            "ssm-contacts:listPreviewRotationShifts",
            "ssm-contacts:listRotationOverrides",
            "ssm-contacts:listRotationShifts",
            "ssm-contacts:listRotations",
            "ssm-incidents:getIncidentRecord",
            "ssm-incidents:getReplicationSet",
            "ssm-incidents:getResourcePolicies",
            "ssm-incidents:getResponsePlan",
            "ssm-incidents:getTimelineEvent",
            "ssm-incidents:listIncidentRecords",
            "ssm-incidents:listRelatedItems",
            "ssm-incidents:listReplicationSets",
            "ssm-incidents:listResponsePlans",
            "ssm-incidents:listTimelineEvents",
            "ssm-sap:getApplication",
            "ssm-sap:getComponent",
            "ssm-sap:getDatabase",
            "ssm-sap:getOperation",
            "ssm-sap:getResourcePermission",
            "ssm-sap:listApplications",
            "ssm-sap:listComponents",
            "ssm-sap:listDatabases",
            "ssm-sap:listOperations",
            "ssm:describeActivations",
            "ssm:describeAssociation",
            "ssm:describeAssociationExecutionTargets",
            "ssm:describeAssociationExecutions",
            "ssm:describeAutomationExecutions",
            "ssm:describeAutomationStepExecutions",
            "ssm:describeAvailablePatches",
            "ssm:describeDocument",
            "ssm:describeDocumentPermission",
            "ssm:describeEffectiveInstanceAssociations",
            "ssm:describeEffectivePatchesForPatchBaseline",
            "ssm:describeInstanceAssociationsStatus",
            "ssm:describeInstanceInformation",
            "ssm:describeInstancePatchStates",
            "ssm:describeInstancePatchStatesForPatchGroup",
            "ssm:describeInstancePatches",
            "ssm:describeInventoryDeletions",
            "ssm:describeMaintenanceWindowExecutionTaskInvocations",
            "ssm:describeMaintenanceWindowExecutionTasks",
            "ssm:describeMaintenanceWindowExecutions",
            "ssm:describeMaintenanceWindowSchedule",
            "ssm:describeMaintenanceWindowTargets",
            "ssm:describeMaintenanceWindowTasks",
            "ssm:describeMaintenanceWindows",
            "ssm:describeMaintenanceWindowsForTarget",
            "ssm:describeOpsItems",
            "ssm:describeParameters",
            "ssm:describePatchBaselines",
            "ssm:describePatchGroupState",
            "ssm:describePatchGroups",
            "ssm:describePatchProperties",
            "ssm:describeSessions",
            "ssm:getAutomationExecution",
            "ssm:getCalendarState",
            "ssm:getCommandInvocation",
            "ssm:getConnectionStatus",
            "ssm:getDefaultPatchBaseline",
            "ssm:getDeployablePatchSnapshotForInstance",
            "ssm:getInventorySchema",
            "ssm:getMaintenanceWindow",
            "ssm:getMaintenanceWindowExecution",
            "ssm:getMaintenanceWindowExecutionTask",
            "ssm:getMaintenanceWindowExecutionTaskInvocation",
            "ssm:getMaintenanceWindowTask",
            "ssm:getOpsItem",
            "ssm:getOpsMetadata",
            "ssm:getOpsSummary",
            "ssm:getPatchBaseline",
            "ssm:getPatchBaselineForPatchGroup",
            "ssm:getResourcePolicies",
            "ssm:getServiceSetting",
            "ssm:listAssociationVersions",
            "ssm:listAssociations",
            "ssm:listCommandInvocations",
            "ssm:listCommands",
            "ssm:listComplianceItems",
            "ssm:listComplianceSummaries",
            "ssm:listDocumentMetadataHistory",
            "ssm:listDocumentVersions",
            "ssm:listDocuments",
            "ssm:listOpsItemEvents",
            "ssm:listOpsItemRelatedItems",
            "ssm:listOpsMetadata",
            "ssm:listResourceComplianceSummaries",
            "ssm:listResourceDataSync",
            "ssm:listTagsForResource",
            "swf:describeActivityType",
            "swf:describeDomain",
            "swf:describeWorkflowExecution",
            "swf:describeWorkflowType",
            "swf:getWorkflowExecutionHistory",
            "swf:listActivityTypes",
            "swf:listClosedWorkflowExecutions",
            "swf:listDomains",
            "swf:listOpenWorkflowExecutions",
            "swf:listWorkflowTypes",
            "vpc-lattice:getAccessLogSubscription",
            "vpc-lattice:getAuthPolicy",
            "vpc-lattice:getListener",
            "vpc-lattice:getResourcePolicy",
            "vpc-lattice:getRule",
            "vpc-lattice:getService",
            "vpc-lattice:getServiceNetwork",
            "vpc-lattice:getServiceNetworkServiceAssociation",
            "vpc-lattice:getServiceNetworkVpcAssociation",
            "vpc-lattice:getTargetGroup",
            "vpc-lattice:listAccessLogSubscriptions",
            "vpc-lattice:listListeners",
            "vpc-lattice:listRules",
            "vpc-lattice:listServiceNetworkServiceAssociations",
            "vpc-lattice:listServiceNetworkVpcAssociations",
            "vpc-lattice:listServiceNetworks",
            "vpc-lattice:listServices",
            "vpc-lattice:listTargetGroups",
            "vpc-lattice:listTargets",
            "waf-regional:getByteMatchSet",
            "waf-regional:getChangeTokenStatus",
            "waf-regional:getGeoMatchSet",
            "waf-regional:getIPSet",
            "waf-regional:getLoggingConfiguration",
            "waf-regional:getRateBasedRule",
            "waf-regional:getRegexMatchSet",
            "waf-regional:getRegexPatternSet",
            "waf-regional:getRule",
            "waf-regional:getRuleGroup",
            "waf-regional:getSqlInjectionMatchSet",
            "waf-regional:getWebACL",
            "waf-regional:getWebACLForResource",
            "waf-regional:listActivatedRulesInRuleGroup",
            "waf-regional:listByteMatchSets",
            "waf-regional:listGeoMatchSets",
            "waf-regional:listIPSets",
            "waf-regional:listLoggingConfigurations",
            "waf-regional:listRateBasedRules",
            "waf-regional:listRegexMatchSets",
            "waf-regional:listRegexPatternSets",
            "waf-regional:listResourcesForWebACL",
            "waf-regional:listRuleGroups",
            "waf-regional:listRules",
            "waf-regional:listSqlInjectionMatchSets",
            "waf-regional:listWebACLs",
            "waf:getByteMatchSet",
            "waf:getChangeTokenStatus",
            "waf:getGeoMatchSet",
            "waf:getIPSet",
            "waf:getLoggingConfiguration",
            "waf:getRateBasedRule",
            "waf:getRegexMatchSet",
            "waf:getRegexPatternSet",
            "waf:getRule",
            "waf:getRuleGroup",
            "waf:getSampledRequests",
            "waf:getSizeConstraintSet",
            "waf:getSqlInjectionMatchSet",
            "waf:getWebACL",
            "waf:getXssMatchSet",
            "waf:listActivatedRulesInRuleGroup",
            "waf:listByteMatchSets",
            "waf:listGeoMatchSets",
            "waf:listIPSets",
            "waf:listLoggingConfigurations",
            "waf:listRateBasedRules",
            "waf:listRegexMatchSets",
            "waf:listRegexPatternSets",
            "waf:listRuleGroups",
            "waf:listRules",
            "waf:listSizeConstraintSets",
            "waf:listSqlInjectionMatchSets",
            "waf:listWebACLs",
            "waf:listXssMatchSets",
            "wafv2:checkCapacity",
            "wafv2:describeManagedRuleGroup",
            "wafv2:getIPSet",
            "wafv2:getLoggingConfiguration",
            "wafv2:getPermissionPolicy",
            "wafv2:getRateBasedStatementManagedKeys",
            "wafv2:getRegexPatternSet",
            "wafv2:getRuleGroup",
            "wafv2:getSampledRequests",
            "wafv2:getWebACL",
            "wafv2:getWebACLForResource",
            "wafv2:listAvailableManagedRuleGroups",
            "wafv2:listIPSets",
            "wafv2:listLoggingConfigurations",
            "wafv2:listRegexPatternSets",
            "wafv2:listResourcesForWebACL",
            "wafv2:listRuleGroups",
            "wafv2:listTagsForResource",
            "wafv2:listWebACLs",
            "workspaces-web:getBrowserSettings",
            "workspaces-web:getIdentityProvider",
            "workspaces-web:getNetworkSettings",
            "workspaces-web:getPortal",
            "workspaces-web:getPortalServiceProviderMetadata",
            "workspaces-web:getTrustStoreCertificate",
            "workspaces-web:getUserSettings",
            "workspaces-web:listBrowserSettings",
            "workspaces-web:listIdentityProviders",
            "workspaces-web:listNetworkSettings",
            "workspaces-web:listPortals",
            "workspaces-web:listTagsForResource",
            "workspaces-web:listTrustStoreCertificates",
            "workspaces-web:listTrustStores",
            "workspaces-web:listUserSettings",
            "workspaces:describeAccount",
            "workspaces:describeAccountModifications",
            "workspaces:describeApplicationAssociations",
            "workspaces:describeIpGroups",
            "workspaces:describeTags",
            "workspaces:describeWorkspaceAssociations",
            "workspaces:describeWorkspaceBundles",
            "workspaces:describeWorkspaceDirectories",
            "workspaces:describeWorkspaceImages",
            "workspaces:describeWorkspaces",
            "workspaces:describeWorkspacesConnectionStatus"
        ]
    },
    "AWSObservabilityAdminServiceRolePolicy": {
        "permissions": [
            "config:DeleteConfigurationAggregator",
            "config:DeleteServiceLinkedConfigurationRecorder",
            "config:PutConfigurationAggregator",
            "config:PutServiceLinkedConfigurationRecorder",
            "config:SelectAggregateResourceConfig",
            "iam:CreateServiceLinkedRole",
            "iam:PassRole",
            "organizations:DescribeOrganization",
            "organizations:DescribeOrganizationalUnit",
            "organizations:EnableAWSServiceAccess",
            "organizations:ListAccounts",
            "organizations:ListAccountsForParent",
            "organizations:ListChildren",
            "organizations:ListDelegatedAdministrators",
            "organizations:ListParents"
        ]
    },
    "SageMakerStudioFullAccess": {
        "permissions": [
            "aoss:CreateSecurityPolicy",
            "aoss:GetSecurityPolicy",
            "aoss:ListSecurityPolicies",
            "bedrock:CreateInferenceProfile",
            "bedrock:DeleteInferenceProfile",
            "bedrock:GetFoundationModel",
            "bedrock:GetFoundationModelAvailability",
            "bedrock:GetInferenceProfile",
            "bedrock:ListFoundationModels",
            "bedrock:ListInferenceProfiles",
            "bedrock:ListTagsForResource",
            "bedrock:TagResource",
            "codeconnections:GetConnection",
            "codeconnections:ListConnections",
            "codeconnections:ListTagsForResource",
            "codeconnections:TagResource",
            "codeconnections:UntagResource",
            "codewhisperer:ListProfiles",
            "datazone:*",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeSubnets",
            "ec2:DescribeVpcs",
            "glue:GetDatabases",
            "iam:GetPolicy",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:PassRole",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:ListAliases",
            "ram:AssociateResourceShare",
            "ram:CreateResourceShare",
            "ram:DeleteResourceShare",
            "ram:DisassociateResourceShare",
            "ram:GetResourceShareAssociations",
            "ram:GetResourceShareInvitations",
            "ram:GetResourceShares",
            "ram:ListResourceSharePermissions",
            "ram:RejectResourceShareInvitation",
            "redshift-serverless:ListWorkgroups",
            "redshift:DescribeClusters",
            "s3:CreateBucket",
            "s3:GetBucketLocation",
            "s3:ListAllMyBuckets",
            "s3:ListBucket",
            "s3:PutBucketCORS",
            "s3:PutBucketPolicy",
            "s3:PutBucketVersioning",
            "secretsmanager:CreateSecret",
            "secretsmanager:ListSecrets",
            "secretsmanager:TagResource",
            "ssm:DeleteParameter",
            "ssm:GetParameter",
            "ssm:GetParametersByPath",
            "ssm:PutParameter",
            "sso:DescribeRegisteredRegions"
        ]
    },
    "DeclarativePoliciesEC2Report": {
        "permissions": [
            "ec2:DescribeRegions",
            "ec2:DescribeVpcBlockPublicAccessOptions",
            "ec2:GetAllowedImagesSettings",
            "ec2:GetImageBlockPublicAccessState",
            "ec2:GetInstanceMetadataDefaults",
            "ec2:GetSerialConsoleAccessStatus",
            "ec2:GetSnapshotBlockPublicAccessState"
        ]
    },
    "AWSSecurityIncidentResponseServiceRolePolicy": {
        "permissions": [
            "organizations:ListAccounts",
            "organizations:ListChildren",
            "security-ir:CreateCase",
            "security-ir:TagResource"
        ]
    },
    "AWSSecurityIncidentResponseTriageServiceRolePolicy": {
        "permissions": [
            "events:DeleteRule",
            "events:DescribeRule",
            "events:ListTargetsByRule",
            "events:PutRule",
            "events:PutTargets",
            "events:RemoveTargets",
            "guardduty:ArchiveFindings",
            "guardduty:CreateFilter",
            "guardduty:DescribeMalwareScans",
            "guardduty:GetDetector",
            "guardduty:GetFilter",
            "guardduty:GetFindings",
            "guardduty:ListDetectors",
            "guardduty:StartMalwareScan",
            "guardduty:UpdateFindingsFeedback",
            "security-ir:CreateCase",
            "security-ir:TagResource",
            "securityhub:BatchUpdateFindings",
            "securityhub:DescribeHub",
            "securityhub:GetEnabledStandards",
            "securityhub:GetFindings",
            "securityhub:ListEnabledProductsForImport",
            "securityhub:UpdateFindings"
        ]
    },
    "CloudWatchOpenSearchDashboardsFullAccess": {
        "permissions": [
            "aoss:APIAccessAll",
            "aoss:BatchGetCollection",
            "aoss:BatchGetLifecyclePolicy",
            "aoss:CreateAccessPolicy",
            "aoss:CreateCollection",
            "aoss:CreateLifecyclePolicy",
            "aoss:CreateSecurityPolicy",
            "aoss:DeleteAccessPolicy",
            "aoss:DeleteCollection",
            "aoss:DeleteLifecyclePolicy",
            "aoss:DeleteSecurityPolicy",
            "aoss:GetAccessPolicy",
            "aoss:GetSecurityPolicy",
            "aoss:TagResource",
            "es:AddDirectQueryDataSource",
            "es:AddTags",
            "es:CreateApplication",
            "es:DeleteDirectQueryDataSource",
            "es:GetApplication",
            "es:GetDirectQueryDataSource",
            "es:ListApplications",
            "es:UpdateApplication",
            "iam:CreateServiceLinkedRole",
            "iam:ListRoles",
            "iam:ListUsers",
            "iam:PassRole",
            "logs:DeleteIntegration",
            "logs:DescribeLogGroups",
            "logs:GetIntegration",
            "logs:ListIntegrations",
            "logs:PutIntegration",
            "opensearch:ApplicationAccessAll",
            "opensearch:GetDirectQuery",
            "opensearch:StartDirectQuery"
        ]
    },
    "CloudWatchOpenSearchDashboardAccess": {
        "permissions": [
            "aoss:APIAccessAll",
            "aoss:BatchGetCollection",
            "aoss:BatchGetLifecyclePolicy",
            "aoss:GetAccessPolicy",
            "aoss:GetSecurityPolicy",
            "es:GetApplication",
            "es:GetDirectQueryDataSource",
            "es:ListApplications",
            "iam:ListRoles",
            "iam:ListUsers",
            "logs:DescribeLogGroups",
            "logs:GetIntegration",
            "logs:ListIntegrations",
            "opensearch:ApplicationAccessAll",
            "opensearch:GetDirectQuery"
        ]
    },
    "CloudWatchNetworkFlowMonitorServiceRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData",
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "CloudWatchNetworkFlowMonitorAgentPublishPolicy": {
        "permissions": [
            "networkflowmonitor:Publish"
        ]
    },
    "CloudWatchNetworkFlowMonitorTopologyServiceRolePolicy": {
        "permissions": [
            "ec2:DescribeCustomerGateways",
            "ec2:DescribeTransitGatewayAttachments",
            "ec2:DescribeTransitGatewayConnects",
            "ec2:DescribeTransitGatewayPeeringAttachments",
            "ec2:DescribeTransitGatewayRouteTables",
            "ec2:DescribeTransitGatewayVpcAttachments",
            "ec2:DescribeTransitGateways",
            "ec2:DescribeVpnConnections",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:SearchTransitGatewayRoutes"
        ]
    },
    "AWSSecurityIncidentResponseReadOnlyAccess": {
        "permissions": [
            "security-ir:BatchGetMemberAccountDetails",
            "security-ir:GetCase",
            "security-ir:GetCaseAttachmentDownloadUrl",
            "security-ir:GetMembership",
            "security-ir:ListCaseEdits",
            "security-ir:ListCases",
            "security-ir:ListComments",
            "security-ir:ListMemberships",
            "security-ir:ListTagsForResource"
        ]
    },
    "AWSSecurityIncidentResponseCaseFullAccess": {
        "permissions": [
            "security-ir:CloseCase",
            "security-ir:CreateCase",
            "security-ir:CreateCaseComment",
            "security-ir:GetCase",
            "security-ir:GetCaseAttachmentDownloadUrl",
            "security-ir:GetCaseAttachmentUploadUrl",
            "security-ir:ListCaseEdits",
            "security-ir:ListCases",
            "security-ir:ListComments",
            "security-ir:ListTagsForResource",
            "security-ir:TagResource",
            "security-ir:UntagResource",
            "security-ir:UpdateCase",
            "security-ir:UpdateCaseComment",
            "security-ir:UpdateCaseStatus",
            "security-ir:UpdateResolverType"
        ]
    },
    "AWSSecurityIncidentResponseFullAccess": {
        "permissions": [
            "iam:CreateServiceLinkedRole",
            "organizations:DescribeOrganization",
            "organizations:ListDelegatedAdministrators",
            "security-ir:BatchGetMemberAccountDetails",
            "security-ir:CancelMembership",
            "security-ir:CloseCase",
            "security-ir:CreateCase",
            "security-ir:CreateCaseComment",
            "security-ir:CreateMembership",
            "security-ir:GetCase",
            "security-ir:GetCaseAttachmentDownloadUrl",
            "security-ir:GetCaseAttachmentUploadUrl",
            "security-ir:GetMembership",
            "security-ir:ListCaseEdits",
            "security-ir:ListCases",
            "security-ir:ListComments",
            "security-ir:ListMemberships",
            "security-ir:ListTagsForResource",
            "security-ir:TagResource",
            "security-ir:UntagResource",
            "security-ir:UpdateCase",
            "security-ir:UpdateCaseComment",
            "security-ir:UpdateCaseStatus",
            "security-ir:UpdateMembership",
            "security-ir:UpdateResolverType"
        ]
    },
    "AIOpsAssistantPolicy": {
        "permissions": [
            "S3:GetBucketWebsite",
            "access-analyzer:GetAnalyzer",
            "access-analyzer:List*",
            "acm-pca:Describe*",
            "acm-pca:GetCertificate",
            "acm-pca:GetCertificateAuthorityCertificate",
            "acm-pca:GetCertificateAuthorityCsr",
            "acm-pca:List*",
            "acm:DescribeCertificate",
            "acm:GetAccountConfiguration",
            "airflow:List*",
            "amplify:GetApp",
            "amplify:GetBranch",
            "amplify:GetDomainAssociation",
            "amplify:List*",
            "aoss:BatchGetCollection",
            "aoss:BatchGetLifecyclePolicy",
            "aoss:BatchGetVpcEndpoint",
            "aoss:GetAccessPolicy",
            "aoss:GetSecurityConfig",
            "aoss:GetSecurityPolicy",
            "aoss:List*",
            "apigateway:GET",
            "appconfig:GetApplication",
            "appconfig:GetConfigurationProfile",
            "appconfig:GetEnvironment",
            "appconfig:GetHostedConfigurationVersion",
            "appconfig:List*",
            "appflow:Describe*",
            "appflow:List*",
            "application-autoscaling:Describe*",
            "application-signals:BatchGetServiceLevelObjectiveBudgetReport",
            "application-signals:GetService",
            "application-signals:GetServiceLevelObjective",
            "application-signals:List*",
            "applicationinsights:Describe*",
            "applicationinsights:List*",
            "apprunner:Describe*",
            "apprunner:List*",
            "appstream:Describe*",
            "appstream:List*",
            "appsync:GetApiAssociation",
            "appsync:GetDomainName",
            "appsync:GetFunction",
            "appsync:GetResolver",
            "appsync:GetSourceApiAssociation",
            "appsync:List*",
            "aps:Describe*",
            "aps:List*",
            "arc-zonal-shift:GetManagedResource",
            "arc-zonal-shift:List*",
            "athena:GetCapacityAssignmentConfiguration",
            "athena:GetCapacityReservation",
            "athena:GetDataCatalog",
            "athena:GetNamedQuery",
            "athena:GetPreparedStatement",
            "athena:GetWorkGroup",
            "athena:List*",
            "auditmanager:GetAssessment",
            "auditmanager:List*",
            "autoscaling:Describe*",
            "backup-gateway:GetHypervisor",
            "backup-gateway:List*",
            "backup:Describe*",
            "backup:GetBackupPlan",
            "backup:GetBackupSelection",
            "backup:GetBackupVaultAccessPolicy",
            "backup:GetBackupVaultNotifications",
            "backup:GetRestoreTestingPlan",
            "backup:GetRestoreTestingSelection",
            "backup:List*",
            "batch:DescribeComputeEnvironments",
            "batch:DescribeJobQueues",
            "batch:DescribeSchedulingPolicies",
            "batch:List*",
            "bedrock:GetAgent",
            "bedrock:GetAgentActionGroup",
            "bedrock:GetAgentAlias",
            "bedrock:GetAgentKnowledgeBase",
            "bedrock:GetDataSource",
            "bedrock:GetGuardrail",
            "bedrock:GetKnowledgeBase",
            "bedrock:List*",
            "budgets:Describe*",
            "budgets:List*",
            "ce:Describe*",
            "ce:GetAnomalyMonitors",
            "ce:GetAnomalySubscriptions",
            "ce:List*",
            "chatbot:Describe*",
            "chatbot:GetMicrosoftTeamsChannelConfiguration",
            "chatbot:List*",
            "cleanrooms-ml:GetTrainingDataset",
            "cleanrooms-ml:List*",
            "cleanrooms:GetAnalysisTemplate",
            "cleanrooms:GetCollaboration",
            "cleanrooms:GetConfiguredTable",
            "cleanrooms:GetConfiguredTableAnalysisRule",
            "cleanrooms:GetConfiguredTableAssociation",
            "cleanrooms:GetMembership",
            "cleanrooms:List*",
            "cloudformation:Describe*",
            "cloudformation:GetResource",
            "cloudformation:GetStackPolicy",
            "cloudformation:GetTemplate",
            "cloudformation:List*",
            "cloudfront:Describe*",
            "cloudfront:GetCachePolicy",
            "cloudfront:GetCloudFrontOriginAccessIdentity",
            "cloudfront:GetContinuousDeploymentPolicy",
            "cloudfront:GetDistribution",
            "cloudfront:GetDistributionConfig",
            "cloudfront:GetFunction",
            "cloudfront:GetKeyGroup",
            "cloudfront:GetMonitoringSubscription",
            "cloudfront:GetOriginAccessControl",
            "cloudfront:GetOriginRequestPolicy",
            "cloudfront:GetPublicKey",
            "cloudfront:GetRealtimeLogConfig",
            "cloudfront:GetResponseHeadersPolicy",
            "cloudfront:List*",
            "cloudtrail:Describe*",
            "cloudtrail:GetChannel",
            "cloudtrail:GetEventDataStore",
            "cloudtrail:GetEventSelectors",
            "cloudtrail:GetInsightSelectors",
            "cloudtrail:GetQueryResults",
            "cloudtrail:GetResourcePolicy",
            "cloudtrail:GetTrail",
            "cloudtrail:GetTrailStatus",
            "cloudtrail:List*",
            "cloudtrail:LookupEvents",
            "cloudtrail:StartQuery",
            "cloudwatch:Describe*",
            "cloudwatch:GenerateQuery",
            "cloudwatch:GetDashboard",
            "cloudwatch:GetInsightRuleReport",
            "cloudwatch:GetMetricData",
            "cloudwatch:GetMetricStream",
            "cloudwatch:GetService",
            "cloudwatch:GetServiceLevelObjective",
            "cloudwatch:List*",
            "codeartifact:Describe*",
            "codeartifact:GetDomainPermissionsPolicy",
            "codeartifact:GetRepositoryPermissionsPolicy",
            "codeartifact:List*",
            "codebuild:BatchGetFleets",
            "codebuild:List*",
            "codecommit:GetRepository",
            "codecommit:GetRepositoryTriggers",
            "codedeploy:BatchGetDeploymentTargets",
            "codedeploy:BatchGetDeployments",
            "codedeploy:GetApplication",
            "codedeploy:GetDeploymentConfig",
            "codedeploy:List*",
            "codeguru-profiler:Describe*",
            "codeguru-profiler:GetNotificationConfiguration",
            "codeguru-profiler:GetPolicy",
            "codeguru-profiler:List*",
            "codeguru-reviewer:Describe*",
            "codeguru-reviewer:List*",
            "codepipeline:GetPipeline",
            "codepipeline:GetPipelineState",
            "codepipeline:List*",
            "codestar-connections:GetConnection",
            "codestar-connections:GetRepositoryLink",
            "codestar-connections:GetSyncConfiguration",
            "codestar-connections:List*",
            "codestar-notifications:Describe*",
            "codestar-notifications:List*",
            "cognito-identity:DescribeIdentityPool",
            "cognito-identity:GetIdentityPoolRoles",
            "cognito-identity:ListIdentityPools",
            "cognito-identity:ListTagsForResource",
            "cognito-idp:AdminListGroupsForUser",
            "cognito-idp:DescribeIdentityProvider",
            "cognito-idp:DescribeResourceServer",
            "cognito-idp:DescribeRiskConfiguration",
            "cognito-idp:DescribeUserImportJob",
            "cognito-idp:DescribeUserPool",
            "cognito-idp:DescribeUserPoolDomain",
            "cognito-idp:GetGroup",
            "cognito-idp:GetLogDeliveryConfiguration",
            "cognito-idp:GetUICustomization",
            "cognito-idp:GetUserPoolMfaConfig",
            "cognito-idp:GetWebACLForResource",
            "cognito-idp:ListGroups",
            "cognito-idp:ListIdentityProviders",
            "cognito-idp:ListResourceServers",
            "cognito-idp:ListTagsForResource",
            "cognito-idp:ListUserPoolClients",
            "cognito-idp:ListUserPools",
            "cognito-idp:ListUsers",
            "comprehend:Describe*",
            "comprehend:List*",
            "config:Describe*",
            "config:GetStoredQuery",
            "config:List*",
            "connect:Describe*",
            "connect:GetTaskTemplate",
            "connect:List*",
            "databrew:Describe*",
            "databrew:List*",
            "datapipeline:Describe*",
            "datapipeline:GetPipelineDefinition",
            "datapipeline:List*",
            "datasync:Describe*",
            "datasync:List*",
            "deadline:GetFarm",
            "deadline:GetFleet",
            "deadline:GetLicenseEndpoint",
            "deadline:GetMonitor",
            "deadline:GetQueue",
            "deadline:GetQueueEnvironment",
            "deadline:GetQueueFleetAssociation",
            "deadline:GetStorageProfile",
            "deadline:List*",
            "detective:GetMembers",
            "detective:List*",
            "devicefarm:GetDevicePool",
            "devicefarm:GetInstanceProfile",
            "devicefarm:GetNetworkProfile",
            "devicefarm:GetProject",
            "devicefarm:GetTestGridProject",
            "devicefarm:GetVPCEConfiguration",
            "devicefarm:List*",
            "devops-guru:Describe*",
            "devops-guru:GetResourceCollection",
            "devops-guru:List*",
            "dms:Describe*",
            "dms:List*",
            "ds:Describe*",
            "dynamodb:Describe*",
            "dynamodb:GetResourcePolicy",
            "dynamodb:List*",
            "ec2:Describe*",
            "ec2:GetAssociatedEnclaveCertificateIamRoles",
            "ec2:GetIpamPoolAllocations",
            "ec2:GetIpamPoolCidrs",
            "ec2:GetManagedPrefixListEntries",
            "ec2:GetNetworkInsightsAccessScopeContent",
            "ec2:GetSnapshotBlockPublicAccessState",
            "ec2:GetTransitGatewayMulticastDomainAssociations",
            "ec2:GetTransitGatewayRouteTableAssociations",
            "ec2:GetTransitGatewayRouteTablePropagations",
            "ec2:GetVerifiedAccessEndpointPolicy",
            "ec2:GetVerifiedAccessGroupPolicy",
            "ec2:GetVerifiedAccessInstanceWebAcl",
            "ec2:SearchLocalGatewayRoutes",
            "ec2:SearchTransitGatewayRoutes",
            "ecr:Describe*",
            "ecr:GetLifecyclePolicy",
            "ecr:GetRegistryPolicy",
            "ecr:GetRepositoryPolicy",
            "ecr:List*",
            "ecs:Describe*",
            "ecs:List*",
            "eks:Describe*",
            "eks:List*",
            "elastic-inference:Describe*",
            "elasticache:Describe*",
            "elasticache:List*",
            "elasticbeanstalk:Describe*",
            "elasticbeanstalk:List*",
            "elasticfilesystem:Describe*",
            "elasticloadbalancing:Describe*",
            "elasticmapreduce:Describe*",
            "elasticmapreduce:List*",
            "emr-containers:Describe*",
            "emr-containers:List*",
            "emr-serverless:GetApplication",
            "emr-serverless:List*",
            "es:Describe*",
            "es:List*",
            "events:Describe*",
            "events:List*",
            "evidently:GetExperiment",
            "evidently:GetFeature",
            "evidently:GetLaunch",
            "evidently:GetProject",
            "evidently:GetSegment",
            "evidently:List*",
            "firehose:Describe*",
            "firehose:List*",
            "fis:GetExperimentTemplate",
            "fis:GetTargetAccountConfiguration",
            "fis:List*",
            "fms:GetNotificationChannel",
            "fms:GetPolicy",
            "fms:List*",
            "forecast:Describe*",
            "forecast:List*",
            "frauddetector:BatchGetVariable",
            "frauddetector:Describe*",
            "frauddetector:GetDetectorVersion",
            "frauddetector:GetDetectors",
            "frauddetector:GetEntityTypes",
            "frauddetector:GetEventTypes",
            "frauddetector:GetExternalModels",
            "frauddetector:GetLabels",
            "frauddetector:GetListElements",
            "frauddetector:GetListsMetadata",
            "frauddetector:GetModelVersion",
            "frauddetector:GetOutcomes",
            "frauddetector:GetRules",
            "frauddetector:GetVariables",
            "frauddetector:List*",
            "fsx:Describe*",
            "gamelift:Describe*",
            "gamelift:List*",
            "globalaccelerator:Describe*",
            "globalaccelerator:List*",
            "glue:GetDatabase",
            "glue:GetDatabases",
            "glue:GetJob",
            "glue:GetRegistry",
            "glue:GetSchema",
            "glue:GetSchemaVersion",
            "glue:GetTable",
            "glue:GetTags",
            "glue:GetTrigger",
            "glue:List*",
            "glue:querySchemaVersionMetadata",
            "grafana:Describe*",
            "grafana:List*",
            "greengrass:Describe*",
            "greengrass:GetDeployment",
            "greengrass:List*",
            "groundstation:GetConfig",
            "groundstation:GetDataflowEndpointGroup",
            "groundstation:GetMissionProfile",
            "groundstation:List*",
            "guardduty:GetDetector",
            "guardduty:GetFilter",
            "guardduty:GetIPSet",
            "guardduty:GetMalwareProtectionPlan",
            "guardduty:GetMasterAccount",
            "guardduty:GetMembers",
            "guardduty:GetThreatIntelSet",
            "guardduty:List*",
            "health:DescribeEventDetails",
            "health:DescribeEvents",
            "healthlake:Describe*",
            "healthlake:List*",
            "iam:GetGroup",
            "iam:GetGroupPolicy",
            "iam:GetInstanceProfile",
            "iam:GetLoginProfile",
            "iam:GetOpenIDConnectProvider",
            "iam:GetPolicy",
            "iam:GetPolicyVersion",
            "iam:GetRole",
            "iam:GetRolePolicy",
            "iam:GetSAMLProvider",
            "iam:GetServerCertificate",
            "iam:GetServiceLinkedRoleDeletionStatus",
            "iam:GetUser",
            "iam:GetUserPolicy",
            "iam:ListOpenIDConnectProviders",
            "iam:ListServerCertificates",
            "iam:ListVirtualMFADevices",
            "identitystore:DescribeGroup",
            "identitystore:DescribeGroupMembership",
            "identitystore:ListGroupMemberships",
            "identitystore:ListGroups",
            "imagebuilder:GetComponent",
            "imagebuilder:GetContainerRecipe",
            "imagebuilder:GetDistributionConfiguration",
            "imagebuilder:GetImage",
            "imagebuilder:GetImagePipeline",
            "imagebuilder:GetImageRecipe",
            "imagebuilder:GetInfrastructureConfiguration",
            "imagebuilder:GetLifecyclePolicy",
            "imagebuilder:GetWorkflow",
            "imagebuilder:List*",
            "inspector2:List*",
            "inspector:Describe*",
            "inspector:List*",
            "internetmonitor:GetMonitor",
            "internetmonitor:List*",
            "iot:Describe*",
            "iot:GetPackage",
            "iot:GetPackageVersion",
            "iot:GetPolicy",
            "iot:GetThingShadow",
            "iot:GetTopicRule",
            "iot:GetTopicRuleDestination",
            "iot:GetV2LoggingOptions",
            "iot:List*",
            "iotanalytics:Describe*",
            "iotanalytics:List*",
            "iotevents:Describe*",
            "iotevents:List*",
            "iotfleethub:Describe*",
            "iotfleethub:List*",
            "iotsitewise:Describe*",
            "iotsitewise:List*",
            "iotwireless:GetDestination",
            "iotwireless:GetDeviceProfile",
            "iotwireless:GetFuotaTask",
            "iotwireless:GetMulticastGroup",
            "iotwireless:GetNetworkAnalyzerConfiguration",
            "iotwireless:GetServiceProfile",
            "iotwireless:GetWirelessDevice",
            "iotwireless:GetWirelessGateway",
            "iotwireless:GetWirelessGatewayTaskDefinition",
            "iotwireless:List*",
            "ivs:GetChannel",
            "ivs:GetEncoderConfiguration",
            "ivs:GetPlaybackRestrictionPolicy",
            "ivs:GetRecordingConfiguration",
            "ivs:GetStage",
            "ivs:List*",
            "ivschat:GetLoggingConfiguration",
            "ivschat:GetRoom",
            "ivschat:List*",
            "kafka:Describe*",
            "kafka:GetClusterPolicy",
            "kafka:List*",
            "kafkaconnect:Describe*",
            "kafkaconnect:List*",
            "kendra:Describe*",
            "kendra:List*",
            "kinesis:Describe*",
            "kinesis:List*",
            "kinesisanalytics:Describe*",
            "kinesisanalytics:List*",
            "kinesisvideo:Describe*",
            "kms:DescribeKey",
            "kms:ListKeys",
            "kms:ListResourceTags",
            "lakeformation:Describe*",
            "lakeformation:GetLFTag",
            "lakeformation:GetResourceLFTags",
            "lakeformation:List*",
            "lambda:GetAlias",
            "lambda:GetCodeSigningConfig",
            "lambda:GetEventSourceMapping",
            "lambda:GetFunction",
            "lambda:GetFunctionCodeSigningConfig",
            "lambda:GetFunctionConfiguration",
            "lambda:GetFunctionEventInvokeConfig",
            "lambda:GetFunctionRecursionConfig",
            "lambda:GetFunctionUrlConfig",
            "lambda:GetLayerVersion",
            "lambda:GetLayerVersionPolicy",
            "lambda:GetPolicy",
            "lambda:GetProvisionedConcurrencyConfig",
            "lambda:GetRuntimeManagementConfig",
            "lambda:List*",
            "launchwizard:GetDeployment",
            "launchwizard:List*",
            "lex:Describe*",
            "lex:List*",
            "license-manager:GetLicense",
            "license-manager:List*",
            "lightsail:GetAlarms",
            "lightsail:GetBuckets",
            "lightsail:GetCertificates",
            "lightsail:GetContainerServices",
            "lightsail:GetDisk",
            "lightsail:GetDisks",
            "lightsail:GetInstance",
            "lightsail:GetInstances",
            "lightsail:GetLoadBalancer",
            "lightsail:GetLoadBalancerTlsCertificates",
            "lightsail:GetLoadBalancers",
            "lightsail:GetStaticIp",
            "lightsail:GetStaticIps",
            "logs:Describe*",
            "logs:FilterLogEvents",
            "logs:GetDataProtectionPolicy",
            "logs:GetDelivery",
            "logs:GetDeliveryDestination",
            "logs:GetDeliveryDestinationPolicy",
            "logs:GetDeliverySource",
            "logs:GetLogAnomalyDetector",
            "logs:GetLogDelivery",
            "logs:GetQueryResults",
            "logs:List*",
            "logs:StartQuery",
            "logs:StopLiveTail",
            "logs:StopQuery",
            "logs:TestMetricFilter",
            "lookoutmetrics:Describe*",
            "lookoutmetrics:List*",
            "lookoutvision:Describe*",
            "lookoutvision:List*",
            "m2:GetApplication",
            "m2:GetEnvironment",
            "m2:List*",
            "macie2:GetAllowList",
            "macie2:GetCustomDataIdentifier",
            "macie2:GetFindingsFilter",
            "macie2:GetMacieSession",
            "macie2:List*",
            "mediaconnect:Describe*",
            "mediaconnect:List*",
            "medialive:Describe*",
            "medialive:GetCloudWatchAlarmTemplate",
            "medialive:GetCloudWatchAlarmTemplateGroup",
            "medialive:GetEventBridgeRuleTemplate",
            "medialive:GetEventBridgeRuleTemplateGroup",
            "medialive:GetSignalMap",
            "medialive:List*",
            "mediapackage-vod:Describe*",
            "mediapackage-vod:List*",
            "mediapackage:Describe*",
            "mediapackage:List*",
            "mediapackagev2:GetChannel",
            "mediapackagev2:GetChannelGroup",
            "mediapackagev2:GetChannelPolicy",
            "mediapackagev2:GetOriginEndpoint",
            "mediapackagev2:GetOriginEndpointPolicy",
            "mediapackagev2:List*",
            "memorydb:Describe*",
            "memorydb:List*",
            "mobiletargeting:GetInAppTemplate",
            "mobiletargeting:List*",
            "mq:Describe*",
            "mq:List*",
            "network-firewall:Describe*",
            "network-firewall:List*",
            "networkmanager:Describe*",
            "networkmanager:GetConnectAttachment",
            "networkmanager:GetConnectPeer",
            "networkmanager:GetCoreNetwork",
            "networkmanager:GetCoreNetworkPolicy",
            "networkmanager:GetCustomerGatewayAssociations",
            "networkmanager:GetDevices",
            "networkmanager:GetLinkAssociations",
            "networkmanager:GetLinks",
            "networkmanager:GetSiteToSiteVpnAttachment",
            "networkmanager:GetSites",
            "networkmanager:GetTransitGatewayPeering",
            "networkmanager:GetTransitGatewayRegistrations",
            "networkmanager:GetTransitGatewayRouteTableAttachment",
            "networkmanager:GetVpcAttachment",
            "networkmanager:List*",
            "nimble:GetLaunchProfile",
            "nimble:GetStreamingImage",
            "nimble:GetStudio",
            "nimble:GetStudioComponent",
            "nimble:List*",
            "oam:GetLink",
            "oam:GetSink",
            "oam:GetSinkPolicy",
            "oam:List*",
            "omics:GetAnnotationStore",
            "omics:GetReferenceStore",
            "omics:GetRunGroup",
            "omics:GetSequenceStore",
            "omics:GetVariantStore",
            "omics:GetWorkflow",
            "omics:List*",
            "opsworks-cm:Describe*",
            "opsworks-cm:List*",
            "organizations:Describe*",
            "organizations:List*",
            "osis:GetPipeline",
            "osis:List*",
            "payment-cryptography:GetAlias",
            "payment-cryptography:GetKey",
            "payment-cryptography:List*",
            "pca-connector-ad:GetConnector",
            "pca-connector-ad:GetDirectoryRegistration",
            "pca-connector-ad:GetServicePrincipalName",
            "pca-connector-ad:GetTemplate",
            "pca-connector-ad:GetTemplateGroupAccessControlEntry",
            "pca-connector-ad:List*",
            "pca-connector-scep:GetChallengeMetadata",
            "pca-connector-scep:GetConnector",
            "pca-connector-scep:List*",
            "personalize:Describe*",
            "personalize:List*",
            "pipes:Describe*",
            "pipes:List*",
            "proton:GetEnvironmentTemplate",
            "proton:GetServiceTemplate",
            "proton:List*",
            "qbusiness:GetApplication",
            "qbusiness:GetDataSource",
            "qbusiness:GetIndex",
            "qbusiness:GetPlugin",
            "qbusiness:GetRetriever",
            "qbusiness:GetWebExperience",
            "qbusiness:List*",
            "qldb:Describe*",
            "qldb:List*",
            "ram:GetPermission",
            "ram:List*",
            "rds:Describe*",
            "rds:List*",
            "redshift-serverless:GetNamespace",
            "redshift-serverless:GetWorkgroup",
            "redshift-serverless:List*",
            "redshift:Describe*",
            "refactor-spaces:GetApplication",
            "refactor-spaces:GetEnvironment",
            "refactor-spaces:GetRoute",
            "refactor-spaces:List*",
            "rekognition:Describe*",
            "rekognition:List*",
            "resiliencehub:Describe*",
            "resiliencehub:List*",
            "resource-explorer-2:GetDefaultView",
            "resource-explorer-2:GetIndex",
            "resource-explorer-2:GetView",
            "resource-explorer-2:List*",
            "resource-groups:GetGroup",
            "resource-groups:GetGroupConfiguration",
            "resource-groups:GetGroupQuery",
            "resource-groups:GetTags",
            "resource-groups:List*",
            "robomaker:Describe*",
            "robomaker:List*",
            "route53-recovery-control-config:Describe*",
            "route53-recovery-control-config:List*",
            "route53-recovery-readiness:GetCell",
            "route53-recovery-readiness:GetReadinessCheck",
            "route53-recovery-readiness:GetRecoveryGroup",
            "route53-recovery-readiness:GetResourceSet",
            "route53-recovery-readiness:List*",
            "route53:GetDNSSEC",
            "route53:GetHealthCheck",
            "route53:GetHostedZone",
            "route53:List*",
            "route53profiles:GetProfile",
            "route53profiles:GetProfileAssociation",
            "route53profiles:GetProfileResourceAssociation",
            "route53profiles:List*",
            "route53resolver:GetFirewallDomainList",
            "route53resolver:GetFirewallRuleGroup",
            "route53resolver:GetFirewallRuleGroupAssociation",
            "route53resolver:GetOutpostResolver",
            "route53resolver:GetResolverConfig",
            "route53resolver:GetResolverQueryLogConfig",
            "route53resolver:GetResolverQueryLogConfigAssociation",
            "route53resolver:GetResolverRule",
            "route53resolver:GetResolverRuleAssociation",
            "route53resolver:List*",
            "rum:GetAppMonitor",
            "rum:List*",
            "s3-outposts:GetAccessPoint",
            "s3-outposts:GetAccessPointPolicy",
            "s3-outposts:GetBucket",
            "s3-outposts:GetBucketPolicy",
            "s3-outposts:GetBucketTagging",
            "s3-outposts:GetLifecycleConfiguration",
            "s3-outposts:List*",
            "s3:GetAccelerateConfiguration",
            "s3:GetAccessGrant",
            "s3:GetAccessGrantsInstance",
            "s3:GetAccessGrantsLocation",
            "s3:GetAccessPoint",
            "s3:GetAccessPointConfigurationForObjectLambda",
            "s3:GetAccessPointForObjectLambda",
            "s3:GetAccessPointPolicy",
            "s3:GetAccessPointPolicyForObjectLambda",
            "s3:GetAccessPointPolicyStatusForObjectLambda",
            "s3:GetAnalyticsConfiguration",
            "s3:GetBucketAcl",
            "s3:GetBucketCORS",
            "s3:GetBucketLocation",
            "s3:GetBucketLogging",
            "s3:GetBucketNotification",
            "s3:GetBucketObjectLockConfiguration",
            "s3:GetBucketOwnershipControls",
            "s3:GetBucketPolicy",
            "s3:GetBucketPublicAccessBlock",
            "s3:GetBucketTagging",
            "s3:GetBucketVersioning",
            "s3:GetEncryptionConfiguration",
            "s3:GetIntelligentTieringConfiguration",
            "s3:GetInventoryConfiguration",
            "s3:GetLifecycleConfiguration",
            "s3:GetMetricsConfiguration",
            "s3:GetMultiRegionAccessPoint",
            "s3:GetMultiRegionAccessPointPolicy",
            "s3:GetMultiRegionAccessPointPolicyStatus",
            "s3:GetObject",
            "s3:GetObjectAcl",
            "s3:GetObjectVersion",
            "s3:GetReplicationConfiguration",
            "s3:GetStorageLensConfiguration",
            "s3:GetStorageLensConfigurationTagging",
            "s3:GetStorageLensGroup",
            "s3:List*",
            "sagemaker:Describe*",
            "sagemaker:List*",
            "scheduler:GetSchedule",
            "scheduler:GetScheduleGroup",
            "scheduler:List*",
            "schemas:Describe*",
            "schemas:GetResourcePolicy",
            "schemas:List*",
            "secretsmanager:Describe*",
            "secretsmanager:GetResourcePolicy",
            "secretsmanager:List*",
            "securityhub:BatchGetAutomationRules",
            "securityhub:BatchGetSecurityControls",
            "securityhub:Describe*",
            "securityhub:GetConfigurationPolicy",
            "securityhub:GetConfigurationPolicyAssociation",
            "securityhub:GetEnabledStandards",
            "securityhub:GetFindingAggregator",
            "securityhub:GetInsights",
            "securityhub:List*",
            "securitylake:GetSubscriber",
            "securitylake:List*",
            "servicecatalog:Describe*",
            "servicecatalog:GetApplication",
            "servicecatalog:GetAttributeGroup",
            "servicecatalog:List*",
            "servicequotas:GetServiceQuota",
            "ses:Describe*",
            "ses:GetAccount",
            "ses:GetAddonInstance",
            "ses:GetAddonSubscription",
            "ses:GetArchive",
            "ses:GetConfigurationSet",
            "ses:GetConfigurationSetEventDestinations",
            "ses:GetContactList",
            "ses:GetDedicatedIpPool",
            "ses:GetDedicatedIps",
            "ses:GetEmailIdentity",
            "ses:GetEmailTemplate",
            "ses:GetIngressPoint",
            "ses:GetRelay",
            "ses:GetRuleSet",
            "ses:GetTemplate",
            "ses:GetTrafficPolicy",
            "ses:List*",
            "shield:Describe*",
            "shield:List*",
            "signer:GetSigningProfile",
            "signer:List*",
            "sns:GetDataProtectionPolicy",
            "sns:GetSubscriptionAttributes",
            "sns:GetTopicAttributes",
            "sns:List*",
            "sqs:GetQueueAttributes",
            "sqs:GetQueueUrl",
            "sqs:List*",
            "ssm-contacts:GetContact",
            "ssm-contacts:GetContactChannel",
            "ssm-contacts:List*",
            "ssm-incidents:GetReplicationSet",
            "ssm-incidents:GetResponsePlan",
            "ssm-incidents:List*",
            "ssm-sap:GetApplication",
            "ssm-sap:List*",
            "ssm:Describe*",
            "ssm:GetDefaultPatchBaseline",
            "ssm:GetDocument",
            "ssm:GetParameters",
            "ssm:GetPatchBaseline",
            "ssm:GetResourcePolicies",
            "ssm:List*",
            "sso-directory:SearchGroups",
            "sso-directory:SearchUsers",
            "sso:GetInlinePolicyForPermissionSet",
            "sso:GetManagedApplicationInstance",
            "sso:GetPermissionsBoundaryForPermissionSet",
            "sso:GetSharedSsoConfiguration",
            "sso:ListAccountAssignments",
            "sso:ListApplicationAssignments",
            "sso:ListApplications",
            "sso:ListCustomerManagedPolicyReferencesInPermissionSet",
            "sso:ListInstances",
            "sso:ListManagedPoliciesInPermissionSet",
            "sso:ListTagsForResource",
            "states:Describe*",
            "states:List*",
            "synthetics:Describe*",
            "synthetics:GetCanary",
            "synthetics:GetGroup",
            "synthetics:List*",
            "tag:GetResources",
            "timestream:Describe*",
            "timestream:List*",
            "transfer:Describe*",
            "transfer:List*",
            "verifiedpermissions:GetIdentitySource",
            "verifiedpermissions:GetPolicy",
            "verifiedpermissions:GetPolicyStore",
            "verifiedpermissions:GetPolicyTemplate",
            "verifiedpermissions:GetSchema",
            "verifiedpermissions:List*",
            "vpc-lattice:GetAccessLogSubscription",
            "vpc-lattice:GetAuthPolicy",
            "vpc-lattice:GetListener",
            "vpc-lattice:GetResourcePolicy",
            "vpc-lattice:GetRule",
            "vpc-lattice:GetService",
            "vpc-lattice:GetServiceNetwork",
            "vpc-lattice:GetServiceNetworkServiceAssociation",
            "vpc-lattice:GetServiceNetworkVpcAssociation",
            "vpc-lattice:GetTargetGroup",
            "vpc-lattice:List*",
            "wafv2:GetIPSet",
            "wafv2:GetLoggingConfiguration",
            "wafv2:GetRegexPatternSet",
            "wafv2:GetRuleGroup",
            "wafv2:GetWebACL",
            "wafv2:GetWebACLForResource",
            "wafv2:List*",
            "workspaces-web:GetBrowserSettings",
            "workspaces-web:GetIdentityProvider",
            "workspaces-web:GetNetworkSettings",
            "workspaces-web:GetPortal",
            "workspaces-web:GetPortalServiceProviderMetadata",
            "workspaces-web:GetTrustStore",
            "workspaces-web:GetUserAccessLoggingSettings",
            "workspaces-web:GetUserSettings",
            "workspaces-web:List*",
            "workspaces:Describe*",
            "xray:BatchGetTraces",
            "xray:GetGroup",
            "xray:GetGroups",
            "xray:GetSamplingRules",
            "xray:GetServiceGraph",
            "xray:GetTraceSummaries",
            "xray:List*"
        ]
    },
    "AIOpsConsoleAdminPolicy": {
        "permissions": [
            "aiops:*",
            "chatbot:DescribeChimeWebhookConfigurations",
            "chatbot:DescribeSlackChannelConfigurations",
            "chatbot:DescribeSlackWorkspaces",
            "chatbot:ListMicrosoftTeamsChannelConfigurations",
            "chatbot:ListMicrosoftTeamsConfiguredTeams",
            "cloudtrail:DescribeTrails",
            "cloudtrail:ListEventDataStores",
            "cloudtrail:ListTrails",
            "iam:CreatePolicy",
            "iam:ListRoles",
            "iam:PassRole",
            "identitystore:DescribeUser",
            "kms:ListAliases",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "secretsmanager:CreateSecret",
            "secretsmanager:DeleteSecret",
            "secretsmanager:PutResourcePolicy",
            "secretsmanager:UpdateSecret",
            "signin:ListTrustedIdentityPropagationApplicationsForConsole",
            "ssm:AddTagsToResource",
            "ssm:CreateOpsItem",
            "ssm:GetServiceSetting",
            "ssm:UpdateServiceSetting",
            "sso-directory:DescribeUsers",
            "sso:CreateApplication",
            "sso:DeleteApplication",
            "sso:DescribeInstance",
            "sso:DescribeRegisteredRegions",
            "sso:GetSSOStatus",
            "sso:GetSharedSsoConfiguration",
            "sso:ListApplications",
            "sso:ListInstances",
            "sso:PutApplicationAccessScope",
            "sso:PutApplicationAssignmentConfiguration",
            "sso:PutApplicationAuthenticationMethod",
            "sso:PutApplicationGrant",
            "sso:TagResource",
            "sts:SetContext",
            "tag:GetTagKeys"
        ]
    },
    "AIOpsReadOnlyAccess": {
        "permissions": [
            "aiops:Get*",
            "aiops:List*",
            "identitystore:DescribeUser",
            "sso-directory:DescribeUsers",
            "sso:DescribeInstance"
        ]
    },
    "AIOpsOperatorAccess": {
        "permissions": [
            "aiops:CreateInvestigation",
            "aiops:CreateInvestigationEvent",
            "aiops:CreateInvestigationResource",
            "aiops:DeleteInvestigation",
            "aiops:Get*",
            "aiops:List*",
            "aiops:UpdateInvestigation",
            "aiops:UpdateInvestigationEvent",
            "identitystore:DescribeUser",
            "ssm:AddTagsToResource",
            "ssm:CreateOpsItem",
            "ssm:DeleteOpsItem",
            "ssm:GetOpsSummary",
            "ssm:GetServiceSetting",
            "ssm:UpdateOpsItem",
            "sso-directory:DescribeUsers",
            "sso:DescribeInstance",
            "sts:SetContext"
        ]
    },
    "AuroraDsqlServiceLinkedRolePolicy": {
        "permissions": [
            "cloudwatch:PutMetricData"
        ]
    },
    "AmazonS3TablesReadOnlyAccess": {
        "permissions": [
            "s3tables:Get*",
            "s3tables:List*"
        ]
    },
    "AmazonAuroraDSQLReadOnlyAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "dsql:GetCluster",
            "dsql:ListClusters",
            "dsql:ListTagsForResource"
        ]
    },
    "AmazonS3TablesFullAccess": {
        "permissions": [
            "s3tables:*"
        ]
    },
    "QBusinessQuicksightPluginPolicy": {
        "permissions": [
            "quicksight:PredictQAResults"
        ]
    },
    "AmazonAuroraDSQLConsoleFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "dsql:CreateCluster",
            "dsql:CreateMultiRegionClusters",
            "dsql:DbConnect",
            "dsql:DbConnectAdmin",
            "dsql:DeleteCluster",
            "dsql:DeleteMultiRegionClusters",
            "dsql:GetCluster",
            "dsql:ListClusters",
            "dsql:ListTagsForResource",
            "dsql:TagResource",
            "dsql:UntagResource",
            "dsql:UpdateCluster",
            "iam:CreateServiceLinkedRole",
            "tag:GetTagKeys",
            "tag:GetTagValues"
        ]
    },
    "AmazonAuroraDSQLFullAccess": {
        "permissions": [
            "cloudwatch:GetMetricData",
            "dsql:CreateCluster",
            "dsql:CreateMultiRegionClusters",
            "dsql:DbConnect",
            "dsql:DbConnectAdmin",
            "dsql:DeleteCluster",
            "dsql:DeleteMultiRegionClusters",
            "dsql:GetCluster",
            "dsql:ListClusters",
            "dsql:ListTagsForResource",
            "dsql:TagResource",
            "dsql:UntagResource",
            "dsql:UpdateCluster",
            "iam:CreateServiceLinkedRole"
        ]
    },
    "AmazonSageMakerTrainingPlanCreateAccess": {
        "permissions": [
            "sagemaker:AddTags",
            "sagemaker:CreateReservedCapacity",
            "sagemaker:CreateTrainingPlan",
            "sagemaker:DescribeTrainingPlan",
            "sagemaker:ListTrainingPlans",
            "sagemaker:SearchTrainingPlanOfferings"
        ]
    },
    "AmazonSageMakerCanvasSMDataScienceAssistantAccess": {
        "permissions": [
            "q:SendMessage",
            "q:StartConversation",
            "sagemaker-data-science-assistant:SendConversation"
        ]
    },
    "AWSPartnerCentralSellingResourceSnapshotJobExecutionRolePolicy": {
        "permissions": [
            "partnercentral:CreateResourceSnapshot",
            "partnercentral:GetOpportunity"
        ]
    },
    "AWSBackupServiceRolePolicyForIndexing": {
        "permissions": [
            "ebs:GetSnapshotBlock",
            "ebs:ListSnapshotBlocks",
            "ec2:DescribeSnapshots",
            "kms:Decrypt",
            "kms:DescribeKey"
        ]
    },
    "AWSBackupServiceRolePolicyForItemRestores": {
        "permissions": [
            "ebs:GetSnapshotBlock",
            "ebs:ListSnapshotBlocks",
            "ec2:DescribeSnapshots",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:GenerateDataKey",
            "s3:AbortMultipartUpload",
            "s3:GetBucketLocation",
            "s3:ListBucket",
            "s3:ListMultipartUploadParts",
            "s3:PutObject"
        ]
    },
    "AWSManagedServices_SelfServiceReporting_ServiceRolePolicy": {
        "permissions": [
            "organizations:DescribeAccount",
            "organizations:DescribeOrganization",
            "organizations:ListAWSServiceAccessForOrganization",
            "organizations:ListAccounts",
            "organizations:ListDelegatedAdministrators"
        ]
    },
    "AmazonSageMakerPartnerAppsFullAccess": {
        "permissions": [
            "sagemaker:CallPartnerAppApi",
            "sagemaker:CreatePartnerAppPresignedUrl",
            "sagemaker:DescribePartnerApp",
            "sagemaker:ListPartnerApps"
        ]
    }
}